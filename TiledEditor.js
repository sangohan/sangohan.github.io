(function (console, $hx_exports) { "use strict";
$hx_exports.openfl = $hx_exports.openfl || {};
$hx_exports.lime = $hx_exports.lime || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new lime_app_Application();
	app.create(ApplicationMain.config);
	openfl_Lib.application = app;
	var stage = new openfl_display_Stage(app.windows[0].__width,app.windows[0].__height,ApplicationMain.config.background);
	stage.addChild(openfl_Lib.current);
	app.addModule(stage);
	var display = new flixel_system_FlxPreloader();
	ApplicationMain.preloader = new openfl_display_Preloader(display);
	ApplicationMain.preloader.onComplete = ApplicationMain.init;
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("assets/tiled/barrelGreen_side.png");
	types.push("IMAGE");
	urls.push("assets/tiled/barrelGreen_side_damaged.png");
	types.push("IMAGE");
	urls.push("assets/tiled/barrelGreen_up.png");
	types.push("IMAGE");
	urls.push("assets/tiled/barrelGrey_sde_rust.png");
	types.push("IMAGE");
	urls.push("assets/tiled/barrelGrey_side.png");
	types.push("IMAGE");
	urls.push("assets/tiled/barrelGrey_up.png");
	types.push("IMAGE");
	urls.push("assets/tiled/barrelRed_side.png");
	types.push("IMAGE");
	urls.push("assets/tiled/barrelRed_up.png");
	types.push("IMAGE");
	urls.push("assets/tiled/coin.png");
	types.push("IMAGE");
	urls.push("assets/tiled/free_tileset_version_10.png");
	types.push("IMAGE");
	urls.push("assets/tiled/level.png");
	types.push("IMAGE");
	urls.push("assets/tiled/level.tmx");
	types.push("TEXT");
	urls.push("assets/tiled/level2.tmx");
	types.push("TEXT");
	urls.push("assets/tiled/level3.tmx");
	types.push("TEXT");
	urls.push("assets/tiled/level4.tmx");
	types.push("TEXT");
	urls.push("assets/tiled/mountain_landscape_23.png");
	types.push("IMAGE");
	urls.push("assets/tiled/oil.png");
	types.push("IMAGE");
	urls.push("assets/tiled/sandbagBeige.png");
	types.push("IMAGE");
	urls.push("assets/tiled/sandbagBrown.png");
	types.push("IMAGE");
	urls.push("assets/tiled/sheet_6.png");
	types.push("IMAGE");
	urls.push("assets/tiled/sheet_tanks.png");
	types.push("IMAGE");
	urls.push("assets/tiled/tank.png");
	types.push("IMAGE");
	urls.push("assets/tiled/tank.xml");
	types.push("TEXT");
	urls.push("assets/sounds/beep.mp3");
	types.push("MUSIC");
	urls.push("assets/sounds/flixel.mp3");
	types.push("MUSIC");
	urls.push("assets/sounds/beep.ogg");
	types.push("SOUND");
	urls.push("assets/sounds/flixel.ogg");
	types.push("SOUND");
	urls.push("Nokia Cellphone FC Small");
	types.push("FONT");
	urls.push("Arial");
	types.push("FONT");
	urls.push("flixel/flixel-ui/img/box.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/button.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/button_arrow_down.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/button_arrow_left.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/button_arrow_right.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/button_arrow_up.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/button_thin.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/button_toggle.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/check_box.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/check_mark.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/chrome.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/chrome_flat.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/chrome_inset.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/chrome_light.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/dropdown_mark.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/finger_big.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/finger_small.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/hilight.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/invis.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/minus_mark.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/plus_mark.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/radio.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/radio_dot.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/swatch.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/tab.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/img/tab_back.png");
	types.push("IMAGE");
	urls.push("flixel/flixel-ui/xml/defaults.xml");
	types.push("TEXT");
	urls.push("flixel/flixel-ui/xml/default_loading_screen.xml");
	types.push("TEXT");
	urls.push("flixel/flixel-ui/xml/default_popup.xml");
	types.push("TEXT");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
		}
	}
	ApplicationMain.preloader.load(urls,types);
	var result = app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};
	ApplicationMain.preloader = null;
	if(loaded == total) ApplicationMain.start();
};
ApplicationMain.main = function() {
	ApplicationMain.config = { antialiasing : 0, background : 0, borderless : false, company : "HaxeFlixel", depthBuffer : false, file : "TiledEditor", fps : 60, fullscreen : false, hardware : true, height : 600, orientation : "portrait", packageName : "com.example.myapp", resizable : true, stencilBuffer : true, title : "TiledEditor", version : "0.0.1", vsync : true, width : 800};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("Main");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	lime_Assets.initialize();
	if(hasMain) Reflect.callMethod(entryPoint,Reflect.field(entryPoint,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
	}
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event(openfl_events_Event.RESIZE,false,false));
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl_events_EventDispatcher.prototype = {
	__dispatching: null
	,__targetDispatcher: null
	,__eventMap: null
	,__newEventMap: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) {
			this.__dispatching = new haxe_ds_StringMap();
			this.__eventMap = new haxe_ds_StringMap();
			this.__newEventMap = new haxe_ds_StringMap();
		}
		if(!this.__eventMap.exists(type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1;
			if(this.__dispatching.get(type) == true) {
				if(!this.__newEventMap.exists(type)) {
					var _this = this.__eventMap.get(type);
					list1 = _this.slice();
					this.__newEventMap.set(type,list1);
				} else list1 = this.__newEventMap.get(type);
			} else list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) return;
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var type = event.type;
		var list = this.__eventMap.get(type);
		if(list == null) return false;
		this.__dispatching.set(type,true);
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == openfl_events_EventPhase.CAPTURING_PHASE;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCancelledNow) break;
			}
			if(listener == list[index]) index++;
		}
		if(this.__newEventMap != null && this.__newEventMap.exists(type)) {
			var list1 = this.__newEventMap.get(type);
			if(list1.length > 0) this.__eventMap.set(type,list1); else this.__eventMap.remove(type);
			if(!this.__eventMap.iterator().hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			}
			this.__newEventMap.remove(type);
		}
		this.__dispatching.set(event.type,false);
		return true;
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,capture) {
		if(capture == null) capture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		if(this.__dispatching.get(type) == true) {
			if(!this.__newEventMap.exists(type)) {
				var _this = this.__eventMap.get(type);
				list = _this.slice();
				this.__newEventMap.set(type,list);
			} else list = this.__newEventMap.get(type);
		}
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,capture)) {
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) this.__eventMap.remove(type);
		if(!this.__eventMap.iterator().hasNext()) {
			this.__eventMap = null;
			this.__newEventMap = null;
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__worldTransform: null
	,__worldColorTransform: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderGL: null
	,__updateChildren: null
	,__updateMask: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	this.__cacheAsBitmap = false;
	this.__maskCached = false;
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__rotation = 0;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__visible = true;
	this.__x = 0;
	this.__y = 0;
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__rotationCache = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	blendMode: null
	,cacheAsBitmap: null
	,loaderInfo: null
	,mouseX: null
	,mouseY: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,scale9Grid: null
	,stage: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__alpha: null
	,__blendMode: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__mask: null
	,__maskGraphics: null
	,__maskCached: null
	,__name: null
	,__renderable: null
	,__renderDirty: null
	,__rotation: null
	,__rotationCache: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldTransformCache: null
	,__worldTransformChanged: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldZ: null
	,__x: null
	,__y: null
	,__cacheAsBitmap: null
	,__canvas: null
	,__context: null
	,__style: null
	,__cairo: null
	,dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.dispatchEvent.call(this,event);
		if(event.__isCancelled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
			if(event.target == null) event.target = this;
			this.parent.dispatchEvent(event);
		}
		return result;
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = this.__getTransform();
		if(targetCoordinateSpace != null) {
			matrix = new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			matrix.concat(targetCoordinateSpace.__worldTransform.clone().invert());
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__getTransform().clone().invert().transformPoint(pos);
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		if(this.parent != null) {
			var bounds = new openfl_geom_Rectangle();
			this.__getBounds(bounds,this.__getTransform());
			return bounds.containsPoint(new openfl_geom_Point(x,y));
		}
		return false;
	}
	,localToGlobal: function(point) {
		return this.__getTransform().transformPoint(point);
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.dispatchEvent.call(this,event);
			if(event.__isCancelled) return true;
			return result;
		}
		return false;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix);
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getTransform();
		this.__getBounds(rect,new openfl_geom_Matrix());
	}
	,__getTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) this.__update(true,false);
			} else while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(this.__graphics != null) {
			if(this.get_visible() && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
				if(!interactiveOnly) stack.push(this);
				return true;
			}
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoShape.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasShape.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_dom_DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession); else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(this.get_rotation() != this.__rotationCache) {
			this.__rotationCache = this.get_rotation();
			var radians = this.get_rotation() * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
		}
		var sr = this.get_scrollRect();
		if(this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var a00 = this.__rotationCosine * this.get_scaleX();
			var a01 = this.__rotationSine * this.get_scaleX();
			var a10 = -this.__rotationSine * this.get_scaleY();
			var a11 = this.__rotationCosine * this.get_scaleY();
			var b00 = parentTransform.a;
			var b01 = parentTransform.b;
			var b10 = parentTransform.c;
			var b11 = parentTransform.d;
			if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
			this.__worldTransform.a = a00 * b00 + a01 * b10;
			this.__worldTransform.b = a00 * b01 + a01 * b11;
			this.__worldTransform.c = a10 * b00 + a11 * b10;
			this.__worldTransform.d = a10 * b01 + a11 * b11;
			this.__worldTransform.tx = this.get_x() * b00 + this.get_y() * b10 + parentTransform.tx;
			this.__worldTransform.ty = this.get_x() * b01 + this.get_y() * b11 + parentTransform.ty;
			if(sr != null) {
				if(this.__worldTransform.a != 1 || this.__worldTransform.b != 0 || this.__worldTransform.c != 0 || this.__worldTransform.d != 1) sr = sr.transform(this.__worldTransform);
				this.__worldTransform.tx = (this.get_x() - sr.x) * b00 + (this.get_y() - sr.y) * b10 + parentTransform.tx;
				this.__worldTransform.ty = (this.get_x() - sr.x) * b01 + (this.get_y() - sr.y) * b11 + parentTransform.ty;
			}
			if(this.__isMask) this.__maskCached = false;
		} else {
			this.__worldTransform.a = this.__rotationCosine * this.get_scaleX();
			this.__worldTransform.c = -this.__rotationSine * this.get_scaleY();
			this.__worldTransform.b = this.__rotationSine * this.get_scaleX();
			this.__worldTransform.d = this.__rotationCosine * this.get_scaleY();
			this.__worldTransform.tx = this.get_x();
			this.__worldTransform.ty = this.get_y();
			if(sr != null) {
				if(this.__worldTransform.a != 1 || this.__worldTransform.b != 0 || this.__worldTransform.c != 0 || this.__worldTransform.d != 1) sr = sr.transform(this.__worldTransform);
				this.__worldTransform.tx = this.get_x() - this.get_scrollRect().x;
				this.__worldTransform.ty = this.get_y() - this.get_scrollRect().y;
			}
		}
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
			if(this.__maskGraphics == null) this.__maskGraphics = new openfl_display_Graphics();
			this.__maskGraphics.clear();
			this.__mask.__update(true,true,this.__maskGraphics);
			this.__mask.__maskCached = true;
		}
		if(maskGraphics != null) this.__updateMask(maskGraphics);
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			if(this.parent != null) {
				this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldColorTransform.__combine(this.parent.__worldColorTransform);
				if(this.blendMode == null || this.blendMode == openfl_display_BlendMode.NORMAL) this.__blendMode = this.parent.__blendMode;
			} else this.__worldAlpha = this.get_alpha();
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.push(openfl_display_DrawCommand.OverrideMatrix(this.__worldTransform));
			maskGraphics.__commands = maskGraphics.__commands.concat(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,set_blendMode: function(value) {
		this.__blendMode = value;
		return this.blendMode = value;
	}
	,get_filters: function() {
		if(this.__filters == null) return []; else return this.__filters.slice();
	}
	,set_filters: function(value) {
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		return bounds.height * this.get_scaleY();
	}
	,set_height: function(value) {
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskCached = false;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
			this.__maskGraphics = null;
		}
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,get_mouseX: function() {
		if(this.stage != null) return this.globalToLocal(new openfl_geom_Point(this.stage.__mouseX,0)).x;
		return 0;
	}
	,get_mouseY: function() {
		if(this.stage != null) return this.globalToLocal(new openfl_geom_Point(0,this.stage.__mouseY)).y;
		return 0;
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl_Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__rotation = value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleX = value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(this.__scaleY != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleY = value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) return null;
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__transform == null) this.__transform = new openfl_geom_Transform(this);
		return this.__transform;
	}
	,set_transform: function(value) {
		if(value == null) throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		if(this.__transform == null) this.__transform = new openfl_geom_Transform(this);
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
		this.__transform.set_matrix(value.get_matrix().clone());
		this.__transform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__transform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		return bounds.width * this.get_scaleX();
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(value != this.__x) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__x = value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(value != this.__y) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__y = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_blendMode:"set_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.tabEnabled = true;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,tabEnabled: null
	,tabIndex: null
	,requestSoftKeyboard: function() {
		openfl_Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
		return false;
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) this.parent.__getInteractive(stack);
		}
		return true;
	}
	,__class__: openfl_display_InteractiveObject
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = [];
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,numChildren: null
	,tabChildren: null
	,__children: null
	,__removedChildren: null
	,addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw new js__$Boot_HaxeError("Invalid index position " + index);
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event(openfl_events_Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		point = this.localToGlobal(point);
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			child.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED,true));
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(child1,child2) {
		var swap = this.__children[child1];
		this.__children[child1] = this.__children[child2];
		this.__children[child2] = swap;
		swap = null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		var result = openfl_display_InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
		if(!event.__isCancelled && notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCancelled) return true;
			}
		}
		return result;
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		var matrixCache = null;
		if(matrix != null) {
			matrixCache = this.__worldTransform;
			this.__worldTransform = matrix;
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(!child.__renderable) continue;
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__worldTransform = matrixCache;
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		if(this.get_scrollRect() != null && !this.get_scrollRect().containsPoint(this.globalToLocal(new openfl_geom_Point(x,y)))) return false;
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true)) {
					if(stack != null) stack.push(this);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true)) {
							hitTest = true;
							if(interactive) break;
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,this);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false);
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popMask();
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
		if(this.get_scrollRect() != null) renderSession.maskManager.popMask();
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		var bounds = new openfl_geom_Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl_geom_Matrix());
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) renderSession.maskManager.popMask();
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.get_scrollRect() != null) {
			renderSession.spriteBatch.stop();
			var m = this.__worldTransform.clone();
			var clip = this.get_scrollRect().transform(m);
			clip.y = renderSession.renderer.height - clip.y - clip.height;
			renderSession.spriteBatch.start(clip);
		}
		var masked = this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.length > 0;
		if(masked) {
			renderSession.spriteBatch.stop();
			renderSession.maskManager.pushMask(this);
			renderSession.spriteBatch.start();
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		if(masked) {
			renderSession.spriteBatch.stop();
			renderSession.maskManager.popMask();
			renderSession.spriteBatch.start();
		}
		if(this.get_scrollRect() != null) {
			renderSession.spriteBatch.stop();
			renderSession.spriteBatch.start();
		}
		this.__removedChildren = [];
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!this.__renderable && !this.__isMask) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl_display_LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,graphics: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) return lime_ui_MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var length = 0;
		if(stack != null) length = stack.length;
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly)) return interactiveOnly; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var Main = function() {
	this.startFullscreen = false;
	this.skipSplash = true;
	this.framerate = 60;
	this.zoom = -1;
	this.initialState = NapeTestState;
	this.gameHeight = 1200;
	this.gameWidth = 1600;
	openfl_display_Sprite.call(this);
	if(this.stage != null) this.init(); else this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.init));
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.main = function() {
	openfl_Lib.current.addChild(new Main());
};
Main.__super__ = openfl_display_Sprite;
Main.prototype = $extend(openfl_display_Sprite.prototype,{
	gameWidth: null
	,gameHeight: null
	,initialState: null
	,zoom: null
	,framerate: null
	,skipSplash: null
	,startFullscreen: null
	,init: function(E) {
		if(this.hasEventListener(openfl_events_Event.ADDED_TO_STAGE)) this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.init));
		this.setupGame();
	}
	,setupGame: function() {
		var stageWidth = openfl_Lib.current.stage.stageWidth;
		var stageHeight = openfl_Lib.current.stage.stageHeight;
		if(this.zoom == -1) {
			var ratioX = stageWidth / this.gameWidth;
			var ratioY = stageHeight / this.gameHeight;
			this.zoom = Math.min(ratioX,ratioY);
			this.gameWidth = Math.ceil(stageWidth / this.zoom);
			this.gameHeight = Math.ceil(stageHeight / this.zoom);
		}
		this.addChild(new flixel_FlxGame(this.gameWidth,this.gameHeight,this.initialState,this.zoom,this.framerate,this.framerate,this.skipSplash,this.startFullscreen));
	}
	,__class__: Main
});
var DocumentClass = function() {
	openfl_Lib.current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event(openfl_events_Event.ADDED_TO_STAGE,false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var lime_AssetLibrary = function() {
};
$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
lime_AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime_AssetLibrary.prototype = {
	eventCallback: null
	,exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function(handler) {
		handler(this);
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadFont: function(id,handler) {
		handler(this.getFont(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,__class__: lime_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe_ds_StringMap();
	this.path = new haxe_ds_StringMap();
	this.className = new haxe_ds_StringMap();
	lime_AssetLibrary.call(this);
	var id;
	id = "assets/tiled/barrelGreen_side.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/barrelGreen_side_damaged.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/barrelGreen_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/barrelGrey_sde_rust.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/barrelGrey_side.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/barrelGrey_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/barrelRed_side.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/barrelRed_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/coin.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/free_tileset_version_10.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/level.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/level.tmx";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/tiled/level2.tmx";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/tiled/level3.tmx";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/tiled/level4.tmx";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/tiled/mountain_landscape_23.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/oil.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/sandbagBeige.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/sandbagBrown.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/sheet_6.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/sheet_tanks.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/tank.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/tiled/tank.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/sounds/beep.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "assets/sounds/flixel.mp3";
	this.path.set(id,id);
	this.type.set(id,"MUSIC");
	id = "assets/sounds/beep.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "assets/sounds/flixel.ogg";
	this.path.set(id,id);
	this.type.set(id,"SOUND");
	id = "assets/fonts/nokiafc22.ttf";
	this.className.set(id,_$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf);
	this.type.set(id,"FONT");
	id = "assets/fonts/arial.ttf";
	this.className.set(id,_$_$ASSET_$_$assets_$fonts_$arial_$ttf);
	this.type.set(id,"FONT");
	id = "flixel/flixel-ui/img/box.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/button.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/button_arrow_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/button_arrow_left.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/button_arrow_right.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/button_arrow_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/button_thin.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/button_toggle.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/check_box.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/check_mark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/chrome.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/chrome_flat.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/chrome_inset.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/chrome_light.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/dropdown_mark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/finger_big.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/finger_small.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/hilight.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/invis.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/minus_mark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/plus_mark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/radio.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/radio_dot.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/swatch.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/tab.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/img/tab_back.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "flixel/flixel-ui/xml/defaults.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "flixel/flixel-ui/xml/default_loading_screen.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "flixel/flixel-ui/xml/default_popup.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	var assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.path.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.path.get(k);
			this.path.set(k,value);
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	className: null
	,path: null
	,type: null
	,lastModified: null
	,timer: null
	,exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var bytes = null;
		var data;
		data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") {
			bytes = new lime_utils_ByteArray();
			bytes.writeUTFBytes(data);
		} else if(js_Boot.__instanceof(data,lime_utils_ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes;
		} else return null;
	}
	,getFont: function(id) {
		return js_Boot.__cast(Type.createInstance(this.className.get(id),[]) , lime_text_Font);
	}
	,getImage: function(id) {
		return lime_graphics_Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var bytes = null;
		var data;
		data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime_app_Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") return data; else if(js_Boot.__instanceof(data,lime_utils_ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes.readUTFBytes(bytes.length);
		} else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,__class__: DefaultAssetLibrary
});
var lime_text_Font = function(name) {
	if(name != null) this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontPath: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var _$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Nokia Cellphone FC Small";
};
$hxClasses["__ASSET__assets_fonts_nokiafc22_ttf"] = _$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf;
_$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf.__name__ = ["__ASSET__assets_fonts_nokiafc22_ttf"];
_$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$fonts_$nokiafc22_$ttf
});
var _$_$ASSET_$_$assets_$fonts_$arial_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Arial";
};
$hxClasses["__ASSET__assets_fonts_arial_ttf"] = _$_$ASSET_$_$assets_$fonts_$arial_$ttf;
_$_$ASSET_$_$assets_$fonts_$arial_$ttf.__name__ = ["__ASSET__assets_fonts_arial_ttf"];
_$_$ASSET_$_$assets_$fonts_$arial_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$fonts_$arial_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$fonts_$arial_$ttf
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		a.push(i);
	}
	return a;
};
Lambda.has = function(it,elt) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(x == elt) return true;
	}
	return false;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var $it0 = $iterator(it)();
		while( $it0.hasNext() ) {
			var _ = $it0.next();
			n++;
		}
	} else {
		var $it1 = $iterator(it)();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			if(pred(x)) n++;
		}
	}
	return n;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,__class__: List
};
Math.__name__ = ["Math"];
var NMEPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl_display_Sprite;
NMEPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	outline: null
	,progress: null
	,getBackgroundColor: function() {
		return 0;
	}
	,getHeight: function() {
		var height = 600;
		if(height > 0) return height; else return openfl_Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 800;
		if(width > 0) return width; else return openfl_Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var flixel_interfaces_IFlxDestroyable = function() { };
$hxClasses["flixel.interfaces.IFlxDestroyable"] = flixel_interfaces_IFlxDestroyable;
flixel_interfaces_IFlxDestroyable.__name__ = ["flixel","interfaces","IFlxDestroyable"];
flixel_interfaces_IFlxDestroyable.prototype = {
	destroy: null
	,__class__: flixel_interfaces_IFlxDestroyable
};
var flixel_FlxBasic = function() {
	this.collisionType = 0;
	this.exists = true;
	this.alive = true;
	this.visible = true;
	this.active = true;
	this.ID = -1;
};
$hxClasses["flixel.FlxBasic"] = flixel_FlxBasic;
flixel_FlxBasic.__name__ = ["flixel","FlxBasic"];
flixel_FlxBasic.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_FlxBasic.prototype = {
	ID: null
	,active: null
	,visible: null
	,alive: null
	,exists: null
	,collisionType: null
	,destroy: function() {
		this.set_exists(false);
	}
	,kill: function() {
		this.set_alive(false);
		this.set_exists(false);
	}
	,revive: function() {
		this.set_alive(true);
		this.set_exists(true);
	}
	,update: function() {
	}
	,draw: function() {
	}
	,set_visible: function(Value) {
		return this.visible = Value;
	}
	,set_active: function(Value) {
		return this.active = Value;
	}
	,set_exists: function(Value) {
		return this.exists = Value;
	}
	,set_alive: function(Value) {
		return this.alive = Value;
	}
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair._pool.get().create("active",this.active),flixel_util_LabelValuePair._pool.get().create("visible",this.visible),flixel_util_LabelValuePair._pool.get().create("alive",this.alive),flixel_util_LabelValuePair._pool.get().create("exists",this.exists)]);
	}
	,__class__: flixel_FlxBasic
	,__properties__: {set_exists:"set_exists",set_alive:"set_alive",set_visible:"set_visible",set_active:"set_active"}
};
var flixel_group_FlxTypedGroup = function(MaxSize) {
	if(MaxSize == null) MaxSize = 0;
	this._marker = 0;
	this.length = 0;
	flixel_FlxBasic.call(this);
	this.members = [];
	this.set_maxSize(Std["int"](Math.abs(MaxSize)));
	this.collisionType = 2;
};
$hxClasses["flixel.group.FlxTypedGroup"] = flixel_group_FlxTypedGroup;
flixel_group_FlxTypedGroup.__name__ = ["flixel","group","FlxTypedGroup"];
flixel_group_FlxTypedGroup.__super__ = flixel_FlxBasic;
flixel_group_FlxTypedGroup.prototype = $extend(flixel_FlxBasic.prototype,{
	members: null
	,maxSize: null
	,length: null
	,_marker: null
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		if(this.members != null) {
			var i = 0;
			var basic = null;
			while(i < this.length) {
				basic = this.members[i++];
				if(basic != null) basic.destroy();
			}
			this.members = null;
		}
	}
	,update: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.active) basic.update();
		}
	}
	,draw: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.visible) basic.draw();
		}
	}
	,add: function(Object) {
		if(Object == null) return null;
		if(HxOverrides.indexOf(this.members,Object,0) >= 0) return Object;
		var index = this.getFirstNull();
		if(index != -1) {
			this.members[index] = Object;
			if(index >= this.length) this.length = index + 1;
			return Object;
		}
		if(this.maxSize > 0 && this.length >= this.maxSize) return Object;
		this.members.push(Object);
		this.length++;
		return Object;
	}
	,recycle: function(ObjectClass,ContructorArgs,Force,Revive) {
		if(Revive == null) Revive = true;
		if(Force == null) Force = false;
		if(ContructorArgs == null) ContructorArgs = [];
		var basic = null;
		if(this.maxSize > 0) {
			if(this.length < this.maxSize) {
				if(ObjectClass == null) return null;
				return this.add(Type.createInstance(ObjectClass,ContructorArgs));
			} else {
				basic = this.members[this._marker++];
				if(this._marker >= this.maxSize) this._marker = 0;
				if(Revive) basic.revive();
				return basic;
			}
		} else {
			basic = this.getFirstAvailable(ObjectClass,Force);
			if(basic != null) {
				if(Revive) basic.revive();
				return basic;
			}
			if(ObjectClass == null) return null;
			return this.add(Type.createInstance(ObjectClass,ContructorArgs));
		}
	}
	,remove: function(Object,Splice) {
		if(Splice == null) Splice = false;
		if(this.members == null) return null;
		var index = HxOverrides.indexOf(this.members,Object,0);
		if(index < 0) return null;
		if(Splice) this.members.splice(index,1); else this.members[index] = null;
		return Object;
	}
	,replace: function(OldObject,NewObject) {
		var index = HxOverrides.indexOf(this.members,OldObject,0);
		if(index < 0) return null;
		this.members[index] = NewObject;
		return NewObject;
	}
	,sort: function(Function,Order) {
		if(Order == null) Order = -1;
		this.members.sort((function(f,a1) {
			return function(a2,a3) {
				return f(a1,a2,a3);
			};
		})(Function,Order));
	}
	,setAll: function(VariableName,Value,Recurse) {
		if(Recurse == null) Recurse = true;
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(Recurse && basic.collisionType == 2) basic.setAll(VariableName,Value,Recurse); else Reflect.setProperty(basic,VariableName,Value);
			}
		}
	}
	,callAll: function(FunctionName,Args,Recurse) {
		if(Recurse == null) Recurse = true;
		if(Args == null) Args = [];
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(Recurse && basic.collisionType == 2) (js_Boot.__cast(basic , flixel_group_FlxTypedGroup)).callAll(FunctionName,Args,Recurse); else Reflect.callMethod(basic,Reflect.getProperty(basic,FunctionName),Args);
			}
		}
	}
	,getFirstAvailable: function(ObjectClass,Force) {
		if(Force == null) Force = false;
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.exists && (ObjectClass == null || js_Boot.__instanceof(basic,ObjectClass))) {
				if(Force && Type.getClassName(basic == null?null:js_Boot.getClass(basic)) != Type.getClassName(ObjectClass)) continue;
				return this.members[i - 1];
			}
		}
		return null;
	}
	,getFirstNull: function() {
		var i = 0;
		while(i < this.length) {
			if(this.members[i] == null) return i;
			i++;
		}
		return -1;
	}
	,getFirstExisting: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) return basic;
		}
		return null;
	}
	,getFirstAlive: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.alive) return basic;
		}
		return null;
	}
	,getFirstDead: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.alive) return basic;
		}
		return null;
	}
	,countLiving: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(count < 0) count = 0;
				if(basic.exists && basic.alive) count++;
			}
		}
		return count;
	}
	,countDead: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(count < 0) count = 0;
				if(!basic.alive) count++;
			}
		}
		return count;
	}
	,getRandom: function(StartIndex,Length) {
		if(Length == null) Length = 0;
		if(StartIndex == null) StartIndex = 0;
		if(StartIndex < 0) StartIndex = 0;
		if(Length <= 0) Length = this.length;
		return flixel_util_FlxRandom.getObject_getRandom_T(this.members,StartIndex,Length);
	}
	,clear: function() {
		this.length = 0;
		flixel_util_FlxArrayUtil.clearArray(this.members);
	}
	,kill: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) basic.kill();
		}
		flixel_FlxBasic.prototype.kill.call(this);
	}
	,iterator: function(filter) {
		return new flixel_group_FlxTypedGroupIterator(this.members,filter);
	}
	,forEach: function(Function) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) Function(basic);
		}
	}
	,forEachAlive: function(Function) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.alive) Function(basic);
		}
	}
	,forEachDead: function(Function) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.alive) Function(basic);
		}
	}
	,forEachExists: function(Function) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) Function(basic);
		}
	}
	,forEachOfType: function(ObjectClass,Function) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && js_Boot.__instanceof(basic,ObjectClass)) Function(basic);
		}
	}
	,set_maxSize: function(Size) {
		this.maxSize = Std["int"](Math.abs(Size));
		if(this._marker >= this.maxSize) this._marker = 0;
		if(this.maxSize == 0 || this.members == null || this.maxSize >= this.length) return this.maxSize;
		var i = this.maxSize;
		var l = this.length;
		var basic = null;
		while(i < l) {
			basic = this.members[i++];
			if(basic != null) basic.destroy();
		}
		flixel_util_FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T(this.members,this.maxSize);
		this.length = this.members.length;
		return this.maxSize;
	}
	,__class__: flixel_group_FlxTypedGroup
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_maxSize:"set_maxSize"})
});
var flixel_group_FlxGroup = function(MaxSize) {
	flixel_group_FlxTypedGroup.call(this,MaxSize);
};
$hxClasses["flixel.group.FlxGroup"] = flixel_group_FlxGroup;
flixel_group_FlxGroup.__name__ = ["flixel","group","FlxGroup"];
flixel_group_FlxGroup.overlaps = function(Callback,Group,X,Y,InScreenSpace,Camera) {
	var result = false;
	if(Group != null) {
		var i = 0;
		var l = Group.length;
		var basic;
		while(i < l) {
			basic = Group.members[i++];
			if(basic != null && Callback(basic,X,Y,InScreenSpace,Camera)) {
				result = true;
				break;
			}
		}
	}
	return result;
};
flixel_group_FlxGroup.resolveGroup = function(ObjectOrGroup) {
	var group = null;
	if(ObjectOrGroup.collisionType == 4 || ObjectOrGroup.collisionType == 2) {
		if(ObjectOrGroup.collisionType == 2) group = ObjectOrGroup; else if(ObjectOrGroup.collisionType == 4) group = (js_Boot.__cast(ObjectOrGroup , flixel_group_FlxSpriteGroup)).group;
	}
	return group;
};
flixel_group_FlxGroup.__super__ = flixel_group_FlxTypedGroup;
flixel_group_FlxGroup.prototype = $extend(flixel_group_FlxTypedGroup.prototype,{
	__class__: flixel_group_FlxGroup
});
var flixel_FlxState = function(MaxSize) {
	this._requestSubStateReset = false;
	this.destroySubStates = true;
	this.persistentDraw = true;
	this.persistentUpdate = false;
	flixel_group_FlxGroup.call(this,MaxSize);
};
$hxClasses["flixel.FlxState"] = flixel_FlxState;
flixel_FlxState.__name__ = ["flixel","FlxState"];
flixel_FlxState.__super__ = flixel_group_FlxGroup;
flixel_FlxState.prototype = $extend(flixel_group_FlxGroup.prototype,{
	persistentUpdate: null
	,persistentDraw: null
	,destroySubStates: null
	,subState: null
	,_requestedSubState: null
	,_requestSubStateReset: null
	,create: function() {
	}
	,draw: function() {
		if(this.persistentDraw || this.subState == null) flixel_group_FlxGroup.prototype.draw.call(this);
		if(this.subState != null) this.subState.draw();
	}
	,openSubState: function(SubState) {
		this._requestSubStateReset = true;
		this._requestedSubState = SubState;
	}
	,closeSubState: function() {
		this._requestSubStateReset = true;
	}
	,resetSubState: function() {
		if(this.subState != null) {
			if(this.subState.closeCallback != null) this.subState.closeCallback();
			if(this.destroySubStates) this.subState.destroy();
		}
		this.subState = this._requestedSubState;
		this._requestedSubState = null;
		if(this.subState != null) {
			if(!this.persistentUpdate) flixel_FlxG.inputs.reset();
			if(!this.subState._created) {
				this.subState._created = true;
				this.subState._parentState = this;
				this.subState.create();
			}
		}
	}
	,destroy: function() {
		if(this.subState != null) {
			this.subState.destroy();
			this.subState = null;
		}
		flixel_group_FlxGroup.prototype.destroy.call(this);
	}
	,onFocusLost: function() {
	}
	,onFocus: function() {
	}
	,onResize: function(Width,Height) {
	}
	,tryUpdate: function() {
		if(this.persistentUpdate || this.subState == null) this.update();
		if(this._requestSubStateReset) {
			this._requestSubStateReset = false;
			this.resetSubState();
		} else if(this.subState != null) this.subState.tryUpdate();
	}
	,get_bgColor: function() {
		return flixel_FlxG.cameras.get_bgColor();
	}
	,set_bgColor: function(Value) {
		return flixel_FlxG.cameras.set_bgColor(Value);
	}
	,__class__: flixel_FlxState
	,__properties__: $extend(flixel_group_FlxGroup.prototype.__properties__,{set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"})
});
var flixel_addons_nape_FlxNapeState = function(MaxSize) {
	this.positionIterations = 10;
	this.velocityIterations = 10;
	flixel_FlxState.call(this,MaxSize);
};
$hxClasses["flixel.addons.nape.FlxNapeState"] = flixel_addons_nape_FlxNapeState;
flixel_addons_nape_FlxNapeState.__name__ = ["flixel","addons","nape","FlxNapeState"];
flixel_addons_nape_FlxNapeState.space = null;
flixel_addons_nape_FlxNapeState.__super__ = flixel_FlxState;
flixel_addons_nape_FlxNapeState.prototype = $extend(flixel_FlxState.prototype,{
	velocityIterations: null
	,positionIterations: null
	,napeDebugEnabled: null
	,create: function() {
		if(flixel_addons_nape_FlxNapeState.space == null) flixel_addons_nape_FlxNapeState.space = new nape_space_Space(new nape_geom_Vec2());
	}
	,createWalls: function(MinX,MinY,MaxX,MaxY,Thickness,_Material) {
		if(Thickness == null) Thickness = 10;
		if(MaxY == null) MaxY = 0;
		if(MaxX == null) MaxX = 0;
		if(MinY == null) MinY = 0;
		if(MinX == null) MinX = 0;
		if(MaxX == 0) MaxX = flixel_FlxG.width;
		if(MaxY == 0) MaxY = flixel_FlxG.height;
		if(_Material == null) _Material = new nape_phys_Material(0.4,0.2,0.38,0.7);
		var walls = new nape_phys_Body((function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
			return $r;
		}(this)));
		walls.zpp_inner.wrap_shapes.add(new nape_shape_Polygon(nape_shape_Polygon.rect(MinX - Thickness,MinY,Thickness,MaxY + Math.abs(MinY))));
		walls.zpp_inner.wrap_shapes.add(new nape_shape_Polygon(nape_shape_Polygon.rect(MaxX,MinY,Thickness,MaxY + Math.abs(MinY))));
		walls.zpp_inner.wrap_shapes.add(new nape_shape_Polygon(nape_shape_Polygon.rect(MinX,MinY - Thickness,MaxX + Math.abs(MinX),Thickness)));
		walls.zpp_inner.wrap_shapes.add(new nape_shape_Polygon(nape_shape_Polygon.rect(MinX,MaxY,MaxX + Math.abs(MinX),Thickness)));
		walls.set_space(flixel_addons_nape_FlxNapeState.space);
		walls.setShapeMaterials(_Material);
		return walls;
	}
	,update: function() {
		flixel_addons_nape_FlxNapeState.space.step(flixel_FlxG.elapsed,this.velocityIterations,this.positionIterations);
		flixel_FlxState.prototype.update.call(this);
	}
	,draw: function() {
		flixel_FlxState.prototype.draw.call(this);
	}
	,destroy: function() {
		flixel_FlxState.prototype.destroy.call(this);
		if(flixel_addons_nape_FlxNapeState.space != null) {
			flixel_addons_nape_FlxNapeState.space.clear();
			flixel_addons_nape_FlxNapeState.space = null;
		}
	}
	,set_napeDebugEnabled: function(Value) {
		return this.napeDebugEnabled = Value;
	}
	,drawPhysDebug: function() {
	}
	,__class__: flixel_addons_nape_FlxNapeState
	,__properties__: $extend(flixel_FlxState.prototype.__properties__,{set_napeDebugEnabled:"set_napeDebugEnabled"})
});
var NapeTestState = function(MaxSize) {
	this.cost = 0;
	flixel_addons_nape_FlxNapeState.call(this,MaxSize);
};
$hxClasses["NapeTestState"] = NapeTestState;
NapeTestState.__name__ = ["NapeTestState"];
NapeTestState.__super__ = flixel_addons_nape_FlxNapeState;
NapeTestState.prototype = $extend(flixel_addons_nape_FlxNapeState.prototype,{
	shapes: null
	,mouseJoint: null
	,cost: null
	,costUI: null
	,create: function() {
		flixel_addons_nape_FlxNapeState.prototype.create.call(this);
		flixel_FlxG.plugins.add_flixel_addons_plugin_FlxMouseControl(new flixel_addons_plugin_FlxMouseControl());
		var background = new flixel_FlxSprite();
		background.makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
		background.set_alpha(1);
		flixel_FlxG.game._state.members.splice(0,0,background);
		flixel_FlxG.game._state.length++;
		flixel_plugin_MouseEventManager.add(background,$bind(this,this.handleBackgroundClick));
		this.set_napeDebugEnabled(false);
		this.createWalls();
		flixel_addons_nape_FlxNapeState.space.get_gravity().setxy(0,900);
		this.shapes = [];
		this.costUI = new flixel_text_FlxText(0,0,0,"cost: $" + this.cost);
		this.costUI.setFormat(null,30,-16777216,"center");
		this.costUI.setBorderStyle(2,-1,2,null);
		this.add(this.costUI);
	}
	,makeShape: function() {
		var shape = new flixel_addons_nape_FlxNapeSprite();
		var width = 100;
		var height = 300;
		shape.makeGraphic(width,height,-2354116);
		shape.createRectangularBody();
		shape.antialiasing = false;
		shape.setBodyMaterial(0.2,0.57,0.74,7.8,10);
		shape.body.get_position().set_y(flixel_FlxG.mouse.y);
		shape.body.get_position().set_x(flixel_FlxG.mouse.x);
		flixel_plugin_MouseEventManager.add(shape,$bind(this,this.createMouseJoint));
		this.shapes.push(shape);
		this.add(shape);
		this.cost += 1;
		this.costUI.set_text("cost: $" + this.cost);
	}
	,update: function() {
		flixel_addons_nape_FlxNapeState.prototype.update.call(this);
		if(this.mouseJoint != null) {
			this.mouseJoint.set_anchor1(new nape_geom_Vec2(flixel_FlxG.mouse.x,flixel_FlxG.mouse.y));
			if(flixel_FlxG.mouse._leftButton.justReleased()) this.mouseJoint.set_space(null);
		}
	}
	,handleBackgroundClick: function(spr) {
		this.makeShape();
	}
	,registerPhysSprite: function(spr) {
		flixel_plugin_MouseEventManager.add(spr,$bind(this,this.createMouseJoint));
	}
	,createMouseJoint: function(spr) {
		var body = spr.body;
		this.mouseJoint = new nape_constraint_DistanceJoint(flixel_addons_nape_FlxNapeState.space.zpp_inner.__static,body,new nape_geom_Vec2(flixel_FlxG.mouse.x,flixel_FlxG.mouse.y),body.worldPointToLocal(new nape_geom_Vec2(flixel_FlxG.mouse.x,flixel_FlxG.mouse.y)),0,0);
		this.mouseJoint.set_space(flixel_addons_nape_FlxNapeState.space);
	}
	,__class__: NapeTestState
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a,b) {
	if(a == b) return 0; else if(a > b) return 1; else return -1;
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isObject = function(v) {
	if(v == null) return false;
	var t = typeof(v);
	return t == "string" || t == "object" && v.__enum__ == null || t == "function" && (v.__name__ || v.__ename__) != null;
};
Reflect.isEnumValue = function(v) {
	return v != null && v.__enum__ != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,add: function(x) {
		this.b += Std.string(x);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null; else return js_Boot.getClass(o);
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) return null;
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw new js__$Boot_HaxeError("No such constructor " + constr);
	if(Reflect.isFunction(f)) {
		if(params == null) throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = js_Boot.getClass(v);
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
		return false;
	}
	return true;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a > b;
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var Xml = function() { };
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		return this.attributeMap.get(att);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		var ret;
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) _g.push(child);
		}
		ret = _g;
		return HxOverrides.iter(ret);
	}
	,__class__: Xml
};
var flixel_FlxCamera = function(X,Y,Width,Height,Zoom) {
	if(Zoom == null) Zoom = 0;
	if(Height == null) Height = 0;
	if(Width == null) Width = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._fxShakeDirection = 0;
	this._fxShakeComplete = null;
	this._fxShakeDuration = 0;
	this._fxShakeIntensity = 0;
	this._fxFadeAlpha = 0;
	this._fxFadeComplete = null;
	this._fxFadeIn = false;
	this._fxFadeDuration = 0;
	this._fxFadeColor = 0;
	this._fxFlashAlpha = 0;
	this._fxFlashComplete = null;
	this._fxFlashDuration = 0;
	this._fxFlashColor = 0;
	this.antialiasing = false;
	this.color = -1;
	this.angle = 0;
	this.alpha = 1;
	this.useBgAlphaBlending = false;
	this.regen = false;
	this.bounds = null;
	this.deadzone = null;
	this.followLerp = 0;
	this.target = null;
	flixel_FlxBasic.call(this);
	this._scrollTarget = flixel_util_FlxPoint.get(null,null);
	this.x = X;
	this.y = Y;
	this.set_width(Width <= 0?flixel_FlxG.width:Width);
	this.set_height(Height <= 0?flixel_FlxG.height:Height);
	this.scroll = flixel_util_FlxPoint.get(null,null);
	this.followLead = flixel_util_FlxPoint.get(null,null);
	this._point = flixel_util_FlxPoint.get(null,null);
	this._flashOffset = flixel_util_FlxPoint.get(null,null);
	this.screen = new flixel_FlxSprite();
	this.buffer = new openfl_display_BitmapData(this.width,this.height,true,0);
	this.screen.set_pixels(this.buffer);
	this.screen.origin.set();
	this._flashBitmap = new openfl_display_Bitmap(this.buffer);
	this._flashBitmap.set_x(-this.width * 0.5);
	this._flashBitmap.set_y(-this.height * 0.5);
	this.set_color(16777215);
	this.flashSprite = new openfl_display_Sprite();
	this.set_zoom(Zoom);
	this._flashOffset.set(this.width * 0.5 * this.zoom,this.height * 0.5 * this.zoom);
	this.flashSprite.set_x(this.x + this._flashOffset.x);
	this.flashSprite.set_y(this.y + this._flashOffset.y);
	this.flashSprite.addChild(this._flashBitmap);
	this._flashRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
	this._flashPoint = new openfl_geom_Point();
	this._fxShakeOffset = flixel_util_FlxPoint.get(null,null);
	this._fill = new openfl_display_BitmapData(this.width,this.height,true,0);
	this.bgColor = flixel_FlxG.cameras.get_bgColor();
};
$hxClasses["flixel.FlxCamera"] = flixel_FlxCamera;
flixel_FlxCamera.__name__ = ["flixel","FlxCamera"];
flixel_FlxCamera.defaultZoom = null;
flixel_FlxCamera.defaultCameras = null;
flixel_FlxCamera.__super__ = flixel_FlxBasic;
flixel_FlxCamera.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,style: null
	,target: null
	,followLerp: null
	,deadzone: null
	,bounds: null
	,scroll: null
	,buffer: null
	,regen: null
	,bgColor: null
	,screen: null
	,useBgAlphaBlending: null
	,flashSprite: null
	,width: null
	,height: null
	,zoom: null
	,alpha: null
	,angle: null
	,color: null
	,antialiasing: null
	,followLead: null
	,_flashRect: null
	,_flashPoint: null
	,_flashOffset: null
	,_fxFlashColor: null
	,_fxFlashDuration: null
	,_fxFlashComplete: null
	,_fxFlashAlpha: null
	,_fxFadeColor: null
	,_lastTargetPosition: null
	,_scrollTarget: null
	,_fxFadeDuration: null
	,_fxFadeIn: null
	,_fxFadeComplete: null
	,_fxFadeAlpha: null
	,_fxShakeIntensity: null
	,_fxShakeDuration: null
	,_fxShakeComplete: null
	,_fxShakeOffset: null
	,_fxShakeDirection: null
	,_point: null
	,_fill: null
	,_flashBitmap: null
	,destroy: function() {
		this.screen = flixel_util_FlxDestroyUtil.destroy(this.screen);
		this.buffer = null;
		this._flashBitmap = null;
		this._fill = flixel_util_FlxDestroyUtil.dispose(this._fill);
		this.scroll = flixel_util_FlxDestroyUtil.put(this.scroll);
		this.deadzone = flixel_util_FlxDestroyUtil.put(this.deadzone);
		this.bounds = flixel_util_FlxDestroyUtil.put(this.bounds);
		this.target = null;
		this.flashSprite = null;
		this._flashRect = null;
		this._flashPoint = null;
		this._fxFlashComplete = null;
		this._fxFadeComplete = null;
		this._fxShakeComplete = null;
		this._fxShakeOffset = null;
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,update: function() {
		if(this.target != null) this.updateFollow();
		if(this.bounds != null) {
			this.scroll.set_x(flixel_util_FlxMath.bound(this.scroll.x,this.bounds.x,this.bounds.get_right() - this.width));
			this.scroll.set_y(flixel_util_FlxMath.bound(this.scroll.y,this.bounds.y,this.bounds.get_bottom() - this.height));
		}
		this.updateFlash();
		this.updateFade();
		this.updateShake();
	}
	,updateFollow: function() {
		if(this.deadzone == null) this.focusOn(this.target.getMidpoint(this._point)); else {
			var edge;
			var targetX = this.target.x;
			var targetY = this.target.y;
			if(this.style == 4) {
				if(targetX > this.scroll.x + this.width) {
					var _g = this._scrollTarget;
					_g.set_x(_g.x + this.width);
				} else if(targetX < this.scroll.x) {
					var _g1 = this._scrollTarget;
					_g1.set_x(_g1.x - this.width);
				}
				if(targetY > this.scroll.y + this.height) {
					var _g2 = this._scrollTarget;
					_g2.set_y(_g2.y + this.height);
				} else if(targetY < this.scroll.y) {
					var _g3 = this._scrollTarget;
					_g3.set_y(_g3.y - this.height);
				}
			} else {
				edge = targetX - this.deadzone.x;
				if(this._scrollTarget.x > edge) this._scrollTarget.set_x(edge);
				edge = targetX + this.target.get_width() - this.deadzone.x - this.deadzone.width;
				if(this._scrollTarget.x < edge) this._scrollTarget.set_x(edge);
				edge = targetY - this.deadzone.y;
				if(this._scrollTarget.y > edge) this._scrollTarget.set_y(edge);
				edge = targetY + this.target.get_height() - this.deadzone.y - this.deadzone.height;
				if(this._scrollTarget.y < edge) this._scrollTarget.set_y(edge);
			}
			if(js_Boot.__instanceof(this.target,flixel_FlxSprite)) {
				if(this._lastTargetPosition == null) this._lastTargetPosition = flixel_util_FlxPoint.get(this.target.x,this.target.y);
				var _g4 = this._scrollTarget;
				_g4.set_x(_g4.x + (this.target.x - this._lastTargetPosition.x) * this.followLead.x);
				var _g5 = this._scrollTarget;
				_g5.set_y(_g5.y + (this.target.y - this._lastTargetPosition.y) * this.followLead.y);
				this._lastTargetPosition.set_x(this.target.x);
				this._lastTargetPosition.set_y(this.target.y);
			}
			if(this.followLerp == 0) this.scroll.copyFrom(this._scrollTarget); else {
				var _g6 = this.scroll;
				_g6.set_x(_g6.x + (this._scrollTarget.x - this.scroll.x) * flixel_FlxG.elapsed / (flixel_FlxG.elapsed + this.followLerp * flixel_FlxG.elapsed));
				var _g7 = this.scroll;
				_g7.set_y(_g7.y + (this._scrollTarget.y - this.scroll.y) * flixel_FlxG.elapsed / (flixel_FlxG.elapsed + this.followLerp * flixel_FlxG.elapsed));
			}
		}
	}
	,updateFlash: function() {
		if(this._fxFlashAlpha > 0.0) {
			this._fxFlashAlpha -= flixel_FlxG.elapsed / this._fxFlashDuration;
			if(this._fxFlashAlpha <= 0 && this._fxFlashComplete != null) this._fxFlashComplete();
		}
	}
	,updateFade: function() {
		if(this._fxFadeAlpha > 0.0 && this._fxFadeAlpha < 1.0) {
			if(this._fxFadeIn) {
				this._fxFadeAlpha -= flixel_FlxG.elapsed / this._fxFadeDuration;
				if(this._fxFadeAlpha <= 0.0) {
					this._fxFadeAlpha = 0.0;
					if(this._fxFadeComplete != null) this._fxFadeComplete();
				}
			} else {
				this._fxFadeAlpha += flixel_FlxG.elapsed / this._fxFadeDuration;
				if(this._fxFadeAlpha >= 1.0) {
					this._fxFadeAlpha = 1.0;
					if(this._fxFadeComplete != null) this._fxFadeComplete();
				}
			}
		}
	}
	,updateShake: function() {
		if(this._fxShakeDuration > 0) {
			this._fxShakeDuration -= flixel_FlxG.elapsed;
			if(this._fxShakeDuration <= 0) {
				this._fxShakeOffset.set();
				if(this._fxShakeComplete != null) this._fxShakeComplete();
			} else {
				if(this._fxShakeDirection == 0 || this._fxShakeDirection == 1) this._fxShakeOffset.set_x(((flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * this._fxShakeIntensity * this.width * 2 - this._fxShakeIntensity * this.width) * this.zoom);
				if(this._fxShakeDirection == 0 || this._fxShakeDirection == 2) this._fxShakeOffset.set_y(((flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * this._fxShakeIntensity * this.height * 2 - this._fxShakeIntensity * this.height) * this.zoom);
			}
			if(this.target != null) {
				this.flashSprite.set_x(this.x + this._flashOffset.x);
				this.flashSprite.set_y(this.y + this._flashOffset.y);
			}
		}
	}
	,follow: function(Target,Style,Offset,Lerp) {
		if(Lerp == null) Lerp = 0;
		if(Style == null) Style = 0;
		this.style = Style;
		this.target = Target;
		this.followLerp = Lerp;
		var helper;
		var w = 0;
		var h = 0;
		this._lastTargetPosition = null;
		switch(Style) {
		case 1:
			var w1;
			w1 = this.width / 8 + (Offset != null?Offset.x:0);
			var h1;
			h1 = this.height / 3 + (Offset != null?Offset.y:0);
			this.deadzone = flixel_util_FlxRect.get((this.width - w1) / 2,(this.height - h1) / 2 - h1 * 0.25,w1,h1);
			break;
		case 2:
			helper = Math.max(this.width,this.height) / 4;
			this.deadzone = flixel_util_FlxRect.get((this.width - helper) / 2,(this.height - helper) / 2,helper,helper);
			break;
		case 3:
			helper = Math.max(this.width,this.height) / 8;
			this.deadzone = flixel_util_FlxRect.get((this.width - helper) / 2,(this.height - helper) / 2,helper,helper);
			break;
		case 0:
			if(this.target != null) {
				w = this.target.get_width() + (Offset != null?Offset.x:0);
				h = this.target.get_height() + (Offset != null?Offset.y:0);
			}
			this.deadzone = flixel_util_FlxRect.get((this.width - w) / 2,(this.height - h) / 2 - h * 0.25,w,h);
			break;
		case 4:
			this.deadzone = flixel_util_FlxRect.get(0,0,this.width,this.height);
			break;
		default:
			this.deadzone = null;
		}
	}
	,focusOn: function(point) {
		this.scroll.set(point.x - this.width * 0.5,point.y - this.height * 0.5);
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) Force = false;
		if(Duration == null) Duration = 1;
		if(Color == null) Color = -1;
		if(!Force && this._fxFlashAlpha > 0.0) return;
		this._fxFlashColor = Color;
		if(Duration <= 0) Duration = 0.0000000000000001;
		this._fxFlashDuration = Duration;
		this._fxFlashComplete = OnComplete;
		this._fxFlashAlpha = 1.0;
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) Force = false;
		if(FadeIn == null) FadeIn = false;
		if(Duration == null) Duration = 1;
		if(Color == null) Color = -16777216;
		if(!Force && this._fxFadeAlpha > 0.0) return;
		this._fxFadeColor = Color;
		if(Duration <= 0) Duration = 0.0000000000000001;
		this._fxFadeIn = FadeIn;
		this._fxFadeDuration = Duration;
		this._fxFadeComplete = OnComplete;
		if(this._fxFadeIn) this._fxFadeAlpha = 0.999999; else this._fxFadeAlpha = 0.0000000000000001;
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Direction) {
		if(Direction == null) Direction = 0;
		if(Force == null) Force = true;
		if(Duration == null) Duration = 0.5;
		if(Intensity == null) Intensity = 0.05;
		if(!Force && (this._fxShakeOffset.x != 0 || this._fxShakeOffset.y != 0)) return;
		this._fxShakeIntensity = Intensity;
		this._fxShakeDuration = Duration;
		this._fxShakeComplete = OnComplete;
		this._fxShakeDirection = Direction;
		this._fxShakeOffset.set();
	}
	,stopFX: function() {
		this._fxFlashAlpha = 0.0;
		this._fxFadeAlpha = 0.0;
		this._fxShakeDuration = 0;
		this.flashSprite.set_x(this.x + this._flashOffset.x);
		this.flashSprite.set_y(this.y + this._flashOffset.y);
	}
	,copyFrom: function(Camera) {
		if(Camera.bounds == null) this.bounds = null; else {
			if(this.bounds == null) this.bounds = flixel_util_FlxRect.get(null,null,null,null);
			this.bounds.copyFrom(Camera.bounds);
		}
		this.target = Camera.target;
		if(this.target != null) {
			if(Camera.deadzone == null) this.deadzone = null; else {
				if(this.deadzone == null) this.deadzone = flixel_util_FlxRect.get(null,null,null,null);
				this.deadzone.copyFrom(Camera.deadzone);
			}
		}
		return this;
	}
	,fill: function(Color,BlendAlpha,FxAlpha,graphics) {
		if(FxAlpha == null) FxAlpha = 1.0;
		if(BlendAlpha == null) BlendAlpha = true;
		if(BlendAlpha) {
			this._fill.fillRect(this._flashRect,Color);
			this.buffer.copyPixels(this._fill,this._flashRect,this._flashPoint,null,null,BlendAlpha);
		} else this.buffer.fillRect(this._flashRect,Color);
	}
	,drawFX: function() {
		var alphaComponent;
		if(this._fxFlashAlpha > 0.0) {
			alphaComponent = this._fxFlashColor >> 24 & 255;
			this.fill((((alphaComponent <= 0?255:alphaComponent) * this._fxFlashAlpha | 0) << 24) + (this._fxFlashColor & 16777215));
		}
		if(this._fxFadeAlpha > 0.0) {
			alphaComponent = this._fxFadeColor >> 24 & 255;
			this.fill((((alphaComponent <= 0?255:alphaComponent) * this._fxFadeAlpha | 0) << 24) + (this._fxFadeColor & 16777215));
		}
		if(this._fxShakeOffset.x != 0 || this._fxShakeOffset.y != 0) {
			var _g = this.flashSprite;
			_g.set_x(_g.get_x() + this._fxShakeOffset.x);
			var _g1 = this.flashSprite;
			_g1.set_y(_g1.get_y() + this._fxShakeOffset.y);
		}
	}
	,checkResize: function() {
		if(this.regen) {
			if(this.width != this.buffer.width || this.height != this.buffer.height) {
				flixel_FlxG.bitmap.remove(this.screen.cachedGraphics.key);
				this.buffer = new openfl_display_BitmapData(this.width,this.height,true,0);
				this.screen.set_pixels(this.buffer);
				this.screen.origin.set();
				this._flashBitmap.bitmapData = this.buffer;
				this._flashRect.width = this.width;
				this._flashRect.height = this.height;
				this._fill.dispose();
				this._fill = new openfl_display_BitmapData(this.width,this.height,true,0);
			}
			this.regen = false;
		}
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,setPosition: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.x = X;
		this.y = Y;
	}
	,setBounds: function(X,Y,Width,Height,UpdateWorld) {
		if(UpdateWorld == null) UpdateWorld = false;
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		if(this.bounds == null) this.bounds = flixel_util_FlxRect.get(null,null,null,null);
		this.bounds.set(X,Y,Width,Height);
		if(UpdateWorld) flixel_FlxG.worldBounds.copyFrom(this.bounds);
		this.update();
	}
	,setScale: function(X,Y) {
		this.flashSprite.set_scaleX(X);
		this.flashSprite.set_scaleY(Y);
		this._flashOffset.set_x(this.width * 0.5 * X);
		this._flashOffset.set_y(this.height * 0.5 * Y);
	}
	,getScale: function() {
		return this._point.set(this.flashSprite.get_scaleX(),this.flashSprite.get_scaleY());
	}
	,set_width: function(Value) {
		if(Value > 0) {
			this.width = Value;
			if(this._flashBitmap != null) {
				this.regen = Value != this.buffer.width;
				this._flashOffset.set_x(this.width * 0.5 * this.zoom);
				this._flashBitmap.set_x(-this.width * 0.5);
			}
		}
		return Value;
	}
	,set_height: function(Value) {
		if(Value > 0) {
			this.height = Value;
			if(this._flashBitmap != null) {
				this.regen = Value != this.buffer.height;
				this._flashOffset.set_y(this.height * 0.5 * this.zoom);
				this._flashBitmap.set_y(-this.height * 0.5);
			}
		}
		return Value;
	}
	,set_zoom: function(Zoom) {
		if(Zoom == 0) this.zoom = flixel_FlxCamera.defaultZoom; else this.zoom = Zoom;
		this.setScale(this.zoom,this.zoom);
		return this.zoom;
	}
	,set_alpha: function(Alpha) {
		this.alpha = flixel_util_FlxMath.bound(Alpha,0,1);
		this._flashBitmap.set_alpha(Alpha);
		return Alpha;
	}
	,set_angle: function(Angle) {
		this.angle = Angle;
		this.flashSprite.set_rotation(Angle);
		return Angle;
	}
	,set_color: function(Color) {
		this.color = Color & 16777215;
		if(this._flashBitmap != null) {
			var colorTransform = this._flashBitmap.get_transform().get_colorTransform();
			colorTransform.redMultiplier = (this.color >> 16) / 255;
			colorTransform.greenMultiplier = (this.color >> 8 & 255) / 255;
			colorTransform.blueMultiplier = (this.color & 255) / 255;
			this._flashBitmap.get_transform().set_colorTransform(colorTransform);
		}
		return Color;
	}
	,set_antialiasing: function(Antialiasing) {
		this.antialiasing = Antialiasing;
		this._flashBitmap.smoothing = Antialiasing;
		return Antialiasing;
	}
	,__class__: flixel_FlxCamera
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_antialiasing:"set_antialiasing",set_color:"set_color",set_angle:"set_angle",set_alpha:"set_alpha",set_zoom:"set_zoom",set_height:"set_height",set_width:"set_width"})
});
var flixel_system_FlxVersion = function(Major,Minor,Patch,PatchVersion) {
	if(PatchVersion == null) PatchVersion = "";
	this.major = Major;
	this.minor = Minor;
	this.patch = Patch;
	this.patchVersion = PatchVersion;
};
$hxClasses["flixel.system.FlxVersion"] = flixel_system_FlxVersion;
flixel_system_FlxVersion.__name__ = ["flixel","system","FlxVersion"];
flixel_system_FlxVersion.prototype = {
	major: null
	,minor: null
	,patch: null
	,patchVersion: null
	,toString: function() {
		var patchVer = "";
		if(this.patchVersion != null && this.patchVersion != "") patchVer = "-" + this.patchVersion;
		return "HaxeFlixel " + this.major + "." + this.minor + "." + this.patch + patchVer;
	}
	,__class__: flixel_system_FlxVersion
};
var flixel_interfaces_IFlxPooled = function() { };
$hxClasses["flixel.interfaces.IFlxPooled"] = flixel_interfaces_IFlxPooled;
flixel_interfaces_IFlxPooled.__name__ = ["flixel","interfaces","IFlxPooled"];
flixel_interfaces_IFlxPooled.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_interfaces_IFlxPooled.prototype = {
	put: null
	,_inPool: null
	,__class__: flixel_interfaces_IFlxPooled
};
var flixel_util_FlxPool = function(classObj) {
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool"] = flixel_util_FlxPool;
flixel_util_FlxPool.__name__ = ["flixel","util","FlxPool"];
flixel_util_FlxPool.prototype = {
	_pool: null
	,_class: null
	,get: function() {
		var obj = this._pool.pop();
		if(obj == null) obj = Type.createInstance(this._class,[]);
		return obj;
	}
	,put: function(obj) {
		if(obj != null && HxOverrides.indexOf(this._pool,obj,0) < 0) {
			obj.destroy();
			this._pool.push(obj);
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool.push(obj);
		}
	}
	,preAllocate: function(numObjects) {
		var _g = 0;
		while(_g < numObjects) {
			var i = _g++;
			this._pool.push(Type.createInstance(this._class,[]));
		}
	}
	,clear: function() {
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._pool.length;
	}
	,__class__: flixel_util_FlxPool
	,__properties__: {get_length:"get_length"}
};
var flixel_util_FlxPoint = function(X,Y) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._inPool = false;
	this._weak = false;
	this.y = 0;
	this.x = 0;
	this.set(X,Y);
};
$hxClasses["flixel.util.FlxPoint"] = flixel_util_FlxPoint;
flixel_util_FlxPoint.__name__ = ["flixel","util","FlxPoint"];
flixel_util_FlxPoint.__interfaces__ = [flixel_interfaces_IFlxPooled];
flixel_util_FlxPoint.get = function(X,Y) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	var point = flixel_util_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	return point;
};
flixel_util_FlxPoint.weak = function(X,Y) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	var point = flixel_util_FlxPoint.get(null,null).set(X,Y);
	point._weak = true;
	return point;
};
flixel_util_FlxPoint.prototype = {
	x: null
	,y: null
	,_weak: null
	,_inPool: null
	,put: function() {
		if(!this._inPool) {
			this._inPool = true;
			this._weak = false;
			flixel_util_FlxPoint._pool.putUnsafe(this);
		}
	}
	,putWeak: function() {
		if(this._weak) this.put();
	}
	,set: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.set_x(X);
		this.set_y(Y);
		return this;
	}
	,add: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		var _g = this;
		_g.set_x(_g.x + X);
		var _g1 = this;
		_g1.set_y(_g1.y + Y);
		return this;
	}
	,addPoint: function(point) {
		var _g = this;
		_g.set_x(_g.x + point.x);
		var _g1 = this;
		_g1.set_y(_g1.y + point.y);
		if(point._weak) point.put();
		return this;
	}
	,subtract: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		var _g = this;
		_g.set_x(_g.x - X);
		var _g1 = this;
		_g1.set_y(_g1.y - Y);
		return this;
	}
	,subtractPoint: function(point) {
		var _g = this;
		_g.set_x(_g.x - point.x);
		var _g1 = this;
		_g1.set_y(_g1.y - point.y);
		if(point._weak) point.put();
		return this;
	}
	,copyFrom: function(point) {
		this.set_x(point.x);
		this.set_y(point.y);
		return this;
	}
	,copyTo: function(point) {
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		point.set_x(this.x);
		point.set_y(this.y);
		return point;
	}
	,copyFromFlash: function(FlashPoint) {
		this.set_x(FlashPoint.x);
		this.set_y(FlashPoint.y);
		return this;
	}
	,copyToFlash: function(FlashPoint) {
		FlashPoint.x = this.x;
		FlashPoint.y = this.y;
		return FlashPoint;
	}
	,inCoords: function(RectX,RectY,RectWidth,RectHeight) {
		return flixel_util_FlxMath.pointInCoordinates(this.x,this.y,RectX,RectY,RectWidth,RectHeight);
	}
	,inFlxRect: function(Rect) {
		return flixel_util_FlxMath.pointInFlxRect(this.x,this.y,Rect);
	}
	,distanceTo: function(AnotherPoint) {
		return flixel_util_FlxMath.getDistance(this,AnotherPoint);
	}
	,floor: function() {
		this.set_x(Math.floor(this.x));
		this.set_y(Math.floor(this.y));
		return this;
	}
	,ceil: function() {
		this.set_x(Math.ceil(this.x));
		this.set_y(Math.ceil(this.y));
		return this;
	}
	,destroy: function() {
	}
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair._pool.get().create("x",this.x),flixel_util_LabelValuePair._pool.get().create("y",this.y)]);
	}
	,set_x: function(Value) {
		return this.x = Value;
	}
	,set_y: function(Value) {
		return this.y = Value;
	}
	,__class__: flixel_util_FlxPoint
	,__properties__: {set_y:"set_y",set_x:"set_x"}
};
var flixel_system_scaleModes_BaseScaleMode = function() {
	this.deviceSize = flixel_util_FlxPoint.get(null,null);
	this.gameSize = flixel_util_FlxPoint.get(null,null);
	this.scale = flixel_util_FlxPoint.get(null,null);
	this.offset = flixel_util_FlxPoint.get(null,null);
};
$hxClasses["flixel.system.scaleModes.BaseScaleMode"] = flixel_system_scaleModes_BaseScaleMode;
flixel_system_scaleModes_BaseScaleMode.__name__ = ["flixel","system","scaleModes","BaseScaleMode"];
flixel_system_scaleModes_BaseScaleMode.prototype = {
	deviceSize: null
	,gameSize: null
	,scale: null
	,offset: null
	,onMeasure: function(Width,Height) {
		this.updateGameSize(Width,Height);
		this.updateDeviceSize(Width,Height);
		this.updateScaleOffset();
		this.updateGameScale();
		this.updateGamePosition();
	}
	,updateGameSize: function(Width,Height) {
		this.gameSize.set(Width,Height);
	}
	,updateDeviceSize: function(Width,Height) {
		this.deviceSize.set(Width,Height);
	}
	,updateScaleOffset: function() {
		this.scale.set_x(this.gameSize.x / flixel_FlxG.width);
		this.scale.set_y(this.gameSize.y / flixel_FlxG.height);
		flixel_system_scaleModes_BaseScaleMode.zoom.set(flixel_FlxCamera.defaultZoom,flixel_FlxCamera.defaultZoom);
		if(flixel_FlxG.camera != null) {
			flixel_system_scaleModes_BaseScaleMode.zoom.set_x(flixel_FlxG.camera.getScale().x);
			flixel_system_scaleModes_BaseScaleMode.zoom.set_y(flixel_FlxG.camera.getScale().y);
		}
		var _g = this.scale;
		_g.set_x(_g.x / flixel_system_scaleModes_BaseScaleMode.zoom.x);
		var _g1 = this.scale;
		_g1.set_y(_g1.y / flixel_system_scaleModes_BaseScaleMode.zoom.y);
		this.offset.set_x(Math.ceil((this.deviceSize.x - this.gameSize.x) * 0.5));
		this.offset.set_y(Math.ceil((this.deviceSize.y - this.gameSize.y) * 0.5));
	}
	,updateGameScale: function() {
	}
	,updateGamePosition: function() {
		flixel_FlxG.game.set_x(this.offset.x);
		flixel_FlxG.game.set_y(this.offset.y);
	}
	,__class__: flixel_system_scaleModes_BaseScaleMode
};
var flixel_system_scaleModes_RatioScaleMode = function() {
	flixel_system_scaleModes_BaseScaleMode.call(this);
};
$hxClasses["flixel.system.scaleModes.RatioScaleMode"] = flixel_system_scaleModes_RatioScaleMode;
flixel_system_scaleModes_RatioScaleMode.__name__ = ["flixel","system","scaleModes","RatioScaleMode"];
flixel_system_scaleModes_RatioScaleMode.__super__ = flixel_system_scaleModes_BaseScaleMode;
flixel_system_scaleModes_RatioScaleMode.prototype = $extend(flixel_system_scaleModes_BaseScaleMode.prototype,{
	updateGameSize: function(Width,Height) {
		var ratio = flixel_FlxG.width / flixel_FlxG.height;
		var realRatio = Width / Height;
		if(realRatio < ratio) {
			this.gameSize.set_x(Width);
			this.gameSize.set_y(Math.floor(this.gameSize.x / ratio));
		} else {
			this.gameSize.set_y(Height);
			this.gameSize.set_x(Math.floor(this.gameSize.y * ratio));
		}
	}
	,__class__: flixel_system_scaleModes_RatioScaleMode
});
var flixel_system_frontEnds_BitmapFrontEnd = function() {
	this.clearCache();
};
$hxClasses["flixel.system.frontEnds.BitmapFrontEnd"] = flixel_system_frontEnds_BitmapFrontEnd;
flixel_system_frontEnds_BitmapFrontEnd.__name__ = ["flixel","system","frontEnds","BitmapFrontEnd"];
flixel_system_frontEnds_BitmapFrontEnd.prototype = {
	_cache: null
	,dumpCache: function() {
	}
	,checkCache: function(Key) {
		return this._cache.exists(Key) && this._cache.get(Key) != null;
	}
	,create: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) Unique = false;
		var key = Key;
		if(key == null) {
			key = Width + "x" + Height + ":" + Color;
			if(Unique && (this._cache.exists(key) && this._cache.get(key) != null)) key = this.getUniqueKey(key);
		}
		if(!(this._cache.exists(key) && this._cache.get(key) != null)) {
			var value = new flixel_util_loaders_CachedGraphics(key,new openfl_display_BitmapData(Width,Height,true,Color));
			this._cache.set(key,value);
		}
		return this._cache.get(key);
	}
	,add: function(Graphic,Unique,Key) {
		if(Unique == null) Unique = false;
		return this.addWithSpaces(Graphic,0,0,1,1,Unique,Key);
	}
	,addWithSpaces: function(Graphic,FrameWidth,FrameHeight,SpacingX,SpacingY,Unique,Key) {
		if(Unique == null) Unique = false;
		if(SpacingY == null) SpacingY = 1;
		if(SpacingX == null) SpacingX = 1;
		if(Graphic == null) return null;
		var region = null;
		var graphic = null;
		var isClass = false;
		var isBitmap = false;
		var isRegion = false;
		var isGraphics = false;
		if(js_Boot.__instanceof(Graphic,flixel_util_loaders_CachedGraphics)) {
			isGraphics = true;
			graphic = js_Boot.__cast(Graphic , flixel_util_loaders_CachedGraphics);
			if(!Unique && (FrameWidth <= 0 && FrameHeight <= 0)) return graphic;
		} else if(js_Boot.__instanceof(Graphic,Class)) isClass = true; else if(js_Boot.__instanceof(Graphic,openfl_display_BitmapData)) isBitmap = true; else if(js_Boot.__instanceof(Graphic,flixel_util_loaders_TextureRegion)) {
			isRegion = true;
			region = js_Boot.__cast(Graphic , flixel_util_loaders_TextureRegion);
		} else if(typeof(Graphic) == "string") {
		} else return null;
		var additionalKey = "";
		if(FrameWidth > 0 || FrameHeight > 0) additionalKey = "FrameSize:" + FrameWidth + "_" + FrameHeight + "_Spacing:" + SpacingX + "_" + SpacingY;
		var key = Key;
		if(key == null) {
			if(isClass) key = Type.getClassName(js_Boot.__cast(Graphic , Class)); else if(isBitmap) {
				if(!Unique) {
					key = this.getCacheKeyFor(Graphic);
					if(key == null) key = this.getUniqueKey();
				}
			} else if(isRegion) key = region.data.key; else if(isGraphics) key = graphic.key; else key = Graphic;
			key += additionalKey;
			if(Unique) key = this.getUniqueKey(key == null?"pixels":key);
		}
		if(!(this._cache.exists(key) && this._cache.get(key) != null)) {
			var bd = null;
			if(isClass) bd = Type.createInstance(js_Boot.__cast(Graphic , Class),[0,0]); else if(isBitmap) bd = Graphic; else if(isRegion) bd = region.data.bitmap; else if(isGraphics) bd = graphic.bitmap; else bd = flixel_system_FlxAssets.getBitmapData(Graphic);
			if(FrameWidth > 0 || FrameHeight > 0) {
				var numHorizontalFrames;
				if(FrameWidth == 0) numHorizontalFrames = 1; else numHorizontalFrames = bd.width / FrameWidth | 0;
				var numVerticalFrames;
				if(FrameHeight == 0) numVerticalFrames = 1; else numVerticalFrames = bd.height / FrameHeight | 0;
				if(FrameWidth == 0) FrameWidth = bd.width; else FrameWidth = FrameWidth;
				if(FrameHeight == 0) FrameHeight = bd.height; else FrameHeight = FrameHeight;
				var tempBitmap = new openfl_display_BitmapData(bd.width + numHorizontalFrames * SpacingX,bd.height + numVerticalFrames * SpacingY,true,0);
				tempBitmap.lock();
				var tempRect = new openfl_geom_Rectangle(0,0,FrameWidth,FrameHeight);
				var tempPoint = new openfl_geom_Point();
				var _g = 0;
				while(_g < numHorizontalFrames) {
					var i = _g++;
					tempPoint.x = i * (FrameWidth + SpacingX);
					tempRect.x = i * FrameWidth;
					var _g2 = 0;
					var _g1 = numVerticalFrames;
					while(_g2 < _g1) {
						var j = _g2++;
						tempPoint.y = j * (FrameHeight + SpacingY);
						tempRect.y = j * FrameHeight;
						tempBitmap.copyPixels(bd,tempRect,tempPoint);
					}
				}
				tempBitmap.unlock();
				bd = tempBitmap;
			}
			if(Unique) bd = bd.clone();
			var co = new flixel_util_loaders_CachedGraphics(key,bd);
			if(isClass && !Unique) co.assetsClass = Graphic; else if(!isClass && !isBitmap && !isRegion && !Unique) co.assetsKey = Graphic;
			this._cache.set(key,co);
		}
		return this._cache.get(key);
	}
	,get: function(key) {
		return this._cache.get(key);
	}
	,getCacheKeyFor: function(bmd) {
		var $it0 = this._cache.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			var data = this._cache.get(key).bitmap;
			if(data == bmd) return key;
		}
		return null;
	}
	,getUniqueKey: function(baseKey) {
		if(baseKey == null) baseKey = "pixels";
		if(this._cache.exists(baseKey) && this._cache.get(baseKey) != null) {
			var inc = 0;
			var ukey;
			do ukey = baseKey + inc++; while(this._cache.exists(ukey) && this._cache.get(ukey) != null);
			baseKey = ukey;
		}
		return baseKey;
	}
	,remove: function(key) {
		if(key != null && this._cache.exists(key)) {
			var obj = this._cache.get(key);
			this.removeFromOpenFLCache(key);
			this._cache.remove(key);
			obj.destroy();
		}
	}
	,removeFromOpenFLCache: function(key) {
		openfl_Assets.cache.removeBitmapData(key);
	}
	,clearCache: function() {
		var obj;
		if(this._cache == null) this._cache = new haxe_ds_StringMap();
		var $it0 = this._cache.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			obj = this._cache.get(key);
			if(obj != null && !obj.persist) {
				this.removeFromOpenFLCache(key);
				this._cache.remove(key);
				obj.destroy();
				obj = null;
			}
		}
	}
	,clearUnused: function() {
		var obj;
		if(this._cache != null) {
			var $it0 = this._cache.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				obj = this._cache.get(key);
				if(obj != null && obj.useCount <= 0 && !obj.persist && obj.destroyOnNoUse) this.remove(obj.key);
			}
		}
	}
	,__class__: flixel_system_frontEnds_BitmapFrontEnd
};
var flixel_system_frontEnds_BitmapLogFrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.BitmapLogFrontEnd"] = flixel_system_frontEnds_BitmapLogFrontEnd;
flixel_system_frontEnds_BitmapLogFrontEnd.__name__ = ["flixel","system","frontEnds","BitmapLogFrontEnd"];
flixel_system_frontEnds_BitmapLogFrontEnd.prototype = {
	add: function(Data,Name) {
		if(Name == null) Name = "";
	}
	,clear: function() {
	}
	,clearAt: function(Index) {
		if(Index == null) Index = -1;
	}
	,viewCache: function() {
	}
	,__class__: flixel_system_frontEnds_BitmapLogFrontEnd
};
var flixel_system_frontEnds_CameraFrontEnd = function() {
	this.useBufferLocking = false;
	this._cameraRect = new openfl_geom_Rectangle();
	this.list = [];
	flixel_FlxCamera.defaultCameras = this.list;
};
$hxClasses["flixel.system.frontEnds.CameraFrontEnd"] = flixel_system_frontEnds_CameraFrontEnd;
flixel_system_frontEnds_CameraFrontEnd.__name__ = ["flixel","system","frontEnds","CameraFrontEnd"];
flixel_system_frontEnds_CameraFrontEnd.prototype = {
	add_flixel_FlxCamera: function(NewCamera) {
		flixel_FlxG.game.addChildAt(NewCamera.flashSprite,flixel_FlxG.game.getChildIndex(flixel_FlxG.game._inputContainer));
		flixel_FlxG.cameras.list.push(NewCamera);
		NewCamera.ID = flixel_FlxG.cameras.list.length - 1;
		return NewCamera;
	}
	,list: null
	,useBufferLocking: null
	,_cameraRect: null
	,remove: function(Camera,Destroy) {
		if(Destroy == null) Destroy = true;
		var index = HxOverrides.indexOf(this.list,Camera,0);
		if(Camera != null && index != -1) {
			flixel_FlxG.game.removeChild(Camera.flashSprite);
			this.list.splice(index,1);
		} else null;
		if(Destroy) Camera.destroy();
	}
	,reset: function(NewCamera) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			flixel_FlxG.game.removeChild(camera.flashSprite);
			camera.destroy();
		}
		this.list.splice(0,this.list.length);
		if(NewCamera == null) NewCamera = new flixel_FlxCamera(0,0,flixel_FlxG.width,flixel_FlxG.height);
		flixel_FlxG.game.addChildAt(NewCamera.flashSprite,flixel_FlxG.game.getChildIndex(flixel_FlxG.game._inputContainer));
		flixel_FlxG.cameras.list.push(NewCamera);
		NewCamera.ID = flixel_FlxG.cameras.list.length - 1;
		flixel_FlxG.camera = NewCamera;
		NewCamera.ID = 0;
		flixel_FlxCamera.defaultCameras = this.list;
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) Force = false;
		if(Duration == null) Duration = 1;
		if(Color == null) Color = -1;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.flash(Color,Duration,OnComplete,Force);
		}
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) Force = false;
		if(FadeIn == null) FadeIn = false;
		if(Duration == null) Duration = 1;
		if(Color == null) Color = -16777216;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.fade(Color,Duration,FadeIn,OnComplete,Force);
		}
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Direction) {
		if(Direction == null) Direction = 0;
		if(Force == null) Force = true;
		if(Duration == null) Duration = 0.5;
		if(Intensity == null) Intensity = 0.05;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.shake(Intensity,Duration,OnComplete,Force,Direction);
		}
	}
	,lock: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) continue;
			camera.checkResize();
			if(this.useBufferLocking) camera.buffer.lock();
			camera.fill(camera.bgColor,camera.useBgAlphaBlending);
			camera.screen.dirty = true;
		}
	}
	,unlock: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) continue;
			camera.drawFX();
			if(this.useBufferLocking) camera.buffer.unlock();
			camera.screen.dirty = true;
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera != null && camera.exists) {
				if(camera.active) camera.update();
				camera.flashSprite.set_x(camera.x + camera._flashOffset.x);
				camera.flashSprite.set_y(camera.y + camera._flashOffset.y);
				camera.flashSprite.set_visible(camera.visible);
			}
		}
	}
	,get_bgColor: function() {
		if(flixel_FlxG.camera == null) return -16777216; else return flixel_FlxG.camera.bgColor;
	}
	,set_bgColor: function(Color) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.bgColor = Color;
		}
		return Color;
	}
	,__class__: flixel_system_frontEnds_CameraFrontEnd
	,__properties__: {set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl_geom_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl_geom_Rectangle();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new openfl_geom_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var flixel_system_frontEnds_ConsoleFrontEnd = function() {
	this.autoPause = true;
};
$hxClasses["flixel.system.frontEnds.ConsoleFrontEnd"] = flixel_system_frontEnds_ConsoleFrontEnd;
flixel_system_frontEnds_ConsoleFrontEnd.__name__ = ["flixel","system","frontEnds","ConsoleFrontEnd"];
flixel_system_frontEnds_ConsoleFrontEnd.prototype = {
	autoPause: null
	,registerFunction: function(FunctionAlias,Function) {
	}
	,registerObject: function(ObjectAlias,AnyObject) {
	}
	,addCommand: function(Aliases,ProcessFunction,Help,ParamHelp,NumParams,ParamCutoff) {
		if(ParamCutoff == null) ParamCutoff = -1;
		if(NumParams == null) NumParams = 0;
	}
	,__class__: flixel_system_frontEnds_ConsoleFrontEnd
};
var flixel_system_frontEnds_DebuggerFrontEnd = function() {
	this.visible = false;
	this.drawDebug = false;
	this.precision = 3;
	this.toggleKeys = ["GRAVEACCENT","BACKSLASH"];
	this.drawDebugChanged = new flixel_util__$FlxSignal_FlxSignal0();
};
$hxClasses["flixel.system.frontEnds.DebuggerFrontEnd"] = flixel_system_frontEnds_DebuggerFrontEnd;
flixel_system_frontEnds_DebuggerFrontEnd.__name__ = ["flixel","system","frontEnds","DebuggerFrontEnd"];
flixel_system_frontEnds_DebuggerFrontEnd.prototype = {
	precision: null
	,toggleKeys: null
	,drawDebug: null
	,drawDebugChanged: null
	,visible: null
	,setLayout: function(Layout) {
	}
	,resetLayout: function() {
	}
	,addButton: function(Alignment,Icon,UpHandler,ToggleMode,UpdateLayout) {
		if(UpdateLayout == null) UpdateLayout = true;
		if(ToggleMode == null) ToggleMode = false;
		return null;
	}
	,track: function(Object,WindowTitle) {
		return null;
	}
	,addTrackerProfile: function(Profile) {
	}
	,removeButton: function(Button,UpdateLayout) {
		if(UpdateLayout == null) UpdateLayout = true;
	}
	,set_drawDebug: function(Value) {
		return this.drawDebug = Value;
	}
	,set_visible: function(Value) {
		return this.visible = Value;
	}
	,__class__: flixel_system_frontEnds_DebuggerFrontEnd
	,__properties__: {set_visible:"set_visible",set_drawDebug:"set_drawDebug"}
};
var flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$ = {};
$hxClasses["flixel.util._FlxSignal.FlxTypedSignal_Impl_"] = flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$;
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.__name__ = ["flixel","util","_FlxSignal","FlxTypedSignal_Impl_"];
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.__properties__ = {get_dispatch:"get_dispatch"}
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$._new = null;
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.add = function(this1,listener) {
	this1.add(listener);
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.addOnce = function(this1,listener) {
	this1.addOnce(listener);
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.remove = function(this1,listener) {
	this1.remove(listener);
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.has = function(this1,listener) {
	return this1.has(listener);
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.removeAll = function(this1) {
	this1.removeAll();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.get_dispatch = function(this1) {
	return this1.dispatch;
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal0 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal0();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal1 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal1();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal2 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal2();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal3 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal3();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal4 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal4();
};
var flixel_system_frontEnds_HTML5FrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.HTML5FrontEnd"] = flixel_system_frontEnds_HTML5FrontEnd;
flixel_system_frontEnds_HTML5FrontEnd.__name__ = ["flixel","system","frontEnds","HTML5FrontEnd"];
flixel_system_frontEnds_HTML5FrontEnd.prototype = {
	browserPosition: null
	,get_browser: function() {
		if(window.navigator.userAgent.indexOf(" OPR/") > -1) return "Opera"; else if(window.navigator.userAgent.toLowerCase().indexOf("chrome") > -1) return "Chrome"; else if(window.navigator.appName == "Netscape") return "Firefox"; else if(!(!document.documentMode)) return "Internet Explorer"; else if(Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor") > 0) return "Safari";
		return "Unknown";
	}
	,get_browserPosition: function() {
		if(this.browserPosition == null) this.browserPosition = flixel_util_FlxPoint.get(0,0);
		this.browserPosition.set(window.screenX,window.screenY);
		return this.browserPosition;
	}
	,get_browserWidth: function() {
		return window.innerWidth;
	}
	,get_browserHeight: function() {
		return window.innerHeight;
	}
	,__class__: flixel_system_frontEnds_HTML5FrontEnd
	,__properties__: {get_browserPosition:"get_browserPosition",get_browserHeight:"get_browserHeight",get_browserWidth:"get_browserWidth",get_browser:"get_browser"}
};
var flixel_system_frontEnds_InputFrontEnd = function() {
	this.list = [];
};
$hxClasses["flixel.system.frontEnds.InputFrontEnd"] = flixel_system_frontEnds_InputFrontEnd;
flixel_system_frontEnds_InputFrontEnd.__name__ = ["flixel","system","frontEnds","InputFrontEnd"];
flixel_system_frontEnds_InputFrontEnd.prototype = {
	replace_flixel_input_mouse_FlxMouse: function(Old,New) {
		var i = 0;
		var success = false;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input == Old) {
				this.list[i] = New;
				success = true;
				break;
			}
			i++;
		}
		if(success) return New;
		return null;
	}
	,add_flixel_input_gamepad_FlxGamepadManager: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Input,input,null)) return Input;
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_touch_FlxTouchManager: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Input,input,null)) return Input;
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_mouse_FlxMouse: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Input,input,null)) return Input;
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_keyboard_FlxKeyboard: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Input,input,null)) return Input;
		}
		this.list.push(Input);
		return Input;
	}
	,list: null
	,reset: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.reset();
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.update();
		}
	}
	,onFocus: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocus();
		}
	}
	,onFocusLost: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocusLost();
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.destroy();
			input = null;
		}
	}
	,__class__: flixel_system_frontEnds_InputFrontEnd
};
var flixel_system_frontEnds_LogFrontEnd = function() {
	this.redirectTraces = false;
	this._standardTraceFunction = haxe_Log.trace;
};
$hxClasses["flixel.system.frontEnds.LogFrontEnd"] = flixel_system_frontEnds_LogFrontEnd;
flixel_system_frontEnds_LogFrontEnd.__name__ = ["flixel","system","frontEnds","LogFrontEnd"];
flixel_system_frontEnds_LogFrontEnd.prototype = {
	redirectTraces: null
	,_standardTraceFunction: null
	,add: function(Data) {
	}
	,warn: function(Data) {
	}
	,error: function(Data) {
	}
	,notice: function(Data) {
	}
	,advanced: function(Data,Style,FireOnce) {
		if(FireOnce == null) FireOnce = false;
	}
	,clear: function() {
	}
	,set_redirectTraces: function(Redirect) {
		if(Redirect) haxe_Log.trace = $bind(this,this.processTraceData); else haxe_Log.trace = this._standardTraceFunction;
		return this.redirectTraces = Redirect;
	}
	,processTraceData: function(Data,Info) {
		var paramArray = [Data];
		if(Info.customParams != null) {
			var _g = 0;
			var _g1 = Info.customParams;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				paramArray.push(i);
			}
		}
		this.advanced(paramArray,flixel_system_debug_LogStyle.NORMAL);
	}
	,__class__: flixel_system_frontEnds_LogFrontEnd
	,__properties__: {set_redirectTraces:"set_redirectTraces"}
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js_Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) d.innerHTML = "";
};
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return (Function("return typeof " + name + " != \"undefined\" ? " + name + " : null"))();
};
var flixel_system_frontEnds_PluginFrontEnd = function() {
	this.list = [];
	this.add_flixel_plugin_PathManager(flixel_util_FlxPath.manager = new flixel_plugin_PathManager());
	this.add_flixel_plugin_TimerManager(flixel_util_FlxTimer.manager = new flixel_plugin_TimerManager());
	this.add_flixel_plugin_TweenManager(flixel_tweens_FlxTween.manager = new flixel_plugin_TweenManager());
};
$hxClasses["flixel.system.frontEnds.PluginFrontEnd"] = flixel_system_frontEnds_PluginFrontEnd;
flixel_system_frontEnds_PluginFrontEnd.__name__ = ["flixel","system","frontEnds","PluginFrontEnd"];
flixel_system_frontEnds_PluginFrontEnd.prototype = {
	add_flixel_addons_plugin_FlxMouseControl: function(Plugin) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Plugin,plugin,null)) return Plugin;
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,add_flixel_plugin_MouseEventManager: function(Plugin) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Plugin,plugin,null)) return Plugin;
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,add_flixel_plugin_TweenManager: function(Plugin) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Plugin,plugin,null)) return Plugin;
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,add_flixel_plugin_TimerManager: function(Plugin) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Plugin,plugin,null)) return Plugin;
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,add_flixel_plugin_PathManager: function(Plugin) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.sameClassName(Plugin,plugin,null)) return Plugin;
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,list: null
	,get: function(ClassType) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(plugin,ClassType)) return plugin;
		}
		return null;
	}
	,remove: function(Plugin) {
		var i = this.list.length - 1;
		while(i >= 0) {
			if(this.list[i] == Plugin) {
				this.list.splice(i,1);
				return Plugin;
			}
			i--;
		}
		return Plugin;
	}
	,removeType: function(ClassType) {
		var results = false;
		var i = this.list.length - 1;
		while(i >= 0) {
			if(js_Boot.__instanceof(this.list[i],ClassType)) {
				this.list.splice(i,1);
				results = true;
			}
			i--;
		}
		return results;
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.active) plugin.update();
		}
	}
	,draw: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.visible) plugin.draw();
		}
	}
	,onStateSwitch: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists) plugin.onStateSwitch();
		}
	}
	,onResize: function(Width,Height) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists) plugin.onResize(Width,Height);
		}
	}
	,__class__: flixel_system_frontEnds_PluginFrontEnd
};
var flixel_util_FlxPath = function(Object,Nodes,Speed,Mode,AutoRotate) {
	if(AutoRotate == null) AutoRotate = false;
	if(Mode == null) Mode = 0;
	if(Speed == null) Speed = 100;
	this._inManager = false;
	this._autoRotate = false;
	this._inc = 1;
	this._nodeIndex = 0;
	this.finished = false;
	this.active = true;
	this.autoCenter = true;
	this.angle = 0;
	this.speed = 0;
	if(Object != null) this.start(Object,Nodes,Speed,Mode,AutoRotate);
};
$hxClasses["flixel.util.FlxPath"] = flixel_util_FlxPath;
flixel_util_FlxPath.__name__ = ["flixel","util","FlxPath"];
flixel_util_FlxPath.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util_FlxPath.manager = null;
flixel_util_FlxPath.prototype = {
	nodes: null
	,object: null
	,speed: null
	,angle: null
	,autoCenter: null
	,active: null
	,onComplete: null
	,finished: null
	,_nodeIndex: null
	,_mode: null
	,_inc: null
	,_autoRotate: null
	,_inManager: null
	,reset: function() {
		this.autoCenter = true;
		return this;
	}
	,start: function(Object,Nodes,Speed,Mode,AutoRotate) {
		if(AutoRotate == null) AutoRotate = false;
		if(Mode == null) Mode = 0;
		if(Speed == null) Speed = 100;
		this.object = Object;
		this.nodes = Nodes;
		this.speed = Math.abs(Speed);
		this._mode = Mode;
		this._autoRotate = AutoRotate;
		this.restart();
		return this;
	}
	,restart: function() {
		if(flixel_util_FlxPath.manager != null && !this._inManager) {
			flixel_util_FlxPath.manager.add(this);
			this._inManager = true;
		}
		this.finished = false;
		this.active = true;
		if(this.nodes.length <= 0) this.active = false;
		if(this._mode == 1 || this._mode == 256) {
			this._nodeIndex = this.nodes.length - 1;
			this._inc = -1;
		} else {
			this._nodeIndex = 0;
			this._inc = 1;
		}
		this.object.set_immovable(true);
		return this;
	}
	,setNode: function(NodeIndex) {
		if(NodeIndex < 0) NodeIndex = 0; else if(NodeIndex > this.nodes.length - 1) NodeIndex = this.nodes.length - 1;
		this._nodeIndex = NodeIndex;
		this.advancePath();
	}
	,update: function() {
		flixel_util_FlxPath._point.set_x(this.object.x);
		flixel_util_FlxPath._point.set_y(this.object.y);
		if(this.autoCenter) {
			var _g = flixel_util_FlxPath._point;
			_g.set_x(_g.x + this.object.get_width() * 0.5);
			var _g1 = flixel_util_FlxPath._point;
			_g1.set_y(_g1.y + this.object.get_height() * 0.5);
		}
		var node = this.nodes[this._nodeIndex];
		var deltaX = node.x - flixel_util_FlxPath._point.x;
		var deltaY = node.y - flixel_util_FlxPath._point.y;
		var horizontalOnly = (this._mode & 65536) > 0;
		var verticalOnly = (this._mode & 1048576) > 0;
		if(horizontalOnly) {
			if((deltaX > 0?deltaX:-deltaX) < this.speed * flixel_FlxG.elapsed) node = this.advancePath();
		} else if(verticalOnly) {
			if((deltaY > 0?deltaY:-deltaY) < this.speed * flixel_FlxG.elapsed) node = this.advancePath();
		} else if(Math.sqrt(deltaX * deltaX + deltaY * deltaY) < this.speed * flixel_FlxG.elapsed) node = this.advancePath();
		if(this.speed != 0) {
			flixel_util_FlxPath._point.set_x(this.object.x);
			flixel_util_FlxPath._point.set_y(this.object.y);
			if(this.autoCenter) {
				var _g2 = flixel_util_FlxPath._point;
				_g2.set_x(_g2.x + this.object.get_width() * 0.5);
				var _g3 = flixel_util_FlxPath._point;
				_g3.set_y(_g3.y + this.object.get_height() * 0.5);
			}
			if(horizontalOnly || flixel_util_FlxPath._point.y == node.y) {
				this.object.velocity.set_x(flixel_util_FlxPath._point.x < node.x?this.speed:-this.speed);
				if(this.object.velocity.x < 0) this.angle = -90; else this.angle = 90;
				if(!horizontalOnly) this.object.velocity.set_y(0);
			} else if(verticalOnly || flixel_util_FlxPath._point.x == node.x) {
				this.object.velocity.set_y(flixel_util_FlxPath._point.y < node.y?this.speed:-this.speed);
				if(this.object.velocity.y < 0) this.angle = 0; else this.angle = 180;
				if(!verticalOnly) this.object.velocity.set_x(0);
			} else {
				this.object.velocity.set_x(flixel_util_FlxPath._point.x < node.x?this.speed:-this.speed);
				this.object.velocity.set_y(flixel_util_FlxPath._point.y < node.y?this.speed:-this.speed);
				this.angle = flixel_util_FlxAngle.getAngle(flixel_util_FlxPath._point,node);
				flixel_util_FlxAngle.rotatePoint(0,this.speed,0,0,this.angle,this.object.velocity);
			}
			if(this._autoRotate) {
				this.object.angularVelocity = 0;
				this.object.angularAcceleration = 0;
				this.object.set_angle(this.angle);
			}
			if(this.finished) this.cancel();
		}
	}
	,advancePath: function(Snap) {
		if(Snap == null) Snap = true;
		if(Snap) {
			var oldNode = this.nodes[this._nodeIndex];
			if(oldNode != null) {
				if((this._mode & 1048576) == 0) {
					this.object.set_x(oldNode.x);
					if(this.autoCenter) {
						var _g = this.object;
						_g.set_x(_g.x - this.object.get_width() * 0.5);
					}
				}
				if((this._mode & 65536) == 0) {
					this.object.set_y(oldNode.y);
					if(this.autoCenter) {
						var _g1 = this.object;
						_g1.set_y(_g1.y - this.object.get_height() * 0.5);
					}
				}
			}
		}
		var callComplete = false;
		this._nodeIndex += this._inc;
		if((this._mode & 1) > 0) {
			if(this._nodeIndex < 0) {
				this._nodeIndex = 0;
				this.finished = callComplete = true;
			}
		} else if((this._mode & 16) > 0) {
			if(this._nodeIndex >= this.nodes.length) {
				callComplete = true;
				this._nodeIndex = 0;
			}
		} else if((this._mode & 256) > 0) {
			if(this._nodeIndex < 0) {
				this._nodeIndex = this.nodes.length - 1;
				callComplete = true;
				if(this._nodeIndex < 0) this._nodeIndex = 0;
			}
		} else if((this._mode & 4096) > 0) {
			if(this._inc > 0) {
				if(this._nodeIndex >= this.nodes.length) {
					this._nodeIndex = this.nodes.length - 2;
					callComplete = true;
					if(this._nodeIndex < 0) this._nodeIndex = 0;
					this._inc = -this._inc;
				}
			} else if(this._nodeIndex < 0) {
				this._nodeIndex = 1;
				callComplete = true;
				if(this._nodeIndex >= this.nodes.length) this._nodeIndex = this.nodes.length - 1;
				if(this._nodeIndex < 0) this._nodeIndex = 0;
				this._inc = -this._inc;
			}
		} else if(this._nodeIndex >= this.nodes.length) {
			this._nodeIndex = this.nodes.length - 1;
			this.finished = callComplete = true;
		}
		if(callComplete && this.onComplete != null) this.onComplete(this);
		return this.nodes[this._nodeIndex];
	}
	,cancel: function() {
		this.finished = true;
		if(this.object != null) this.object.velocity.set(0,0);
		if(flixel_util_FlxPath.manager != null && this._inManager) {
			flixel_util_FlxPath.manager.remove(this);
			this._inManager = false;
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.nodes;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			point = flixel_util_FlxDestroyUtil.put(point);
		}
		this.nodes = null;
		this.object = null;
		this.onComplete = null;
	}
	,add: function(X,Y) {
		this.nodes.push(flixel_util_FlxPoint.get(X,Y));
		return this;
	}
	,addAt: function(X,Y,Index) {
		if(Index < 0) return this;
		if(Index > this.nodes.length) Index = this.nodes.length;
		var x = flixel_util_FlxPoint.get(X,Y);
		this.nodes.splice(Index,0,x);
		return this;
	}
	,addPoint: function(Node,AsReference) {
		if(AsReference == null) AsReference = false;
		if(AsReference) this.nodes.push(Node); else this.nodes.push(flixel_util_FlxPoint.get(Node.x,Node.y));
		return this;
	}
	,addPointAt: function(Node,Index,AsReference) {
		if(AsReference == null) AsReference = false;
		if(Index < 0) return this;
		if(Index > this.nodes.length) Index = this.nodes.length;
		if(AsReference) this.nodes.splice(Index,0,Node); else {
			var x = flixel_util_FlxPoint.get(Node.x,Node.y);
			this.nodes.splice(Index,0,x);
		}
		return this;
	}
	,remove: function(Node) {
		var index = HxOverrides.indexOf(this.nodes,Node,0);
		if(index >= 0) return this.nodes.splice(index,1)[0]; else return null;
	}
	,removeAt: function(Index) {
		if(this.nodes.length <= 0) return null;
		if(Index >= this.nodes.length) Index = this.nodes.length - 1;
		return this.nodes.splice(Index,1)[0];
	}
	,head: function() {
		if(this.nodes.length > 0) return this.nodes[0];
		return null;
	}
	,tail: function() {
		if(this.nodes.length > 0) return this.nodes[this.nodes.length - 1];
		return null;
	}
	,__class__: flixel_util_FlxPath
};
var flixel_plugin_FlxPlugin = function() {
	flixel_FlxBasic.call(this);
};
$hxClasses["flixel.plugin.FlxPlugin"] = flixel_plugin_FlxPlugin;
flixel_plugin_FlxPlugin.__name__ = ["flixel","plugin","FlxPlugin"];
flixel_plugin_FlxPlugin.__super__ = flixel_FlxBasic;
flixel_plugin_FlxPlugin.prototype = $extend(flixel_FlxBasic.prototype,{
	onStateSwitch: function() {
	}
	,onResize: function(Width,Height) {
	}
	,__class__: flixel_plugin_FlxPlugin
});
var flixel_plugin_PathManager = function() {
	this._paths = [];
	flixel_plugin_FlxPlugin.call(this);
};
$hxClasses["flixel.plugin.PathManager"] = flixel_plugin_PathManager;
flixel_plugin_PathManager.__name__ = ["flixel","plugin","PathManager"];
flixel_plugin_PathManager.__super__ = flixel_plugin_FlxPlugin;
flixel_plugin_PathManager.prototype = $extend(flixel_plugin_FlxPlugin.prototype,{
	_paths: null
	,destroy: function() {
		flixel_util_FlxArrayUtil.clearArray(this._paths);
		this._paths = null;
		flixel_plugin_FlxPlugin.prototype.destroy.call(this);
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._paths;
		while(_g < _g1.length) {
			var path = _g1[_g];
			++_g;
			if(path.active) path.update();
		}
	}
	,add: function(Path) {
		this._paths.push(Path);
	}
	,remove: function(Path,ReturnInPool) {
		if(ReturnInPool == null) ReturnInPool = true;
		flixel_util_FlxArrayUtil.fastSplice_flixel_util_FlxPath(this._paths,Path);
	}
	,clear: function() {
		flixel_util_FlxArrayUtil.clearArray(this._paths);
	}
	,onStateSwitch: function() {
		flixel_util_FlxArrayUtil.clearArray(this._paths);
	}
	,__class__: flixel_plugin_PathManager
});
var flixel_util_FlxTimer = function(Time,Callback,Loops) {
	if(Loops == null) Loops = 1;
	this._inManager = false;
	this._loopsCounter = 0;
	this._timeCounter = 0;
	this.finished = false;
	this.active = true;
	this.loops = 0;
	this.time = 0;
	if(Time != null) this.start(Time,Callback,Loops);
};
$hxClasses["flixel.util.FlxTimer"] = flixel_util_FlxTimer;
flixel_util_FlxTimer.__name__ = ["flixel","util","FlxTimer"];
flixel_util_FlxTimer.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util_FlxTimer.manager = null;
flixel_util_FlxTimer.prototype = {
	time: null
	,loops: null
	,active: null
	,finished: null
	,complete: null
	,_timeCounter: null
	,_loopsCounter: null
	,_inManager: null
	,destroy: function() {
		this.complete = null;
	}
	,start: function(Time,Callback,Loops) {
		if(Loops == null) Loops = 1;
		if(Time == null) Time = 1;
		if(flixel_util_FlxTimer.manager != null && !this._inManager) {
			flixel_util_FlxTimer.manager.add(this);
			this._inManager = true;
		}
		this.active = true;
		this.finished = false;
		this.time = Math.abs(Time);
		if(Loops < 0) Loops *= -1;
		this.loops = Loops;
		this.complete = Callback;
		this._timeCounter = 0;
		this._loopsCounter = 0;
		return this;
	}
	,reset: function(NewTime) {
		if(NewTime == null) NewTime = -1;
		if(NewTime < 0) NewTime = this.time;
		this.start(NewTime,this.complete,this.loops);
		return this;
	}
	,cancel: function() {
		this.finished = true;
		if(flixel_util_FlxTimer.manager != null && this._inManager) {
			flixel_util_FlxTimer.manager.remove(this);
			this._inManager = false;
		}
	}
	,update: function() {
		this._timeCounter += flixel_FlxG.elapsed;
		while(this._timeCounter >= this.time && this.active && !this.finished) {
			this._timeCounter -= this.time;
			this._loopsCounter++;
			if(this.complete != null) this.complete(this);
			if(this.loops > 0 && this._loopsCounter >= this.loops) this.cancel();
		}
	}
	,get_timeLeft: function() {
		return this.time - this._timeCounter;
	}
	,get_elapsedTime: function() {
		return this._timeCounter;
	}
	,get_loopsLeft: function() {
		return this.loops - this._loopsCounter;
	}
	,get_elapsedLoops: function() {
		return this._loopsCounter;
	}
	,get_progress: function() {
		if(this.time > 0) return this._timeCounter / this.time; else return 0;
	}
	,__class__: flixel_util_FlxTimer
	,__properties__: {get_progress:"get_progress",get_elapsedLoops:"get_elapsedLoops",get_loopsLeft:"get_loopsLeft",get_elapsedTime:"get_elapsedTime",get_timeLeft:"get_timeLeft"}
};
var flixel_plugin_TimerManager = function() {
	flixel_plugin_FlxPlugin.call(this);
	this._timers = [];
	this.set_visible(false);
};
$hxClasses["flixel.plugin.TimerManager"] = flixel_plugin_TimerManager;
flixel_plugin_TimerManager.__name__ = ["flixel","plugin","TimerManager"];
flixel_plugin_TimerManager.__super__ = flixel_plugin_FlxPlugin;
flixel_plugin_TimerManager.prototype = $extend(flixel_plugin_FlxPlugin.prototype,{
	_timers: null
	,destroy: function() {
		flixel_util_FlxArrayUtil.clearArray(this._timers);
		this._timers = null;
		flixel_plugin_FlxPlugin.prototype.destroy.call(this);
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._timers;
		while(_g < _g1.length) {
			var timer = _g1[_g];
			++_g;
			if(timer.active && !timer.finished && timer.time >= 0) timer.update();
		}
	}
	,add: function(Timer) {
		this._timers.push(Timer);
	}
	,remove: function(Timer) {
		flixel_util_FlxArrayUtil.fastSplice_flixel_util_FlxTimer(this._timers,Timer);
	}
	,clear: function() {
		flixel_util_FlxArrayUtil.clearArray(this._timers);
	}
	,onStateSwitch: function() {
		flixel_util_FlxArrayUtil.clearArray(this._timers);
	}
	,__class__: flixel_plugin_TimerManager
});
var flixel_tweens_FlxTween = function(Options) {
	this._delayToUse = 0;
	this._secondsSinceStart = 0;
	this.loopDelay = 0;
	this.startDelay = 0;
	this.executions = 0;
	this.duration = 0;
	this.active = true;
	Options = this.resolveTweenOptions(Options);
	this.set_type(Options.type);
	this.complete = Options.complete;
	this.ease = Options.ease;
	this.setDelays(Options.startDelay,Options.loopDelay);
};
$hxClasses["flixel.tweens.FlxTween"] = flixel_tweens_FlxTween;
flixel_tweens_FlxTween.__name__ = ["flixel","tweens","FlxTween"];
flixel_tweens_FlxTween.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_tweens_FlxTween.manager = null;
flixel_tweens_FlxTween.tween = function(Object,Values,Duration,Options) {
	if(Duration == null) Duration = 1;
	var tween = new flixel_tweens_misc_VarTween(Options);
	tween.tween(Object,Values,Duration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_misc_VarTween(tween);
};
flixel_tweens_FlxTween.num = function(FromValue,ToValue,Duration,Options,TweenFunction) {
	if(Duration == null) Duration = 1;
	var tween = new flixel_tweens_misc_NumTween(Options);
	tween.tween(FromValue,ToValue,Duration,TweenFunction);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_misc_NumTween(tween);
};
flixel_tweens_FlxTween.angle = function(Sprite,FromAngle,ToAngle,Duration,Options) {
	if(Duration == null) Duration = 1;
	var tween = new flixel_tweens_misc_AngleTween(Options);
	tween.tween(FromAngle,ToAngle,Duration,Sprite);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_misc_AngleTween(tween);
};
flixel_tweens_FlxTween.color = function(Sprite,Duration,FromColor,ToColor,FromAlpha,ToAlpha,Options) {
	if(ToAlpha == null) ToAlpha = 1;
	if(FromAlpha == null) FromAlpha = 1;
	if(Duration == null) Duration = 1;
	var tween = new flixel_tweens_misc_ColorTween(Options);
	tween.tween(Duration,FromColor,ToColor,FromAlpha,ToAlpha,Sprite);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_misc_ColorTween(tween);
};
flixel_tweens_FlxTween.linearMotion = function(Object,FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(DurationOrSpeed == null) DurationOrSpeed = 1;
	var tween = new flixel_tweens_motion_LinearMotion(Options);
	tween.setObject(Object);
	tween.setMotion(FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_motion_LinearMotion(tween);
};
flixel_tweens_FlxTween.quadMotion = function(Object,FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(DurationOrSpeed == null) DurationOrSpeed = 1;
	var tween = new flixel_tweens_motion_QuadMotion(Options);
	tween.setObject(Object);
	tween.setMotion(FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_motion_QuadMotion(tween);
};
flixel_tweens_FlxTween.cubicMotion = function(Object,FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration,Options) {
	if(Duration == null) Duration = 1;
	var tween = new flixel_tweens_motion_CubicMotion(Options);
	tween.setObject(Object);
	tween.setMotion(FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_motion_CubicMotion(tween);
};
flixel_tweens_FlxTween.circularMotion = function(Object,CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(DurationOrSpeed == null) DurationOrSpeed = 1;
	var tween = new flixel_tweens_motion_CircularMotion(Options);
	tween.setObject(Object);
	tween.setMotion(CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_motion_CircularMotion(tween);
};
flixel_tweens_FlxTween.linearPath = function(Object,Points,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(DurationOrSpeed == null) DurationOrSpeed = 1;
	var tween = new flixel_tweens_motion_LinearPath(Options);
	if(Points != null) {
		var _g = 0;
		while(_g < Points.length) {
			var point = Points[_g];
			++_g;
			tween.addPoint(point.x,point.y);
		}
	}
	tween.setObject(Object);
	tween.setMotion(DurationOrSpeed,UseDuration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_motion_LinearPath(tween);
};
flixel_tweens_FlxTween.quadPath = function(Object,Points,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) UseDuration = true;
	if(DurationOrSpeed == null) DurationOrSpeed = 1;
	var tween = new flixel_tweens_motion_QuadPath(Options);
	if(Points != null) {
		var _g = 0;
		while(_g < Points.length) {
			var point = Points[_g];
			++_g;
			tween.addPoint(point.x,point.y);
		}
	}
	tween.setObject(Object);
	tween.setMotion(DurationOrSpeed,UseDuration);
	return flixel_tweens_FlxTween.manager.add_flixel_tweens_motion_QuadPath(tween);
};
flixel_tweens_FlxTween.prototype = {
	active: null
	,duration: null
	,ease: null
	,complete: null
	,type: null
	,finished: null
	,scale: null
	,backward: null
	,executions: null
	,startDelay: null
	,loopDelay: null
	,_secondsSinceStart: null
	,_delayToUse: null
	,resolveTweenOptions: function(Options) {
		if(Options == null) Options = { type : 8};
		if(Options.type == null) Options.type = 8;
		return Options;
	}
	,destroy: function() {
		this.complete = null;
		this.ease = null;
	}
	,update: function() {
		this._secondsSinceStart += flixel_FlxG.elapsed;
		var delay;
		if(this.executions > 0) delay = this.loopDelay; else delay = this.startDelay;
		this.scale = Math.max(this._secondsSinceStart - delay,0) / this.duration;
		if(this.ease != null) this.scale = this.ease(this.scale);
		if(this.backward) this.scale = 1 - this.scale;
		if(this._secondsSinceStart >= this.duration + delay) {
			if(this.backward) this.scale = 0; else this.scale = 1;
			this.finished = true;
		}
	}
	,start: function() {
		this._secondsSinceStart = 0;
		if(this.executions > 0) this._delayToUse = this.loopDelay; else this._delayToUse = this.startDelay;
		if(this.duration == 0) {
			this.active = false;
			return this;
		}
		this.active = true;
		this.finished = false;
		return this;
	}
	,cancel: function() {
		this.active = false;
		this.finished = true;
		flixel_tweens_FlxTween.manager.remove(this);
	}
	,finish: function() {
		this.executions++;
		if(this.complete != null) this.complete(this);
		var _g = this.type & -17;
		switch(_g) {
		case 1:
			this._secondsSinceStart = this.duration + this.startDelay;
			this.active = false;
			this.finished = true;
			break;
		case 8:
			this.active = false;
			this.finished = true;
			this._secondsSinceStart = this.duration + this.startDelay;
			flixel_tweens_FlxTween.manager.remove(this);
			break;
		case 2:
			this._secondsSinceStart = (this._secondsSinceStart - this._delayToUse) % this.duration + this._delayToUse;
			this.scale = Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration;
			if(this.ease != null && this.scale > 0 && this.scale < 1) this.scale = this.ease(this.scale);
			this.start();
			break;
		case 4:
			this._secondsSinceStart = (this._secondsSinceStart - this._delayToUse) % this.duration + this._delayToUse;
			this.scale = Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration;
			if(this.ease != null && this.scale > 0 && this.scale < 1) this.scale = this.ease(this.scale);
			this.backward = !this.backward;
			if(this.backward) this.scale = 1 - this.scale;
			this.start();
			break;
		}
	}
	,setDelays: function(StartDelay,LoopDelay) {
		this.set_startDelay(StartDelay != null?StartDelay:0);
		this.set_loopDelay(LoopDelay != null?LoopDelay:0);
		return this;
	}
	,set_startDelay: function(value) {
		var dly = Math.abs(value);
		if(this.executions == 0) {
			this._secondsSinceStart = this.duration * (Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration) + Math.max(dly - this.startDelay,0);
			this._delayToUse = dly;
		}
		return this.startDelay = dly;
	}
	,set_loopDelay: function(value) {
		var dly = Math.abs(value);
		if(this.executions > 0) {
			this._secondsSinceStart = this.duration * (Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration) + Math.max(dly - this.loopDelay,0);
			this._delayToUse = dly;
		}
		return this.loopDelay = dly;
	}
	,get_percent: function() {
		return Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration;
	}
	,set_percent: function(value) {
		return this._secondsSinceStart = this.duration * value + this._delayToUse;
	}
	,set_type: function(value) {
		if(value == 0) value = 8; else if(value == 16) value = 17;
		this.backward = (value & 16) > 0;
		return this.type = value;
	}
	,__class__: flixel_tweens_FlxTween
	,__properties__: {set_loopDelay:"set_loopDelay",set_startDelay:"set_startDelay",set_percent:"set_percent",get_percent:"get_percent",set_type:"set_type"}
};
var flixel_plugin_TweenManager = function() {
	this._tweens = [];
	flixel_plugin_FlxPlugin.call(this);
	this.set_visible(false);
};
$hxClasses["flixel.plugin.TweenManager"] = flixel_plugin_TweenManager;
flixel_plugin_TweenManager.__name__ = ["flixel","plugin","TweenManager"];
flixel_plugin_TweenManager.__super__ = flixel_plugin_FlxPlugin;
flixel_plugin_TweenManager.prototype = $extend(flixel_plugin_FlxPlugin.prototype,{
	add_flixel_tweens_motion_QuadPath: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_motion_LinearPath: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_motion_CircularMotion: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_motion_CubicMotion: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_motion_QuadMotion: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_motion_LinearMotion: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_misc_ColorTween: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_misc_AngleTween: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_misc_NumTween: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,add_flixel_tweens_misc_VarTween: function(Tween,Start) {
		if(Start == null) Start = false;
		if(Tween == null) return null;
		this._tweens.push(Tween);
		if(Start) Tween.start();
		return Tween;
	}
	,_tweens: null
	,update: function() {
		var finishedTweens = null;
		var _g = 0;
		var _g1 = this._tweens;
		while(_g < _g1.length) {
			var tween = _g1[_g];
			++_g;
			if(tween.active) {
				tween.update();
				if(tween.finished) {
					if(finishedTweens == null) finishedTweens = [];
					finishedTweens.push(tween);
				}
			}
		}
		if(finishedTweens != null) while(finishedTweens.length > 0) finishedTweens.shift().finish();
	}
	,remove: function(Tween) {
		if(Tween == null) return null;
		Tween.active = false;
		Tween.destroy();
		flixel_util_FlxArrayUtil.fastSplice_flixel_tweens_FlxTween(this._tweens,Tween);
		return Tween;
	}
	,clear: function() {
		while(this._tweens.length > 0) this.remove(this._tweens[0]);
	}
	,onStateSwitch: function() {
		this.clear();
	}
	,__class__: flixel_plugin_TweenManager
});
var flixel_util_FlxSave = function() {
	this.destroy();
};
$hxClasses["flixel.util.FlxSave"] = flixel_util_FlxSave;
flixel_util_FlxSave.__name__ = ["flixel","util","FlxSave"];
flixel_util_FlxSave.prototype = {
	data: null
	,name: null
	,_sharedObject: null
	,_onComplete: null
	,_closeRequested: null
	,destroy: function() {
		this._sharedObject = null;
		this.name = null;
		this.data = null;
		this._onComplete = null;
		this._closeRequested = false;
	}
	,bind: function(Name) {
		this.destroy();
		this.name = Name;
		try {
			this._sharedObject = openfl_net_SharedObject.getLocal(this.name);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				this.destroy();
				return false;
			} else throw(e);
		}
		this.data = this._sharedObject.data;
		return true;
	}
	,close: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) MinFileSize = 0;
		this._closeRequested = true;
		return this.flush(MinFileSize,OnComplete);
	}
	,flush: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) MinFileSize = 0;
		if(!this.checkBinding()) return false;
		this._onComplete = OnComplete;
		var result;
		try {
			result = this._sharedObject.flush();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				return this.onDone(flixel_util_FlxSave.ERROR);
			} else throw(e);
		}
		if(result == openfl_net_SharedObjectFlushStatus.PENDING) {
		}
		return this.onDone(result == openfl_net_SharedObjectFlushStatus.FLUSHED?flixel_util_FlxSave.SUCCESS:flixel_util_FlxSave.PENDING);
	}
	,erase: function() {
		if(!this.checkBinding()) return false;
		this._sharedObject.clear();
		this.data = { };
		return true;
	}
	,onDone: function(Result) {
		switch(Result) {
		case 1:
			null;
			break;
		case 2:
			null;
			break;
		}
		if(this._onComplete != null) this._onComplete(Result == flixel_util_FlxSave.SUCCESS);
		if(this._closeRequested) this.destroy();
		return Result == flixel_util_FlxSave.SUCCESS;
	}
	,checkBinding: function() {
		if(this._sharedObject == null) return false;
		return true;
	}
	,__class__: flixel_util_FlxSave
};
var flixel_system_frontEnds_SignalFrontEnd = function() {
	this.stateSwitched = new flixel_util__$FlxSignal_FlxSignal0();
	this.gameResized = new flixel_util__$FlxSignal_FlxSignal2();
	this.gameReset = new flixel_util__$FlxSignal_FlxSignal0();
	this.gameStarted = new flixel_util__$FlxSignal_FlxSignal0();
	this.preUpdate = new flixel_util__$FlxSignal_FlxSignal0();
	this.postUpdate = new flixel_util__$FlxSignal_FlxSignal0();
	this.preDraw = new flixel_util__$FlxSignal_FlxSignal0();
	this.postDraw = new flixel_util__$FlxSignal_FlxSignal0();
	this.focusGained = new flixel_util__$FlxSignal_FlxSignal0();
	this.focusLost = new flixel_util__$FlxSignal_FlxSignal0();
};
$hxClasses["flixel.system.frontEnds.SignalFrontEnd"] = flixel_system_frontEnds_SignalFrontEnd;
flixel_system_frontEnds_SignalFrontEnd.__name__ = ["flixel","system","frontEnds","SignalFrontEnd"];
flixel_system_frontEnds_SignalFrontEnd.prototype = {
	stateSwitched: null
	,gameResized: null
	,gameReset: null
	,gameStarted: null
	,preUpdate: null
	,postUpdate: null
	,preDraw: null
	,postDraw: null
	,focusGained: null
	,focusLost: null
	,__class__: flixel_system_frontEnds_SignalFrontEnd
};
var flixel_system_frontEnds_SoundFrontEnd = function() {
	this.volume = 1;
	this.soundTrayEnabled = true;
	this.muted = false;
	this.volumeUpKeys = ["PLUS","NUMPADPLUS"];
	this.volumeDownKeys = ["MINUS","NUMPADMINUS"];
	this.muteKeys = ["ZERO","NUMPADZERO"];
	this.list = new flixel_group_FlxTypedGroup();
	this._soundCache = new haxe_ds_StringMap();
};
$hxClasses["flixel.system.frontEnds.SoundFrontEnd"] = flixel_system_frontEnds_SoundFrontEnd;
flixel_system_frontEnds_SoundFrontEnd.__name__ = ["flixel","system","frontEnds","SoundFrontEnd"];
flixel_system_frontEnds_SoundFrontEnd.prototype = {
	music: null
	,muted: null
	,volumeHandler: null
	,volumeUpKeys: null
	,volumeDownKeys: null
	,muteKeys: null
	,soundTrayEnabled: null
	,list: null
	,volume: null
	,_soundCache: null
	,playMusic: function(Music,Volume,Looped) {
		if(Looped == null) Looped = true;
		if(Volume == null) Volume = 1;
		if(this.music == null) this.music = new flixel_system_FlxSound(); else if(this.music.active) this.music.stop();
		this.music.loadEmbedded(Music,Looped);
		this.music.set_volume(Volume);
		this.music.persist = true;
		this.music.play();
	}
	,load: function(EmbeddedSound,Volume,Looped,AutoDestroy,AutoPlay,URL,OnComplete) {
		if(AutoPlay == null) AutoPlay = false;
		if(AutoDestroy == null) AutoDestroy = false;
		if(Looped == null) Looped = false;
		if(Volume == null) Volume = 1;
		if(EmbeddedSound == null && URL == null) return null;
		var sound = this.list.recycle(flixel_system_FlxSound);
		if(EmbeddedSound != null) sound.loadEmbedded(EmbeddedSound,Looped,AutoDestroy,OnComplete); else sound.loadStream(URL,Looped,AutoDestroy,OnComplete);
		sound.set_volume(Volume);
		if(AutoPlay) sound.play();
		return sound;
	}
	,cache: function(EmbeddedSound) {
		if(this._soundCache.exists(EmbeddedSound)) return this._soundCache.get(EmbeddedSound); else {
			var sound = openfl_Assets.getSound(EmbeddedSound);
			this._soundCache.set(EmbeddedSound,sound);
			return sound;
		}
	}
	,play: function(EmbeddedSound,Volume,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = true;
		if(Looped == null) Looped = false;
		if(Volume == null) Volume = 1;
		var sound = null;
		if(this._soundCache.exists(EmbeddedSound)) sound = this._soundCache.get(EmbeddedSound); else {
			sound = openfl_Assets.getSound(EmbeddedSound);
			this._soundCache.set(EmbeddedSound,sound);
		}
		var flixelSound = this.list.recycle(flixel_system_FlxSound).loadEmbedded(sound,Looped,AutoDestroy,OnComplete);
		flixelSound.set_volume(Volume);
		return flixelSound.play();
	}
	,stream: function(URL,Volume,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = true;
		if(Looped == null) Looped = false;
		if(Volume == null) Volume = 1;
		return this.load(null,Volume,Looped,AutoDestroy,true,URL,OnComplete);
	}
	,pause: function() {
		if(this.music != null && this.music.exists && this.music.active) this.music.pause();
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && sound.exists && sound.active) sound.pause();
		}
	}
	,resume: function() {
		if(this.music != null && this.music.exists) this.music.resume();
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && sound.exists) sound.resume();
		}
	}
	,destroy: function(ForceDestroy) {
		if(ForceDestroy == null) ForceDestroy = false;
		if(this.music != null && (ForceDestroy || !this.music.persist)) {
			this.music.destroy();
			this.music = null;
		}
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && (ForceDestroy || !sound.persist)) sound.destroy();
		}
	}
	,update: function() {
		if(this.music != null && this.music.active) this.music.update();
		if(this.list != null && this.list.active) this.list.update();
	}
	,onFocusLost: function() {
		if(this.music != null) this.music.onFocusLost();
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null) sound.onFocusLost();
		}
	}
	,onFocus: function() {
		if(this.music != null) this.music.onFocus();
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null) sound.onFocus();
		}
	}
	,loadSavedPrefs: function() {
		if(flixel_FlxG.save.data.volume != null) this.set_volume(flixel_FlxG.save.data.volume); else this.set_volume(0.5);
		if(flixel_FlxG.save.data.mute != null) this.muted = flixel_FlxG.save.data.mute; else this.muted = false;
	}
	,set_volume: function(Volume) {
		Volume = flixel_util_FlxMath.bound(Volume,0,1);
		if(this.volumeHandler != null) {
			var param;
			if(this.muted) param = 0; else param = Volume;
			this.volumeHandler(param);
		}
		return this.volume = Volume;
	}
	,__class__: flixel_system_frontEnds_SoundFrontEnd
	,__properties__: {set_volume:"set_volume"}
};
var flixel_system_frontEnds_VCRFrontEnd = function() {
	this.stepRequested = false;
	this.paused = false;
	this.timeout = 0;
};
$hxClasses["flixel.system.frontEnds.VCRFrontEnd"] = flixel_system_frontEnds_VCRFrontEnd;
flixel_system_frontEnds_VCRFrontEnd.__name__ = ["flixel","system","frontEnds","VCRFrontEnd"];
flixel_system_frontEnds_VCRFrontEnd.prototype = {
	replayCallback: null
	,cancelKeys: null
	,timeout: null
	,paused: null
	,stepRequested: null
	,pause: function() {
		if(!this.paused) {
			if(!flixel_FlxG.mouse.useSystemCursor) openfl_ui_Mouse.show();
			this.paused = true;
		}
	}
	,resume: function() {
		if(this.paused) {
			if(!flixel_FlxG.mouse.useSystemCursor) openfl_ui_Mouse.hide();
			this.paused = false;
		}
	}
	,restartReplay: function(StandardMode) {
		if(StandardMode == null) StandardMode = false;
		flixel_FlxG.vcr.reloadReplay(StandardMode);
	}
	,loadReplay: function(Data,State,CancelKeys,Timeout,Callback) {
		if(Timeout == null) Timeout = 0;
		flixel_FlxG.game._replay.load(Data);
		if(State == null) flixel_FlxG.game._resetGame = true; else flixel_FlxG.game._requestedState = State;
		this.cancelKeys = CancelKeys;
		this.timeout = Timeout * 1000 | 0;
		this.replayCallback = Callback;
		flixel_FlxG.game._replayRequested = true;
		flixel_FlxG.keys.enabled = false;
	}
	,reloadReplay: function(StandardMode) {
		if(StandardMode == null) StandardMode = true;
		if(StandardMode) flixel_FlxG.game._resetGame = true; else flixel_FlxG.switchState(Type.createInstance(Type.getClass(flixel_FlxG.game._state),[]));
		if(flixel_FlxG.game._replay.frameCount > 0) flixel_FlxG.game._replayRequested = true;
	}
	,stopReplay: function() {
		flixel_FlxG.game.replaying = false;
		flixel_FlxG.inputs.reset();
		flixel_FlxG.keys.enabled = true;
	}
	,startRecording: function(StandardMode) {
		if(StandardMode == null) StandardMode = true;
		flixel_util_FlxRandom._recordingSeed = flixel_util_FlxRandom.set_globalSeed(StandardMode?flixel_util_FlxRandom.globalSeed:flixel_util_FlxRandom._stateSeed);
		if(StandardMode) flixel_FlxG.game._resetGame = true; else flixel_FlxG.switchState(Type.createInstance(Type.getClass(flixel_FlxG.game._state),[]));
		flixel_FlxG.game._recordingRequested = true;
	}
	,stopRecording: function() {
		flixel_FlxG.game.recording = false;
		var data = flixel_FlxG.game._replay.save();
		if(data != null && data.length > 0) {
		}
		return data;
	}
	,onOpen: function() {
	}
	,destroy: function() {
		this.cancelKeys = null;
	}
	,onOpenSelect: function(E) {
	}
	,onOpenComplete: function(E) {
	}
	,onOpenCancel: function(E) {
	}
	,onOpenError: function(E) {
	}
	,onSaveComplete: function(E) {
	}
	,onSaveCancel: function(E) {
	}
	,onSaveError: function(E) {
	}
	,__class__: flixel_system_frontEnds_VCRFrontEnd
};
var flixel_system_frontEnds_WatchFrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.WatchFrontEnd"] = flixel_system_frontEnds_WatchFrontEnd;
flixel_system_frontEnds_WatchFrontEnd.__name__ = ["flixel","system","frontEnds","WatchFrontEnd"];
flixel_system_frontEnds_WatchFrontEnd.prototype = {
	add: function(AnyObject,VariableName,DisplayName) {
	}
	,remove: function(AnyObject,VariableName) {
	}
	,addQuick: function(Name,NewValue) {
	}
	,removeQuick: function(Name) {
	}
	,addMouse: function() {
	}
	,removeMouse: function() {
	}
	,__class__: flixel_system_frontEnds_WatchFrontEnd
};
var flixel_util_FlxRect = function(X,Y,Width,Height) {
	if(Height == null) Height = 0;
	if(Width == null) Width = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._inPool = false;
	this.x = X;
	this.y = Y;
	this.width = Width;
	this.height = Height;
	this;
};
$hxClasses["flixel.util.FlxRect"] = flixel_util_FlxRect;
flixel_util_FlxRect.__name__ = ["flixel","util","FlxRect"];
flixel_util_FlxRect.__interfaces__ = [flixel_interfaces_IFlxPooled];
flixel_util_FlxRect.get = function(X,Y,Width,Height) {
	if(Height == null) Height = 0;
	if(Width == null) Width = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	var rect = flixel_util_FlxRect._pool.get().set(X,Y,Width,Height);
	rect._inPool = false;
	return rect;
};
flixel_util_FlxRect.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,_inPool: null
	,put: function() {
		if(!this._inPool) {
			this._inPool = true;
			flixel_util_FlxRect._pool.putUnsafe(this);
		}
	}
	,setSize: function(Width,Height) {
		this.width = Width;
		this.height = Height;
		return this;
	}
	,set: function(X,Y,Width,Height) {
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,copyFrom: function(Rect) {
		this.x = Rect.x;
		this.y = Rect.y;
		this.width = Rect.width;
		this.height = Rect.height;
		return this;
	}
	,copyTo: function(Rect) {
		Rect.x = this.x;
		Rect.y = this.y;
		Rect.width = this.width;
		Rect.height = this.height;
		return Rect;
	}
	,copyFromFlash: function(FlashRect) {
		this.x = FlashRect.x;
		this.y = FlashRect.y;
		this.width = FlashRect.width;
		this.height = FlashRect.height;
		return this;
	}
	,copyToFlash: function(FlashRect) {
		FlashRect.x = this.x;
		FlashRect.y = this.y;
		FlashRect.width = this.width;
		FlashRect.height = this.height;
		return FlashRect;
	}
	,overlaps: function(Rect) {
		return Rect.x + Rect.width > this.x && Rect.x < this.x + this.width && Rect.y + Rect.height > this.y && Rect.y < this.y + this.height;
	}
	,containsFlxPoint: function(Point) {
		return flixel_util_FlxMath.pointInFlxRect(Point.x,Point.y,this);
	}
	,union: function(Rect) {
		var minX = Math.min(this.x,Rect.x);
		var minY = Math.min(this.y,Rect.y);
		var maxX = Math.max(this.x + this.width,Rect.x + Rect.width);
		var maxY = Math.max(this.y + this.height,Rect.y + Rect.height);
		this.x = minX;
		this.y = minY;
		this.width = maxX - minX;
		this.height = maxY - minY;
		return this;
	}
	,destroy: function() {
	}
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair._pool.get().create("x",this.x),flixel_util_LabelValuePair._pool.get().create("y",this.y),flixel_util_LabelValuePair._pool.get().create("w",this.width),flixel_util_LabelValuePair._pool.get().create("h",this.height)]);
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(Value) {
		this.width -= Value - this.x;
		return this.x = Value;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(Value) {
		this.width = Value - this.x;
		return Value;
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(Value) {
		this.height -= Value - this.y;
		return this.y = Value;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(Value) {
		this.height = Value - this.y;
		return Value;
	}
	,__class__: flixel_util_FlxRect
	,__properties__: {set_bottom:"set_bottom",get_bottom:"get_bottom",set_top:"set_top",get_top:"get_top",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left"}
};
var flixel_FlxG = function() { };
$hxClasses["flixel.FlxG"] = flixel_FlxG;
flixel_FlxG.__name__ = ["flixel","FlxG"];
flixel_FlxG.__properties__ = {set_mouse:"set_mouse",set_fullscreen:"set_fullscreen",set_scaleMode:"set_scaleMode",set_drawFramerate:"set_drawFramerate",set_updateFramerate:"set_updateFramerate",get_updateFramerate:"get_updateFramerate",get_state:"get_state",get_stage:"get_stage"}
flixel_FlxG.camera = null;
flixel_FlxG.game = null;
flixel_FlxG.drawFramerate = null;
flixel_FlxG.width = null;
flixel_FlxG.height = null;
flixel_FlxG.scaleMode = null;
flixel_FlxG.mouse = null;
flixel_FlxG.touches = null;
flixel_FlxG.keys = null;
flixel_FlxG.gamepads = null;
flixel_FlxG.resizeGame = function(Width,Height) {
	flixel_FlxG._scaleMode.onMeasure(Width,Height);
};
flixel_FlxG.resetGame = function() {
	flixel_FlxG.game._resetGame = true;
};
flixel_FlxG.switchState = function(State) {
	flixel_FlxG.game._requestedState = State;
};
flixel_FlxG.resetState = function() {
	flixel_FlxG.switchState(Type.createInstance(Type.getClass(flixel_FlxG.game._state),[]));
};
flixel_FlxG.overlap = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback) {
	if(ObjectOrGroup1 == null) ObjectOrGroup1 = flixel_FlxG.game._state;
	if(ObjectOrGroup2 == ObjectOrGroup1) ObjectOrGroup2 = null;
	flixel_system_FlxQuadTree.divisions = flixel_FlxG.worldDivisions;
	var quadTree = flixel_system_FlxQuadTree.recycle(flixel_FlxG.worldBounds.x,flixel_FlxG.worldBounds.y,flixel_FlxG.worldBounds.width,flixel_FlxG.worldBounds.height);
	quadTree.load(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback);
	var result = quadTree.execute();
	quadTree.destroy();
	return result;
};
flixel_FlxG.pixelPerfectOverlap = function(Sprite1,Sprite2,AlphaTolerance,Camera) {
	if(AlphaTolerance == null) AlphaTolerance = 255;
	return flixel_util_FlxCollision.pixelPerfectCheck(Sprite1,Sprite2,AlphaTolerance,Camera);
};
flixel_FlxG.collide = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback) {
	return flixel_FlxG.overlap(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,flixel_FlxObject.separate);
};
flixel_FlxG.openURL = function(URL,Target) {
	if(Target == null) Target = "_blank";
	var prefix = "";
	if(!new EReg("^https?://","").match(URL)) prefix = "http://";
	openfl_Lib.getURL(new openfl_net_URLRequest(prefix + URL),Target);
};
flixel_FlxG.init = function(Game,Width,Height,Zoom) {
	flixel_FlxG.game = Game;
	flixel_FlxG.width = Std["int"](Math.abs(Width));
	flixel_FlxG.height = Std["int"](Math.abs(Height));
	flixel_FlxCamera.defaultZoom = Zoom;
	flixel_FlxG._scaleMode.onMeasure(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
	flixel_FlxG.keys = flixel_FlxG.inputs.add_flixel_input_keyboard_FlxKeyboard(new flixel_input_keyboard_FlxKeyboard());
	flixel_FlxG.set_mouse(flixel_FlxG.inputs.add_flixel_input_mouse_FlxMouse(new flixel_input_mouse_FlxMouse(flixel_FlxG.game._inputContainer)));
	flixel_FlxG.touches = flixel_FlxG.inputs.add_flixel_input_touch_FlxTouchManager(new flixel_input_touch_FlxTouchManager());
	flixel_FlxG.gamepads = flixel_FlxG.inputs.add_flixel_input_gamepad_FlxGamepadManager(new flixel_input_gamepad_FlxGamepadManager());
	flixel_FlxG.save.bind("flixel");
	flixel_FlxG.sound.loadSavedPrefs();
};
flixel_FlxG.reset = function() {
	flixel_text_pxText_PxBitmapFont.clearStorage();
	flixel_util_FlxRandom.set_globalSeed(Std["int"](Math.random() * 2147483647));
	flixel_FlxG.bitmap.clearCache();
	flixel_FlxG.inputs.reset();
	flixel_FlxG.sound.destroy(true);
	flixel_FlxG.autoPause = true;
	flixel_FlxG.fixedTimestep = true;
	flixel_FlxG.timeScale = 1.0;
	flixel_FlxG.elapsed = 0;
	flixel_FlxG.maxElapsed = 0.1;
	flixel_FlxG.worldBounds.set(-10,-10,flixel_FlxG.width + 20,flixel_FlxG.height + 20);
	flixel_FlxG.worldDivisions = 6;
};
flixel_FlxG.set_scaleMode = function(ScaleMode) {
	flixel_FlxG._scaleMode = ScaleMode;
	flixel_FlxG.game.onResize(null);
	return ScaleMode;
};
flixel_FlxG.set_mouse = function(NewMouse) {
	if(flixel_FlxG.mouse == null) {
		flixel_FlxG.mouse = flixel_FlxG.inputs.add_flixel_input_mouse_FlxMouse(NewMouse);
		return flixel_FlxG.mouse;
	}
	var oldMouse = flixel_FlxG.mouse;
	var result = flixel_FlxG.inputs.replace_flixel_input_mouse_FlxMouse(oldMouse,NewMouse);
	if(result != null) {
		flixel_FlxG.mouse = result;
		oldMouse.destroy();
		return NewMouse;
	}
	return oldMouse;
};
flixel_FlxG.get_updateFramerate = function() {
	return 1000 / flixel_FlxG.game._stepMS | 0;
};
flixel_FlxG.set_updateFramerate = function(Framerate) {
	if(Framerate < flixel_FlxG.drawFramerate) null;
	flixel_FlxG.game._stepMS = Std["int"](Math.abs(1000 / Framerate));
	flixel_FlxG.game._stepSeconds = flixel_FlxG.game._stepMS / 1000;
	if(flixel_FlxG.game._maxAccumulation < flixel_FlxG.game._stepMS) flixel_FlxG.game._maxAccumulation = flixel_FlxG.game._stepMS;
	return Framerate;
};
flixel_FlxG.set_drawFramerate = function(Framerate) {
	if(Framerate > (1000 / flixel_FlxG.game._stepMS | 0)) null;
	flixel_FlxG.drawFramerate = Std["int"](Math.abs(Framerate));
	if(flixel_FlxG.game.stage != null) flixel_FlxG.game.stage.set_frameRate(flixel_FlxG.drawFramerate);
	flixel_FlxG.game._maxAccumulation = (2000 / flixel_FlxG.drawFramerate | 0) - 1;
	if(flixel_FlxG.game._maxAccumulation < flixel_FlxG.game._stepMS) flixel_FlxG.game._maxAccumulation = flixel_FlxG.game._stepMS;
	return Framerate;
};
flixel_FlxG.set_fullscreen = function(Value) {
	if(Value) openfl_Lib.current.stage.set_displayState(openfl_display_StageDisplayState.FULL_SCREEN); else openfl_Lib.current.stage.set_displayState(openfl_display_StageDisplayState.NORMAL);
	return flixel_FlxG.fullscreen = Value;
};
flixel_FlxG.get_stage = function() {
	return openfl_Lib.current.stage;
};
flixel_FlxG.get_state = function() {
	return flixel_FlxG.game._state;
};
var flixel_FlxGame = function(GameSizeX,GameSizeY,InitialState,Zoom,UpdateFramerate,DrawFramerate,SkipSplash,StartFullscreen) {
	if(StartFullscreen == null) StartFullscreen = false;
	if(SkipSplash == null) SkipSplash = false;
	if(DrawFramerate == null) DrawFramerate = 60;
	if(UpdateFramerate == null) UpdateFramerate = 60;
	if(Zoom == null) Zoom = 1;
	if(GameSizeY == null) GameSizeY = 480;
	if(GameSizeX == null) GameSizeX = 640;
	this._recordingRequested = false;
	this._replayRequested = false;
	this._resetGame = false;
	this._skipSplash = false;
	this._customFocusLostScreen = flixel_system_ui_FlxFocusLostScreen;
	this._customSoundTray = flixel_system_ui_FlxSoundTray;
	this._lostFocus = false;
	this._total = 0;
	this._gameJustStarted = false;
	this.ticks = 0;
	this.recording = false;
	this.replaying = false;
	this.focusLostFramerate = 10;
	openfl_display_Sprite.call(this);
	this._inputContainer = new openfl_display_Sprite();
	flixel_FlxG.init(this,GameSizeX,GameSizeY,Zoom);
	flixel_FlxG.set_updateFramerate(UpdateFramerate);
	flixel_FlxG.set_drawFramerate(DrawFramerate);
	this._accumulator = this._stepMS;
	this._skipSplash = SkipSplash;
	this._replay = new flixel_system_replay_FlxReplay();
	if(InitialState == null) this._initialState = flixel_FlxState; else this._initialState = InitialState;
	this.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.create));
};
$hxClasses["flixel.FlxGame"] = flixel_FlxGame;
flixel_FlxGame.__name__ = ["flixel","FlxGame"];
flixel_FlxGame.__super__ = openfl_display_Sprite;
flixel_FlxGame.prototype = $extend(openfl_display_Sprite.prototype,{
	focusLostFramerate: null
	,replaying: null
	,recording: null
	,soundTray: null
	,ticks: null
	,_gameJustStarted: null
	,_initialState: null
	,_state: null
	,_total: null
	,_accumulator: null
	,_elapsedMS: null
	,_stepMS: null
	,_stepSeconds: null
	,_maxAccumulation: null
	,_lostFocus: null
	,_focusLostScreen: null
	,_inputContainer: null
	,_customSoundTray: null
	,_customFocusLostScreen: null
	,_skipSplash: null
	,_requestedState: null
	,_resetGame: null
	,_replay: null
	,_replayRequested: null
	,_recordingRequested: null
	,create: function(_) {
		if(this.stage == null) return;
		this.removeEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(this,this.create));
		this._total = openfl_Lib.getTimer();
		this.stage.scaleMode = openfl_display_StageScaleMode.NO_SCALE;
		this.stage.align = openfl_display_StageAlign.TOP_LEFT;
		this.stage.set_frameRate(flixel_FlxG.drawFramerate);
		this.addChild(this._inputContainer);
		this.soundTray = Type.createInstance(this._customSoundTray,[]);
		this.addChild(this.soundTray);
		this._focusLostScreen = Type.createInstance(this._customFocusLostScreen,[]);
		this.addChild(this._focusLostScreen);
		this.stage.addEventListener(openfl_events_Event.DEACTIVATE,$bind(this,this.onFocusLost));
		this.stage.addEventListener(openfl_events_Event.ACTIVATE,$bind(this,this.onFocus));
		flixel_FlxG.signals.gameReset.dispatch();
		if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			if(flixel_system_FlxSplash.nextState == null) this._gameJustStarted = true;
		} else {
			flixel_system_FlxSplash.nextState = this._initialState;
			this._requestedState = new flixel_system_FlxSplash();
			this._skipSplash = true;
		}
		flixel_FlxG.reset();
		this.switchState();
		if((1000 / flixel_FlxG.game._stepMS | 0) < flixel_FlxG.drawFramerate) null;
		this.stage.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
		this.stage.addEventListener(openfl_events_Event.RESIZE,$bind(this,this.onResize));
		this.resizeGame(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
	}
	,onFocus: function(_) {
		this._lostFocus = false;
		flixel_FlxG.signals.focusGained.dispatch();
		if(!flixel_FlxG.autoPause) {
			this._state.onFocus();
			return;
		}
		if(this._focusLostScreen != null) this._focusLostScreen.set_visible(false);
		this.stage.set_frameRate(flixel_FlxG.drawFramerate);
		flixel_FlxG.sound.onFocus();
		flixel_FlxG.inputs.onFocus();
	}
	,onFocusLost: function(_) {
		this._lostFocus = true;
		flixel_FlxG.signals.focusLost.dispatch();
		if(!flixel_FlxG.autoPause) {
			this._state.onFocusLost();
			return;
		}
		if(this._focusLostScreen != null) this._focusLostScreen.set_visible(true);
		this.stage.set_frameRate(this.focusLostFramerate);
		flixel_FlxG.sound.onFocusLost();
		flixel_FlxG.inputs.onFocusLost();
	}
	,onResize: function(_) {
		var width = openfl_Lib.current.stage.stageWidth;
		var height = openfl_Lib.current.stage.stageHeight;
		this._state.onResize(width,height);
		flixel_FlxG.plugins.onResize(width,height);
		flixel_FlxG.signals.gameResized.dispatch(width,height);
		this.resizeGame(width,height);
	}
	,resizeGame: function(width,height) {
		flixel_FlxG._scaleMode.onMeasure(width,height);
		if(this._focusLostScreen != null) this._focusLostScreen.draw();
		if(this.soundTray != null) this.soundTray.screenCenter();
		this._inputContainer.set_scaleX(1 / flixel_FlxG.game.get_scaleX());
		this._inputContainer.set_scaleY(1 / flixel_FlxG.game.get_scaleY());
	}
	,onEnterFrame: function(_) {
		this.ticks = openfl_Lib.getTimer();
		this._elapsedMS = this.ticks - this._total;
		this._total = this.ticks;
		if(this.soundTray != null && this.soundTray.active) this.soundTray.update(this._elapsedMS);
		if(!this._lostFocus || !flixel_FlxG.autoPause) {
			if(flixel_FlxG.vcr.paused) {
				if(flixel_FlxG.vcr.stepRequested) flixel_FlxG.vcr.stepRequested = false; else if(this._state == this._requestedState) return;
			}
			if(flixel_FlxG.fixedTimestep) {
				this._accumulator += this._elapsedMS;
				if(this._accumulator > this._maxAccumulation) this._accumulator = this._maxAccumulation;
				while(this._accumulator > this._stepMS) {
					this.step();
					this._accumulator = this._accumulator - this._stepMS;
				}
			} else this.step();
			this.draw();
		}
	}
	,resetGame: function() {
		flixel_FlxG.signals.gameReset.dispatch();
		if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			if(flixel_system_FlxSplash.nextState == null) this._gameJustStarted = true;
		} else {
			flixel_system_FlxSplash.nextState = this._initialState;
			this._requestedState = new flixel_system_FlxSplash();
			this._skipSplash = true;
		}
		flixel_FlxG.reset();
	}
	,switchState: function() {
		flixel_text_pxText_PxBitmapFont.clearStorage();
		flixel_FlxG.bitmap.clearCache();
		flixel_FlxG.cameras.reset();
		flixel_FlxG.inputs.reset();
		flixel_FlxG.sound.destroy();
		flixel_FlxG.plugins.onStateSwitch();
		flixel_FlxG.signals.stateSwitched.dispatch();
		flixel_util_FlxRandom._stateSeed = flixel_util_FlxRandom._internalSeed;
		if(this._state != null) this._state.destroy();
		this._state = this._requestedState;
		this._state.create();
		if(this._gameJustStarted) this.gameStart();
	}
	,gameStart: function() {
		flixel_FlxG.signals.gameStarted.dispatch();
		this._gameJustStarted = false;
	}
	,step: function() {
		if(this._resetGame) {
			flixel_FlxG.signals.gameReset.dispatch();
			if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
				this._requestedState = Type.createInstance(this._initialState,[]);
				if(flixel_system_FlxSplash.nextState == null) this._gameJustStarted = true;
			} else {
				flixel_system_FlxSplash.nextState = this._initialState;
				this._requestedState = new flixel_system_FlxSplash();
				this._skipSplash = true;
			}
			flixel_FlxG.reset();
			this._resetGame = false;
		}
		if(this._recordingRequested) {
			this._recordingRequested = false;
			this._replay.create(flixel_util_FlxRandom._recordingSeed);
			this.recording = true;
		} else if(this._replayRequested) {
			this._replayRequested = false;
			this._replay.rewind();
			flixel_util_FlxRandom.set_globalSeed(this._replay.seed);
			this.replaying = true;
		}
		this.update();
	}
	,update: function() {
		if(!this._state.active || !this._state.exists) return;
		if(this._state != this._requestedState) this.switchState();
		flixel_FlxG.signals.preUpdate.dispatch();
		if(flixel_FlxG.fixedTimestep) flixel_FlxG.elapsed = flixel_FlxG.timeScale * this._stepSeconds; else {
			flixel_FlxG.elapsed = flixel_FlxG.timeScale * (this._elapsedMS / 1000);
			var max = flixel_FlxG.maxElapsed * flixel_FlxG.timeScale;
			if(flixel_FlxG.elapsed > max) flixel_FlxG.elapsed = max;
		}
		this.updateInput();
		flixel_FlxG.sound.update();
		flixel_FlxG.plugins.update();
		this._state.tryUpdate();
		flixel_FlxG.cameras.update();
		flixel_FlxG.signals.postUpdate.dispatch();
		var _g = 0;
		var _g1 = flixel_FlxG.swipes;
		while(_g < _g1.length) {
			var swipe = _g1[_g];
			++_g;
			swipe = null;
		}
		flixel_util_FlxArrayUtil.clearArray(flixel_FlxG.swipes);
	}
	,updateInput: function() {
		if(this.replaying) {
			this._replay.playNextFrame();
			if(flixel_FlxG.vcr.timeout > 0) {
				flixel_FlxG.vcr.timeout -= this._stepMS;
				if(flixel_FlxG.vcr.timeout <= 0) {
					if(flixel_FlxG.vcr.replayCallback != null) {
						flixel_FlxG.vcr.replayCallback();
						flixel_FlxG.vcr.replayCallback = null;
					} else {
						flixel_FlxG.game.replaying = false;
						flixel_FlxG.inputs.reset();
						flixel_FlxG.keys.enabled = true;
					}
				}
			}
			if(this.replaying && this._replay.finished) {
				flixel_FlxG.game.replaying = false;
				flixel_FlxG.inputs.reset();
				flixel_FlxG.keys.enabled = true;
				if(flixel_FlxG.vcr.replayCallback != null) {
					flixel_FlxG.vcr.replayCallback();
					flixel_FlxG.vcr.replayCallback = null;
				}
			}
		} else flixel_FlxG.inputs.update();
		if(this.recording) this._replay.recordFrame();
	}
	,draw: function() {
		if(!this._state.visible || !this._state.exists) return;
		flixel_FlxG.signals.preDraw.dispatch();
		flixel_FlxG.cameras.lock();
		flixel_FlxG.plugins.draw();
		this._state.draw();
		flixel_FlxG.cameras.unlock();
		flixel_FlxG.signals.postDraw.dispatch();
	}
	,__class__: flixel_FlxGame
});
var flixel_FlxObject = function(X,Y,Width,Height) {
	if(Height == null) Height = 0;
	if(Width == null) Width = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this.collisonXDrag = true;
	this.allowCollisions = 4369;
	this.wasTouching = 0;
	this.touching = 0;
	this.health = 1;
	this.maxAngular = 10000;
	this.angularDrag = 0;
	this.angularAcceleration = 0;
	this.angularVelocity = 0;
	this.elasticity = 0;
	this.mass = 1;
	this.immovable = false;
	this.moves = true;
	this.angle = 0;
	this.pixelPerfectRender = true;
	this.y = 0;
	this.x = 0;
	flixel_FlxBasic.call(this);
	this.set_x(X);
	this.set_y(Y);
	this.set_width(Width);
	this.set_height(Height);
	this.initVars();
};
$hxClasses["flixel.FlxObject"] = flixel_FlxObject;
flixel_FlxObject.__name__ = ["flixel","FlxObject"];
flixel_FlxObject.separate = function(Object1,Object2) {
	var separatedX = flixel_FlxObject.separateX(Object1,Object2);
	var separatedY = flixel_FlxObject.separateY(Object1,Object2);
	return separatedX || separatedY;
};
flixel_FlxObject.separateX = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) return false;
	if(Object1.collisionType == 3) return (js_Boot.__cast(Object1 , flixel_tile_FlxTilemap)).overlapsWithCallback(Object2,flixel_FlxObject.separateX);
	if(Object2.collisionType == 3) return (js_Boot.__cast(Object2 , flixel_tile_FlxTilemap)).overlapsWithCallback(Object1,flixel_FlxObject.separateX,true);
	var overlap = 0;
	var obj1delta = Object1.x - Object1.last.x;
	var obj2delta = Object2.x - Object2.last.x;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs;
		if(obj1delta > 0) obj1deltaAbs = obj1delta; else obj1deltaAbs = -obj1delta;
		var obj2deltaAbs;
		if(obj2delta > 0) obj2deltaAbs = obj2delta; else obj2deltaAbs = -obj2delta;
		var obj1rect = flixel_FlxObject._firstSeparateFlxRect.set(Object1.x - (obj1delta > 0?obj1delta:0),Object1.last.y,Object1.get_width() + obj1deltaAbs,Object1.get_height());
		var obj2rect = flixel_FlxObject._secondSeparateFlxRect.set(Object2.x - (obj2delta > 0?obj2delta:0),Object2.last.y,Object2.get_width() + obj2deltaAbs,Object2.get_height());
		if(obj1rect.x + obj1rect.width > obj2rect.x && obj1rect.x < obj2rect.x + obj2rect.width && obj1rect.y + obj1rect.height > obj2rect.y && obj1rect.y < obj2rect.y + obj2rect.height) {
			var maxOverlap = obj1deltaAbs + obj2deltaAbs + flixel_FlxObject.SEPARATE_BIAS;
			if(obj1delta > obj2delta) {
				overlap = Object1.x + Object1.get_width() - Object2.x;
				if(overlap > maxOverlap || (Object1.allowCollisions & 16) == 0 || (Object2.allowCollisions & 1) == 0) overlap = 0; else {
					Object1.touching |= 16;
					Object2.touching |= 1;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.x - Object2.get_width() - Object2.x;
				if(-overlap > maxOverlap || (Object1.allowCollisions & 1) == 0 || (Object2.allowCollisions & 16) == 0) overlap = 0; else {
					Object1.touching |= 1;
					Object2.touching |= 16;
				}
			}
		}
	}
	if(overlap != 0) {
		var obj1v = Object1.velocity.x;
		var obj2v = Object2.velocity.x;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_x(Object1.x - overlap);
			var _g = Object2;
			_g.set_x(_g.x + overlap);
			var obj1velocity;
			obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0?1:-1);
			var obj2velocity;
			obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0?1:-1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_x(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_x(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_x(Object1.x - overlap);
			Object1.velocity.set_x(obj2v - obj1v * Object1.elasticity);
		} else if(!obj2immovable) {
			var _g1 = Object2;
			_g1.set_x(_g1.x + overlap);
			Object2.velocity.set_x(obj1v - obj2v * Object2.elasticity);
		}
		return true;
	} else return false;
};
flixel_FlxObject.separateY = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) return false;
	if(Object1.collisionType == 3) return (js_Boot.__cast(Object1 , flixel_tile_FlxTilemap)).overlapsWithCallback(Object2,flixel_FlxObject.separateY);
	if(Object2.collisionType == 3) return (js_Boot.__cast(Object2 , flixel_tile_FlxTilemap)).overlapsWithCallback(Object1,flixel_FlxObject.separateY,true);
	var overlap = 0;
	var obj1delta = Object1.y - Object1.last.y;
	var obj2delta = Object2.y - Object2.last.y;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs;
		if(obj1delta > 0) obj1deltaAbs = obj1delta; else obj1deltaAbs = -obj1delta;
		var obj2deltaAbs;
		if(obj2delta > 0) obj2deltaAbs = obj2delta; else obj2deltaAbs = -obj2delta;
		var obj1rect = flixel_FlxObject._firstSeparateFlxRect.set(Object1.x,Object1.y - (obj1delta > 0?obj1delta:0),Object1.get_width(),Object1.get_height() + obj1deltaAbs);
		var obj2rect = flixel_FlxObject._secondSeparateFlxRect.set(Object2.x,Object2.y - (obj2delta > 0?obj2delta:0),Object2.get_width(),Object2.get_height() + obj2deltaAbs);
		if(obj1rect.x + obj1rect.width > obj2rect.x && obj1rect.x < obj2rect.x + obj2rect.width && obj1rect.y + obj1rect.height > obj2rect.y && obj1rect.y < obj2rect.y + obj2rect.height) {
			var maxOverlap = obj1deltaAbs + obj2deltaAbs + flixel_FlxObject.SEPARATE_BIAS;
			if(obj1delta > obj2delta) {
				overlap = Object1.y + Object1.get_height() - Object2.y;
				if(overlap > maxOverlap || (Object1.allowCollisions & 4096) == 0 || (Object2.allowCollisions & 256) == 0) overlap = 0; else {
					Object1.touching |= 4096;
					Object2.touching |= 256;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.y - Object2.get_height() - Object2.y;
				if(-overlap > maxOverlap || (Object1.allowCollisions & 256) == 0 || (Object2.allowCollisions & 4096) == 0) overlap = 0; else {
					Object1.touching |= 256;
					Object2.touching |= 4096;
				}
			}
		}
	}
	if(overlap != 0) {
		var obj1v = Object1.velocity.y;
		var obj2v = Object2.velocity.y;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_y(Object1.y - overlap);
			var _g = Object2;
			_g.set_y(_g.y + overlap);
			var obj1velocity;
			obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0?1:-1);
			var obj2velocity;
			obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0?1:-1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_y(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_y(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_y(Object1.y - overlap);
			Object1.velocity.set_y(obj2v - obj1v * Object1.elasticity);
			if(Object1.collisonXDrag && Object2.active && Object2.moves && obj1delta > obj2delta) {
				var _g1 = Object1;
				_g1.set_x(_g1.x + (Object2.x - Object2.last.x));
			}
		} else if(!obj2immovable) {
			var _g2 = Object2;
			_g2.set_y(_g2.y + overlap);
			Object2.velocity.set_y(obj1v - obj2v * Object2.elasticity);
			if(Object2.collisonXDrag && Object1.active && Object1.moves && obj1delta < obj2delta) {
				var _g3 = Object2;
				_g3.set_x(_g3.x + (Object1.x - Object1.last.x));
			}
		}
		return true;
	} else return false;
};
flixel_FlxObject.__super__ = flixel_FlxBasic;
flixel_FlxObject.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,width: null
	,height: null
	,pixelPerfectRender: null
	,angle: null
	,moves: null
	,immovable: null
	,scrollFactor: null
	,velocity: null
	,acceleration: null
	,drag: null
	,maxVelocity: null
	,last: null
	,mass: null
	,elasticity: null
	,angularVelocity: null
	,angularAcceleration: null
	,angularDrag: null
	,maxAngular: null
	,health: null
	,touching: null
	,wasTouching: null
	,allowCollisions: null
	,collisonXDrag: null
	,_point: null
	,_cameras: null
	,initVars: function() {
		this.collisionType = 1;
		this.last = flixel_util_FlxPoint.get(this.x,this.y);
		this.scrollFactor = flixel_util_FlxPoint.get(1,1);
		this._point = flixel_util_FlxPoint.get(null,null);
		this.velocity = flixel_util_FlxPoint.get(null,null);
		this.acceleration = flixel_util_FlxPoint.get(null,null);
		this.drag = flixel_util_FlxPoint.get(null,null);
		this.maxVelocity = flixel_util_FlxPoint.get(10000,10000);
	}
	,initMotionVars: function() {
		this.velocity = flixel_util_FlxPoint.get(null,null);
		this.acceleration = flixel_util_FlxPoint.get(null,null);
		this.drag = flixel_util_FlxPoint.get(null,null);
		this.maxVelocity = flixel_util_FlxPoint.get(10000,10000);
	}
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		this.velocity = flixel_util_FlxDestroyUtil.put(this.velocity);
		this.acceleration = flixel_util_FlxDestroyUtil.put(this.acceleration);
		this.drag = flixel_util_FlxDestroyUtil.put(this.drag);
		this.maxVelocity = flixel_util_FlxDestroyUtil.put(this.maxVelocity);
		this.scrollFactor = flixel_util_FlxDestroyUtil.put(this.scrollFactor);
		this.last = flixel_util_FlxDestroyUtil.put(this.last);
		this._point = flixel_util_FlxDestroyUtil.put(this._point);
		this._cameras = null;
	}
	,update: function() {
		this.last.set_x(this.x);
		this.last.set_y(this.y);
		if(this.moves) this.updateMotion();
		this.wasTouching = this.touching;
		this.touching = 0;
	}
	,updateMotion: function() {
		var dt = flixel_FlxG.elapsed;
		var velocityDelta = 0.5 * (flixel_util_FlxVelocity.computeVelocity(this.angularVelocity,this.angularAcceleration,this.angularDrag,this.maxAngular) - this.angularVelocity);
		this.angularVelocity += velocityDelta;
		var _g = this;
		_g.set_angle(_g.angle + this.angularVelocity * dt);
		this.angularVelocity += velocityDelta;
		velocityDelta = 0.5 * (flixel_util_FlxVelocity.computeVelocity(this.velocity.x,this.acceleration.x,this.drag.x,this.maxVelocity.x) - this.velocity.x);
		var _g1 = this.velocity;
		_g1.set_x(_g1.x + velocityDelta);
		var delta = this.velocity.x * dt;
		var _g2 = this.velocity;
		_g2.set_x(_g2.x + velocityDelta);
		var _g3 = this;
		_g3.set_x(_g3.x + delta);
		velocityDelta = 0.5 * (flixel_util_FlxVelocity.computeVelocity(this.velocity.y,this.acceleration.y,this.drag.y,this.maxVelocity.y) - this.velocity.y);
		var _g4 = this.velocity;
		_g4.set_y(_g4.y + velocityDelta);
		delta = this.velocity.y * dt;
		var _g5 = this.velocity;
		_g5.set_y(_g5.y + velocityDelta);
		var _g6 = this;
		_g6.set_y(_g6.y + delta);
	}
	,draw: function() {
	}
	,overlaps: function(ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		var group = flixel_group_FlxGroup.resolveGroup(ObjectOrGroup);
		if(group != null) return flixel_group_FlxGroup.overlaps($bind(this,this.overlapsCallback),group,0,0,InScreenSpace,Camera);
		if(ObjectOrGroup.collisionType == 3) return (js_Boot.__cast(ObjectOrGroup , flixel_tile_FlxTilemap)).overlaps(this,InScreenSpace,Camera);
		var object;
		object = js_Boot.__cast(ObjectOrGroup , flixel_FlxObject);
		if(!InScreenSpace) return object.x + object.get_width() > this.x && object.x < this.x + this.get_width() && object.y + object.get_height() > this.y && object.y < this.y + this.get_height();
		if(Camera == null) Camera = flixel_FlxG.camera;
		var objectScreenPos = object.getScreenXY(null,Camera);
		this.getScreenXY(this._point,Camera);
		return objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y && objectScreenPos.y < this._point.y + this.get_height();
	}
	,overlapsCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		return this.overlaps(ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsAt: function(X,Y,ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		var group = flixel_group_FlxGroup.resolveGroup(ObjectOrGroup);
		if(group != null) return flixel_group_FlxGroup.overlaps($bind(this,this.overlapsAtCallback),group,X,Y,InScreenSpace,Camera);
		if(ObjectOrGroup.collisionType == 3) {
			var tilemap;
			tilemap = js_Boot.__cast(ObjectOrGroup , flixel_tile_FlxTilemap);
			return tilemap.overlapsAt(tilemap.x - (X - this.x),tilemap.y - (Y - this.y),this,InScreenSpace,Camera);
		}
		var object;
		object = js_Boot.__cast(ObjectOrGroup , flixel_FlxObject);
		if(!InScreenSpace) return object.x + object.get_width() > X && object.x < X + this.get_width() && object.y + object.get_height() > Y && object.y < Y + this.get_height();
		if(Camera == null) Camera = flixel_FlxG.camera;
		var objectScreenPos = object.getScreenXY(null,Camera);
		this.getScreenXY(this._point,Camera);
		return objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y && objectScreenPos.y < this._point.y + this.get_height();
	}
	,overlapsAtCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		return this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsPoint: function(point,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		if(!InScreenSpace) return point.x > this.x && point.x < this.x + this.get_width() && point.y > this.y && point.y < this.y + this.get_height();
		if(Camera == null) Camera = flixel_FlxG.camera;
		var X = point.x - Camera.scroll.x;
		var Y = point.y - Camera.scroll.y;
		this.getScreenXY(this._point,Camera);
		if(point._weak) point.put();
		return X > this._point.x && X < this._point.x + this.get_width() && Y > this._point.y && Y < this._point.y + this.get_height();
	}
	,inWorldBounds: function() {
		return this.x + this.get_width() > flixel_FlxG.worldBounds.x && this.x < flixel_FlxG.worldBounds.get_right() && this.y + this.get_height() > flixel_FlxG.worldBounds.y && this.y < flixel_FlxG.worldBounds.get_bottom();
	}
	,getScreenXY: function(point,Camera) {
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		if(Camera == null) Camera = flixel_FlxG.camera;
		return point.set(this.x - Camera.scroll.x * this.scrollFactor.x,this.y - Camera.scroll.y * this.scrollFactor.y);
	}
	,getMidpoint: function(point) {
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		return point.set(this.x + this.get_width() * 0.5,this.y + this.get_height() * 0.5);
	}
	,reset: function(X,Y) {
		this.revive();
		this.touching = 0;
		this.wasTouching = 0;
		this.setPosition(X,Y);
		this.last.set(this.x,this.y);
		this.velocity.set();
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) Camera = flixel_FlxG.camera;
		this.getScreenXY(this._point,Camera);
		return this._point.x + this.get_width() > 0 && this._point.x < Camera.width && this._point.y + this.get_height() > 0 && this._point.y < Camera.height;
	}
	,isTouching: function(Direction) {
		return (this.touching & Direction) > 0;
	}
	,justTouched: function(Direction) {
		return (this.touching & Direction) > 0 && (this.wasTouching & Direction) <= 0;
	}
	,hurt: function(Damage) {
		this.health = this.health - Damage;
		if(this.health <= 0) this.kill();
	}
	,setPosition: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.set_x(X);
		this.set_y(Y);
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair._pool.get().create("x",this.x),flixel_util_LabelValuePair._pool.get().create("y",this.y),flixel_util_LabelValuePair.weak("w",this.get_width()),flixel_util_LabelValuePair.weak("h",this.get_height()),flixel_util_LabelValuePair._pool.get().create("visible",this.visible),flixel_util_LabelValuePair._pool.get().create("velocity",this.velocity)]);
	}
	,set_x: function(NewX) {
		return this.x = NewX;
	}
	,set_y: function(NewY) {
		return this.y = NewY;
	}
	,set_width: function(Width) {
		this.width = Width;
		return Width;
	}
	,set_height: function(Height) {
		this.height = Height;
		return Height;
	}
	,get_width: function() {
		return this.width;
	}
	,get_height: function() {
		return this.height;
	}
	,get_solid: function() {
		return (this.allowCollisions & 4369) > 0;
	}
	,set_solid: function(Solid) {
		if(Solid) this.allowCollisions = 4369; else this.allowCollisions = 0;
		return Solid;
	}
	,set_angle: function(Value) {
		return this.angle = Value;
	}
	,set_moves: function(Value) {
		return this.moves = Value;
	}
	,set_immovable: function(Value) {
		return this.immovable = Value;
	}
	,get_camera: function() {
		if(this._cameras == null || this._cameras.length == 0) return flixel_FlxCamera.defaultCameras[0]; else return this._cameras[0];
	}
	,set_camera: function(Value) {
		if(this._cameras == null) this._cameras = [Value]; else this._cameras[0] = Value;
		return Value;
	}
	,get_cameras: function() {
		if(this._cameras == null) return flixel_FlxCamera.defaultCameras; else return this._cameras;
	}
	,set_cameras: function(Value) {
		return this._cameras = Value;
	}
	,set_pixelPerfectRender: function(Value) {
		return this.pixelPerfectRender = Value;
	}
	,__class__: flixel_FlxObject
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_solid:"set_solid",get_solid:"get_solid",set_immovable:"set_immovable",set_moves:"set_moves",set_angle:"set_angle",set_pixelPerfectRender:"set_pixelPerfectRender",set_cameras:"set_cameras",get_cameras:"get_cameras",set_camera:"set_camera",get_camera:"get_camera",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",set_x:"set_x"})
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.__usingFramebuffer = false;
	this.transparent = transparent;
	if(width == null) width = 0; else width = width;
	if(height == null) height = 0; else height = height;
	if(width < 0) width = 0; else width = width;
	if(height < 0) height = 0; else height = height;
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		fillColor = fillColor << 8 | fillColor >> 24 & 255;
		this.__image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.__image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.__supportsBGRA = null;
openfl_display_BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromBase64(base64,type,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.__flipPixel = function(pixel) {
	return (pixel & 255) << 24 | (pixel >> 8 & 255) << 16 | (pixel >> 16 & 255) << 8 | pixel >> 24 & 255;
};
openfl_display_BitmapData.__ucompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else return 0;
			}
		}
	}
};
openfl_display_BitmapData.prototype = {
	height: null
	,rect: null
	,transparent: null
	,width: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__cacheAsBitmap: null
	,__bgra: null
	,__blendMode: null
	,__buffer: null
	,__image: null
	,__isValid: null
	,__surface: null
	,__surfaceImage: null
	,__texture: null
	,__textureImage: null
	,__framebuffer: null
	,__uvData: null
	,__usingFramebuffer: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.__image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(this.__image);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceBitmapData.__image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(sourceBitmapData.__image);
		filter.__applyFilter(this.__image.buffer.__srcImageData,sourceBitmapData.__image.buffer.__srcImageData,sourceRect,destPoint);
		this.__image.dirty = true;
	}
	,clone: function() {
		if(!this.__isValid) return new openfl_display_BitmapData(this.width,this.height,this.transparent); else return openfl_display_BitmapData.fromImage(this.__image.clone(),this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.__isValid) return;
		this.__image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
		this.__usingFramebuffer = false;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) return;
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.__image.copyChannel(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
		this.__usingFramebuffer = false;
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.__isValid || sourceBitmapData == null) return;
		this.__image.copyPixels(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.__image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
		this.__usingFramebuffer = false;
	}
	,dispose: function() {
		this.__image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		if(this.__texture != null) {
			var renderer = openfl_Lib.current.stage.__renderer;
			if(renderer != null) {
				var renderSession = renderer.renderSession;
				var gl = renderSession.gl;
				if(gl != null) gl.deleteTexture(this.__texture);
			}
		}
		if(this.__framebuffer != null) this.__framebuffer.destroy();
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(!this.__isValid) return;
		var _g = this.__image.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.__image);
			lime_graphics_utils_ImageCanvasUtil.sync(this.__image);
			var buffer = this.__image.buffer;
			var renderSession = new openfl__$internal_renderer_RenderSession();
			renderSession.context = buffer.__srcContext;
			renderSession.roundPixels = true;
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.webkitImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			var matrixCache = source.__worldTransform;
			if(matrix != null) source.__worldTransform = matrix; else source.__worldTransform = new openfl_geom_Matrix();
			source.__updateChildren(false);
			source.__renderCanvas(renderSession);
			source.__worldTransform = matrixCache;
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.webkitImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			break;
		case 1:
			var renderSession1 = openfl_Lib.current.stage.__renderer.renderSession;
			this.__drawGL(renderSession1,this.width,this.height,source,matrix,colorTransform,blendMode,clipRect,smoothing,!this.__usingFramebuffer,false,true);
			break;
		default:
		}
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__isValid || rect == null) return byteArray = null;
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) return byteArray = this.__image.encode("png"); else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) return byteArray = this.__image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality);
		return byteArray = null;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) return;
		this.__image.fillRect(rect.__toLimeRectangle(),color,1);
		this.__usingFramebuffer = false;
	}
	,floodFill: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.floodFill(x,y,color,1);
		this.__usingFramebuffer = false;
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl) {
		if(this.__buffer == null) {
			var data = [this.width,this.height,0,1,1,0,this.height,0,0,1,this.width,0,0,1,0,0,0,0,0,0];
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(data),gl.STATIC_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		if(!this.__isValid) return new openfl_geom_Rectangle(0,0,this.width,this.height);
		var rect = this.__image.getColorBoundsRect(mask,color,findColor);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) return null;
		if(rect == null) rect = this.rect;
		return this.__image.getPixels(rect.__toLimeRectangle(),1);
	}
	,getSurface: function(clone) {
		if(clone == null) clone = true;
		if(!this.__isValid) return null;
		if(this.__surface == null) this.__image.dirty = true;
		if(this.__image != null && this.__image.dirty) {
			if(this.__surface != null) lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.destroy(this.__surface);
			if(clone) this.__surfaceImage = this.__image.clone(); else this.__surfaceImage = this.__image;
			this.__surfaceImage.set_format(2);
			this.__surfaceImage.set_premultiplied(true);
			this.__surface = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.fromImage(this.__surfaceImage);
			this.__image.dirty = false;
		}
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) return null;
		if(this.__usingFramebuffer && this.__framebuffer != null) return this.__framebuffer.texture;
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__image.dirty = true;
		}
		if(this.__image != null && this.__image.dirty) {
			var internalFormat;
			if(this.__image.buffer.bitsPerPixel == 1) internalFormat = gl.ALPHA; else internalFormat = gl.RGBA;
			var format = internalFormat;
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.__image;
			if(this.__bgra) {
				if(openfl_display_BitmapData.__supportsBGRA == null) openfl_display_BitmapData.__supportsBGRA = Lambda.has(gl.getSupportedExtensions(),"GL_EXT_bgra");
				textureImage = new lime_graphics_Image(null,0,0,this.__image.width,this.__image.height);
				var rect = new lime_math_Rectangle(0,0,this.__image.width,this.__image.height);
				var point = new lime_math_Vector2(0,0);
				textureImage.copyChannel(this.__image,rect,point,lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.BLUE);
				textureImage.copyChannel(this.__image,rect,point,lime_graphics_ImageChannel.GREEN,lime_graphics_ImageChannel.GREEN);
				textureImage.copyChannel(this.__image,rect,point,lime_graphics_ImageChannel.BLUE,lime_graphics_ImageChannel.RED);
				textureImage.copyChannel(this.__image,rect,point,lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
			}
			if(!textureImage.get_premultiplied() && textureImage.get_transparent()) {
				textureImage = textureImage.clone();
				textureImage.set_premultiplied(true);
			}
			gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,this.width,this.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.__image.dirty = false;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = pixels.length / 4 | 0;
		var result;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(length);
		this1.data = this2;
		this1.length = length;
		this1.fixed = true;
		result = this1;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			if(!result.fixed) {
				if(i >= result.length) result.length = i + 1;
				if(result.data.length < result.length) {
					var data;
					var this3;
					this3 = new Array(result.data.length + 10);
					data = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
					result.data = data;
				}
			}
			result.data[i] = value;
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = pixels.length;
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.__isValid) return false;
		openfl_Lib.notImplemented("BitmapData.hitTest");
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) return;
		this.__image.merge(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
		this.__usingFramebuffer = false;
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.__isValid) return;
		openfl_Lib.notImplemented("BitmapData.noise");
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) c1 = pixelValue & -16777216; else c1 = alphaArray[pixelValue >> 24 & 255];
			if(redArray == null) c2 = pixelValue & 16711680; else c2 = redArray[pixelValue >> 16 & 255];
			if(greenArray == null) c3 = pixelValue & 65280; else c3 = greenArray[pixelValue >> 8 & 255];
			if(blueArray == null) c4 = pixelValue & 255; else c4 = blueArray[pixelValue & 255];
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			if(a > 255) a == 255;
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			if(r > 255) r == 255;
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			if(g > 255) g == 255;
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			if(b > 255) b == 255;
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = new openfl_geom_Rectangle(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		openfl_Lib.notImplemented("BitmapData.perlinNoise");
	}
	,scroll: function(x,y) {
		openfl_Lib.notImplemented("BitmapData.scroll");
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel(x,y,color,1);
		this.__usingFramebuffer = false;
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel32(x,y,color,1);
		this.__usingFramebuffer = false;
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__isValid || rect == null) return;
		this.__image.setPixels(rect.__toLimeRectangle(),byteArray,1);
		this.__usingFramebuffer = false;
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new lime_utils_ByteArray();
		byteArray.set_length(inputVector.length * 4);
		var _g = 0;
		while(_g < inputVector.length) {
			var color = inputVector.data[_g];
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == this && sourceRect.equals(this.rect) && destPoint.x == 0 && destPoint.y == 0) {
			var hits = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var memory = new lime_utils_ByteArray();
			memory.set_length(this.width * this.height * 4);
			memory = this.getPixels(this.rect);
			memory.position = 0;
			openfl_Memory.select(memory);
			var thresholdMask = threshold & mask;
			var width_yy;
			var position;
			var pixelMask;
			var pixelValue;
			var i;
			var test;
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var yy = _g1++;
				width_yy = this.width * yy;
				var _g3 = 0;
				var _g2 = this.width;
				while(_g3 < _g2) {
					var xx = _g3++;
					position = (width_yy + xx) * 4;
					pixelValue = openfl_Memory._setPositionTemporarily(position,function() {
						return openfl_Memory.gcRef.readInt();
					});
					pixelMask = pixelValue & mask;
					i = openfl_display_BitmapData.__ucompare(pixelMask,thresholdMask);
					test = false;
					if(operation == "==") test = i == 0; else if(operation == "<") test = i == -1; else if(operation == ">") test = i == 1; else if(operation == "!=") test = i != 0; else if(operation == "<=") test = i == 0 || i == -1; else if(operation == ">=") test = i == 0 || i == 1;
					if(test) {
						openfl_Memory.setI32(position,color);
						hits++;
					}
				}
			}
			memory.position = 0;
			this.setPixels(this.rect,memory);
			openfl_Memory.select(null);
			return hits;
		} else {
			var sx = sourceRect.x | 0;
			var sy = sourceRect.y | 0;
			var sw = sourceBitmapData.width | 0;
			var sh = sourceBitmapData.height | 0;
			var dx = destPoint.x | 0;
			var dy = destPoint.y | 0;
			var bw = this.width - sw - dx;
			var bh = this.height - sh - dy;
			var dw;
			if(bw < 0) dw = sw + (this.width - sw - dx); else dw = sw;
			var dh;
			if(bw < 0) dh = sh + (this.height - sh - dy); else dh = sh;
			var hits1 = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var canvasMemory = sw * sh * 4;
			var sourceMemory = 0;
			if(copySource) sourceMemory = sw * sh * 4;
			var totalMemory = canvasMemory + sourceMemory;
			var memory1 = new lime_utils_ByteArray();
			if(memory1.allocated < totalMemory) memory1.___resizeBuffer(memory1.allocated = Std["int"](Math.max(totalMemory,memory1.allocated * 2))); else if(memory1.allocated > totalMemory * 2) memory1.___resizeBuffer(memory1.allocated = totalMemory);
			memory1.length = totalMemory;
			totalMemory;
			memory1.position = 0;
			var bitmapData = sourceBitmapData.clone();
			var pixels = bitmapData.getPixels(sourceRect);
			memory1.writeBytes(pixels);
			memory1.position = canvasMemory;
			if(copySource) memory1.writeBytes(pixels);
			memory1.position = 0;
			openfl_Memory.select(memory1);
			var thresholdMask1 = threshold & mask;
			var position1;
			var pixelMask1;
			var pixelValue1;
			var i1;
			var test1;
			var _g4 = 0;
			while(_g4 < dh) {
				var yy1 = _g4++;
				var _g11 = 0;
				while(_g11 < dw) {
					var xx1 = _g11++;
					position1 = (xx1 + sx + (yy1 + sy) * sw) * 4;
					pixelValue1 = openfl_Memory._setPositionTemporarily(position1,function() {
						return openfl_Memory.gcRef.readInt();
					});
					pixelMask1 = pixelValue1 & mask;
					i1 = openfl_display_BitmapData.__ucompare(pixelMask1,thresholdMask1);
					test1 = false;
					if(operation == "==") test1 = i1 == 0; else if(operation == "<") test1 = i1 == -1; else if(operation == ">") test1 = i1 == 1; else if(operation == "!=") test1 = i1 != 0; else if(operation == "<=") test1 = i1 == 0 || i1 == -1; else if(operation == ">=") test1 = i1 == 0 || i1 == 1;
					if(test1) {
						openfl_Memory.setI32(position1,color);
						hits1++;
					} else if(copySource) openfl_Memory.setI32(position1,openfl_Memory._setPositionTemporarily(canvasMemory + position1,function() {
						return openfl_Memory.gcRef.readInt();
					}));
				}
			}
			memory1.position = 0;
			bitmapData.setPixels(sourceRect,memory1);
			this.copyPixels(bitmapData,bitmapData.rect,destPoint);
			openfl_Memory.select(null);
			return hits1;
		}
	}
	,unlock: function(changeRect) {
	}
	,__createUVs: function() {
		if(this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
		this.__uvData.x0 = 0;
		this.__uvData.y0 = 0;
		this.__uvData.x1 = 1;
		this.__uvData.y1 = 0;
		this.__uvData.x2 = 1;
		this.__uvData.y2 = 1;
		this.__uvData.x3 = 0;
		this.__uvData.y3 = 1;
	}
	,__drawGL: function(renderSession,width,height,source,matrix,colorTransform,blendMode,clipRect,smoothing,drawSelf,clearBuffer,readPixels) {
		if(readPixels == null) readPixels = false;
		if(clearBuffer == null) clearBuffer = false;
		if(drawSelf == null) drawSelf = false;
		if(smoothing == null) smoothing = false;
		var renderer = openfl_Lib.current.stage.__renderer;
		if(renderer == null) return;
		var renderSession1 = renderer.renderSession;
		var gl = renderSession1.gl;
		if(gl == null) return;
		var spritebatch = renderSession1.spriteBatch;
		var renderTransparent = renderSession1.renderer.transparent;
		var tmpRect;
		if(clipRect == null) tmpRect = new openfl_geom_Rectangle(0,0,width,height); else tmpRect = clipRect.clone();
		renderSession1.renderer.transparent = this.transparent;
		if(this.__framebuffer == null) this.__framebuffer = new openfl__$internal_renderer_opengl_utils_FilterTexture(gl,width,height,smoothing);
		this.__framebuffer.resize(width,height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer.frameBuffer);
		renderer.setViewport(0,0,width,height);
		spritebatch.begin(renderSession1,drawSelf?null:tmpRect);
		gl.colorMask(true,true,true,true);
		renderSession1.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
		renderSession1.shaderManager.setShader(renderSession1.shaderManager.defaultShader,true);
		if(clearBuffer || drawSelf) this.__framebuffer.clear();
		if(drawSelf) {
			this.__worldTransform.identity();
			this.__flipMatrix(this.__worldTransform);
			this.__renderGL(renderSession1);
			spritebatch.stop();
			gl.deleteTexture(this.__texture);
			spritebatch.start(tmpRect);
		}
		var ctCache = source.__worldColorTransform;
		var matrixCache = source.__worldTransform;
		var blendModeCache = source.__blendMode;
		var cached = source.__cacheAsBitmap;
		var m;
		if(matrix != null) m = new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty); else m = new openfl_geom_Matrix();
		this.__flipMatrix(m);
		source.__worldTransform = m;
		if(colorTransform != null) source.__worldColorTransform = colorTransform; else source.__worldColorTransform = new openfl_geom_ColorTransform();
		source.__blendMode = blendMode;
		source.__cacheAsBitmap = false;
		source.__updateChildren(false);
		source.__renderGL(renderSession1);
		source.__worldColorTransform = ctCache;
		source.__worldTransform = matrixCache;
		source.__blendMode = blendModeCache;
		source.__cacheAsBitmap = cached;
		source.__updateChildren(true);
		spritebatch.finish();
		if(readPixels) {
			if(this.__image.width != width || this.__image.height != height) this.__image.resize(width,height);
			gl.readPixels(0,0,width,height,gl.RGBA,gl.UNSIGNED_BYTE,this.__image.buffer.data);
		}
		gl.bindFramebuffer(gl.FRAMEBUFFER,renderSession1.defaultFramebuffer);
		renderer.setViewport(0,0,renderSession1.renderer.width,renderSession1.renderer.height);
		renderSession1.renderer.transparent = renderTransparent;
		gl.colorMask(true,true,true,renderSession1.renderer.transparent);
		this.__usingFramebuffer = true;
		if(this.__image != null) {
			this.__image.dirty = false;
			this.__image.set_premultiplied(true);
		}
		this.__createUVs();
		this.__isValid = true;
	}
	,__flipMatrix: function(m) {
		var tx = m.tx;
		var ty = m.ty;
		m.tx = 0;
		m.ty = 0;
		m.scale(1,-1);
		m.translate(0,this.height);
		m.tx += tx;
		m.ty -= ty;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		lime_graphics_Image.fromBase64(base64,type,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		lime_graphics_Image.fromBytes(bytes,function(image) {
			_g.__fromImage(image);
			if(rawAlpha != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(_g.__image);
				lime_graphics_utils_ImageCanvasUtil.createImageData(_g.__image);
				var data = _g.__image.buffer.data;
				var _g2 = 0;
				var _g1 = rawAlpha.length;
				while(_g2 < _g1) {
					var i = _g2++;
					data[i * 4 + 3] = rawAlpha.readUnsignedByte();
				}
				_g.__image.dirty = true;
			}
			if(onload != null) onload(_g);
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__fromImage: function(image) {
		this.__image = image;
		this.width = image.width;
		this.height = image.height;
		this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
		this.__isValid = true;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__isValid) return;
		var cairo = renderSession.cairo;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = this.getSurface();
		if(surface != null) {
			cairo.setSourceSurface(surface,0,0);
			cairo.paint();
		}
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) return;
		lime_graphics_utils_ImageCanvasUtil.sync(this.__image);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.__image.buffer.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		renderSession.spriteBatch.renderBitmapData(this,false,this.__worldTransform,this.__worldColorTransform,this.__worldColorTransform.alphaMultiplier,this.__blendMode);
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.__image);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__class__: openfl_display_BitmapData
};
var flixel__$FlxSprite_GraphicDefault = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel__$FlxSprite_GraphicDefault.preload != null) {
		this.__image = flixel__$FlxSprite_GraphicDefault.preload;
		width = this.__image.width;
		height = this.__image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel__$FlxSprite_GraphicDefault.resourceName),flixel__$FlxSprite_GraphicDefault.resourceType,function(b) {
		if(flixel__$FlxSprite_GraphicDefault.preload == null) flixel__$FlxSprite_GraphicDefault.preload = b.__image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel._FlxSprite.GraphicDefault"] = flixel__$FlxSprite_GraphicDefault;
flixel__$FlxSprite_GraphicDefault.__name__ = ["flixel","_FlxSprite","GraphicDefault"];
flixel__$FlxSprite_GraphicDefault.preload = null;
flixel__$FlxSprite_GraphicDefault.__super__ = openfl_display_BitmapData;
flixel__$FlxSprite_GraphicDefault.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel__$FlxSprite_GraphicDefault
});
var flixel_FlxSprite = function(X,Y,SimpleGraphic) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._facingFlip = new haxe_ds_IntMap();
	this._angleChanged = false;
	this._cosAngle = 1;
	this._sinAngle = 0;
	this.useColorTransform = false;
	this.color = 16777215;
	this.flipY = false;
	this.flipX = false;
	this.facing = 16;
	this.alpha = 1.0;
	this.bakedRotationAngle = 0;
	this.frames = 0;
	this.frameHeight = 0;
	this.frameWidth = 0;
	this.dirty = true;
	this.antialiasing = false;
	flixel_FlxObject.call(this,X,Y);
	if(SimpleGraphic != null) this.loadGraphic(SimpleGraphic);
};
$hxClasses["flixel.FlxSprite"] = flixel_FlxSprite;
flixel_FlxSprite.__name__ = ["flixel","FlxSprite"];
flixel_FlxSprite.__super__ = flixel_FlxObject;
flixel_FlxSprite.prototype = $extend(flixel_FlxObject.prototype,{
	animation: null
	,framePixels: null
	,antialiasing: null
	,dirty: null
	,frame: null
	,frameWidth: null
	,frameHeight: null
	,frames: null
	,region: null
	,framesData: null
	,cachedGraphics: null
	,bakedRotationAngle: null
	,alpha: null
	,facing: null
	,flipX: null
	,flipY: null
	,origin: null
	,offset: null
	,scale: null
	,blend: null
	,color: null
	,colorTransform: null
	,useColorTransform: null
	,_flashPoint: null
	,_flashRect: null
	,_flashRect2: null
	,_flashPointZero: null
	,_matrix: null
	,_halfWidth: null
	,_halfHeight: null
	,_sinAngle: null
	,_cosAngle: null
	,_angleChanged: null
	,_facingFlip: null
	,initVars: function() {
		flixel_FlxObject.prototype.initVars.call(this);
		this.animation = new flixel_animation_FlxAnimationController(this);
		this._flashPoint = new openfl_geom_Point();
		this._flashRect = new openfl_geom_Rectangle();
		this._flashRect2 = new openfl_geom_Rectangle();
		this._flashPointZero = new openfl_geom_Point();
		this.offset = flixel_util_FlxPoint.get(null,null);
		this.origin = flixel_util_FlxPoint.get(null,null);
		this.scale = flixel_util_FlxPoint.get(1,1);
		this._matrix = new openfl_geom_Matrix();
	}
	,destroy: function() {
		flixel_FlxObject.prototype.destroy.call(this);
		this.animation = flixel_util_FlxDestroyUtil.destroy(this.animation);
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this.origin = flixel_util_FlxDestroyUtil.put(this.origin);
		this.scale = flixel_util_FlxDestroyUtil.put(this.scale);
		this.framePixels = flixel_util_FlxDestroyUtil.dispose(this.framePixels);
		this._flashPoint = null;
		this._flashRect = null;
		this._flashRect2 = null;
		this._flashPointZero = null;
		this._matrix = null;
		this.colorTransform = null;
		this.set_blend(null);
		this.set_frame(null);
		this.framesData = null;
		this.set_cachedGraphics(null);
		this.region = null;
	}
	,clone: function(NewSprite) {
		if(NewSprite == null) NewSprite = new flixel_FlxSprite();
		return NewSprite.loadGraphicFromSprite(this);
	}
	,loadGraphicFromSprite: function(Sprite) {
		if(!this.exists) flixel_FlxG.log.warn("Warning, trying to clone " + Type.getClassName(js_Boot.getClass(this)) + " object that doesn't exist.");
		this.region = Sprite.region.clone();
		this.bakedRotationAngle = Sprite.bakedRotationAngle;
		this.set_cachedGraphics(Sprite.cachedGraphics);
		this.set_width(this.frameWidth = Sprite.frameWidth);
		this.set_height(this.frameHeight = Sprite.frameHeight);
		if(this.bakedRotationAngle > 0) {
			this.set_width(Sprite.get_width());
			this.set_height(Sprite.get_height());
			this.centerOffsets();
		}
		this.updateFrameData();
		this.resetHelpers();
		this.antialiasing = Sprite.antialiasing;
		this.animation.copyFrom(Sprite.animation);
		return this;
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) Unique = false;
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Animated == null) Animated = false;
		this.bakedRotationAngle = 0;
		this.set_cachedGraphics(flixel_FlxG.bitmap.addWithSpaces(Graphic,0,0,1,1,Unique,Key));
		if(Width == 0) {
			if(Animated == true) Width = this.cachedGraphics.bitmap.height; else Width = this.cachedGraphics.bitmap.width;
			if(Width > this.cachedGraphics.bitmap.width) Width = this.cachedGraphics.bitmap.width; else Width = Width;
		}
		if(Height == 0) {
			if(Animated == true) Height = Width; else Height = this.cachedGraphics.bitmap.height;
			if(Height > this.cachedGraphics.bitmap.height) Height = this.cachedGraphics.bitmap.height; else Height = Height;
		}
		if(!js_Boot.__instanceof(Graphic,flixel_util_loaders_TextureRegion)) {
			this.region = new flixel_system_layer_Region(0,0,Width,Height);
			this.region.width = this.cachedGraphics.bitmap.width;
			this.region.height = this.cachedGraphics.bitmap.height;
		} else {
			this.region = (js_Boot.__cast(Graphic , flixel_util_loaders_TextureRegion)).region.clone();
			if(this.region.tileWidth > 0) Width = this.region.tileWidth; else this.region.tileWidth = this.region.width;
			if(this.region.tileHeight > 0) Height = this.region.tileWidth; else this.region.tileHeight = this.region.height;
		}
		this.set_width(this.frameWidth = Width);
		this.set_height(this.frameHeight = Height);
		this.animation.destroyAnimations();
		this.updateFrameData();
		this.resetHelpers();
		return this;
	}
	,loadRotatedGraphic: function(Graphic,Rotations,Frame,AntiAliasing,AutoBuffer,Key) {
		if(AutoBuffer == null) AutoBuffer = false;
		if(AntiAliasing == null) AntiAliasing = false;
		if(Frame == null) Frame = -1;
		if(Rotations == null) Rotations = 16;
		var rows = Std["int"](Math.sqrt(Rotations));
		var brush = flixel_FlxG.bitmap.addWithSpaces(Graphic,0,0,1,1,false,Key).bitmap;
		var isRegion = js_Boot.__instanceof(Graphic,flixel_util_loaders_TextureRegion);
		var spriteRegion;
		if(isRegion == true) spriteRegion = Graphic; else spriteRegion = null;
		var tempRegion;
		if(isRegion == true) tempRegion = spriteRegion.region; else tempRegion = null;
		if(Frame >= 0 || isRegion) {
			var full = brush;
			if(isRegion) {
				brush = new openfl_display_BitmapData(tempRegion.width,tempRegion.height);
				this._flashRect.x = tempRegion.startX;
				this._flashRect.y = tempRegion.startY;
				this._flashRect.width = tempRegion.width;
				this._flashRect.height = tempRegion.height;
				brush.copyPixels(full,this._flashRect,this._flashPointZero);
			} else {
				brush = new openfl_display_BitmapData(full.height,full.height);
				var rx = Frame * brush.width;
				var ry = 0;
				var fw = full.width;
				if(rx >= fw) {
					ry = (rx / fw | 0) * brush.height;
					rx %= fw;
				}
				this._flashRect.x = rx;
				this._flashRect.y = ry;
				this._flashRect.width = brush.width;
				this._flashRect.height = brush.height;
				brush.copyPixels(full,this._flashRect,this._flashPointZero);
			}
		}
		var max = brush.width;
		if(brush.height > max) max = brush.height;
		if(AutoBuffer) max = max * 1.5 | 0;
		var columns = Math.ceil(Rotations / rows);
		this.set_width(max * columns);
		this.set_height(max * rows);
		var key = "";
		if(typeof(Graphic) == "string") key = Graphic; else if(js_Boot.__instanceof(Graphic,Class)) key = Type.getClassName(Graphic); else if(js_Boot.__instanceof(Graphic,openfl_display_BitmapData) && Key != null) key = Key; else if(isRegion) {
			key = spriteRegion.data.key;
			key += ":" + tempRegion.startX + ":" + tempRegion.startY + ":" + tempRegion.width + ":" + tempRegion.height + ":" + Rotations;
		} else return null;
		if(!isRegion) key += ":" + Frame + ":" + this.get_width() + "x" + this.get_height() + ":" + Rotations;
		var skipGen = flixel_FlxG.bitmap.checkCache(key);
		this.set_cachedGraphics(flixel_FlxG.bitmap.create(Std["int"](this.get_width()) + columns - 1,Std["int"](this.get_height()) + rows - 1,0,true,key));
		this.bakedRotationAngle = 360 / Rotations;
		if(!skipGen) {
			var row = 0;
			var column;
			var bakedAngle = 0;
			var halfBrushWidth = brush.width * 0.5 | 0;
			var halfBrushHeight = brush.height * 0.5 | 0;
			var midpointX = max * 0.5 | 0;
			var midpointY = max * 0.5 | 0;
			while(row < rows) {
				column = 0;
				while(column < columns) {
					this._matrix.identity();
					this._matrix.translate(-halfBrushWidth,-halfBrushHeight);
					this._matrix.rotate(bakedAngle * (Math.PI / 180));
					this._matrix.translate(max * column + midpointX + column,midpointY + row);
					bakedAngle += this.bakedRotationAngle;
					this.cachedGraphics.bitmap.draw(brush,this._matrix,null,null,null,AntiAliasing);
					column++;
				}
				midpointY += max;
				row++;
			}
		}
		this.frameWidth = this.frameHeight = max;
		this.set_width(this.set_height(max));
		this.region = new flixel_system_layer_Region(0,0,max,max,1,1);
		this.region.width = this.cachedGraphics.bitmap.width;
		this.region.height = this.cachedGraphics.bitmap.height;
		this.updateFrameData();
		if(AutoBuffer) {
			this.set_width(brush.width);
			this.set_height(brush.height);
			this.centerOffsets();
		}
		this.animation.createPrerotated();
		this.resetHelpers();
		return this;
	}
	,loadGraphicFromTexture: function(Data,Unique,FrameName) {
		if(Unique == null) Unique = false;
		this.bakedRotationAngle = 0;
		if(js_Boot.__instanceof(Data,flixel_util_loaders_CachedGraphics)) {
			this.set_cachedGraphics(Data);
			if(this.cachedGraphics.data == null) return null;
		} else if(js_Boot.__instanceof(Data,flixel_util_loaders_TexturePackerData)) {
			this.set_cachedGraphics(flixel_FlxG.bitmap.addWithSpaces(Data.assetName,0,0,1,1,Unique,null));
			this.cachedGraphics.data = Data;
		} else return null;
		this.region = new flixel_system_layer_Region();
		this.region.width = this.cachedGraphics.bitmap.width;
		this.region.height = this.cachedGraphics.bitmap.height;
		this.animation.destroyAnimations();
		this.updateFrameData();
		this.resetHelpers();
		if(FrameName != null) this.animation.set_frameName(FrameName);
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
		return this;
	}
	,loadRotatedGraphicFromTexture: function(Data,Image,Rotations,AntiAliasing,AutoBuffer) {
		if(AutoBuffer == null) AutoBuffer = false;
		if(AntiAliasing == null) AntiAliasing = false;
		if(Rotations == null) Rotations = 16;
		var temp = this.loadGraphicFromTexture(Data);
		if(temp == null) return null;
		this.animation.set_frameName(Image);
		var key = Std.string(Data.assetName) + ":" + Image;
		var frameBitmapData = this.getFlxFrameBitmapData();
		if(flixel_FlxG.bitmap.get(key) == null) frameBitmapData = frameBitmapData.clone();
		this.loadRotatedGraphic(frameBitmapData,Rotations,-1,AntiAliasing,AutoBuffer,key);
		return this;
	}
	,makeGraphic: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) Unique = false;
		if(Color == null) Color = -1;
		this.bakedRotationAngle = 0;
		this.set_cachedGraphics(flixel_FlxG.bitmap.create(Width,Height,Color,Unique,Key));
		this.region = new flixel_system_layer_Region();
		this.region.width = Width;
		this.region.height = Height;
		this.set_width(this.region.tileWidth = this.frameWidth = this.cachedGraphics.bitmap.width);
		this.set_height(this.region.tileHeight = this.frameHeight = this.cachedGraphics.bitmap.height);
		this.animation.destroyAnimations();
		this.updateFrameData();
		this.resetHelpers();
		return this;
	}
	,resetSize: function() {
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,resetFrameSize: function() {
		this.frameWidth = this.frame.sourceSize.x | 0;
		this.frameHeight = this.frame.sourceSize.y | 0;
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,resetSizeFromFrame: function() {
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
	}
	,setGraphicSize: function(Width,Height) {
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Width <= 0 && Height <= 0) return;
		var newScaleX = Width / this.frameWidth;
		var newScaleY = Height / this.frameHeight;
		this.scale.set(newScaleX,newScaleY);
		if(Width <= 0) this.scale.set_x(newScaleY); else if(Height <= 0) this.scale.set_y(newScaleX);
	}
	,updateHitbox: function() {
		var newWidth = this.scale.x * this.frameWidth;
		var newHeight = this.scale.y * this.frameHeight;
		this.set_width(newWidth);
		this.set_height(newHeight);
		this.offset.set(-((newWidth - this.frameWidth) * 0.5),-((newHeight - this.frameHeight) * 0.5));
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,resetHelpers: function() {
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
		this._flashRect2.x = 0;
		this._flashRect2.y = 0;
		this._flashRect2.width = this.cachedGraphics.bitmap.width;
		this._flashRect2.height = this.cachedGraphics.bitmap.height;
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
		this.dirty = true;
		this.getFlxFrameBitmapData();
		this._halfWidth = this.frameWidth * 0.5;
		this._halfHeight = this.frameHeight * 0.5;
	}
	,update: function() {
		flixel_FlxObject.prototype.update.call(this);
		this.animation.update();
	}
	,draw: function() {
		if(this.alpha == 0) return;
		if(this.dirty) this.calcFrame();
		var simpleRender = this.isSimpleRender();
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(!camera.visible || !camera.exists || !this.isOnScreen(camera)) continue;
			this._point.set_x(this.x - camera.scroll.x * this.scrollFactor.x - this.offset.x);
			this._point.set_y(this.y - camera.scroll.y * this.scrollFactor.y - this.offset.y);
			if(simpleRender) {
				this._flashPoint.x = Math.floor(this._point.x);
				this._flashPoint.y = Math.floor(this._point.y);
				camera.buffer.copyPixels(this.framePixels,this._flashRect,this._flashPoint,null,null,true);
			} else {
				this._matrix.identity();
				this._matrix.translate(-this.origin.x,-this.origin.y);
				this._matrix.scale(this.scale.x,this.scale.y);
				if(this.angle != 0 && this.bakedRotationAngle <= 0) this._matrix.rotate(this.angle * (Math.PI / 180));
				var _g2 = this._point;
				_g2.set_x(_g2.x + this.origin.x);
				var _g21 = this._point;
				_g21.set_y(_g21.y + this.origin.y);
				if(this.pixelPerfectRender) this._point.floor();
				this._matrix.translate(this._point.x,this._point.y);
				camera.buffer.draw(this.framePixels,this._matrix,null,this.blend,null,this.antialiasing || camera.antialiasing);
			}
		}
	}
	,stamp: function(Brush,X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		if(Brush.dirty) {
			Brush.dirty = true;
			Brush.calcFrame();
		}
		var bitmapData = Brush.framePixels;
		if((Brush.angle == 0 || Brush.bakedRotationAngle > 0) && Brush.scale.x == 1 && Brush.scale.y == 1 && Brush.blend == null) {
			this._flashPoint.x = X + this.region.startX;
			this._flashPoint.y = Y + this.region.startY;
			this._flashRect2.width = bitmapData.width;
			this._flashRect2.height = bitmapData.height;
			this.cachedGraphics.bitmap.copyPixels(bitmapData,this._flashRect2,this._flashPoint,null,null,true);
			this._flashRect2.width = this.cachedGraphics.bitmap.width;
			this._flashRect2.height = this.cachedGraphics.bitmap.height;
			this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
			this.dirty = true;
			this.calcFrame();
			return;
		}
		this._matrix.identity();
		this._matrix.translate(-Brush.origin.x,-Brush.origin.y);
		this._matrix.scale(Brush.scale.x,Brush.scale.y);
		if(Brush.angle != 0) this._matrix.rotate(Brush.angle * (Math.PI / 180));
		this._matrix.translate(X + this.region.startX + Brush.origin.x,Y + this.region.startY + Brush.origin.y);
		var brushBlend = Brush.blend;
		this.cachedGraphics.bitmap.draw(bitmapData,this._matrix,null,brushBlend,null,Brush.antialiasing);
		this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
		this.dirty = true;
		this.calcFrame();
	}
	,drawFrame: function(Force) {
		if(Force == null) Force = false;
		if(Force || this.dirty) {
			this.dirty = true;
			this.calcFrame();
		}
	}
	,centerOffsets: function(AdjustPosition) {
		if(AdjustPosition == null) AdjustPosition = false;
		this.offset.set_x((this.frameWidth - this.get_width()) * 0.5);
		this.offset.set_y((this.frameHeight - this.get_height()) * 0.5);
		if(AdjustPosition) {
			var _g = this;
			_g.set_x(_g.x + this.offset.x);
			var _g1 = this;
			_g1.set_y(_g1.y + this.offset.y);
		}
	}
	,centerOrigin: function() {
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,replaceColor: function(Color,NewColor,FetchPositions) {
		if(FetchPositions == null) FetchPositions = false;
		var positions = null;
		if(FetchPositions) positions = [];
		var row = this.region.startY;
		var column;
		var rows = this.region.height;
		var columns = this.region.width;
		this.cachedGraphics.bitmap.lock();
		while(row < rows) {
			column = this.region.startX;
			while(column < columns) {
				if(this.cachedGraphics.bitmap.getPixel32(column,row) == Color) {
					this.cachedGraphics.bitmap.setPixel32(column,row,NewColor);
					if(FetchPositions) positions.push(flixel_util_FlxPoint.get(column,row));
					this.dirty = true;
				}
				column++;
			}
			row++;
		}
		this.cachedGraphics.bitmap.unlock();
		this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
		return positions;
	}
	,setColorTransform: function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
		if(alphaOffset == null) alphaOffset = 0;
		if(blueOffset == null) blueOffset = 0;
		if(greenOffset == null) greenOffset = 0;
		if(redOffset == null) redOffset = 0;
		if(alphaMultiplier == null) alphaMultiplier = 1.0;
		if(blueMultiplier == null) blueMultiplier = 1.0;
		if(greenMultiplier == null) greenMultiplier = 1.0;
		if(redMultiplier == null) redMultiplier = 1.0;
		this.set_color((redMultiplier * 255 | 0) << 16 | (greenMultiplier * 255 | 0) << 8 | (blueMultiplier * 255 | 0));
		this.set_alpha(alphaMultiplier);
		if(this.colorTransform == null) this.colorTransform = new openfl_geom_ColorTransform(); else {
			this.colorTransform.redMultiplier = redMultiplier;
			this.colorTransform.greenMultiplier = greenMultiplier;
			this.colorTransform.blueMultiplier = blueMultiplier;
			this.colorTransform.alphaMultiplier = alphaMultiplier;
			this.colorTransform.redOffset = redOffset;
			this.colorTransform.greenOffset = greenOffset;
			this.colorTransform.blueOffset = blueOffset;
			this.colorTransform.alphaOffset = alphaOffset;
		}
		this.useColorTransform = this.alpha != 1 || this.color != 16777215 || redOffset != 0 || greenOffset != 0 || blueOffset != 0 || alphaOffset != 0;
		this.dirty = true;
	}
	,updateColorTransform: function() {
		if(this.alpha != 1 || this.color != 16777215) {
			if(this.colorTransform == null) this.colorTransform = new openfl_geom_ColorTransform((this.color >> 16) / 255,(this.color >> 8 & 255) / 255,(this.color & 255) / 255,this.alpha); else {
				this.colorTransform.redMultiplier = (this.color >> 16) / 255;
				this.colorTransform.greenMultiplier = (this.color >> 8 & 255) / 255;
				this.colorTransform.blueMultiplier = (this.color & 255) / 255;
				this.colorTransform.alphaMultiplier = this.alpha;
			}
			this.useColorTransform = true;
		} else {
			if(this.colorTransform != null) {
				this.colorTransform.redMultiplier = 1;
				this.colorTransform.greenMultiplier = 1;
				this.colorTransform.blueMultiplier = 1;
				this.colorTransform.alphaMultiplier = 1;
			}
			this.useColorTransform = false;
		}
		this.dirty = true;
	}
	,pixelsOverlapPoint: function(point,Mask,Camera) {
		if(Mask == null) Mask = 255;
		if(Camera == null) Camera = flixel_FlxG.camera;
		this.getScreenXY(this._point,Camera);
		this._point.set_x(this._point.x - this.offset.x);
		this._point.set_y(this._point.y - this.offset.y);
		this._flashPoint.x = point.x - Camera.scroll.x - this._point.x;
		this._flashPoint.y = point.y - Camera.scroll.y - this._point.y;
		if(point._weak) point.put();
		if(this._flashPoint.x < 0 || this._flashPoint.x > this.frameWidth || this._flashPoint.y < 0 || this._flashPoint.y > this.frameHeight) return false; else {
			var frameData = this.getFlxFrameBitmapData();
			var pixelColor = frameData.getPixel32(this._flashPoint.x | 0,this._flashPoint.y | 0);
			var pixelAlpha = pixelColor >> 24 & 255;
			return pixelAlpha * this.alpha >= Mask;
		}
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) RunOnCpp = false;
		if(this.cachedGraphics == null) this.loadGraphic(flixel__$FlxSprite_GraphicDefault);
		this.getFlxFrameBitmapData();
	}
	,updateFrameData: function() {
		if(this.cachedGraphics == null) return;
		if(this.cachedGraphics.data != null && (this.region.tileWidth == 0 && this.region.tileHeight == 0)) this.framesData = this.cachedGraphics.get_tilesheet().getTexturePackerFrames(this.cachedGraphics.data); else this.framesData = this.cachedGraphics.get_tilesheet().getSpriteSheetFrames(this.region,null);
		this.frames = this.framesData.frames.length;
		this.animation.set_frameIndex(0);
		this.set_frame(this.framesData.frames[0]);
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
	}
	,getFlxFrameBitmapData: function() {
		if(this.frame != null && this.dirty) {
			if(!this.flipX && !this.flipY && this.frame.type == flixel_system_layer_frames_FrameType.REGULAR) this.framePixels = this.frame.paintOnBitmap(this.framePixels); else {
				var frameBmd = null;
				if(this.flipX && this.flipY) frameBmd = this.frame.getHVReversedBitmap(); else if(this.flipX) frameBmd = this.frame.getHReversedBitmap(); else if(this.flipY) frameBmd = this.frame.getVReversedBitmap(); else frameBmd = this.frame.getBitmap();
				if(this.framePixels == null || this.framePixels.width != this.frameWidth || this.framePixels.height != this.frameHeight) {
					if(this.framePixels != null) this.framePixels.dispose();
					this.framePixels = new openfl_display_BitmapData(this.frame.sourceSize.x | 0,this.frame.sourceSize.y | 0);
				}
				this.framePixels.copyPixels(frameBmd,this._flashRect,this._flashPointZero);
			}
			if(this.useColorTransform) this.framePixels.colorTransform(this._flashRect,this.colorTransform);
			this.dirty = false;
		}
		return this.framePixels;
	}
	,getGraphicMidpoint: function(point) {
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		return point.set(this.x + this.frameWidth * 0.5,this.y + this.frameHeight * 0.5);
	}
	,resetFrameBitmapDatas: function() {
		this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) Camera = flixel_FlxG.camera;
		var minX = this.x - this.offset.x - Camera.scroll.x * this.scrollFactor.x;
		var minY = this.y - this.offset.y - Camera.scroll.y * this.scrollFactor.y;
		var maxX = 0;
		var maxY = 0;
		if((this.angle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1) {
			maxX = minX + this.frameWidth;
			maxY = minY + this.frameHeight;
		} else {
			var radiusX = this._halfWidth;
			var radiusY = this._halfHeight;
			if(this.origin.x == this._halfWidth) radiusX = Math.abs(this._halfWidth * this.scale.x); else {
				var sox = this.scale.x * this.origin.x;
				var sfw = this.scale.x * this.frameWidth;
				var x1 = Math.abs(sox);
				var x2 = Math.abs(sfw - sox);
				radiusX = Math.max(x2,x1);
			}
			if(this.origin.y == this._halfHeight) radiusY = Math.abs(this._halfHeight * this.scale.y); else {
				var soy = this.scale.y * this.origin.y;
				var sfh = this.scale.y * this.frameHeight;
				var y1 = Math.abs(soy);
				var y2 = Math.abs(sfh - soy);
				radiusY = Math.max(y2,y1);
			}
			var radius = Math.max(radiusX,radiusY);
			radius *= 1.41421356237;
			minX += this.origin.x;
			maxX = minX + radius;
			minX -= radius;
			minY += this.origin.y;
			maxY = minY + radius;
			minY -= radius;
		}
		if(maxX < 0 || minX > Camera.width) return false;
		if(maxY < 0 || minY > Camera.height) return false;
		return true;
	}
	,isSimpleRender: function() {
		return (this.angle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1 && this.blend == null && this.pixelPerfectRender;
	}
	,setFacingFlip: function(Direction,FlipX,FlipY) {
		this._facingFlip.h[Direction] = { x : FlipX, y : FlipY};
	}
	,get_pixels: function() {
		return this.cachedGraphics.bitmap;
	}
	,set_pixels: function(Pixels) {
		var key = flixel_FlxG.bitmap.getCacheKeyFor(Pixels);
		if(key == null) {
			key = flixel_FlxG.bitmap.getUniqueKey();
			this.set_cachedGraphics(flixel_FlxG.bitmap.addWithSpaces(Pixels,0,0,1,1,false,key));
			this.cachedGraphics.set_destroyOnNoUse(true);
		} else this.set_cachedGraphics(flixel_FlxG.bitmap.get(key));
		if(this.region == null) this.region = new flixel_system_layer_Region();
		this.region.startX = 0;
		this.region.startY = 0;
		this.region.tileWidth = this.region.width = this.cachedGraphics.bitmap.width;
		this.region.tileHeight = this.region.height = this.cachedGraphics.bitmap.height;
		this.region.spacingX = 0;
		this.region.spacingY = 0;
		this.set_width(this.frameWidth = this.cachedGraphics.bitmap.width);
		this.set_height(this.frameHeight = this.cachedGraphics.bitmap.height);
		this.animation.destroyAnimations();
		this.updateFrameData();
		this.resetHelpers();
		this.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
		return Pixels;
	}
	,set_frame: function(Value) {
		this.frame = Value;
		if(this.frame != null) {
			this.frameWidth = this.frame.sourceSize.x | 0;
			this.frameHeight = this.frame.sourceSize.y | 0;
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = this.frameWidth;
			this._flashRect.height = this.frameHeight;
			this.dirty = true;
		} else if(this.framesData != null && this.framesData.frames != null && this.framesData.frames.length > 0) {
			this.frame = this.framesData.frames[0];
			this.dirty = true;
		}
		return this.frame;
	}
	,set_facing: function(Direction) {
		var flip = this._facingFlip.h[Direction];
		if(flip != null) {
			this.set_flipX(flip.x);
			this.set_flipY(flip.y);
		}
		return this.facing = Direction;
	}
	,set_alpha: function(Alpha) {
		if(Alpha > 1) Alpha = 1;
		if(Alpha < 0) Alpha = 0;
		if(Alpha == this.alpha) return this.alpha;
		this.alpha = Alpha;
		this.updateColorTransform();
		return this.alpha;
	}
	,set_color: function(Color) {
		Color &= 16777215;
		if(this.color == Color) return Color;
		this.color = Color;
		this.updateColorTransform();
		return this.color;
	}
	,set_angle: function(Value) {
		this._angleChanged = this.angle != Value || this._angleChanged;
		return flixel_FlxObject.prototype.set_angle.call(this,Value);
	}
	,set_blend: function(Value) {
		return this.blend = Value;
	}
	,set_cachedGraphics: function(Value) {
		var oldCached = this.cachedGraphics;
		if(this.cachedGraphics != Value && Value != null) {
			var _g = Value;
			var _g1 = _g.useCount;
			_g.set_useCount(_g1 + 1);
			_g1;
		}
		if(oldCached != null && oldCached != Value) {
			var _g2 = oldCached;
			var _g11 = _g2.useCount;
			_g2.set_useCount(_g11 - 1);
			_g11;
		}
		return this.cachedGraphics = Value;
	}
	,set_flipX: function(Value) {
		if(this.flipX != Value) this.dirty = true;
		return this.flipX = Value;
	}
	,set_flipY: function(Value) {
		if(this.flipY != Value) this.dirty = true;
		return this.flipY = Value;
	}
	,__class__: flixel_FlxSprite
	,__properties__: $extend(flixel_FlxObject.prototype.__properties__,{set_color:"set_color",set_blend:"set_blend",set_flipY:"set_flipY",set_flipX:"set_flipX",set_facing:"set_facing",set_alpha:"set_alpha",set_cachedGraphics:"set_cachedGraphics",set_frame:"set_frame",set_pixels:"set_pixels",get_pixels:"get_pixels"})
});
var flixel_FlxSubState = function(BGColor) {
	if(BGColor == null) BGColor = 0;
	this._created = false;
	flixel_FlxState.call(this);
	this.closeCallback = null;
	this.set_bgColor(BGColor);
};
$hxClasses["flixel.FlxSubState"] = flixel_FlxSubState;
flixel_FlxSubState.__name__ = ["flixel","FlxSubState"];
flixel_FlxSubState.__super__ = flixel_FlxState;
flixel_FlxSubState.prototype = $extend(flixel_FlxState.prototype,{
	closeCallback: null
	,_parentState: null
	,_bgColor: null
	,_created: null
	,draw: function() {
		var _g = 0;
		var _g1 = flixel_FlxG.cameras.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.fill(this._bgColor);
		}
		flixel_FlxState.prototype.draw.call(this);
	}
	,destroy: function() {
		flixel_FlxState.prototype.destroy.call(this);
		this.closeCallback = null;
		this._parentState = null;
	}
	,close: function() {
		if(this._parentState != null && this._parentState.subState == this) this._parentState._requestSubStateReset = true;
	}
	,get_bgColor: function() {
		return this._bgColor;
	}
	,set_bgColor: function(Value) {
		return this._bgColor = Value;
	}
	,__class__: flixel_FlxSubState
});
var flixel_addons_display_FlxExtendedSprite = function(X,Y,SimpleGraphic) {
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._allowVerticalDrag = true;
	this._allowHorizontalDrag = true;
	this._clickCounter = 0;
	this._clickPixelPerfect = false;
	this._clickOnRelease = false;
	this._snapOnRelease = false;
	this._snapOnDrag = false;
	this.hasMouseSpring = false;
	this.springOnPressed = true;
	this.draggable = false;
	this.isDragged = false;
	this.hasGravity = false;
	this.throwable = false;
	this.clickable = false;
	this.isPressed = false;
	this._rect = flixel_util_FlxRect.get(null,null,null,null);
	flixel_FlxSprite.call(this,X,Y,SimpleGraphic);
};
$hxClasses["flixel.addons.display.FlxExtendedSprite"] = flixel_addons_display_FlxExtendedSprite;
flixel_addons_display_FlxExtendedSprite.__name__ = ["flixel","addons","display","FlxExtendedSprite"];
flixel_addons_display_FlxExtendedSprite.__super__ = flixel_FlxSprite;
flixel_addons_display_FlxExtendedSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	priorityID: null
	,isPressed: null
	,clickable: null
	,throwable: null
	,boundsRect: null
	,boundsSprite: null
	,hasGravity: null
	,gravityX: null
	,gravityY: null
	,frictionX: null
	,frictionY: null
	,toleranceX: null
	,toleranceY: null
	,isDragged: null
	,draggable: null
	,springOnPressed: null
	,springOffsetX: null
	,springOffsetY: null
	,mousePressedCallback: null
	,mouseReleasedCallback: null
	,mouseSpring: null
	,mouseStartDragCallback: null
	,mouseStopDragCallback: null
	,hasMouseSpring: null
	,_snapOnDrag: null
	,_snapOnRelease: null
	,_snapX: null
	,_snapY: null
	,_clickOnRelease: null
	,_clickPixelPerfect: null
	,_clickPixelPerfectAlpha: null
	,_clickCounter: null
	,_rect: null
	,_throwXFactor: null
	,_throwYFactor: null
	,_dragPixelPerfect: null
	,_dragPixelPerfectAlpha: null
	,_dragOffsetX: null
	,_dragOffsetY: null
	,_dragFromPoint: null
	,_allowHorizontalDrag: null
	,_allowVerticalDrag: null
	,enableMouseClicks: function(OnRelease,PixelPerfect,AlphaThreshold) {
		if(AlphaThreshold == null) AlphaThreshold = 255;
		if(PixelPerfect == null) PixelPerfect = false;
		if(flixel_FlxG.plugins.get(flixel_addons_plugin_FlxMouseControl) == null) throw new js__$Boot_HaxeError("FlxExtendedSprite.enableMouseClicks called but FlxMouseControl plugin not activated");
		this.clickable = true;
		this._clickOnRelease = OnRelease;
		this._clickPixelPerfect = PixelPerfect;
		this._clickPixelPerfectAlpha = AlphaThreshold;
		this._clickCounter = 0;
	}
	,disableMouseClicks: function() {
		this.clickable = false;
		this.mousePressedCallback = null;
		this.mouseReleasedCallback = null;
	}
	,enableMouseDrag: function(LockCenter,PixelPerfect,AlphaThreshold,BoundsRect,BoundsSprite) {
		if(AlphaThreshold == null) AlphaThreshold = 255;
		if(PixelPerfect == null) PixelPerfect = false;
		if(LockCenter == null) LockCenter = false;
		if(flixel_FlxG.plugins.get(flixel_addons_plugin_FlxMouseControl) == null) throw new js__$Boot_HaxeError("FlxExtendedSprite.enableMouseDrag called but FlxMouseControl plugin not activated");
		this.draggable = true;
		this._dragFromPoint = LockCenter;
		this._dragPixelPerfect = PixelPerfect;
		this._dragPixelPerfectAlpha = AlphaThreshold;
		if(BoundsRect != null) this.boundsRect = BoundsRect;
		if(BoundsSprite != null) this.boundsSprite = BoundsSprite;
	}
	,disableMouseDrag: function() {
		if(this.isDragged) {
			flixel_addons_plugin_FlxMouseControl.dragTarget = null;
			flixel_addons_plugin_FlxMouseControl.isDragging = false;
		}
		this.isDragged = false;
		this.draggable = false;
		this.mouseStartDragCallback = null;
		this.mouseStopDragCallback = null;
	}
	,enableMouseThrow: function(FactorX,FactorY) {
		if(flixel_FlxG.plugins.get(flixel_addons_plugin_FlxMouseControl) == null) throw new js__$Boot_HaxeError("FlxExtendedSprite.enableMouseThrow called but FlxMouseControl plugin not activated");
		this.throwable = true;
		this._throwXFactor = FactorX;
		this._throwYFactor = FactorY;
		if(this.clickable == false && this.draggable == false) this.clickable = true;
	}
	,disableMouseThrow: function() {
		this.throwable = false;
	}
	,enableMouseSnap: function(SnapX,SnapY,OnDrag,OnRelease) {
		if(OnRelease == null) OnRelease = false;
		if(OnDrag == null) OnDrag = true;
		this._snapOnDrag = OnDrag;
		this._snapOnRelease = OnRelease;
		this._snapX = SnapX;
		this._snapY = SnapY;
	}
	,disableMouseSnap: function() {
		this._snapOnDrag = false;
		this._snapOnRelease = false;
	}
	,enableMouseSpring: function(OnPressed,RetainVelocity,Tension,Friction,Gravity) {
		if(Gravity == null) Gravity = 0;
		if(Friction == null) Friction = 0.95;
		if(Tension == null) Tension = 0.1;
		if(RetainVelocity == null) RetainVelocity = false;
		if(OnPressed == null) OnPressed = true;
		if(flixel_FlxG.plugins.get(flixel_addons_plugin_FlxMouseControl) == null) throw new js__$Boot_HaxeError("FlxExtendedSprite.enableMouseSpring called but FlxMouseControl plugin not activated");
		this.hasMouseSpring = true;
		this.springOnPressed = OnPressed;
		if(this.mouseSpring == null) this.mouseSpring = new flixel_addons_display_FlxMouseSpring(this,RetainVelocity,Tension,Friction,Gravity); else {
			this.mouseSpring.tension = Tension;
			this.mouseSpring.friction = Friction;
			this.mouseSpring.gravity = Gravity;
		}
		if(this.clickable == false && this.draggable == false) this.clickable = true;
		return this.mouseSpring;
	}
	,disableMouseSpring: function() {
		this.hasMouseSpring = false;
		this.mouseSpring = null;
	}
	,setDragLock: function(AllowHorizontalDrag,AllowVerticalDrag) {
		if(AllowVerticalDrag == null) AllowVerticalDrag = true;
		if(AllowHorizontalDrag == null) AllowHorizontalDrag = true;
		this._allowHorizontalDrag = AllowHorizontalDrag;
		this._allowVerticalDrag = AllowVerticalDrag;
	}
	,update: function() {
		if(this.draggable == true && this.isDragged == true) this.updateDrag();
		if(this.isPressed == false && flixel_FlxG.mouse._leftButton.justPressed()) this.checkForClick();
		if(this.hasGravity == true) this.updateGravity();
		if(this.hasMouseSpring == true) {
			if(this.springOnPressed == false) this.mouseSpring.update(); else if(this.isPressed == true) this.mouseSpring.update(); else this.mouseSpring.reset();
		}
		flixel_FlxSprite.prototype.update.call(this);
	}
	,updateGravity: function() {
		if(this.velocity.x != 0) {
			if(this.acceleration.x < 0) {
				if((this.touching & 17) != 0) {
					this.drag.set_y(this.frictionY);
					if((this.wasTouching & 17) == 0) {
						if(this.velocity.x < this.toleranceX) this.velocity.set_x(0);
					}
				} else this.drag.set_y(0);
			} else if(this.acceleration.x > 0) {
				if((this.touching & 17) != 0) {
					this.drag.set_y(this.frictionY);
					if((this.wasTouching & 17) == 0) {
						if(this.velocity.x > -this.toleranceX) this.velocity.set_x(0);
					}
				} else this.drag.set_y(0);
			}
		}
		if(this.velocity.y != 0) {
			if(this.acceleration.y < 0) {
				if((this.touching & 256) != 0) {
					this.drag.set_x(this.frictionX);
					if((this.wasTouching & 256) == 0) {
						if(this.velocity.y < this.toleranceY) this.velocity.set_y(0);
					}
				} else this.drag.set_x(0);
			} else if(this.acceleration.y > 0) {
				if((this.touching & 4096) != 0) {
					this.drag.set_x(this.frictionX);
					if((this.wasTouching & 4096) == 0) {
						if(this.velocity.y > -this.toleranceY) this.velocity.set_y(0);
					}
				} else this.drag.set_x(0);
			}
		}
	}
	,updateDrag: function() {
		if(this._allowHorizontalDrag == true) this.set_x(Math.floor(flixel_FlxG.mouse.screenX + this.scrollFactor.x * (flixel_FlxG.mouse.x - flixel_FlxG.mouse.screenX)) - this._dragOffsetX);
		if(this._allowVerticalDrag == true) this.set_y(Math.floor(flixel_FlxG.mouse.screenY + this.scrollFactor.y * (flixel_FlxG.mouse.y - flixel_FlxG.mouse.screenY)) - this._dragOffsetY);
		if(this.boundsRect != null) this.checkBoundsRect();
		if(this.boundsSprite != null) this.checkBoundsSprite();
		if(this._snapOnDrag) {
			this.set_x(Math.floor(this.x / this._snapX) * this._snapX);
			this.set_y(Math.floor(this.y / this._snapY) * this._snapY);
		}
	}
	,checkForClick: function() {
		if(this.get_mouseOver() && flixel_FlxG.mouse._leftButton.justPressed()) {
			if(this._clickPixelPerfect == false && this._dragPixelPerfect == false) {
				flixel_addons_plugin_FlxMouseControl.addToStack(this);
				return;
			}
			if(this._clickPixelPerfect && flixel_util_FlxCollision.pixelPerfectPointCheck(Math.floor(flixel_FlxG.mouse.x),Math.floor(flixel_FlxG.mouse.y),this,this._clickPixelPerfectAlpha)) {
				flixel_addons_plugin_FlxMouseControl.addToStack(this);
				return;
			}
			if(this._dragPixelPerfect && flixel_util_FlxCollision.pixelPerfectPointCheck(Math.floor(flixel_FlxG.mouse.x),Math.floor(flixel_FlxG.mouse.y),this,this._dragPixelPerfectAlpha)) {
				flixel_addons_plugin_FlxMouseControl.addToStack(this);
				return;
			}
		}
	}
	,mousePressedHandler: function() {
		this.isPressed = true;
		if(this.clickable == true && this._clickOnRelease == false) this._clickCounter++;
		if(this.mousePressedCallback != null) this.mousePressedCallback(this,this.get_mouseX(),this.get_mouseY());
	}
	,mouseReleasedHandler: function() {
		this.isPressed = false;
		if(this.isDragged == true) this.stopDrag();
		if(this.clickable == true && this._clickOnRelease == true) this._clickCounter++;
		if(this.throwable == true) {
			this.velocity.set_x(flixel_addons_plugin_FlxMouseControl.speedX * this._throwXFactor);
			this.velocity.set_y(flixel_addons_plugin_FlxMouseControl.speedY * this._throwYFactor);
		}
		if(this.mouseReleasedCallback != null) this.mouseReleasedCallback(this,this.get_mouseX(),this.get_mouseY());
	}
	,startDrag: function() {
		this.isDragged = true;
		if(this._dragFromPoint == false) {
			this._dragOffsetX = Math.floor(flixel_FlxG.mouse.screenX + this.scrollFactor.x * (flixel_FlxG.mouse.x - flixel_FlxG.mouse.screenX) - this.x);
			this._dragOffsetY = Math.floor(flixel_FlxG.mouse.screenY + this.scrollFactor.y * (flixel_FlxG.mouse.y - flixel_FlxG.mouse.screenY) - this.y);
		} else {
			this._dragOffsetX = this.frameWidth / 2 | 0;
			this._dragOffsetY = this.frameHeight / 2 | 0;
		}
	}
	,checkBoundsRect: function() {
		if(this.x < this.boundsRect.x) this.set_x(this.boundsRect.x); else if(this.x + this.get_width() > this.boundsRect.get_right()) this.set_x(this.boundsRect.get_right() - this.get_width());
		if(this.y < this.boundsRect.y) this.set_y(this.boundsRect.y); else if(this.y + this.get_height() > this.boundsRect.get_bottom()) this.set_y(this.boundsRect.get_bottom() - this.get_height());
	}
	,checkBoundsSprite: function() {
		if(this.x < this.boundsSprite.x) this.set_x(this.boundsSprite.x); else if(this.x + this.get_width() > this.boundsSprite.x + this.boundsSprite.get_width()) this.set_x(this.boundsSprite.x + this.boundsSprite.get_width() - this.get_width());
		if(this.y < this.boundsSprite.y) this.set_y(this.boundsSprite.y); else if(this.y + this.get_height() > this.boundsSprite.y + this.boundsSprite.get_height()) this.set_y(this.boundsSprite.y + this.boundsSprite.get_height() - this.get_height());
	}
	,stopDrag: function() {
		this.isDragged = false;
		if(this._snapOnRelease) {
			this.set_x(Math.floor(this.x / this._snapX) * this._snapX);
			this.set_y(Math.floor(this.y / this._snapY) * this._snapY);
		}
	}
	,setGravity: function(GravityX,GravityY,FrictionX,FrictionY,ToleranceX,ToleranceY) {
		if(ToleranceY == null) ToleranceY = 10;
		if(ToleranceX == null) ToleranceX = 10;
		if(FrictionY == null) FrictionY = 500;
		if(FrictionX == null) FrictionX = 500;
		this.hasGravity = true;
		this.gravityX = GravityX;
		this.gravityY = GravityY;
		this.frictionX = FrictionX;
		this.frictionY = FrictionY;
		this.toleranceX = ToleranceX;
		this.toleranceY = ToleranceY;
		if(GravityX == 0 && GravityY == 0) this.hasGravity = false;
		this.acceleration.set_x(GravityX);
		this.acceleration.set_y(GravityY);
	}
	,flipGravity: function() {
		if(!isNaN(this.gravityX) && this.gravityX != 0) {
			this.gravityX = -this.gravityX;
			this.acceleration.set_x(this.gravityX);
		}
		if(!isNaN(this.gravityY) && this.gravityY != 0) {
			this.gravityY = -this.gravityY;
			this.acceleration.set_y(this.gravityY);
		}
	}
	,get_clicks: function() {
		return this._clickCounter;
	}
	,set_clicks: function(NewValue) {
		return this._clickCounter = NewValue;
	}
	,get_springX: function() {
		return Math.floor(this.x + this.springOffsetX);
	}
	,get_springY: function() {
		return Math.floor(this.y + this.springOffsetY);
	}
	,get_point: function() {
		return this._point;
	}
	,set_point: function(NewPoint) {
		return this._point = NewPoint;
	}
	,get_mouseOver: function() {
		return flixel_util_FlxMath.pointInCoordinates(Math.floor(flixel_FlxG.mouse.screenX + this.scrollFactor.x * (flixel_FlxG.mouse.x - flixel_FlxG.mouse.screenX)),Math.floor(flixel_FlxG.mouse.screenY + this.scrollFactor.y * (flixel_FlxG.mouse.y - flixel_FlxG.mouse.screenY)),Math.floor(this.x),Math.floor(this.y),Math.floor(this.get_width()),Math.floor(this.get_height()));
	}
	,get_mouseX: function() {
		if(this.get_mouseOver()) return Math.floor(flixel_FlxG.mouse.x - this.x);
		return -1;
	}
	,get_mouseY: function() {
		if(this.get_mouseOver()) return Math.floor(flixel_FlxG.mouse.y - this.y);
		return -1;
	}
	,get_rect: function() {
		this._rect.x = this.x;
		this._rect.y = this.y;
		this._rect.width = this.get_width();
		this._rect.height = this.get_height();
		return this._rect;
	}
	,__class__: flixel_addons_display_FlxExtendedSprite
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",get_mouseOver:"get_mouseOver",get_rect:"get_rect",set_point:"set_point",get_point:"get_point",get_springY:"get_springY",get_springX:"get_springX",set_clicks:"set_clicks",get_clicks:"get_clicks"})
});
var flixel_addons_display_FlxMouseSpring = function(Sprite,RetainVelocity,Tension,Friction,Gravity) {
	if(Gravity == null) Gravity = 0;
	if(Friction == null) Friction = 0.95;
	if(Tension == null) Tension = 0.1;
	if(RetainVelocity == null) RetainVelocity = false;
	this._ay = 0;
	this._ax = 0;
	this._dy = 0;
	this._dx = 0;
	this._vy = 0;
	this._vx = 0;
	this.sprite = Sprite;
	this._retainVelocity = RetainVelocity;
	this.tension = Tension;
	this.friction = Friction;
	this.gravity = Gravity;
};
$hxClasses["flixel.addons.display.FlxMouseSpring"] = flixel_addons_display_FlxMouseSpring;
flixel_addons_display_FlxMouseSpring.__name__ = ["flixel","addons","display","FlxMouseSpring"];
flixel_addons_display_FlxMouseSpring.prototype = {
	sprite: null
	,tension: null
	,friction: null
	,gravity: null
	,_retainVelocity: null
	,_vx: null
	,_vy: null
	,_dx: null
	,_dy: null
	,_ax: null
	,_ay: null
	,update: function() {
		this._dx = flixel_FlxG.mouse.x - this.sprite.get_springX();
		this._dy = flixel_FlxG.mouse.y - this.sprite.get_springY();
		this._ax = this._dx * this.tension;
		this._ay = this._dy * this.tension;
		this._vx += this._ax;
		this._vy += this._ay;
		this._vy += this.gravity;
		this._vx *= this.friction;
		this._vy *= this.friction;
		var _g = this.sprite;
		_g.set_x(_g.x + this._vx);
		var _g1 = this.sprite;
		_g1.set_y(_g1.y + this._vy);
	}
	,reset: function() {
		this._vx = 0;
		this._vy = 0;
		this._dx = 0;
		this._dy = 0;
		this._ax = 0;
		this._ay = 0;
	}
	,__class__: flixel_addons_display_FlxMouseSpring
};
var flixel_addons_nape_FlxNapeSprite = function(X,Y,SimpleGraphic,CreateRectangularBody,EnablePhysics) {
	if(EnablePhysics == null) EnablePhysics = true;
	if(CreateRectangularBody == null) CreateRectangularBody = true;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._angularDrag = 1;
	this._linearDrag = 1;
	this.physicsEnabled = false;
	flixel_FlxSprite.call(this,X,Y,SimpleGraphic);
	if(CreateRectangularBody) {
		this.createRectangularBody();
		this.body.set_space(EnablePhysics?flixel_addons_nape_FlxNapeState.space:null);
		this.physicsEnabled = EnablePhysics;
	}
};
$hxClasses["flixel.addons.nape.FlxNapeSprite"] = flixel_addons_nape_FlxNapeSprite;
flixel_addons_nape_FlxNapeSprite.__name__ = ["flixel","addons","nape","FlxNapeSprite"];
flixel_addons_nape_FlxNapeSprite.__super__ = flixel_FlxSprite;
flixel_addons_nape_FlxNapeSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	body: null
	,physicsEnabled: null
	,_linearDrag: null
	,_angularDrag: null
	,destroy: function() {
		this.destroyPhysObjects();
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,update: function() {
		flixel_FlxSprite.prototype.update.call(this);
		if(this.body != null && this.moves) this.updatePhysObjects();
	}
	,kill: function() {
		flixel_FlxSprite.prototype.kill.call(this);
		if(this.body != null) this.body.set_space(null);
	}
	,revive: function() {
		flixel_FlxSprite.prototype.revive.call(this);
		if(this.body != null) this.body.set_space(flixel_addons_nape_FlxNapeState.space);
	}
	,addPremadeBody: function(NewBody) {
		var currSpace = null;
		if(this.body != null) {
			currSpace = this.body.get_space();
			this.destroyPhysObjects();
		}
		((function($this) {
			var $r;
			if(NewBody.zpp_inner.wrap_pos == null) NewBody.zpp_inner.setupPosition();
			$r = NewBody.zpp_inner.wrap_pos;
			return $r;
		}(this))).set_x(this.x);
		((function($this) {
			var $r;
			if(NewBody.zpp_inner.wrap_pos == null) NewBody.zpp_inner.setupPosition();
			$r = NewBody.zpp_inner.wrap_pos;
			return $r;
		}(this))).set_y(this.y);
		NewBody.zpp_inner.immutable_midstep("Body::space");
		if((NewBody.zpp_inner.space == null?null:NewBody.zpp_inner.space.outer) != currSpace) {
			if((NewBody.zpp_inner.space == null?null:NewBody.zpp_inner.space.outer) != null) NewBody.zpp_inner.component.woken = false;
			if((NewBody.zpp_inner.space == null?null:NewBody.zpp_inner.space.outer) != null) (NewBody.zpp_inner.space == null?null:NewBody.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(NewBody);
			if(currSpace != null) currSpace.zpp_inner.wrap_bodies.add(NewBody);
		}
		if(NewBody.zpp_inner.space == null) null; else NewBody.zpp_inner.space.outer;
		this.body = NewBody;
		this.setBodyMaterial();
	}
	,createCircularBody: function(Radius,_Type) {
		if(Radius == null) Radius = 16;
		var currSpace = null;
		if(this.body != null) {
			currSpace = this.body.get_space();
			this.destroyPhysObjects();
		}
		this.centerOffsets(false);
		this.body = new nape_phys_Body(_Type != null?_Type:(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
			return $r;
		}(this)),nape_geom_Vec2.get(this.x,this.y,true));
		this.body.zpp_inner.wrap_shapes.add(new nape_shape_Circle(Radius));
		this.body.set_space(currSpace);
		this.setBodyMaterial();
	}
	,createRectangularBody: function(Width,Height,_Type) {
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		var currSpace = null;
		if(this.body != null) {
			currSpace = this.body.get_space();
			this.destroyPhysObjects();
		}
		if(Width == 0) Width = this.frameWidth;
		if(Height == 0) Height = this.frameHeight;
		this.centerOffsets(false);
		this.body = new nape_phys_Body(_Type != null?_Type:(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
			return $r;
		}(this)),nape_geom_Vec2.get(this.x,this.y,true));
		this.body.zpp_inner.wrap_shapes.add(new nape_shape_Polygon(nape_shape_Polygon.box(Width,Height)));
		this.body.set_space(currSpace);
		this.setBodyMaterial();
	}
	,setBodyMaterial: function(Elasticity,DynamicFriction,StaticFriction,Density,RotationFriction) {
		if(RotationFriction == null) RotationFriction = 0.001;
		if(Density == null) Density = 1;
		if(StaticFriction == null) StaticFriction = 0.4;
		if(DynamicFriction == null) DynamicFriction = 0.2;
		if(Elasticity == null) Elasticity = 1;
		if(this.body == null) return;
		this.body.setShapeMaterials(new nape_phys_Material(Elasticity,DynamicFriction,StaticFriction,Density,RotationFriction));
	}
	,destroyPhysObjects: function() {
		if(this.body != null) {
			flixel_addons_nape_FlxNapeState.space.zpp_inner.wrap_bodies.remove(this.body);
			this.body = null;
		}
	}
	,setDrag: function(LinearDrag,AngularDrag) {
		if(AngularDrag == null) AngularDrag = 1;
		if(LinearDrag == null) LinearDrag = 1;
		this._linearDrag = LinearDrag;
		this._angularDrag = AngularDrag;
	}
	,updatePhysObjects: function() {
		this.set_x(this.body.get_position().get_x() - this.origin.x);
		this.set_y(this.body.get_position().get_y() - this.origin.y);
		if(!this.body.zpp_inner.norotate) this.set_angle(this.body.zpp_inner.rot * (180 / Math.PI));
		if(this._linearDrag < 1 || this._angularDrag < 1) {
			var _g = this.body;
			_g.set_angularVel(_g.zpp_inner.angvel * this._angularDrag);
			var _g1 = this.body.get_velocity();
			_g1.set_x((function($this) {
				var $r;
				_g1.zpp_inner.validate();
				$r = _g1.zpp_inner.x;
				return $r;
			}(this)) * this._linearDrag);
			var _g2 = this.body.get_velocity();
			_g2.set_y((function($this) {
				var $r;
				_g2.zpp_inner.validate();
				$r = _g2.zpp_inner.y;
				return $r;
			}(this)) * this._linearDrag);
		}
	}
	,set_physicsEnabled: function(Value) {
		this.body.set_space(Value?flixel_addons_nape_FlxNapeState.space:null);
		return this.physicsEnabled = Value;
	}
	,__class__: flixel_addons_nape_FlxNapeSprite
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_physicsEnabled:"set_physicsEnabled"})
});
var flixel_addons_plugin_FlxMouseControl = function() {
	flixel_plugin_FlxPlugin.call(this);
};
$hxClasses["flixel.addons.plugin.FlxMouseControl"] = flixel_addons_plugin_FlxMouseControl;
flixel_addons_plugin_FlxMouseControl.__name__ = ["flixel","addons","plugin","FlxMouseControl"];
flixel_addons_plugin_FlxMouseControl.dragTarget = null;
flixel_addons_plugin_FlxMouseControl.clickTarget = null;
flixel_addons_plugin_FlxMouseControl.speedX = null;
flixel_addons_plugin_FlxMouseControl.speedY = null;
flixel_addons_plugin_FlxMouseControl.mouseZone = null;
flixel_addons_plugin_FlxMouseControl._clickCoords = null;
flixel_addons_plugin_FlxMouseControl.addToStack = function(Item) {
	if(flixel_addons_plugin_FlxMouseControl.mouseZone != null) {
		if(flixel_util_FlxMath.pointInFlxRect(Math.floor(flixel_FlxG.mouse.x),Math.floor(flixel_FlxG.mouse.y),flixel_addons_plugin_FlxMouseControl.mouseZone) == true) flixel_addons_plugin_FlxMouseControl._clickStack.push(Item);
	} else flixel_addons_plugin_FlxMouseControl._clickStack.push(Item);
};
flixel_addons_plugin_FlxMouseControl.clear = function() {
	flixel_addons_plugin_FlxMouseControl._hasClickTarget = false;
	if(flixel_addons_plugin_FlxMouseControl.clickTarget != null) flixel_addons_plugin_FlxMouseControl.clickTarget.mouseReleasedHandler();
	flixel_addons_plugin_FlxMouseControl.clickTarget = null;
	flixel_addons_plugin_FlxMouseControl.isDragging = false;
	if(flixel_addons_plugin_FlxMouseControl.dragTarget != null) flixel_addons_plugin_FlxMouseControl.dragTarget.stopDrag();
	flixel_addons_plugin_FlxMouseControl.speedX = 0;
	flixel_addons_plugin_FlxMouseControl.speedY = 0;
	flixel_addons_plugin_FlxMouseControl.dragTarget = null;
	flixel_addons_plugin_FlxMouseControl.mouseZone = null;
	flixel_addons_plugin_FlxMouseControl.linkToDeadZone = false;
};
flixel_addons_plugin_FlxMouseControl.__super__ = flixel_plugin_FlxPlugin;
flixel_addons_plugin_FlxMouseControl.prototype = $extend(flixel_plugin_FlxPlugin.prototype,{
	update: function() {
		flixel_addons_plugin_FlxMouseControl.speedX = flixel_FlxG.mouse.screenX - flixel_addons_plugin_FlxMouseControl._oldX;
		flixel_addons_plugin_FlxMouseControl.speedY = flixel_FlxG.mouse.screenY - flixel_addons_plugin_FlxMouseControl._oldY;
		flixel_addons_plugin_FlxMouseControl._oldX = flixel_FlxG.mouse.screenX;
		flixel_addons_plugin_FlxMouseControl._oldY = flixel_FlxG.mouse.screenY;
		if(flixel_addons_plugin_FlxMouseControl._hasClickTarget) {
			if(flixel_FlxG.mouse._leftButton.current > 0) {
				if(flixel_addons_plugin_FlxMouseControl.isDragging == false && flixel_addons_plugin_FlxMouseControl.clickTarget.draggable == true && (flixel_addons_plugin_FlxMouseControl._clickCoords.x != flixel_FlxG.mouse.x || flixel_addons_plugin_FlxMouseControl._clickCoords.y != flixel_FlxG.mouse.y)) {
					flixel_addons_plugin_FlxMouseControl.isDragging = true;
					flixel_addons_plugin_FlxMouseControl.dragTarget = flixel_addons_plugin_FlxMouseControl.clickTarget;
					flixel_addons_plugin_FlxMouseControl.dragTarget.startDrag();
				}
			} else this.releaseMouse();
			if(flixel_addons_plugin_FlxMouseControl.linkToDeadZone == true) {
				if(flixel_util_FlxMath.mouseInFlxRect(false,flixel_FlxG.camera.deadzone) == false) this.releaseMouse();
			} else if(flixel_util_FlxMath.mouseInFlxRect(true,flixel_addons_plugin_FlxMouseControl.mouseZone) == false) this.releaseMouse();
		} else if(flixel_FlxG.mouse._leftButton.current > 0 && flixel_addons_plugin_FlxMouseControl._clickStack.length > 0) this.assignClickedSprite();
	}
	,releaseMouse: function() {
		flixel_addons_plugin_FlxMouseControl.clickTarget.mouseReleasedHandler();
		flixel_addons_plugin_FlxMouseControl._hasClickTarget = false;
		flixel_addons_plugin_FlxMouseControl.clickTarget = null;
		flixel_addons_plugin_FlxMouseControl.isDragging = false;
		flixel_addons_plugin_FlxMouseControl.dragTarget = null;
	}
	,assignClickedSprite: function() {
		if(flixel_addons_plugin_FlxMouseControl._clickStack.length > 1) flixel_addons_plugin_FlxMouseControl._clickStack.sort($bind(this,this.sortHandler));
		flixel_addons_plugin_FlxMouseControl.clickTarget = flixel_addons_plugin_FlxMouseControl._clickStack.pop();
		flixel_addons_plugin_FlxMouseControl._clickCoords = flixel_addons_plugin_FlxMouseControl.clickTarget._point;
		flixel_addons_plugin_FlxMouseControl._hasClickTarget = true;
		flixel_addons_plugin_FlxMouseControl.clickTarget.mousePressedHandler();
		flixel_addons_plugin_FlxMouseControl._clickStack = [];
	}
	,sortHandler: function(Item1,Item2) {
		var prop1 = Reflect.getProperty(Item1,flixel_addons_plugin_FlxMouseControl.sortIndex);
		var prop2 = Reflect.getProperty(Item2,flixel_addons_plugin_FlxMouseControl.sortIndex);
		if(prop1 < prop2) return flixel_addons_plugin_FlxMouseControl.sortOrder; else if(prop1 > prop2) return -flixel_addons_plugin_FlxMouseControl.sortOrder;
		return 0;
	}
	,destroy: function() {
		flixel_addons_plugin_FlxMouseControl.clear();
	}
	,__class__: flixel_addons_plugin_FlxMouseControl
});
var flixel_animation_FlxBaseAnimation = function(Parent,Name) {
	this.curIndex = 0;
	this.parent = Parent;
	this.name = Name;
};
$hxClasses["flixel.animation.FlxBaseAnimation"] = flixel_animation_FlxBaseAnimation;
flixel_animation_FlxBaseAnimation.__name__ = ["flixel","animation","FlxBaseAnimation"];
flixel_animation_FlxBaseAnimation.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_animation_FlxBaseAnimation.prototype = {
	parent: null
	,name: null
	,curIndex: null
	,set_curIndex: function(Value) {
		this.curIndex = Value;
		if(this.parent != null && this.parent._curAnim == this) this.parent.set_frameIndex(Value);
		return Value;
	}
	,destroy: function() {
		this.parent = null;
		this.name = null;
	}
	,update: function() {
	}
	,clone: function(Parent) {
		return null;
	}
	,__class__: flixel_animation_FlxBaseAnimation
	,__properties__: {set_curIndex:"set_curIndex"}
};
var flixel_animation_FlxAnimation = function(Parent,Name,Frames,FrameRate,Looped) {
	if(Looped == null) Looped = true;
	if(FrameRate == null) FrameRate = 0;
	this._frameTimer = 0;
	this.looped = true;
	this.paused = true;
	this.finished = true;
	this.delay = 0;
	this.curFrame = 0;
	flixel_animation_FlxBaseAnimation.call(this,Parent,Name);
	this.set_frameRate(FrameRate);
	this._frames = Frames;
	this.looped = Looped;
};
$hxClasses["flixel.animation.FlxAnimation"] = flixel_animation_FlxAnimation;
flixel_animation_FlxAnimation.__name__ = ["flixel","animation","FlxAnimation"];
flixel_animation_FlxAnimation.__super__ = flixel_animation_FlxBaseAnimation;
flixel_animation_FlxAnimation.prototype = $extend(flixel_animation_FlxBaseAnimation.prototype,{
	frameRate: null
	,curFrame: null
	,numFrames: null
	,delay: null
	,finished: null
	,paused: null
	,looped: null
	,_frames: null
	,_frameTimer: null
	,destroy: function() {
		this._frames = null;
		this.name = null;
		flixel_animation_FlxBaseAnimation.prototype.destroy.call(this);
	}
	,play: function(Force,Frame) {
		if(Frame == null) Frame = 0;
		if(Force == null) Force = false;
		if(!Force && (this.looped || !this.finished)) {
			this.paused = false;
			this.finished = false;
			this.set_curFrame(this.curFrame);
			return;
		}
		this.paused = false;
		this._frameTimer = 0;
		if(this.delay <= 0 || Frame == this._frames.length - 1) this.finished = true; else this.finished = false;
		if(Frame < 0) this.set_curFrame(flixel_util_FlxRandom.intRanged(0,this._frames.length - 1)); else if(this._frames.length > Frame) this.set_curFrame(Frame); else this.set_curFrame(0);
	}
	,restart: function() {
		this.play(true);
	}
	,stop: function() {
		this.finished = true;
		this.paused = true;
	}
	,update: function() {
		if(this.delay > 0 && (this.looped || !this.finished) && !this.paused) {
			this._frameTimer += flixel_FlxG.elapsed;
			while(this._frameTimer > this.delay) {
				this._frameTimer = this._frameTimer - this.delay;
				if(this.looped && this.curFrame == this._frames.length - 1) this.set_curFrame(0); else {
					var _g = this;
					var _g1 = _g.curFrame;
					_g.set_curFrame(_g1 + 1);
					_g1;
				}
			}
		}
	}
	,clone: function(Parent) {
		return new flixel_animation_FlxAnimation(Parent,this.name,this._frames,this.frameRate,this.looped);
	}
	,set_frameRate: function(value) {
		this.delay = 0;
		this.frameRate = value;
		if(value > 0) this.delay = 1.0 / value;
		return value;
	}
	,set_curFrame: function(Frame) {
		if(Frame >= 0) {
			if(!this.looped && Frame >= this._frames.length) {
				this.finished = true;
				this.curFrame = this._frames.length - 1;
			} else this.curFrame = Frame;
		} else this.curFrame = flixel_util_FlxRandom.intRanged(0,this._frames.length - 1);
		this.set_curIndex(this._frames[this.curFrame]);
		return Frame;
	}
	,get_numFrames: function() {
		return this._frames.length;
	}
	,__class__: flixel_animation_FlxAnimation
	,__properties__: $extend(flixel_animation_FlxBaseAnimation.prototype.__properties__,{get_numFrames:"get_numFrames",set_curFrame:"set_curFrame",set_frameRate:"set_frameRate"})
});
var flixel_animation_FlxAnimationController = function(Sprite) {
	this.frameIndex = -1;
	this._sprite = Sprite;
	this._animations = new haxe_ds_StringMap();
};
$hxClasses["flixel.animation.FlxAnimationController"] = flixel_animation_FlxAnimationController;
flixel_animation_FlxAnimationController.__name__ = ["flixel","animation","FlxAnimationController"];
flixel_animation_FlxAnimationController.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_animation_FlxAnimationController.frameSortFunction = function(frame1,frame2) {
	var name1 = frame1.name;
	var name2 = frame2.name;
	var num1 = Std.parseInt(name1.substring(flixel_animation_FlxAnimationController.prefixLength,name1.length - flixel_animation_FlxAnimationController.postfixLength));
	var num2 = Std.parseInt(name2.substring(flixel_animation_FlxAnimationController.prefixLength,name2.length - flixel_animation_FlxAnimationController.postfixLength));
	if(num1 > num2) return 1; else if(num2 > num1) return -1;
	return 0;
};
flixel_animation_FlxAnimationController.prototype = {
	frameIndex: null
	,frames: null
	,callback: null
	,_sprite: null
	,_curAnim: null
	,_animations: null
	,_prerotated: null
	,update: function() {
		if(this._curAnim != null) this._curAnim.update(); else if(this._prerotated != null) this._prerotated.set_angle(this._sprite.angle);
	}
	,copyFrom: function(controller) {
		this.destroyAnimations();
		var $it0 = controller._animations.iterator();
		while( $it0.hasNext() ) {
			var anim = $it0.next();
			this.add(anim.name,anim._frames,anim.frameRate,anim.looped);
		}
		if(controller._prerotated != null) this.createPrerotated();
		if(controller.get_name() != null) this.set_name(controller.get_name());
		this.set_frameIndex(controller.frameIndex);
		return this;
	}
	,createPrerotated: function(Controller) {
		this.destroyAnimations();
		if(Controller != null) Controller = Controller; else Controller = this;
		this._prerotated = new flixel_animation_FlxPrerotatedAnimation(Controller,Controller._sprite.bakedRotationAngle);
	}
	,destroyAnimations: function() {
		this.clearAnimations();
		this.clearPrerotated();
	}
	,destroy: function() {
		this.destroyAnimations();
		this._animations = null;
		this.callback = null;
		this._sprite = null;
	}
	,clearPrerotated: function() {
		if(this._prerotated != null) this._prerotated.destroy();
		this._prerotated = null;
	}
	,clearAnimations: function() {
		if(this._animations != null) {
			var anim;
			var $it0 = this._animations.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				anim = this._animations.get(key);
				if(anim != null) anim.destroy();
				this._animations.remove(key);
			}
		}
		this._curAnim = null;
	}
	,get: function(Name) {
		return this._animations.get(Name);
	}
	,add: function(Name,Frames,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		var numFrames = Frames.length - 1;
		var i = numFrames;
		while(i >= 0) {
			if(Frames[i] >= this._sprite.frames) Frames.splice(i,1);
			i--;
		}
		if(Frames.length > 0) {
			var anim = new flixel_animation_FlxAnimation(this,Name,Frames,FrameRate,Looped);
			this._animations.set(Name,anim);
		}
	}
	,append: function(Name,Frames) {
		var anim = this._animations.get(Name);
		if(anim == null) return;
		var numFrames = Frames.length - 1;
		var i = numFrames;
		while(i >= 0) {
			if(Frames[numFrames - i] < this._sprite.frames) anim._frames.push(Frames[numFrames - i]);
			i--;
		}
	}
	,addByNames: function(Name,FrameNames,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var indices = [];
			this.byNamesHelper(indices,FrameNames);
			if(indices.length > 0) {
				var anim = new flixel_animation_FlxAnimation(this,Name,indices,FrameRate,Looped);
				this._animations.set(Name,anim);
			}
		}
	}
	,appendByNames: function(Name,FrameNames) {
		var anim = this._animations.get(Name);
		if(anim == null) return;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) this.byNamesHelper(anim._frames,FrameNames);
	}
	,addByStringIndices: function(Name,Prefix,Indices,Postfix,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var frameIndices = [];
			this.byStringIndicesHelper(frameIndices,Prefix,Indices,Postfix);
			if(frameIndices.length > 0) {
				var anim = new flixel_animation_FlxAnimation(this,Name,frameIndices,FrameRate,Looped);
				this._animations.set(Name,anim);
			}
		}
	}
	,appendByStringIndices: function(Name,Prefix,Indices,Postfix) {
		var anim = this._animations.get(Name);
		if(anim == null) return;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) this.byStringIndicesHelper(anim._frames,Prefix,Indices,Postfix);
	}
	,addByIndices: function(Name,Prefix,Indices,Postfix,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var frameIndices = [];
			this.byIndicesHelper(frameIndices,Prefix,Indices,Postfix);
			if(frameIndices.length > 0) {
				var anim = new flixel_animation_FlxAnimation(this,Name,frameIndices,FrameRate,Looped);
				this._animations.set(Name,anim);
			}
		}
	}
	,appendByIndices: function(Name,Prefix,Indices,Postfix) {
		var anim = this._animations.get(Name);
		if(anim == null) return;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) this.byIndicesHelper(anim._frames,Prefix,Indices,Postfix);
	}
	,findSpriteFrame: function(Prefix,Index,Postfix) {
		var numFrames = this._sprite.frames;
		var flxFrames = this._sprite.framesData.frames;
		var _g = 0;
		while(_g < numFrames) {
			var i = _g++;
			var name = flxFrames[i].name;
			if(StringTools.startsWith(name,Prefix) && StringTools.endsWith(name,Postfix)) {
				var index = Std.parseInt(name.substring(Prefix.length,name.length - Postfix.length));
				if(index != null && index == Index) return i;
			}
		}
		return -1;
	}
	,addByPrefix: function(Name,Prefix,FrameRate,Looped) {
		if(Looped == null) Looped = true;
		if(FrameRate == null) FrameRate = 30;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var animFrames = [];
			this.findByPrefix(animFrames,Prefix);
			if(animFrames.length > 0) {
				var frameIndices = [];
				this.byPrefixHelper(frameIndices,animFrames,Prefix);
				if(frameIndices.length > 0) {
					var anim = new flixel_animation_FlxAnimation(this,Name,frameIndices,FrameRate,Looped);
					this._animations.set(Name,anim);
				}
			}
		}
	}
	,appendByPrefix: function(Name,Prefix) {
		var anim = this._animations.get(Name);
		if(anim == null) return;
		if(this._sprite.cachedGraphics != null && this._sprite.cachedGraphics.data != null) {
			var animFrames = [];
			this.findByPrefix(animFrames,Prefix);
			if(animFrames.length > 0) this.byPrefixHelper(anim._frames,animFrames,Prefix);
		}
	}
	,play: function(AnimName,Force,Frame) {
		if(Frame == null) Frame = 0;
		if(Force == null) Force = false;
		if(AnimName == null) {
			if(this._curAnim != null) this._curAnim.stop();
			this._curAnim = null;
		}
		if(AnimName == null || this._animations.get(AnimName) == null) return;
		if(this._curAnim != null && AnimName != this._curAnim.name) this._curAnim.stop();
		this._curAnim = this._animations.get(AnimName);
		this._curAnim.play(Force,Frame);
	}
	,pause: function() {
		if(this._curAnim != null) this._curAnim.paused = true;
	}
	,resume: function() {
		if(this._curAnim != null) this._curAnim.paused = false;
	}
	,getByName: function(Name) {
		return this._animations.get(Name);
	}
	,randomFrame: function() {
		if(this._curAnim != null) {
			this._curAnim.stop();
			this._curAnim = null;
		}
		this.set_frameIndex(flixel_util_FlxRandom.intRanged(0,this._sprite.frames - 1));
	}
	,fireCallback: function() {
		if(this.callback != null) {
			var name;
			if(this._curAnim != null) name = this._curAnim.name; else name = null;
			var number;
			if(this._curAnim != null) number = this._curAnim.curFrame; else number = this.frameIndex;
			this.callback(name,number,this.frameIndex);
		}
	}
	,byNamesHelper: function(AddTo,FrameNames) {
		var l = FrameNames.length;
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			var name = FrameNames[i];
			if(this._sprite.framesData.framesHash.exists(name)) {
				var frameToAdd = this._sprite.framesData.framesHash.get(name);
				AddTo.push(HxOverrides.indexOf(this._sprite.framesData.frames,frameToAdd,0));
			}
		}
	}
	,byStringIndicesHelper: function(AddTo,Prefix,Indices,Postfix) {
		var l = Indices.length;
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			var name = Prefix + Indices[i] + Postfix;
			if(this._sprite.framesData.framesHash.exists(name)) {
				var frameToAdd = this._sprite.framesData.framesHash.get(name);
				AddTo.push(HxOverrides.indexOf(this._sprite.framesData.frames,frameToAdd,0));
			}
		}
	}
	,byIndicesHelper: function(AddTo,Prefix,Indices,Postfix) {
		var l = Indices.length;
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			var indexToAdd = this.findSpriteFrame(Prefix,Indices[i],Postfix);
			if(indexToAdd != -1) AddTo.push(indexToAdd);
		}
	}
	,byPrefixHelper: function(AddTo,AnimFrames,Prefix) {
		var name = AnimFrames[0].name;
		var postIndex = name.indexOf(".",Prefix.length);
		var postFix = name.substring(postIndex == -1?name.length:postIndex,name.length);
		flixel_animation_FlxAnimationController.prefixLength = Prefix.length;
		flixel_animation_FlxAnimationController.postfixLength = postFix.length;
		AnimFrames.sort(flixel_animation_FlxAnimationController.frameSortFunction);
		var l = AnimFrames.length;
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			AddTo.push(HxOverrides.indexOf(this._sprite.framesData.frames,AnimFrames[i],0));
		}
	}
	,findByPrefix: function(AnimFrames,Prefix) {
		var l = this._sprite.framesData.frames.length;
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			if(StringTools.startsWith(this._sprite.framesData.frames[i].name,Prefix)) AnimFrames.push(this._sprite.framesData.frames[i]);
		}
	}
	,set_frameIndex: function(Frame) {
		if(this._sprite.framesData != null) {
			Frame = Frame % this._sprite.frames;
			if(Frame != this.frameIndex) {
				this._sprite.set_frame(this._sprite.framesData.frames[Frame]);
				this.fireCallback();
			}
		}
		return this.frameIndex = Frame;
	}
	,get_frameName: function() {
		return this._sprite.frame.name;
	}
	,set_frameName: function(Value) {
		if(this._sprite.framesData != null && this._sprite.framesData.framesHash.exists(Value)) {
			if(this._curAnim != null) {
				this._curAnim.stop();
				this._curAnim = null;
			}
			var frame = this._sprite.framesData.framesHash.get(Value);
			if(frame != null) this.set_frameIndex(HxOverrides.indexOf(this._sprite.framesData.frames,frame,0));
		}
		return Value;
	}
	,get_name: function() {
		var animName = null;
		if(this._curAnim != null) animName = this._curAnim.name;
		return animName;
	}
	,set_name: function(AnimName) {
		this.play(AnimName);
		return AnimName;
	}
	,get_curAnim: function() {
		var anim = null;
		if(this._curAnim != null && this._curAnim.delay > 0 && (this._curAnim.looped || !this._curAnim.finished)) anim = this._curAnim;
		return anim;
	}
	,set_curAnim: function(Anim) {
		if(Anim != null && Anim != this._curAnim) {
			if(this._curAnim != null) this._curAnim.stop();
			Anim.play();
		}
		return this._curAnim = Anim;
	}
	,get_paused: function() {
		var paused = false;
		if(this._curAnim != null) paused = this._curAnim.paused;
		return paused;
	}
	,set_paused: function(Value) {
		if(this._curAnim != null) this._curAnim.paused = Value;
		return Value;
	}
	,get_finished: function() {
		var finished = true;
		if(this._curAnim != null) finished = this._curAnim.finished;
		return finished;
	}
	,set_finished: function(Value) {
		if(Value == true && this._curAnim != null) {
			this._curAnim.finished = true;
			this.set_frameIndex(this._curAnim._frames.length - 1);
		}
		return Value;
	}
	,get_frames: function() {
		return this._sprite.frames;
	}
	,getFrameIndex: function(Frame) {
		return HxOverrides.indexOf(this._sprite.framesData.frames,Frame,0);
	}
	,__class__: flixel_animation_FlxAnimationController
	,__properties__: {get_frames:"get_frames",set_finished:"set_finished",get_finished:"get_finished",set_paused:"set_paused",get_paused:"get_paused",set_name:"set_name",get_name:"get_name",set_frameName:"set_frameName",get_frameName:"get_frameName",set_frameIndex:"set_frameIndex",set_curAnim:"set_curAnim",get_curAnim:"get_curAnim"}
};
var flixel_animation_FlxPrerotatedAnimation = function(Parent,Baked) {
	this.angle = 0;
	flixel_animation_FlxBaseAnimation.call(this,Parent,"prerotated_animation");
	this.baked = Baked;
	this.rotations = Math.round(360 / Baked);
};
$hxClasses["flixel.animation.FlxPrerotatedAnimation"] = flixel_animation_FlxPrerotatedAnimation;
flixel_animation_FlxPrerotatedAnimation.__name__ = ["flixel","animation","FlxPrerotatedAnimation"];
flixel_animation_FlxPrerotatedAnimation.__super__ = flixel_animation_FlxBaseAnimation;
flixel_animation_FlxPrerotatedAnimation.prototype = $extend(flixel_animation_FlxBaseAnimation.prototype,{
	rotations: null
	,baked: null
	,angle: null
	,set_angle: function(Value) {
		var oldIndex = this.curIndex;
		var angleHelper = Math.floor(Value % 360);
		while(angleHelper < 0) angleHelper += 360;
		var newIndex = Math.floor(angleHelper / this.baked + 0.5);
		newIndex = newIndex % this.rotations | 0;
		if(oldIndex != newIndex) this.set_curIndex(newIndex);
		return this.angle = Value;
	}
	,set_curIndex: function(Value) {
		this.curIndex = Value;
		if(this.parent != null) this.parent.set_frameIndex(Value);
		return Value;
	}
	,clone: function(Parent) {
		return new flixel_animation_FlxPrerotatedAnimation(Parent,this.baked);
	}
	,__class__: flixel_animation_FlxPrerotatedAnimation
	,__properties__: $extend(flixel_animation_FlxBaseAnimation.prototype.__properties__,{set_angle:"set_angle"})
});
var flixel_effects_FlxFlicker = function() {
};
$hxClasses["flixel.effects.FlxFlicker"] = flixel_effects_FlxFlicker;
flixel_effects_FlxFlicker.__name__ = ["flixel","effects","FlxFlicker"];
flixel_effects_FlxFlicker.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_effects_FlxFlicker.flicker = function(Object,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback) {
	if(ForceRestart == null) ForceRestart = true;
	if(EndVisibility == null) EndVisibility = true;
	if(Interval == null) Interval = 0.04;
	if(Duration == null) Duration = 1;
	if(flixel_effects_FlxFlicker.isFlickering(Object)) {
		if(ForceRestart) flixel_effects_FlxFlicker.stopFlickering(Object); else return;
	}
	if(Interval <= 0) Interval = flixel_FlxG.elapsed;
	var flicker = flixel_effects_FlxFlicker._pool.get();
	flicker.start(Object,Duration,Interval,EndVisibility,CompletionCallback,ProgressCallback);
	{
		flixel_effects_FlxFlicker._boundObjects.set(Object,flicker);
		flicker;
	}
};
flixel_effects_FlxFlicker.isFlickering = function(Object) {
	return flixel_effects_FlxFlicker._boundObjects.h.__keys__[Object.__id__] != null;
};
flixel_effects_FlxFlicker.stopFlickering = function(Object) {
	var boundFlicker = flixel_effects_FlxFlicker._boundObjects.h[Object.__id__];
	if(boundFlicker != null) boundFlicker.stop();
};
flixel_effects_FlxFlicker.prototype = {
	object: null
	,endVisibility: null
	,timer: null
	,completionCallback: null
	,progressCallback: null
	,duration: null
	,interval: null
	,destroy: function() {
		this.object = null;
		this.timer = null;
		this.completionCallback = null;
		this.progressCallback = null;
	}
	,start: function(Object,Duration,Interval,EndVisibility,CompletionCallback,ProgressCallback) {
		this.object = Object;
		this.duration = Duration;
		this.interval = Interval;
		this.completionCallback = CompletionCallback;
		this.progressCallback = ProgressCallback;
		this.endVisibility = EndVisibility;
		this.timer = new flixel_util_FlxTimer(this.interval,$bind(this,this.flickerProgress),this.duration / this.interval | 0);
	}
	,stop: function() {
		this.timer.cancel();
		this.object.set_visible(true);
		this.release();
	}
	,release: function() {
		flixel_effects_FlxFlicker._boundObjects.remove(this.object);
		flixel_effects_FlxFlicker._pool.put(this);
	}
	,flickerProgress: function(Timer) {
		this.object.set_visible(!this.object.visible);
		if(this.progressCallback != null) this.progressCallback(this);
		if(Timer.loops > 0 && Timer.loops - Timer._loopsCounter == 0) {
			this.object.set_visible(this.endVisibility);
			if(this.completionCallback != null) this.completionCallback(this);
			this.release();
		}
	}
	,__class__: flixel_effects_FlxFlicker
};
var flixel_group_FlxTypedSpriteGroup = function(X,Y,MaxSize) {
	if(MaxSize == null) MaxSize = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._skipTransformChildren = false;
	flixel_FlxSprite.call(this,X,Y);
	this.group = new flixel_group_FlxTypedGroup(MaxSize);
	this._sprites = this.group.members;
};
$hxClasses["flixel.group.FlxTypedSpriteGroup"] = flixel_group_FlxTypedSpriteGroup;
flixel_group_FlxTypedSpriteGroup.__name__ = ["flixel","group","FlxTypedSpriteGroup"];
flixel_group_FlxTypedSpriteGroup.__super__ = flixel_FlxSprite;
flixel_group_FlxTypedSpriteGroup.prototype = $extend(flixel_FlxSprite.prototype,{
	transformChildren_openfl_display_BlendMode: function(Function,Value) {
		if(this.group == null) return;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) Function(sprite,Value);
		}
	}
	,transformChildren_Int: function(Function,Value) {
		if(this.group == null) return;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) Function(sprite,Value);
		}
	}
	,transformChildren_Float: function(Function,Value) {
		if(this.group == null) return;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) Function(sprite,Value);
		}
	}
	,transformChildren_Bool: function(Function,Value) {
		if(this.group == null) return;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) Function(sprite,Value);
		}
	}
	,transformChildren_Array_flixel_FlxCamera: function(Function,Value) {
		if(this.group == null) return;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) Function(sprite,Value);
		}
	}
	,multiTransformChildren_Float: function(FunctionArray,ValueArray) {
		if(this.group == null) return;
		var numProps = FunctionArray.length;
		if(numProps > ValueArray.length) return;
		var lambda;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) {
				var _g2 = 0;
				while(_g2 < numProps) {
					var i = _g2++;
					lambda = FunctionArray[i];
					lambda(sprite,ValueArray[i]);
				}
			}
		}
	}
	,transformChildren_flixel_util_FlxPoint: function(Function,Value) {
		if(this.group == null) return;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) Function(sprite,Value);
		}
	}
	,group: null
	,members: null
	,length: null
	,_skipTransformChildren: null
	,_sprites: null
	,initVars: function() {
		this.collisionType = 4;
		this.offset = new flixel_util_FlxCallbackPoint($bind(this,this.offsetCallback));
		this.origin = new flixel_util_FlxCallbackPoint($bind(this,this.originCallback));
		this.scale = new flixel_util_FlxCallbackPoint($bind(this,this.scaleCallback));
		this.scrollFactor = new flixel_util_FlxCallbackPoint($bind(this,this.scrollFactorCallback));
		this.scale.set(1,1);
		this.scrollFactor.set(1,1);
		this.velocity = flixel_util_FlxPoint.get(null,null);
		this.acceleration = flixel_util_FlxPoint.get(null,null);
		this.drag = flixel_util_FlxPoint.get(null,null);
		this.maxVelocity = flixel_util_FlxPoint.get(10000,10000);
	}
	,destroy: function() {
		this.offset = flixel_util_FlxDestroyUtil.destroy(this.offset);
		this.origin = flixel_util_FlxDestroyUtil.destroy(this.origin);
		this.scale = flixel_util_FlxDestroyUtil.destroy(this.scale);
		this.scrollFactor = flixel_util_FlxDestroyUtil.destroy(this.scrollFactor);
		this.group = flixel_util_FlxDestroyUtil.destroy(this.group);
		this._sprites = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,clone: function(NewSprite) {
		if(NewSprite == null || !js_Boot.__instanceof(NewSprite,flixel_group_FlxTypedSpriteGroup)) NewSprite = new flixel_group_FlxTypedSpriteGroup(0,0,this.group.maxSize);
		var cloned = NewSprite;
		cloned.group.set_maxSize(this.group.maxSize);
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) cloned.add(sprite.clone());
		}
		return cloned;
	}
	,isOnScreen: function(Camera) {
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) result = result || sprite.isOnScreen(Camera);
		}
		return result;
	}
	,overlapsPoint: function(point,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) result = result || sprite.overlapsPoint(point,InScreenSpace,Camera);
		}
		return result;
	}
	,pixelsOverlapPoint: function(point,Mask,Camera) {
		if(Mask == null) Mask = 255;
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) result = result || sprite.pixelsOverlapPoint(point,Mask,Camera);
		}
		return result;
	}
	,update: function() {
		this.group.update();
		if(this.moves) this.updateMotion();
	}
	,draw: function() {
		this.group.draw();
	}
	,replaceColor: function(Color,NewColor,FetchPositions) {
		if(FetchPositions == null) FetchPositions = false;
		var positions = null;
		if(FetchPositions) positions = [];
		var spritePositions;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				spritePositions = sprite.replaceColor(Color,NewColor,FetchPositions);
				if(FetchPositions) positions = positions.concat(spritePositions);
			}
		}
		return positions;
	}
	,add: function(Sprite) {
		var sprite = Sprite;
		var _g = sprite;
		_g.set_x(_g.x + this.x);
		var _g1 = sprite;
		_g1.set_y(_g1.y + this.y);
		var _g2 = sprite;
		_g2.set_alpha(_g2.alpha * this.alpha);
		sprite.scrollFactor.copyFrom(this.scrollFactor);
		sprite.set_cameras(this._cameras);
		return this.group.add(Sprite);
	}
	,recycle: function(ObjectClass,ContructorArgs,Force) {
		if(Force == null) Force = false;
		return this.group.recycle(ObjectClass,ContructorArgs,Force);
	}
	,remove: function(Object,Splice) {
		if(Splice == null) Splice = false;
		return this.group.remove(Object,Splice);
	}
	,replace: function(OldObject,NewObject) {
		return this.group.replace(OldObject,NewObject);
	}
	,sort: function(Function,Order) {
		if(Order == null) Order = -1;
		this.group.sort(Function,Order);
	}
	,setAll: function(VariableName,Value,Recurse) {
		if(Recurse == null) Recurse = true;
		this.group.setAll(VariableName,Value,Recurse);
	}
	,callAll: function(FunctionName,Args,Recurse) {
		if(Recurse == null) Recurse = true;
		this.group.callAll(FunctionName,Args,Recurse);
	}
	,getFirstAvailable: function(ObjectClass,Force) {
		if(Force == null) Force = false;
		return this.group.getFirstAvailable(ObjectClass,Force);
	}
	,getFirstNull: function() {
		return this.group.getFirstNull();
	}
	,getFirstExisting: function() {
		return this.group.getFirstExisting();
	}
	,getFirstAlive: function() {
		return this.group.getFirstAlive();
	}
	,getFirstDead: function() {
		return this.group.getFirstDead();
	}
	,countLiving: function() {
		return this.group.countLiving();
	}
	,countDead: function() {
		return this.group.countDead();
	}
	,getRandom: function(StartIndex,Length) {
		if(Length == null) Length = 0;
		if(StartIndex == null) StartIndex = 0;
		return this.group.getRandom(StartIndex,Length);
	}
	,forEach: function(Function) {
		this.group.forEach(Function);
	}
	,forEachAlive: function(Function) {
		this.group.forEachAlive(Function);
	}
	,forEachDead: function(Function) {
		this.group.forEachDead(Function);
	}
	,forEachExists: function(Function) {
		this.group.forEachExists(Function);
	}
	,forEachOfType: function(ObjectClass,Function) {
		this.group.forEachOfType(ObjectClass,Function);
	}
	,clear: function() {
		this.group.clear();
	}
	,kill: function() {
		flixel_FlxSprite.prototype.kill.call(this);
		this.group.kill();
	}
	,revive: function() {
		flixel_FlxSprite.prototype.revive.call(this);
		this.group.revive();
	}
	,reset: function(X,Y) {
		this.revive();
		this.setPosition(X,Y);
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) sprite.reset(X,Y);
		}
	}
	,setPosition: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		var dx = X - this.x;
		var dy = Y - this.y;
		this.multiTransformChildren_Float([$bind(this,this.xTransform),$bind(this,this.yTransform)],[dx,dy]);
		this._skipTransformChildren = true;
		this.set_x(X);
		this.set_y(Y);
		this._skipTransformChildren = false;
	}
	,set_cameras: function(Value) {
		if(this.get_cameras() != Value) this.transformChildren_Array_flixel_FlxCamera($bind(this,this.camerasTransform),Value);
		return flixel_FlxSprite.prototype.set_cameras.call(this,Value);
	}
	,set_exists: function(Value) {
		if(this.exists != Value) this.transformChildren_Bool($bind(this,this.existsTransform),Value);
		return flixel_FlxSprite.prototype.set_exists.call(this,Value);
	}
	,set_visible: function(Value) {
		if(this.exists && this.visible != Value) this.transformChildren_Bool($bind(this,this.visibleTransform),Value);
		return flixel_FlxSprite.prototype.set_visible.call(this,Value);
	}
	,set_active: function(Value) {
		if(this.exists && this.active != Value) this.transformChildren_Bool($bind(this,this.activeTransform),Value);
		return flixel_FlxSprite.prototype.set_active.call(this,Value);
	}
	,set_alive: function(Value) {
		if(this.exists && this.alive != Value) this.transformChildren_Bool($bind(this,this.aliveTransform),Value);
		return flixel_FlxSprite.prototype.set_alive.call(this,Value);
	}
	,set_x: function(Value) {
		if(!this._skipTransformChildren && this.exists && this.x != Value) {
			var offset = Value - this.x;
			this.transformChildren_Float($bind(this,this.xTransform),offset);
		}
		return this.x = Value;
	}
	,set_y: function(Value) {
		if(!this._skipTransformChildren && this.exists && this.y != Value) {
			var offset = Value - this.y;
			this.transformChildren_Float($bind(this,this.yTransform),offset);
		}
		return this.y = Value;
	}
	,set_angle: function(Value) {
		if(this.exists && this.angle != Value) {
			var offset = Value - this.angle;
			this.transformChildren_Float($bind(this,this.angleTransform),offset);
		}
		return this.angle = Value;
	}
	,set_alpha: function(Value) {
		if(Value > 1) Value = 1; else if(Value < 0) Value = 0;
		if(this.exists && this.alpha != Value) {
			var factor;
			if(this.alpha > 0) factor = Value / this.alpha; else factor = 0;
			this.transformChildren_Float($bind(this,this.alphaTransform),factor);
		}
		return this.alpha = Value;
	}
	,set_facing: function(Value) {
		if(this.exists && this.facing != Value) this.transformChildren_Int($bind(this,this.facingTransform),Value);
		return this.facing = Value;
	}
	,set_flipX: function(Value) {
		if(this.exists && this.flipX != Value) this.transformChildren_Bool($bind(this,this.flipXTransform),Value);
		return this.flipX = Value;
	}
	,set_flipY: function(Value) {
		if(this.exists && this.flipY != Value) this.transformChildren_Bool($bind(this,this.flipYTransform),Value);
		return this.flipY = Value;
	}
	,set_moves: function(Value) {
		if(this.exists && this.moves != Value) this.transformChildren_Bool($bind(this,this.movesTransform),Value);
		return this.moves = Value;
	}
	,set_immovable: function(Value) {
		if(this.exists && this.immovable != Value) this.transformChildren_Bool($bind(this,this.immovableTransform),Value);
		return this.immovable = Value;
	}
	,set_solid: function(Value) {
		if(this.exists && (this.allowCollisions & 4369) > 0 != Value) this.transformChildren_Bool($bind(this,this.solidTransform),Value);
		return flixel_FlxSprite.prototype.set_solid.call(this,Value);
	}
	,set_color: function(Value) {
		if(this.exists && this.color != Value) this.transformChildren_Int($bind(this,this.gColorTransform),Value);
		return this.color = Value;
	}
	,set_blend: function(Value) {
		if(this.exists && this.blend != Value) this.transformChildren_openfl_display_BlendMode($bind(this,this.blendTransform),Value);
		return this.blend = Value;
	}
	,set_pixelPerfectRender: function(Value) {
		if(this.exists && this.pixelPerfectRender != Value) this.transformChildren_Bool($bind(this,this.pixelPerfectTransform),Value);
		return flixel_FlxSprite.prototype.set_pixelPerfectRender.call(this,Value);
	}
	,set_width: function(Value) {
		return Value;
	}
	,get_width: function() {
		if(this.group.length == 0) return 0;
		var minX = Infinity;
		var maxX = -Infinity;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			var minMemberX = member.x;
			var maxMemberX = minMemberX + member.get_width();
			if(maxMemberX > maxX) maxX = maxMemberX;
			if(minMemberX < minX) minX = minMemberX;
		}
		return maxX - minX;
	}
	,set_height: function(Value) {
		return Value;
	}
	,get_height: function() {
		if(this.group.length == 0) return 0;
		var minY = Infinity;
		var maxY = -Infinity;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			var minMemberY = member.y;
			var maxMemberY = minMemberY + member.get_height();
			if(maxMemberY > maxY) maxY = maxMemberY;
			if(minMemberY < minY) minY = minMemberY;
		}
		return maxY - minY;
	}
	,get_length: function() {
		return this.group.length;
	}
	,get_maxSize: function() {
		return this.group.maxSize;
	}
	,set_maxSize: function(Size) {
		return this.group.set_maxSize(Size);
	}
	,get_members: function() {
		return this.group.members;
	}
	,xTransform: function(Sprite,X) {
		var _g = Sprite;
		_g.set_x(_g.x + X);
	}
	,yTransform: function(Sprite,Y) {
		var _g = Sprite;
		_g.set_y(_g.y + Y);
	}
	,angleTransform: function(Sprite,Angle) {
		var _g = Sprite;
		_g.set_angle(_g.angle + Angle);
	}
	,alphaTransform: function(Sprite,Alpha) {
		var _g = Sprite;
		_g.set_alpha(_g.alpha * Alpha);
	}
	,facingTransform: function(Sprite,Facing) {
		Sprite.set_facing(Facing);
	}
	,flipXTransform: function(Sprite,FlipX) {
		Sprite.set_flipX(FlipX);
	}
	,flipYTransform: function(Sprite,FlipY) {
		Sprite.set_flipY(FlipY);
	}
	,movesTransform: function(Sprite,Moves) {
		Sprite.set_moves(Moves);
	}
	,pixelPerfectTransform: function(Sprite,PixelPerfect) {
		Sprite.set_pixelPerfectRender(PixelPerfect);
	}
	,gColorTransform: function(Sprite,Color) {
		Sprite.set_color(Color);
	}
	,blendTransform: function(Sprite,Blend) {
		Sprite.set_blend(Blend);
	}
	,immovableTransform: function(Sprite,Immovable) {
		Sprite.set_immovable(Immovable);
	}
	,visibleTransform: function(Sprite,Visible) {
		Sprite.set_visible(Visible);
	}
	,activeTransform: function(Sprite,Active) {
		Sprite.set_active(Active);
	}
	,solidTransform: function(Sprite,Solid) {
		Sprite.set_solid(Solid);
	}
	,aliveTransform: function(Sprite,Alive) {
		Sprite.set_alive(Alive);
	}
	,existsTransform: function(Sprite,Exists) {
		Sprite.set_exists(Exists);
	}
	,camerasTransform: function(Sprite,Cameras) {
		Sprite.set_cameras(Cameras);
	}
	,offsetTransform: function(Sprite,Offset) {
		Sprite.offset.copyFrom(Offset);
	}
	,originTransform: function(Sprite,Origin) {
		Sprite.origin.copyFrom(Origin);
	}
	,scaleTransform: function(Sprite,Scale) {
		Sprite.scale.copyFrom(Scale);
	}
	,scrollFactorTransform: function(Sprite,ScrollFactor) {
		Sprite.scrollFactor.copyFrom(ScrollFactor);
	}
	,offsetCallback: function(Offset) {
		this.transformChildren_flixel_util_FlxPoint($bind(this,this.offsetTransform),Offset);
	}
	,originCallback: function(Origin) {
		this.transformChildren_flixel_util_FlxPoint($bind(this,this.originTransform),Origin);
	}
	,scaleCallback: function(Scale) {
		this.transformChildren_flixel_util_FlxPoint($bind(this,this.scaleTransform),Scale);
	}
	,scrollFactorCallback: function(ScrollFactor) {
		this.transformChildren_flixel_util_FlxPoint($bind(this,this.scrollFactorTransform),ScrollFactor);
	}
	,loadGraphicFromSprite: function(Sprite) {
		return this;
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) Unique = false;
		if(Height == null) Height = 0;
		if(Width == null) Width = 0;
		if(Animated == null) Animated = false;
		return this;
	}
	,loadRotatedGraphic: function(Graphic,Rotations,Frame,AntiAliasing,AutoBuffer,Key) {
		if(AutoBuffer == null) AutoBuffer = false;
		if(AntiAliasing == null) AntiAliasing = false;
		if(Frame == null) Frame = -1;
		if(Rotations == null) Rotations = 16;
		return this;
	}
	,makeGraphic: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) Unique = false;
		if(Color == null) Color = -1;
		return this;
	}
	,loadGraphicFromTexture: function(Data,Unique,FrameName) {
		if(Unique == null) Unique = false;
		return this;
	}
	,loadRotatedGraphicFromTexture: function(Data,Image,Rotations,AntiAliasing,AutoBuffer) {
		if(AutoBuffer == null) AutoBuffer = false;
		if(AntiAliasing == null) AntiAliasing = false;
		if(Rotations == null) Rotations = 16;
		return this;
	}
	,set_pixels: function(Value) {
		return Value;
	}
	,set_frame: function(Value) {
		return Value;
	}
	,get_pixels: function() {
		return null;
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) RunOnCpp = false;
	}
	,resetHelpers: function() {
	}
	,stamp: function(Brush,X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
	}
	,updateColorTransform: function() {
	}
	,updateFrameData: function() {
	}
	,__class__: flixel_group_FlxTypedSpriteGroup
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_maxSize:"set_maxSize",get_maxSize:"get_maxSize",get_length:"get_length",get_members:"get_members"})
});
var flixel_group_FlxSpriteGroup = function(X,Y,MaxSize) {
	if(MaxSize == null) MaxSize = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	flixel_group_FlxTypedSpriteGroup.call(this,X,Y);
	this.group.set_maxSize(MaxSize);
};
$hxClasses["flixel.group.FlxSpriteGroup"] = flixel_group_FlxSpriteGroup;
flixel_group_FlxSpriteGroup.__name__ = ["flixel","group","FlxSpriteGroup"];
flixel_group_FlxSpriteGroup.__super__ = flixel_group_FlxTypedSpriteGroup;
flixel_group_FlxSpriteGroup.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	__class__: flixel_group_FlxSpriteGroup
});
var flixel_group_FlxTypedGroupIterator = function(GroupMembers,filter) {
	this._groupMembers = GroupMembers;
	this._filter = filter;
	this._cursor = 0;
	this._length = this._groupMembers.length;
};
$hxClasses["flixel.group.FlxTypedGroupIterator"] = flixel_group_FlxTypedGroupIterator;
flixel_group_FlxTypedGroupIterator.__name__ = ["flixel","group","FlxTypedGroupIterator"];
flixel_group_FlxTypedGroupIterator.prototype = {
	_groupMembers: null
	,_filter: null
	,_cursor: null
	,_length: null
	,next: function() {
		if(this.hasNext()) return this._groupMembers[this._cursor++]; else return null;
	}
	,hasNext: function() {
		while(this._cursor < this._length && (this._groupMembers[this._cursor] == null || this._filter != null && !this._filter(this._groupMembers[this._cursor]))) this._cursor++;
		return this._cursor < this._length;
	}
	,__class__: flixel_group_FlxTypedGroupIterator
};
var flixel_input_FlxSwipe = function(ID,StartPosition,EndPosition,StartTimeInTicks) {
	this.ID = ID;
	this.startPosition = StartPosition;
	this.endPosition = EndPosition;
	this._startTimeInTicks = StartTimeInTicks;
	this._endTimeInTicks = flixel_FlxG.game.ticks;
};
$hxClasses["flixel.input.FlxSwipe"] = flixel_input_FlxSwipe;
flixel_input_FlxSwipe.__name__ = ["flixel","input","FlxSwipe"];
flixel_input_FlxSwipe.prototype = {
	ID: null
	,startPosition: null
	,endPosition: null
	,_startTimeInTicks: null
	,_endTimeInTicks: null
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair._pool.get().create("ID",this.ID),flixel_util_LabelValuePair._pool.get().create("start",this.startPosition),flixel_util_LabelValuePair._pool.get().create("end",this.endPosition),flixel_util_LabelValuePair.weak("distance",flixel_util_FlxMath.vectorLength(this.startPosition.x - this.endPosition.x,this.startPosition.y - this.endPosition.y)),flixel_util_LabelValuePair.weak("angle",flixel_util_FlxAngle.getAngle(this.startPosition,this.endPosition)),flixel_util_LabelValuePair._pool.get().create("duration",(this._endTimeInTicks - this._startTimeInTicks) / 1000)]);
	}
	,get_distance: function() {
		return flixel_util_FlxMath.vectorLength(this.startPosition.x - this.endPosition.x,this.startPosition.y - this.endPosition.y);
	}
	,get_angle: function() {
		return flixel_util_FlxAngle.getAngle(this.startPosition,this.endPosition);
	}
	,get_duration: function() {
		return this._endTimeInTicks - this._startTimeInTicks;
	}
	,__class__: flixel_input_FlxSwipe
	,__properties__: {get_duration:"get_duration",get_angle:"get_angle",get_distance:"get_distance"}
};
var flixel_input_gamepad_FlxGamepad = function(ID,GlobalDeadZone) {
	if(GlobalDeadZone == null) GlobalDeadZone = 0;
	this.dpadRight = false;
	this.dpadLeft = false;
	this.dpadDown = false;
	this.dpadUp = false;
	this.deadZone = 0.15;
	this.buttons = [];
	var _g = [];
	var _g1 = 0;
	while(_g1 < 6) {
		var i = _g1++;
		_g.push(0);
	}
	this.axis = _g;
	this.id = ID;
	if(GlobalDeadZone != 0) this.deadZone = GlobalDeadZone;
	this.ball = flixel_util_FlxPoint.get(null,null);
	this.hat = flixel_util_FlxPoint.get(null,null);
};
$hxClasses["flixel.input.gamepad.FlxGamepad"] = flixel_input_gamepad_FlxGamepad;
flixel_input_gamepad_FlxGamepad.__name__ = ["flixel","input","gamepad","FlxGamepad"];
flixel_input_gamepad_FlxGamepad.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_input_gamepad_FlxGamepad.prototype = {
	id: null
	,buttons: null
	,deadZone: null
	,hat: null
	,ball: null
	,dpadUp: null
	,dpadDown: null
	,dpadLeft: null
	,dpadRight: null
	,axis: null
	,getButton: function(ButtonID) {
		var gamepadButton = this.buttons[ButtonID];
		if(gamepadButton == null) {
			gamepadButton = new flixel_input_gamepad_FlxGamepadButton(ButtonID);
			this.buttons[ButtonID] = gamepadButton;
		}
		return gamepadButton;
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button == null) continue;
			if(button.last == -1 && button.current == -1) button.current = 0; else if(button.last == 2 && button.current == 2) button.current = 1;
			button.last = button.current;
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null) {
				button.current = 0;
				button.last = 0;
			}
		}
		var numAxis = this.axis.length;
		var _g2 = 0;
		while(_g2 < numAxis) {
			var i = _g2++;
			this.axis[i] = 0;
		}
		this.hat.set();
		this.ball.set();
	}
	,destroy: function() {
		this.buttons = null;
		this.axis = null;
		this.hat = flixel_util_FlxDestroyUtil.put(this.hat);
		this.ball = flixel_util_FlxDestroyUtil.put(this.ball);
		this.hat = null;
		this.ball = null;
	}
	,checkStatus: function(ButtonID,Status) {
		if(this.buttons[ButtonID] != null) return this.buttons[ButtonID].current == Status;
		return false;
	}
	,anyPressed: function(ButtonIDArray) {
		var _g = 0;
		while(_g < ButtonIDArray.length) {
			var b = ButtonIDArray[_g];
			++_g;
			if(this.buttons[b] != null) {
				if(this.buttons[b].current > 0) return true;
			}
		}
		return false;
	}
	,anyJustPressed: function(ButtonIDArray) {
		var _g = 0;
		while(_g < ButtonIDArray.length) {
			var b = ButtonIDArray[_g];
			++_g;
			if(this.buttons[b] != null) {
				if(this.buttons[b].current == 2) return true;
			}
		}
		return false;
	}
	,anyJustReleased: function(ButtonIDArray) {
		var _g = 0;
		while(_g < ButtonIDArray.length) {
			var b = ButtonIDArray[_g];
			++_g;
			if(this.buttons[b] != null) {
				if(this.buttons[b].current == -1) return true;
			}
		}
		return false;
	}
	,pressed: function(ButtonID) {
		if(this.buttons[ButtonID] != null) return this.buttons[ButtonID].current > 0;
		return false;
	}
	,justPressed: function(ButtonID) {
		if(this.buttons[ButtonID] != null) return this.buttons[ButtonID].current == 2;
		return false;
	}
	,justReleased: function(ButtonID) {
		if(this.buttons[ButtonID] != null) return this.buttons[ButtonID].current == -1;
		return false;
	}
	,firstPressedButtonID: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.current > 0) return button.id;
		}
		return -1;
	}
	,firstJustPressedButtonID: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.current == 2) return button.id;
		}
		return -1;
	}
	,firstJustReleasedButtonID: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.current == -1) return button.id;
		}
		return -1;
	}
	,getAxis: function(AxisID) {
		return this.getAxisValue(AxisID);
	}
	,getXAxis: function(AxisID) {
		return this.getAxisValue(AxisID);
	}
	,getYAxis: function(AxisID) {
		var axisValue = this.getAxisValue(AxisID);
		return axisValue;
	}
	,anyButton: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.current > 0) return true;
		}
		return false;
	}
	,anyInput: function() {
		if(this.anyButton()) return true;
		var numAxis = this.axis.length;
		var _g = 0;
		while(_g < numAxis) {
			var i = _g++;
			if(this.axis[0] != 0) return true;
		}
		if(this.ball.x != 0 || this.ball.y != 0) return true;
		if(this.hat.x != 0 || this.hat.y != 0) return true;
		return false;
	}
	,getAxisValue: function(AxisID) {
		if(AxisID < 0 || AxisID >= this.axis.length) return 0;
		var axisValue = 0;
		axisValue = this.axis[AxisID];
		if(Math.abs(axisValue) > this.deadZone) return axisValue;
		return 0;
	}
	,get_dpadUp: function() {
		return this.hat.y < 0;
	}
	,get_dpadDown: function() {
		return this.hat.y > 0;
	}
	,get_dpadLeft: function() {
		return this.hat.x < 0;
	}
	,get_dpadRight: function() {
		return this.hat.x > 0;
	}
	,__class__: flixel_input_gamepad_FlxGamepad
	,__properties__: {get_dpadRight:"get_dpadRight",get_dpadLeft:"get_dpadLeft",get_dpadDown:"get_dpadDown",get_dpadUp:"get_dpadUp"}
};
var flixel_input_gamepad_FlxGamepadButton = function(ID,Current,Last) {
	if(Last == null) Last = 0;
	if(Current == null) Current = 0;
	this.id = ID;
	this.current = Current;
	this.last = Last;
};
$hxClasses["flixel.input.gamepad.FlxGamepadButton"] = flixel_input_gamepad_FlxGamepadButton;
flixel_input_gamepad_FlxGamepadButton.__name__ = ["flixel","input","gamepad","FlxGamepadButton"];
flixel_input_gamepad_FlxGamepadButton.prototype = {
	id: null
	,current: null
	,last: null
	,reset: function() {
		this.current = 0;
		this.last = 0;
	}
	,release: function() {
		this.last = this.current;
		if(this.current > 0) this.current = -1; else this.current = 0;
	}
	,press: function() {
		this.last = this.current;
		if(this.current > 0) this.current = 1; else this.current = 2;
	}
	,__class__: flixel_input_gamepad_FlxGamepadButton
};
var flixel_interfaces_IFlxInput = function() { };
$hxClasses["flixel.interfaces.IFlxInput"] = flixel_interfaces_IFlxInput;
flixel_interfaces_IFlxInput.__name__ = ["flixel","interfaces","IFlxInput"];
flixel_interfaces_IFlxInput.prototype = {
	reset: null
	,update: null
	,onFocus: null
	,onFocusLost: null
	,destroy: null
	,__class__: flixel_interfaces_IFlxInput
};
var flixel_input_gamepad_FlxGamepadManager = function() {
	this.globalDeadZone = 0;
	this._gamepads = [];
};
$hxClasses["flixel.input.gamepad.FlxGamepadManager"] = flixel_input_gamepad_FlxGamepadManager;
flixel_input_gamepad_FlxGamepadManager.__name__ = ["flixel","input","gamepad","FlxGamepadManager"];
flixel_input_gamepad_FlxGamepadManager.__interfaces__ = [flixel_interfaces_IFlxInput];
flixel_input_gamepad_FlxGamepadManager.prototype = {
	firstActive: null
	,lastActive: null
	,numActiveGamepads: null
	,globalDeadZone: null
	,_gamepads: null
	,getByID: function(GamepadID) {
		var gamepad = this._gamepads[GamepadID];
		if(gamepad == null) {
			gamepad = new flixel_input_gamepad_FlxGamepad(GamepadID,this.globalDeadZone);
			this._gamepads[GamepadID] = gamepad;
		}
		if(this.firstActive == null) this.firstActive = gamepad;
		this.lastActive = gamepad;
		return gamepad;
	}
	,getActiveGamepadIDs: function(IDsArray) {
		if(IDsArray == null) IDsArray = [];
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) IDsArray.push(gamepad.id);
		}
		return IDsArray;
	}
	,getActiveGamepads: function(GamepadArray) {
		if(GamepadArray == null) GamepadArray = [];
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) GamepadArray.push(gamepad);
		}
		return GamepadArray;
	}
	,getFirstActiveGamepadID: function() {
		var firstActive = this.getFirstActiveGamepad();
		if(firstActive == null) return -1; else return firstActive.id;
	}
	,getFirstActiveGamepad: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) return gamepad;
		}
		return null;
	}
	,anyButton: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyButton()) return true;
		}
		return false;
	}
	,anyInput: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) return true;
		}
		return false;
	}
	,anyPressed: function(ButtonID) {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.pressed(ButtonID)) return true;
		}
		return false;
	}
	,anyJustPressed: function(ButtonID) {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.justPressed(ButtonID)) return true;
		}
		return false;
	}
	,anyJustReleased: function(ButtonID) {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.justReleased(ButtonID)) return true;
		}
		return false;
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			gamepad = flixel_util_FlxDestroyUtil.destroy(gamepad);
		}
		this.firstActive = null;
		this.lastActive = null;
		this._gamepads = null;
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) gamepad.reset();
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) gamepad.update();
		}
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
		this.reset();
	}
	,get_numActiveGamepads: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) count++;
		}
		return count;
	}
	,set_globalDeadZone: function(DeadZone) {
		this.globalDeadZone = DeadZone;
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) gamepad.deadZone = DeadZone;
		}
		return this.globalDeadZone;
	}
	,__class__: flixel_input_gamepad_FlxGamepadManager
	,__properties__: {set_globalDeadZone:"set_globalDeadZone",get_numActiveGamepads:"get_numActiveGamepads"}
};
var flixel_input_keyboard_FlxKey = function(Name) {
	this.last = 0;
	this.current = 0;
	this.name = Name;
};
$hxClasses["flixel.input.keyboard.FlxKey"] = flixel_input_keyboard_FlxKey;
flixel_input_keyboard_FlxKey.__name__ = ["flixel","input","keyboard","FlxKey"];
flixel_input_keyboard_FlxKey.prototype = {
	name: null
	,current: null
	,last: null
	,__class__: flixel_input_keyboard_FlxKey
};
var flixel_input_keyboard_FlxKeyList = function(CheckStatus) {
	this.checkStatus = CheckStatus;
};
$hxClasses["flixel.input.keyboard.FlxKeyList"] = flixel_input_keyboard_FlxKeyList;
flixel_input_keyboard_FlxKeyList.__name__ = ["flixel","input","keyboard","FlxKeyList"];
flixel_input_keyboard_FlxKeyList.prototype = {
	checkStatus: null
	,get_A: function() {
		return flixel_FlxG.keys.checkStatus(65,this.checkStatus);
	}
	,get_B: function() {
		return flixel_FlxG.keys.checkStatus(66,this.checkStatus);
	}
	,get_C: function() {
		return flixel_FlxG.keys.checkStatus(67,this.checkStatus);
	}
	,get_D: function() {
		return flixel_FlxG.keys.checkStatus(68,this.checkStatus);
	}
	,get_E: function() {
		return flixel_FlxG.keys.checkStatus(69,this.checkStatus);
	}
	,get_F: function() {
		return flixel_FlxG.keys.checkStatus(70,this.checkStatus);
	}
	,get_G: function() {
		return flixel_FlxG.keys.checkStatus(71,this.checkStatus);
	}
	,get_H: function() {
		return flixel_FlxG.keys.checkStatus(72,this.checkStatus);
	}
	,get_I: function() {
		return flixel_FlxG.keys.checkStatus(73,this.checkStatus);
	}
	,get_J: function() {
		return flixel_FlxG.keys.checkStatus(74,this.checkStatus);
	}
	,get_K: function() {
		return flixel_FlxG.keys.checkStatus(75,this.checkStatus);
	}
	,get_L: function() {
		return flixel_FlxG.keys.checkStatus(76,this.checkStatus);
	}
	,get_M: function() {
		return flixel_FlxG.keys.checkStatus(77,this.checkStatus);
	}
	,get_N: function() {
		return flixel_FlxG.keys.checkStatus(78,this.checkStatus);
	}
	,get_O: function() {
		return flixel_FlxG.keys.checkStatus(79,this.checkStatus);
	}
	,get_P: function() {
		return flixel_FlxG.keys.checkStatus(80,this.checkStatus);
	}
	,get_Q: function() {
		return flixel_FlxG.keys.checkStatus(81,this.checkStatus);
	}
	,get_R: function() {
		return flixel_FlxG.keys.checkStatus(82,this.checkStatus);
	}
	,get_S: function() {
		return flixel_FlxG.keys.checkStatus(83,this.checkStatus);
	}
	,get_T: function() {
		return flixel_FlxG.keys.checkStatus(84,this.checkStatus);
	}
	,get_U: function() {
		return flixel_FlxG.keys.checkStatus(85,this.checkStatus);
	}
	,get_V: function() {
		return flixel_FlxG.keys.checkStatus(86,this.checkStatus);
	}
	,get_W: function() {
		return flixel_FlxG.keys.checkStatus(87,this.checkStatus);
	}
	,get_X: function() {
		return flixel_FlxG.keys.checkStatus(88,this.checkStatus);
	}
	,get_Y: function() {
		return flixel_FlxG.keys.checkStatus(89,this.checkStatus);
	}
	,get_Z: function() {
		return flixel_FlxG.keys.checkStatus(90,this.checkStatus);
	}
	,get_ZERO: function() {
		return flixel_FlxG.keys.checkStatus(48,this.checkStatus);
	}
	,get_ONE: function() {
		return flixel_FlxG.keys.checkStatus(49,this.checkStatus);
	}
	,get_TWO: function() {
		return flixel_FlxG.keys.checkStatus(50,this.checkStatus);
	}
	,get_THREE: function() {
		return flixel_FlxG.keys.checkStatus(51,this.checkStatus);
	}
	,get_FOUR: function() {
		return flixel_FlxG.keys.checkStatus(52,this.checkStatus);
	}
	,get_FIVE: function() {
		return flixel_FlxG.keys.checkStatus(53,this.checkStatus);
	}
	,get_SIX: function() {
		return flixel_FlxG.keys.checkStatus(54,this.checkStatus);
	}
	,get_SEVEN: function() {
		return flixel_FlxG.keys.checkStatus(55,this.checkStatus);
	}
	,get_EIGHT: function() {
		return flixel_FlxG.keys.checkStatus(56,this.checkStatus);
	}
	,get_NINE: function() {
		return flixel_FlxG.keys.checkStatus(57,this.checkStatus);
	}
	,get_PAGEUP: function() {
		return flixel_FlxG.keys.checkStatus(33,this.checkStatus);
	}
	,get_PAGEDOWN: function() {
		return flixel_FlxG.keys.checkStatus(34,this.checkStatus);
	}
	,get_HOME: function() {
		return flixel_FlxG.keys.checkStatus(36,this.checkStatus);
	}
	,get_END: function() {
		return flixel_FlxG.keys.checkStatus(35,this.checkStatus);
	}
	,get_INSERT: function() {
		return flixel_FlxG.keys.checkStatus(45,this.checkStatus);
	}
	,get_ESCAPE: function() {
		return flixel_FlxG.keys.checkStatus(27,this.checkStatus);
	}
	,get_MINUS: function() {
		return flixel_FlxG.keys.checkStatus(189,this.checkStatus);
	}
	,get_PLUS: function() {
		return flixel_FlxG.keys.checkStatus(187,this.checkStatus);
	}
	,get_DELETE: function() {
		return flixel_FlxG.keys.checkStatus(46,this.checkStatus);
	}
	,get_BACKSPACE: function() {
		return flixel_FlxG.keys.checkStatus(8,this.checkStatus);
	}
	,get_LBRACKET: function() {
		return flixel_FlxG.keys.checkStatus(219,this.checkStatus);
	}
	,get_RBRACKET: function() {
		return flixel_FlxG.keys.checkStatus(221,this.checkStatus);
	}
	,get_BACKSLASH: function() {
		return flixel_FlxG.keys.checkStatus(220,this.checkStatus);
	}
	,get_CAPSLOCK: function() {
		return flixel_FlxG.keys.checkStatus(20,this.checkStatus);
	}
	,get_SEMICOLON: function() {
		return flixel_FlxG.keys.checkStatus(186,this.checkStatus);
	}
	,get_QUOTE: function() {
		return flixel_FlxG.keys.checkStatus(222,this.checkStatus);
	}
	,get_ENTER: function() {
		return flixel_FlxG.keys.checkStatus(13,this.checkStatus);
	}
	,get_SHIFT: function() {
		return flixel_FlxG.keys.checkStatus(16,this.checkStatus);
	}
	,get_COMMA: function() {
		return flixel_FlxG.keys.checkStatus(188,this.checkStatus);
	}
	,get_PERIOD: function() {
		return flixel_FlxG.keys.checkStatus(190,this.checkStatus);
	}
	,get_SLASH: function() {
		return flixel_FlxG.keys.checkStatus(191,this.checkStatus);
	}
	,get_NUMPADSLASH: function() {
		return flixel_FlxG.keys.checkStatus(191,this.checkStatus);
	}
	,get_GRAVEACCENT: function() {
		return flixel_FlxG.keys.checkStatus(192,this.checkStatus);
	}
	,get_CONTROL: function() {
		return flixel_FlxG.keys.checkStatus(17,this.checkStatus);
	}
	,get_ALT: function() {
		return flixel_FlxG.keys.checkStatus(18,this.checkStatus);
	}
	,get_SPACE: function() {
		return flixel_FlxG.keys.checkStatus(32,this.checkStatus);
	}
	,get_UP: function() {
		return flixel_FlxG.keys.checkStatus(38,this.checkStatus);
	}
	,get_DOWN: function() {
		return flixel_FlxG.keys.checkStatus(40,this.checkStatus);
	}
	,get_LEFT: function() {
		return flixel_FlxG.keys.checkStatus(37,this.checkStatus);
	}
	,get_RIGHT: function() {
		return flixel_FlxG.keys.checkStatus(39,this.checkStatus);
	}
	,get_TAB: function() {
		return flixel_FlxG.keys.checkStatus(9,this.checkStatus);
	}
	,get_PRINTSCREEN: function() {
		return flixel_FlxG.keys.checkStatus(301,this.checkStatus);
	}
	,get_F1: function() {
		return flixel_FlxG.keys.checkStatus(112,this.checkStatus);
	}
	,get_F2: function() {
		return flixel_FlxG.keys.checkStatus(113,this.checkStatus);
	}
	,get_F3: function() {
		return flixel_FlxG.keys.checkStatus(114,this.checkStatus);
	}
	,get_F4: function() {
		return flixel_FlxG.keys.checkStatus(115,this.checkStatus);
	}
	,get_F5: function() {
		return flixel_FlxG.keys.checkStatus(116,this.checkStatus);
	}
	,get_F6: function() {
		return flixel_FlxG.keys.checkStatus(117,this.checkStatus);
	}
	,get_F7: function() {
		return flixel_FlxG.keys.checkStatus(118,this.checkStatus);
	}
	,get_F8: function() {
		return flixel_FlxG.keys.checkStatus(119,this.checkStatus);
	}
	,get_F9: function() {
		return flixel_FlxG.keys.checkStatus(120,this.checkStatus);
	}
	,get_F10: function() {
		return flixel_FlxG.keys.checkStatus(121,this.checkStatus);
	}
	,get_F11: function() {
		return flixel_FlxG.keys.checkStatus(122,this.checkStatus);
	}
	,get_F12: function() {
		return flixel_FlxG.keys.checkStatus(123,this.checkStatus);
	}
	,get_NUMPADONE: function() {
		return flixel_FlxG.keys.checkStatus(97,this.checkStatus);
	}
	,get_NUMPADTWO: function() {
		return flixel_FlxG.keys.checkStatus(98,this.checkStatus);
	}
	,get_NUMPADTHREE: function() {
		return flixel_FlxG.keys.checkStatus(99,this.checkStatus);
	}
	,get_NUMPADFOUR: function() {
		return flixel_FlxG.keys.checkStatus(100,this.checkStatus);
	}
	,get_NUMPADFIVE: function() {
		return flixel_FlxG.keys.checkStatus(101,this.checkStatus);
	}
	,get_NUMPADSIX: function() {
		return flixel_FlxG.keys.checkStatus(102,this.checkStatus);
	}
	,get_NUMPADSEVEN: function() {
		return flixel_FlxG.keys.checkStatus(103,this.checkStatus);
	}
	,get_NUMPADEIGHT: function() {
		return flixel_FlxG.keys.checkStatus(104,this.checkStatus);
	}
	,get_NUMPADNINE: function() {
		return flixel_FlxG.keys.checkStatus(105,this.checkStatus);
	}
	,get_NUMPADZERO: function() {
		return flixel_FlxG.keys.checkStatus(96,this.checkStatus);
	}
	,get_NUMPADMINUS: function() {
		return flixel_FlxG.keys.checkStatus(109,this.checkStatus);
	}
	,get_NUMPADPLUS: function() {
		return flixel_FlxG.keys.checkStatus(107,this.checkStatus);
	}
	,get_NUMPADPERIOD: function() {
		return flixel_FlxG.keys.checkStatus(110,this.checkStatus);
	}
	,get_NUMPADMULTIPLY: function() {
		return flixel_FlxG.keys.checkStatus(106,this.checkStatus);
	}
	,get_ANY: function() {
		var key = null;
		var keyCode = 256;
		while(keyCode-- >= 0) {
			key = flixel_FlxG.keys._keyList[keyCode];
			if(key != null) {
				if(flixel_FlxG.keys.checkStatus(keyCode,this.checkStatus)) return true;
			}
		}
		return false;
	}
	,check: function(keyCode) {
		return flixel_FlxG.keys.checkStatus(keyCode,this.checkStatus);
	}
	,__class__: flixel_input_keyboard_FlxKeyList
	,__properties__: {get_ANY:"get_ANY",get_NUMPADMULTIPLY:"get_NUMPADMULTIPLY",get_NUMPADPERIOD:"get_NUMPADPERIOD",get_NUMPADPLUS:"get_NUMPADPLUS",get_NUMPADMINUS:"get_NUMPADMINUS",get_NUMPADZERO:"get_NUMPADZERO",get_NUMPADNINE:"get_NUMPADNINE",get_NUMPADEIGHT:"get_NUMPADEIGHT",get_NUMPADSEVEN:"get_NUMPADSEVEN",get_NUMPADSIX:"get_NUMPADSIX",get_NUMPADFIVE:"get_NUMPADFIVE",get_NUMPADFOUR:"get_NUMPADFOUR",get_NUMPADTHREE:"get_NUMPADTHREE",get_NUMPADTWO:"get_NUMPADTWO",get_NUMPADONE:"get_NUMPADONE",get_F12:"get_F12",get_F11:"get_F11",get_F10:"get_F10",get_F9:"get_F9",get_F8:"get_F8",get_F7:"get_F7",get_F6:"get_F6",get_F5:"get_F5",get_F4:"get_F4",get_F3:"get_F3",get_F2:"get_F2",get_F1:"get_F1",get_PRINTSCREEN:"get_PRINTSCREEN",get_TAB:"get_TAB",get_RIGHT:"get_RIGHT",get_LEFT:"get_LEFT",get_DOWN:"get_DOWN",get_UP:"get_UP",get_SPACE:"get_SPACE",get_ALT:"get_ALT",get_CONTROL:"get_CONTROL",get_GRAVEACCENT:"get_GRAVEACCENT",get_NUMPADSLASH:"get_NUMPADSLASH",get_SLASH:"get_SLASH",get_PERIOD:"get_PERIOD",get_COMMA:"get_COMMA",get_SHIFT:"get_SHIFT",get_ENTER:"get_ENTER",get_QUOTE:"get_QUOTE",get_SEMICOLON:"get_SEMICOLON",get_CAPSLOCK:"get_CAPSLOCK",get_BACKSLASH:"get_BACKSLASH",get_RBRACKET:"get_RBRACKET",get_LBRACKET:"get_LBRACKET",get_BACKSPACE:"get_BACKSPACE",get_DELETE:"get_DELETE",get_PLUS:"get_PLUS",get_MINUS:"get_MINUS",get_ESCAPE:"get_ESCAPE",get_INSERT:"get_INSERT",get_END:"get_END",get_HOME:"get_HOME",get_PAGEDOWN:"get_PAGEDOWN",get_PAGEUP:"get_PAGEUP",get_NINE:"get_NINE",get_EIGHT:"get_EIGHT",get_SEVEN:"get_SEVEN",get_SIX:"get_SIX",get_FIVE:"get_FIVE",get_FOUR:"get_FOUR",get_THREE:"get_THREE",get_TWO:"get_TWO",get_ONE:"get_ONE",get_ZERO:"get_ZERO",get_Z:"get_Z",get_Y:"get_Y",get_X:"get_X",get_W:"get_W",get_V:"get_V",get_U:"get_U",get_T:"get_T",get_S:"get_S",get_R:"get_R",get_Q:"get_Q",get_P:"get_P",get_O:"get_O",get_N:"get_N",get_M:"get_M",get_L:"get_L",get_K:"get_K",get_J:"get_J",get_I:"get_I",get_H:"get_H",get_G:"get_G",get_F:"get_F",get_E:"get_E",get_D:"get_D",get_C:"get_C",get_B:"get_B",get_A:"get_A"}
};
var flixel_input_keyboard_FlxKeyboard = function() {
	this.enabled = true;
	this._keyLookup = new haxe_ds_StringMap();
	this._keyList = [];
	flixel_util_FlxArrayUtil.setLength_flixel_input_keyboard_FlxKey(this._keyList,256);
	var i;
	i = 65;
	while(i <= 90) {
		this.addKey(String.fromCharCode(i),i);
		i++;
	}
	i = 48;
	this.addKey("ZERO",i++);
	this.addKey("ONE",i++);
	this.addKey("TWO",i++);
	this.addKey("THREE",i++);
	this.addKey("FOUR",i++);
	this.addKey("FIVE",i++);
	this.addKey("SIX",i++);
	this.addKey("SEVEN",i++);
	this.addKey("EIGHT",i++);
	this.addKey("NINE",i++);
	i = 96;
	this.addKey("NUMPADZERO",i++);
	this.addKey("NUMPADONE",i++);
	this.addKey("NUMPADTWO",i++);
	this.addKey("NUMPADTHREE",i++);
	this.addKey("NUMPADFOUR",i++);
	this.addKey("NUMPADFIVE",i++);
	this.addKey("NUMPADSIX",i++);
	this.addKey("NUMPADSEVEN",i++);
	this.addKey("NUMPADEIGHT",i++);
	this.addKey("NUMPADNINE",i++);
	this.addKey("PAGEUP",33);
	this.addKey("PAGEDOWN",34);
	this.addKey("HOME",36);
	this.addKey("END",35);
	this.addKey("INSERT",45);
	i = 1;
	while(i <= 12) {
		this.addKey("F" + i,111 + i);
		i++;
	}
	this.addKey("ESCAPE",27);
	this.addKey("MINUS",189);
	this.addKey("PLUS",187);
	this.addKey("DELETE",46);
	this.addKey("BACKSPACE",8);
	this.addKey("LBRACKET",219);
	this.addKey("RBRACKET",221);
	this.addKey("BACKSLASH",220);
	this.addKey("CAPSLOCK",20);
	this.addKey("SEMICOLON",186);
	this.addKey("QUOTE",222);
	this.addKey("ENTER",13);
	this.addKey("SHIFT",16);
	this.addKey("COMMA",188);
	this.addKey("PERIOD",190);
	this.addKey("SLASH",191);
	this.addKey("NUMPADSLASH",191);
	this.addKey("GRAVEACCENT",192);
	this.addKey("CONTROL",17);
	this.addKey("ALT",18);
	this.addKey("SPACE",32);
	this.addKey("UP",38);
	this.addKey("DOWN",40);
	this.addKey("LEFT",37);
	this.addKey("RIGHT",39);
	this.addKey("TAB",9);
	this.addKey("PRINTSCREEN",301);
	this.addKey("NUMPADMULTIPLY",106);
	this.addKey("NUMPADMINUS",109);
	this.addKey("NUMPADPLUS",107);
	this.addKey("NUMPADPERIOD",110);
	openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_DOWN,$bind(this,this.onKeyDown));
	openfl_Lib.current.stage.addEventListener(openfl_events_KeyboardEvent.KEY_UP,$bind(this,this.onKeyUp));
	this.pressed = new flixel_input_keyboard_FlxKeyList(1);
	this.justPressed = new flixel_input_keyboard_FlxKeyList(2);
	this.justReleased = new flixel_input_keyboard_FlxKeyList(-1);
};
$hxClasses["flixel.input.keyboard.FlxKeyboard"] = flixel_input_keyboard_FlxKeyboard;
flixel_input_keyboard_FlxKeyboard.__name__ = ["flixel","input","keyboard","FlxKeyboard"];
flixel_input_keyboard_FlxKeyboard.__interfaces__ = [flixel_interfaces_IFlxInput];
flixel_input_keyboard_FlxKeyboard.prototype = {
	enabled: null
	,pressed: null
	,justPressed: null
	,justReleased: null
	,_keyList: null
	,_keyLookup: null
	,anyPressed: function(KeyArray) {
		return this.checkKeyStatus(KeyArray,1);
	}
	,anyJustPressed: function(KeyArray) {
		return this.checkKeyStatus(KeyArray,2);
	}
	,anyJustReleased: function(KeyArray) {
		return this.checkKeyStatus(KeyArray,-1);
	}
	,firstPressed: function() {
		var _g = 0;
		var _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && key.current == 1) return key.name;
		}
		return "";
	}
	,firstJustPressed: function() {
		var _g = 0;
		var _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && key.current == 2) return key.name;
		}
		return "";
	}
	,firstJustReleased: function() {
		var _g = 0;
		var _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && key.current == -1) return key.name;
		}
		return "";
	}
	,checkStatus: function(KeyCode,Status) {
		var k = this._keyList[KeyCode];
		if(k != null) {
			if(k.current == Status) return true; else if(Status == 1 && k.current == 2) return true; else if(Status == 0 && k.current == -1) return true;
		}
		return false;
	}
	,getKeyCode: function(KeyName) {
		return this._keyLookup.get(KeyName);
	}
	,getIsDown: function() {
		var keysDown = [];
		var _g = 0;
		var _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && key.current > 0) keysDown.push(key);
		}
		return keysDown;
	}
	,destroy: function() {
		this._keyList = null;
		this._keyLookup = null;
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null) {
				key.current = 0;
				key.last = 0;
			}
		}
	}
	,addKey: function(KeyName,KeyCode) {
		this._keyLookup.set(KeyName,KeyCode);
		this._keyList[KeyCode] = new flixel_input_keyboard_FlxKey(KeyName);
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._keyList;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key == null) continue;
			if(key.last == -1 && key.current == -1) key.current = 0; else if(key.last == 2 && key.current == 2) key.current = 1;
			key.last = key.current;
		}
	}
	,checkKeyStatus: function(KeyArray,Status) {
		if(KeyArray == null) return false;
		var _g = 0;
		while(_g < KeyArray.length) {
			var code = KeyArray[_g];
			++_g;
			var key;
			code = code.toUpperCase();
			key = this._keyList[this._keyLookup.get(code)];
			if(key != null) {
				if(key.current == Status) return true; else if(Status == 1 && key.current == 2) return true; else if(Status == 0 && key.current == -1) return true;
			}
		}
		return false;
	}
	,onKeyUp: function(FlashEvent) {
		var c = FlashEvent.keyCode;
		if(!this.enabled) return;
		if(this.inKeyArray(flixel_FlxG.sound.muteKeys,c)) {
			flixel_FlxG.sound.muted = !flixel_FlxG.sound.muted;
			if(flixel_FlxG.sound.volumeHandler != null) flixel_FlxG.sound.volumeHandler(flixel_FlxG.sound.muted?0:flixel_FlxG.sound.volume);
			if(flixel_FlxG.game.soundTray != null && flixel_FlxG.sound.soundTrayEnabled) flixel_FlxG.game.soundTray.show();
		} else if(this.inKeyArray(flixel_FlxG.sound.volumeDownKeys,c)) {
			flixel_FlxG.sound.muted = false;
			var _g = flixel_FlxG.sound;
			_g.set_volume(_g.volume - 0.1);
			if(flixel_FlxG.game.soundTray != null && flixel_FlxG.sound.soundTrayEnabled) flixel_FlxG.game.soundTray.show();
		} else if(this.inKeyArray(flixel_FlxG.sound.volumeUpKeys,c)) {
			flixel_FlxG.sound.muted = false;
			var _g1 = flixel_FlxG.sound;
			_g1.set_volume(_g1.volume + 0.1);
			if(flixel_FlxG.game.soundTray != null && flixel_FlxG.sound.soundTrayEnabled) flixel_FlxG.game.soundTray.show();
		}
		this.updateKeyStates(c,false);
	}
	,onKeyDown: function(FlashEvent) {
		var c = FlashEvent.keyCode;
		if(flixel_FlxG.game.replaying && !this.inKeyArray(flixel_FlxG["debugger"].toggleKeys,c) && this.inKeyArray(flixel_FlxG.vcr.cancelKeys,c)) {
			if(flixel_FlxG.vcr.replayCallback != null) {
				flixel_FlxG.vcr.replayCallback();
				flixel_FlxG.vcr.replayCallback = null;
			} else {
				flixel_FlxG.game.replaying = false;
				flixel_FlxG.inputs.reset();
				flixel_FlxG.keys.enabled = true;
			}
		}
		if(this.enabled) this.updateKeyStates(c,true);
	}
	,inKeyArray: function(KeyArray,KeyCode) {
		if(KeyArray == null) return false; else {
			var _g = 0;
			while(_g < KeyArray.length) {
				var keyString = KeyArray[_g];
				++_g;
				if(keyString == "ANY" || this._keyLookup.get(keyString) == KeyCode) return true;
			}
		}
		return false;
	}
	,resolveKeyCode: function(e) {
		return e.keyCode;
	}
	,updateKeyStates: function(KeyCode,Down) {
		var obj = this._keyList[KeyCode];
		if(obj != null) {
			if(obj.current > 0) {
				if(Down) obj.current = 1; else obj.current = -1;
			} else if(Down) obj.current = 2; else obj.current = 0;
		}
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
		this.reset();
	}
	,record: function() {
		var data = null;
		var i = 0;
		while(i < 256) {
			var key = this._keyList[i++];
			if(key == null || key.current == 0) continue;
			if(data == null) data = [];
			data.push(new flixel_system_replay_CodeValuePair(i - 1,key.current));
		}
		return data;
	}
	,playback: function(Record) {
		var i = 0;
		var l = Record.length;
		var o;
		var o2;
		while(i < l) {
			o = Record[i++];
			o2 = this._keyList[o.code];
			o2.current = o.value;
		}
	}
	,__class__: flixel_input_keyboard_FlxKeyboard
};
var flixel_input_mouse__$FlxMouse_GraphicCursor = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_input_mouse__$FlxMouse_GraphicCursor.preload != null) {
		this.__image = flixel_input_mouse__$FlxMouse_GraphicCursor.preload;
		width = this.__image.width;
		height = this.__image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_input_mouse__$FlxMouse_GraphicCursor.resourceName),flixel_input_mouse__$FlxMouse_GraphicCursor.resourceType,function(b) {
		if(flixel_input_mouse__$FlxMouse_GraphicCursor.preload == null) flixel_input_mouse__$FlxMouse_GraphicCursor.preload = b.__image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.input.mouse._FlxMouse.GraphicCursor"] = flixel_input_mouse__$FlxMouse_GraphicCursor;
flixel_input_mouse__$FlxMouse_GraphicCursor.__name__ = ["flixel","input","mouse","_FlxMouse","GraphicCursor"];
flixel_input_mouse__$FlxMouse_GraphicCursor.preload = null;
flixel_input_mouse__$FlxMouse_GraphicCursor.__super__ = openfl_display_BitmapData;
flixel_input_mouse__$FlxMouse_GraphicCursor.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_input_mouse__$FlxMouse_GraphicCursor
});
var flixel_input_mouse_FlxMouse = function(CursorContainer) {
	this._lastWheel = 0;
	this._lastY = 0;
	this._lastX = 0;
	this._visibleWhenFocusLost = true;
	this._wheelUsed = false;
	this._cursor = null;
	this.useSystemCursor = false;
	this.visible = true;
	this.screenY = 0;
	this.screenX = 0;
	this.wheel = 0;
	flixel_util_FlxPoint.call(this);
	this.cursorContainer = CursorContainer;
	this.cursorContainer.mouseChildren = false;
	this.cursorContainer.mouseEnabled = false;
	this._point = flixel_util_FlxPoint.get(null,null);
	this._globalScreenPosition = flixel_util_FlxPoint.get(null,null);
	this._leftButton = new flixel_input_mouse_FlxMouseButton(-1);
	this._stage = openfl_Lib.current.stage;
	this._stage.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,($_=this._leftButton,$bind($_,$_.onDown)));
	this._stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this._leftButton,$bind($_,$_.onUp)));
	this._middleButton = new flixel_input_mouse_FlxMouseButton(-2);
	this._rightButton = new flixel_input_mouse_FlxMouseButton(-3);
	this._stage.addEventListener(openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN,($_=this._middleButton,$bind($_,$_.onDown)));
	this._stage.addEventListener(openfl_events_MouseEvent.MIDDLE_MOUSE_UP,($_=this._middleButton,$bind($_,$_.onUp)));
	this._stage.addEventListener(openfl_events_MouseEvent.RIGHT_MOUSE_DOWN,($_=this._rightButton,$bind($_,$_.onDown)));
	this._stage.addEventListener(openfl_events_MouseEvent.RIGHT_MOUSE_UP,($_=this._rightButton,$bind($_,$_.onUp)));
	this._stage.addEventListener(openfl_events_Event.MOUSE_LEAVE,$bind(this,this.onMouseLeave));
	this._stage.addEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.onMouseWheel));
	flixel_FlxG.signals.gameStarted.add($bind(this,this.onGameStart));
	openfl_ui_Mouse.hide();
};
$hxClasses["flixel.input.mouse.FlxMouse"] = flixel_input_mouse_FlxMouse;
flixel_input_mouse_FlxMouse.__name__ = ["flixel","input","mouse","FlxMouse"];
flixel_input_mouse_FlxMouse.__interfaces__ = [flixel_interfaces_IFlxInput];
flixel_input_mouse_FlxMouse.__super__ = flixel_util_FlxPoint;
flixel_input_mouse_FlxMouse.prototype = $extend(flixel_util_FlxPoint.prototype,{
	wheel: null
	,screenX: null
	,screenY: null
	,cursorContainer: null
	,visible: null
	,useSystemCursor: null
	,_leftButton: null
	,_middleButton: null
	,_rightButton: null
	,_cursor: null
	,_cursorBitmapData: null
	,_wheelUsed: null
	,_visibleWhenFocusLost: null
	,_lastX: null
	,_lastY: null
	,_lastWheel: null
	,_point: null
	,_globalScreenPosition: null
	,_stage: null
	,load: function(Graphic,Scale,XOffset,YOffset) {
		if(YOffset == null) YOffset = 0;
		if(XOffset == null) XOffset = 0;
		if(Scale == null) Scale = 1;
		if(this._cursor != null) this.cursorContainer.removeChild(this._cursor);
		if(Graphic == null) Graphic = new flixel_input_mouse__$FlxMouse_GraphicCursor(0,0);
		if(js_Boot.__instanceof(Graphic,Class)) this._cursor = Type.createInstance(Graphic,[]); else if(js_Boot.__instanceof(Graphic,openfl_display_BitmapData)) this._cursor = new openfl_display_Bitmap(js_Boot.__cast(Graphic , openfl_display_BitmapData)); else if(typeof(Graphic) == "string") this._cursor = new openfl_display_Bitmap(flixel_system_FlxAssets.getBitmapData(Graphic)); else this._cursor = new openfl_display_Bitmap(new flixel_input_mouse__$FlxMouse_GraphicCursor(0,0));
		this._cursor.set_x(XOffset);
		this._cursor.set_y(YOffset);
		this._cursor.set_scaleX(Scale);
		this._cursor.set_scaleY(Scale);
		this.cursorContainer.addChild(this._cursor);
	}
	,unload: function() {
		if(this._cursor != null) {
			if(this.cursorContainer.get_visible()) this.load(); else {
				this.cursorContainer.removeChild(this._cursor);
				this._cursor = null;
			}
		}
	}
	,getWorldPosition: function(Camera,point) {
		if(Camera == null) Camera = flixel_FlxG.camera;
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		this.getScreenPosition(Camera,this._point);
		point.set(this._point.x + Camera.scroll.x,this._point.y + Camera.scroll.y);
		return point;
	}
	,getScreenPosition: function(Camera,point) {
		if(Camera == null) Camera = flixel_FlxG.camera;
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		point.set_x((this._globalScreenPosition.x - Camera.x) / Camera.zoom);
		point.set_y((this._globalScreenPosition.y - Camera.y) / Camera.zoom);
		return point;
	}
	,destroy: function() {
		if(this._stage != null) {
			this._stage.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,($_=this._leftButton,$bind($_,$_.onDown)));
			this._stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,($_=this._leftButton,$bind($_,$_.onUp)));
			this._stage.removeEventListener(openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN,($_=this._middleButton,$bind($_,$_.onDown)));
			this._stage.removeEventListener(openfl_events_MouseEvent.MIDDLE_MOUSE_UP,($_=this._middleButton,$bind($_,$_.onUp)));
			this._stage.removeEventListener(openfl_events_MouseEvent.RIGHT_MOUSE_DOWN,($_=this._rightButton,$bind($_,$_.onDown)));
			this._stage.removeEventListener(openfl_events_MouseEvent.RIGHT_MOUSE_UP,($_=this._rightButton,$bind($_,$_.onUp)));
			this._stage.removeEventListener(openfl_events_Event.MOUSE_LEAVE,$bind(this,this.onMouseLeave));
			this._stage.removeEventListener(openfl_events_MouseEvent.MOUSE_WHEEL,$bind(this,this.onMouseWheel));
		}
		this._point = flixel_util_FlxDestroyUtil.put(this._point);
		this._globalScreenPosition = flixel_util_FlxDestroyUtil.put(this._globalScreenPosition);
		this.cursorContainer = null;
		this._cursor = null;
		this._leftButton = flixel_util_FlxDestroyUtil.destroy(this._leftButton);
		this._middleButton = flixel_util_FlxDestroyUtil.destroy(this._middleButton);
		this._rightButton = flixel_util_FlxDestroyUtil.destroy(this._rightButton);
		this._cursorBitmapData = flixel_util_FlxDestroyUtil.dispose(this._cursorBitmapData);
		flixel_FlxG.signals.gameStarted.remove($bind(this,this.onGameStart));
		flixel_util_FlxPoint.prototype.destroy.call(this);
	}
	,setGlobalScreenPositionUnsafe: function(X,Y) {
		this._globalScreenPosition.set(X,Y);
	}
	,reset: function() {
		this._leftButton.reset();
		this._middleButton.reset();
		this._rightButton.reset();
	}
	,update: function() {
		this._globalScreenPosition.set_x(Math.floor(flixel_FlxG.game.get_mouseX()));
		this._globalScreenPosition.set_y(Math.floor(flixel_FlxG.game.get_mouseY()));
		if(this.visible) {
			this.cursorContainer.set_x(this._globalScreenPosition.x);
			this.cursorContainer.set_y(this._globalScreenPosition.y);
		}
		this.updateCursor();
		this._leftButton.update();
		this._middleButton.update();
		this._rightButton.update();
		if(!this._wheelUsed) this.wheel = 0;
		this._wheelUsed = false;
	}
	,onFocus: function() {
		this.reset();
		this.set_useSystemCursor(this.useSystemCursor);
		this.set_visible(this._visibleWhenFocusLost);
	}
	,onFocusLost: function() {
		this._visibleWhenFocusLost = this.visible;
		if(this.visible) this.set_visible(false);
		openfl_ui_Mouse.show();
	}
	,onGameStart: function() {
		this.set_visible(this.visible);
	}
	,updateCursor: function() {
		this.getScreenPosition(null,this._point);
		this.screenX = this._point.x | 0;
		this.screenY = this._point.y | 0;
		this.getWorldPosition(null,this);
	}
	,onMouseWheel: function(FlashEvent) {
		this._wheelUsed = true;
		this.wheel = FlashEvent.delta;
	}
	,onMouseLeave: function(E) {
		this._rightButton.onUp();
		this._middleButton.onUp();
	}
	,get_pressed: function() {
		return this._leftButton.current > 0;
	}
	,get_justPressed: function() {
		return this._leftButton.justPressed();
	}
	,get_justReleased: function() {
		return this._leftButton.justReleased();
	}
	,get_pressedRight: function() {
		return this._rightButton.current > 0;
	}
	,get_justPressedRight: function() {
		return this._rightButton.justPressed();
	}
	,get_justReleasedRight: function() {
		return this._rightButton.justReleased();
	}
	,get_pressedMiddle: function() {
		return this._middleButton.current > 0;
	}
	,get_justPressedMiddle: function() {
		return this._middleButton.justPressed();
	}
	,get_justReleasedMiddle: function() {
		return this._middleButton.justReleased();
	}
	,showSystemCursor: function() {
		openfl_ui_Mouse.show();
		this.cursorContainer.set_visible(false);
	}
	,hideSystemCursor: function() {
		openfl_ui_Mouse.hide();
		if(this.visible) this.cursorContainer.set_visible(true);
	}
	,set_useSystemCursor: function(Value) {
		if(Value) this.showSystemCursor(); else this.hideSystemCursor();
		return this.useSystemCursor = Value;
	}
	,set_visible: function(Value) {
		if(Value) {
			if(this.useSystemCursor) openfl_ui_Mouse.show(); else {
				if(this._cursor == null) this.load();
				this.cursorContainer.set_visible(true);
				openfl_ui_Mouse.hide();
			}
		} else {
			this.cursorContainer.set_visible(false);
			openfl_ui_Mouse.hide();
		}
		return this.visible = Value;
	}
	,record: function() {
		if(this._lastX == this._globalScreenPosition.x && this._lastY == this._globalScreenPosition.y && this._leftButton.current == 0 && this._lastWheel == this.wheel) return null;
		this._lastX = Math.floor(this._globalScreenPosition.x);
		this._lastY = Math.floor(this._globalScreenPosition.y);
		this._lastWheel = this.wheel;
		return new flixel_system_replay_MouseRecord(this._lastX,this._lastY,this._leftButton.current,this._lastWheel);
	}
	,playback: function(Record) {
		this._leftButton.current = Record.button;
		this.wheel = Record.wheel;
		this._globalScreenPosition.copyFrom(Record);
		this.updateCursor();
	}
	,__class__: flixel_input_mouse_FlxMouse
	,__properties__: $extend(flixel_util_FlxPoint.prototype.__properties__,{get_justReleasedMiddle:"get_justReleasedMiddle",get_justPressedMiddle:"get_justPressedMiddle",get_pressedMiddle:"get_pressedMiddle",get_justReleasedRight:"get_justReleasedRight",get_justPressedRight:"get_justPressedRight",get_pressedRight:"get_pressedRight",get_justReleased:"get_justReleased",get_justPressed:"get_justPressed",get_pressed:"get_pressed",set_useSystemCursor:"set_useSystemCursor",set_visible:"set_visible"})
});
var flixel_input_mouse_FlxMouseButton = function(ID) {
	this.last = 0;
	this.current = 0;
	this._ID = ID;
	this._justPressedPosition = flixel_util_FlxPoint.get(null,null);
};
$hxClasses["flixel.input.mouse.FlxMouseButton"] = flixel_input_mouse_FlxMouseButton;
flixel_input_mouse_FlxMouseButton.__name__ = ["flixel","input","mouse","FlxMouseButton"];
flixel_input_mouse_FlxMouseButton.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_input_mouse_FlxMouseButton.prototype = {
	current: null
	,last: null
	,_ID: null
	,_justPressedPosition: null
	,_justPressedTimeInTicks: null
	,update: function() {
		if(this.last == -1 && this.current == -1) this.current = 0; else if(this.last == 2 && this.current == 2) this.current = 1; else if(this.last == -2 && this.current == -2) this.current = 0;
		this.last = this.current;
		if(this.current == 2 || this.current == -2) {
			this._justPressedPosition.set(flixel_FlxG.mouse.screenX,flixel_FlxG.mouse.screenY);
			this._justPressedTimeInTicks = flixel_FlxG.game.ticks;
		} else if(this.current == -1 || this.current == -2) flixel_FlxG.swipes.push(new flixel_input_FlxSwipe(this._ID,this._justPressedPosition,flixel_FlxG.mouse.getScreenPosition(),this._justPressedTimeInTicks));
	}
	,destroy: function() {
		this._justPressedPosition = flixel_util_FlxDestroyUtil.put(this._justPressedPosition);
	}
	,onDown: function(FlashEvent) {
		if(flixel_FlxG.game.replaying && flixel_FlxG.vcr.cancelKeys != null) {
			var _g = 0;
			var _g1 = flixel_FlxG.vcr.cancelKeys;
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				if(key == "MOUSE" || key == "ANY") {
					if(flixel_FlxG.vcr.replayCallback != null) {
						flixel_FlxG.vcr.replayCallback();
						flixel_FlxG.vcr.replayCallback = null;
					} else {
						flixel_FlxG.game.replaying = false;
						flixel_FlxG.inputs.reset();
						flixel_FlxG.keys.enabled = true;
					}
					break;
				}
			}
			return;
		}
		if(this.current > 0) this.current = 1; else this.current = 2;
	}
	,onUp: function(FlashEvent) {
		if(this.current == 2) this.current = -2; else if(this.current > 0) this.current = -1; else this.current = 0;
	}
	,reset: function() {
		this.current = 0;
		this.last = 0;
	}
	,pressed: function() {
		return this.current > 0;
	}
	,justPressed: function() {
		return this.current == 2 || this.current == -2;
	}
	,justReleased: function() {
		return this.current == -1 || this.current == -2;
	}
	,__class__: flixel_input_mouse_FlxMouseButton
};
var flixel_input_touch_FlxTouch = function(X,Y,PointID) {
	if(PointID == null) PointID = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._last = 0;
	this._current = 0;
	this.screenY = 0;
	this.screenX = 0;
	flixel_util_FlxPoint.call(this);
	this._point = flixel_util_FlxPoint.get(null,null);
	this._globalScreenPosition = flixel_util_FlxPoint.get(null,null);
	this._justPressedPosition = flixel_util_FlxPoint.get(null,null);
	this._flashPoint = new openfl_geom_Point();
	this.updatePosition(X,Y);
	this.touchPointID = PointID;
};
$hxClasses["flixel.input.touch.FlxTouch"] = flixel_input_touch_FlxTouch;
flixel_input_touch_FlxTouch.__name__ = ["flixel","input","touch","FlxTouch"];
flixel_input_touch_FlxTouch.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_input_touch_FlxTouch.__super__ = flixel_util_FlxPoint;
flixel_input_touch_FlxTouch.prototype = $extend(flixel_util_FlxPoint.prototype,{
	screenX: null
	,screenY: null
	,touchPointID: null
	,_current: null
	,_last: null
	,_point: null
	,_globalScreenPosition: null
	,_flashPoint: null
	,_justPressedPosition: null
	,_justPressedTimeInTicks: null
	,destroy: function() {
		this._point = flixel_util_FlxDestroyUtil.put(this._point);
		this._globalScreenPosition = flixel_util_FlxDestroyUtil.put(this._globalScreenPosition);
		this._justPressedPosition = flixel_util_FlxDestroyUtil.put(this._justPressedPosition);
		this._point = null;
		this._globalScreenPosition = null;
		this._flashPoint = null;
		this._justPressedPosition = null;
		flixel_util_FlxPoint.prototype.destroy.call(this);
	}
	,getWorldPosition: function(Camera,point) {
		if(Camera == null) Camera = flixel_FlxG.camera;
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		this.getScreenPosition(Camera,this._point);
		point.set_x(this._point.x + Camera.scroll.x);
		point.set_y(this._point.y + Camera.scroll.y);
		return point;
	}
	,getScreenPosition: function(Camera,point) {
		if(Camera == null) Camera = flixel_FlxG.camera;
		if(point == null) point = flixel_util_FlxPoint.get(null,null);
		point.set_x((this._globalScreenPosition.x - Camera.x) / Camera.zoom);
		point.set_y((this._globalScreenPosition.y - Camera.y) / Camera.zoom);
		return point;
	}
	,overlaps: function(ObjectOrGroup,Camera) {
		if(js_Boot.__instanceof(ObjectOrGroup,flixel_group_FlxTypedGroup)) {
			var i = 0;
			var results = false;
			var basic;
			var grp = ObjectOrGroup;
			var members = grp.members;
			while(i < grp.length) {
				basic = members[i++];
				if(basic != null && basic.exists && this.overlaps(basic,Camera)) {
					results = true;
					break;
				}
			}
			return results;
		}
		return (js_Boot.__cast(ObjectOrGroup , flixel_FlxObject)).overlapsPoint(this,true,Camera);
	}
	,reset: function(X,Y,PointID) {
		this.updatePosition(X,Y);
		this.touchPointID = PointID;
		this._current = 0;
		this._last = 0;
	}
	,deactivate: function() {
		this._current = 0;
		this._last = 0;
	}
	,update: function() {
		if(this._last == -1 && this._current == -1) this._current = 0; else if(this._last == 2 && this._current == 2) this._current = 1;
		this._last = this._current;
		if(this._current == 2) {
			this._justPressedPosition.set(this.screenX,this.screenY);
			this._justPressedTimeInTicks = flixel_FlxG.game.ticks;
		} else if(this._current == -1) flixel_FlxG.swipes.push(new flixel_input_FlxSwipe(this.touchPointID,this._justPressedPosition,this.getScreenPosition(),this._justPressedTimeInTicks));
	}
	,updateCursor: function() {
		var camera = flixel_FlxG.camera;
		this.screenX = Math.floor((this._globalScreenPosition.x - camera.x) / camera.zoom);
		this.screenY = Math.floor((this._globalScreenPosition.y - camera.y) / camera.zoom);
		this.set_x(this.screenX + camera.scroll.x);
		this.set_y(this.screenY + camera.scroll.y);
	}
	,updatePosition: function(X,Y) {
		this._flashPoint.x = X;
		this._flashPoint.y = Y;
		this._flashPoint = flixel_FlxG.game.globalToLocal(this._flashPoint);
		this._globalScreenPosition.set_x(this._flashPoint.x);
		this._globalScreenPosition.set_y(this._flashPoint.y);
		this.updateCursor();
	}
	,get_pressed: function() {
		return this._current > 0;
	}
	,get_justPressed: function() {
		return this._current == 2;
	}
	,get_justReleased: function() {
		return this._current == -1;
	}
	,get_isActive: function() {
		return this._current != 0;
	}
	,__class__: flixel_input_touch_FlxTouch
	,__properties__: $extend(flixel_util_FlxPoint.prototype.__properties__,{get_isActive:"get_isActive",get_justReleased:"get_justReleased",get_justPressed:"get_justPressed",get_pressed:"get_pressed"})
});
var flixel_input_touch_FlxTouchManager = function() {
	this.list = [];
	this._inactiveTouches = [];
	this._touchesCache = new haxe_ds_IntMap();
	flixel_input_touch_FlxTouchManager.maxTouchPoints = openfl_ui_Multitouch.maxTouchPoints;
	openfl_ui_Multitouch.set_inputMode(openfl_ui_MultitouchInputMode.TOUCH_POINT);
	openfl_Lib.current.stage.addEventListener("touchBegin",$bind(this,this.handleTouchBegin));
	openfl_Lib.current.stage.addEventListener("touchEnd",$bind(this,this.handleTouchEnd));
	openfl_Lib.current.stage.addEventListener("touchMove",$bind(this,this.handleTouchMove));
};
$hxClasses["flixel.input.touch.FlxTouchManager"] = flixel_input_touch_FlxTouchManager;
flixel_input_touch_FlxTouchManager.__name__ = ["flixel","input","touch","FlxTouchManager"];
flixel_input_touch_FlxTouchManager.__interfaces__ = [flixel_interfaces_IFlxInput];
flixel_input_touch_FlxTouchManager.prototype = {
	list: null
	,_inactiveTouches: null
	,_touchesCache: null
	,getByID: function(TouchPointID) {
		return this._touchesCache.h[TouchPointID];
	}
	,getFirst: function() {
		if(this.list[0] != null) return this.list[0]; else return null;
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			touch.destroy();
		}
		this.list = null;
		var _g2 = 0;
		var _g11 = this._inactiveTouches;
		while(_g2 < _g11.length) {
			var touch1 = _g11[_g2];
			++_g2;
			touch1.destroy();
		}
		this._inactiveTouches = null;
		this._touchesCache = null;
	}
	,justStarted: function(TouchArray) {
		if(TouchArray == null) TouchArray = [];
		var touchLen = TouchArray.length;
		if(touchLen > 0) TouchArray.splice(0,touchLen);
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			if(touch._current == 2) TouchArray.push(touch);
		}
		return TouchArray;
	}
	,justReleased: function(TouchArray) {
		if(TouchArray == null) TouchArray = [];
		var touchLen = TouchArray.length;
		if(touchLen > 0) TouchArray.splice(0,touchLen);
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			if(touch._current == -1) TouchArray.push(touch);
		}
		return TouchArray;
	}
	,reset: function() {
		var $it0 = this._touchesCache.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this._touchesCache.remove(key);
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			touch.deactivate();
			this._inactiveTouches.push(touch);
		}
		this.list.splice(0,this.list.length);
	}
	,handleTouchBegin: function(FlashEvent) {
		var touch = this._touchesCache.h[FlashEvent.touchPointID];
		if(touch != null) {
			touch.updatePosition(FlashEvent.stageX,FlashEvent.stageY);
			if(touch._current > 0) touch._current = 1; else touch._current = 2;
		} else {
			touch = this.recycle(FlashEvent.stageX,FlashEvent.stageY,FlashEvent.touchPointID);
			touch._current = 2;
		}
	}
	,handleTouchEnd: function(FlashEvent) {
		var touch = this._touchesCache.h[FlashEvent.touchPointID];
		if(touch != null) {
			if(touch._current > 0) touch._current = -1; else touch._current = 0;
		}
	}
	,handleTouchMove: function(FlashEvent) {
		var touch = this._touchesCache.h[FlashEvent.touchPointID];
		if(touch != null) touch.updatePosition(FlashEvent.stageX,FlashEvent.stageY);
	}
	,add: function(Touch) {
		this.list.push(Touch);
		this._touchesCache.h[Touch.touchPointID] = Touch;
		return Touch;
	}
	,recycle: function(X,Y,PointID) {
		if(this._inactiveTouches.length > 0) {
			var touch = this._inactiveTouches.pop();
			touch.reset(X,Y,PointID);
			return this.add(touch);
		}
		return this.add(new flixel_input_touch_FlxTouch(X,Y,PointID));
	}
	,update: function() {
		var i = this.list.length - 1;
		var touch;
		while(i >= 0) {
			touch = this.list[i];
			if(touch._current == 0) {
				touch.deactivate();
				this._touchesCache.remove(touch.touchPointID);
				this.list.splice(i,1);
				this._inactiveTouches.push(touch);
			} else touch.update();
			i--;
		}
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
		this.reset();
	}
	,__class__: flixel_input_touch_FlxTouchManager
};
var flixel_interfaces_IFlxSignal = function() { };
$hxClasses["flixel.interfaces.IFlxSignal"] = flixel_interfaces_IFlxSignal;
flixel_interfaces_IFlxSignal.__name__ = ["flixel","interfaces","IFlxSignal"];
flixel_interfaces_IFlxSignal.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_interfaces_IFlxSignal.prototype = {
	dispatch: null
	,add: null
	,addOnce: null
	,remove: null
	,removeAll: null
	,has: null
	,__class__: flixel_interfaces_IFlxSignal
};
var flixel_plugin_MouseEventManager = function() {
	flixel_plugin_FlxPlugin.call(this);
	flixel_plugin_MouseEventManager._point = flixel_util_FlxPoint.get(null,null);
	if(flixel_plugin_MouseEventManager._registeredObjects != null) this.clearRegistry();
	flixel_plugin_MouseEventManager._registeredObjects = [];
	flixel_plugin_MouseEventManager._mouseOverObjects = [];
};
$hxClasses["flixel.plugin.MouseEventManager"] = flixel_plugin_MouseEventManager;
flixel_plugin_MouseEventManager.__name__ = ["flixel","plugin","MouseEventManager"];
flixel_plugin_MouseEventManager._registeredObjects = null;
flixel_plugin_MouseEventManager._mouseOverObjects = null;
flixel_plugin_MouseEventManager._point = null;
flixel_plugin_MouseEventManager.init = function() {
	if(flixel_FlxG.plugins.get(flixel_plugin_MouseEventManager) == null) flixel_FlxG.plugins.add_flixel_plugin_MouseEventManager(new flixel_plugin_MouseEventManager());
};
flixel_plugin_MouseEventManager.add = function(Object,OnMouseDown,OnMouseUp,OnMouseOver,OnMouseOut,MouseChildren,MouseEnabled,PixelPerfect) {
	if(PixelPerfect == null) PixelPerfect = true;
	if(MouseEnabled == null) MouseEnabled = true;
	if(MouseChildren == null) MouseChildren = false;
	if(flixel_FlxG.plugins.get(flixel_plugin_MouseEventManager) == null) flixel_FlxG.plugins.add_flixel_plugin_MouseEventManager(new flixel_plugin_MouseEventManager());
	var newReg = new flixel_plugin__$MouseEventManager_ObjectMouseData(Object,OnMouseDown,OnMouseUp,OnMouseOver,OnMouseOut,MouseChildren,MouseEnabled,PixelPerfect);
	if(js_Boot.__instanceof(Object,flixel_FlxSprite)) newReg.sprite = Object;
	flixel_plugin_MouseEventManager._registeredObjects.unshift(newReg);
	return Object;
};
flixel_plugin_MouseEventManager.remove = function(Object) {
	var _g = 0;
	var _g1 = flixel_plugin_MouseEventManager._registeredObjects;
	while(_g < _g1.length) {
		var reg = _g1[_g];
		++_g;
		if(reg.object == Object) {
			reg.object = null;
			reg.sprite = null;
			reg.onMouseDown = null;
			reg.onMouseUp = null;
			reg.onMouseOver = null;
			reg.onMouseOut = null;
			HxOverrides.remove(flixel_plugin_MouseEventManager._registeredObjects,reg);
		}
	}
	return Object;
};
flixel_plugin_MouseEventManager.reorder = function() {
	var orderedObjects = [];
	var group = flixel_FlxG.game._state.members;
	flixel_plugin_MouseEventManager.traverseFlxGroup(flixel_FlxG.game._state,orderedObjects);
	orderedObjects.reverse();
	flixel_plugin_MouseEventManager._registeredObjects = orderedObjects;
};
flixel_plugin_MouseEventManager.setMouseDownCallback = function(Object,OnMouseDown) {
	var reg = flixel_plugin_MouseEventManager.getRegister(Object);
	if(reg != null) reg.onMouseDown = OnMouseDown;
};
flixel_plugin_MouseEventManager.setMouseUpCallback = function(Object,OnMouseUp) {
	var reg = flixel_plugin_MouseEventManager.getRegister(Object);
	if(reg != null) reg.onMouseUp = OnMouseUp;
};
flixel_plugin_MouseEventManager.setMouseOverCallback = function(Object,OnMouseOver) {
	var reg = flixel_plugin_MouseEventManager.getRegister(Object);
	if(reg != null) reg.onMouseOver = OnMouseOver;
};
flixel_plugin_MouseEventManager.setMouseOutCallback = function(Object,OnMouseOut) {
	var reg = flixel_plugin_MouseEventManager.getRegister(Object);
	if(reg != null) reg.onMouseOut = OnMouseOut;
};
flixel_plugin_MouseEventManager.setObjectMouseEnabled = function(Object,MouseEnabled) {
	var reg = flixel_plugin_MouseEventManager.getRegister(Object);
	if(reg != null) reg.mouseEnabled = MouseEnabled;
};
flixel_plugin_MouseEventManager.isObjectMouseEnabled = function(Object) {
	var reg = flixel_plugin_MouseEventManager.getRegister(Object);
	if(reg != null) return reg.mouseEnabled; else return false;
};
flixel_plugin_MouseEventManager.setObjectMouseChildren = function(Object,MouseChildren) {
	var reg = flixel_plugin_MouseEventManager.getRegister(Object);
	if(reg != null) reg.mouseChildren = MouseChildren;
};
flixel_plugin_MouseEventManager.isObjectMouseChildren = function(Object) {
	var reg = flixel_plugin_MouseEventManager.getRegister(Object);
	if(reg != null) return reg.mouseChildren; else throw new js__$Boot_HaxeError(new openfl_errors_Error("MouseEventManager , isObjectMouseChildren() : object not found"));
};
flixel_plugin_MouseEventManager.traverseFlxGroup = function(Group,OrderedObjects) {
	var _g = 0;
	var _g1 = Group.members;
	while(_g < _g1.length) {
		var basic = _g1[_g];
		++_g;
		if(js_Boot.__instanceof(basic,flixel_group_FlxGroup)) flixel_plugin_MouseEventManager.traverseFlxGroup(js_Boot.__cast(basic , flixel_group_FlxGroup),OrderedObjects);
		if(js_Boot.__instanceof(basic,flixel_FlxSprite)) {
			var reg = flixel_plugin_MouseEventManager.getRegister(js_Boot.__cast(basic , flixel_FlxSprite));
			if(reg != null) OrderedObjects.push(reg);
		}
	}
};
flixel_plugin_MouseEventManager.getRegister = function(Object,Register) {
	if(Register == null) Register = flixel_plugin_MouseEventManager._registeredObjects;
	var _g = 0;
	while(_g < Register.length) {
		var reg = Register[_g];
		++_g;
		if(reg.object == Object) return reg;
	}
	return null;
};
flixel_plugin_MouseEventManager.__super__ = flixel_plugin_FlxPlugin;
flixel_plugin_MouseEventManager.prototype = $extend(flixel_plugin_FlxPlugin.prototype,{
	destroy: function() {
		this.clearRegistry();
		flixel_plugin_MouseEventManager._point = flixel_util_FlxDestroyUtil.put(flixel_plugin_MouseEventManager._point);
		flixel_plugin_FlxPlugin.prototype.destroy.call(this);
	}
	,update: function() {
		flixel_plugin_FlxPlugin.prototype.update.call(this);
		var currentOverObjects = [];
		var _g = 0;
		var _g1 = flixel_plugin_MouseEventManager._registeredObjects;
		while(_g < _g1.length) {
			var reg = _g1[_g];
			++_g;
			if(reg.object.acceleration == null) {
				flixel_plugin_MouseEventManager.remove(reg.object);
				continue;
			}
			if(!reg.object.alive || !reg.object.exists || !reg.object.visible || !reg.mouseEnabled) continue;
			if(this.checkOverlap(reg)) {
				currentOverObjects.push(reg);
				if(!reg.mouseChildren) break;
			}
		}
		var _g2 = 0;
		while(_g2 < currentOverObjects.length) {
			var current = currentOverObjects[_g2];
			++_g2;
			if(current.onMouseOver != null) {
				if(current.object.exists && current.object.visible && flixel_plugin_MouseEventManager.getRegister(current.object,flixel_plugin_MouseEventManager._mouseOverObjects) == null) current.onMouseOver(current.object);
			}
		}
		var _g3 = 0;
		var _g11 = flixel_plugin_MouseEventManager._mouseOverObjects;
		while(_g3 < _g11.length) {
			var over = _g11[_g3];
			++_g3;
			if(over.onMouseOut != null) {
				if(!over.object.exists || !over.object.visible || flixel_plugin_MouseEventManager.getRegister(over.object,currentOverObjects) == null) over.onMouseOut(over.object);
			}
		}
		if(flixel_FlxG.mouse._leftButton.justPressed()) {
			var _g4 = 0;
			while(_g4 < currentOverObjects.length) {
				var current1 = currentOverObjects[_g4];
				++_g4;
				if(current1.onMouseDown != null && current1.object.exists && current1.object.visible) current1.onMouseDown(current1.object);
			}
		}
		if(flixel_FlxG.mouse._leftButton.justReleased()) {
			var _g5 = 0;
			while(_g5 < currentOverObjects.length) {
				var current2 = currentOverObjects[_g5];
				++_g5;
				if(current2.onMouseUp != null && current2.object.exists && current2.object.visible) current2.onMouseUp(current2.object);
			}
		}
		flixel_plugin_MouseEventManager._mouseOverObjects = currentOverObjects;
	}
	,clearRegistry: function() {
		flixel_plugin_MouseEventManager._mouseOverObjects = null;
		var _g = 0;
		var _g1 = flixel_plugin_MouseEventManager._registeredObjects;
		while(_g < _g1.length) {
			var reg = _g1[_g];
			++_g;
			flixel_plugin_MouseEventManager.remove(reg.object);
		}
		flixel_plugin_MouseEventManager._registeredObjects = null;
	}
	,checkOverlap: function(Register) {
		var _g = 0;
		var _g1 = Register.object.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			flixel_plugin_MouseEventManager._point = flixel_FlxG.mouse.getWorldPosition(camera,flixel_plugin_MouseEventManager._point);
			if(this.checkOverlapWithPoint(Register,flixel_plugin_MouseEventManager._point,camera)) return true;
			var _g2 = 0;
			var _g3 = flixel_FlxG.touches.list;
			while(_g2 < _g3.length) {
				var touch = _g3[_g2];
				++_g2;
				flixel_plugin_MouseEventManager._point = touch.getWorldPosition(camera,flixel_plugin_MouseEventManager._point);
				if(this.checkOverlapWithPoint(Register,flixel_plugin_MouseEventManager._point,camera)) return true;
			}
		}
		return false;
	}
	,checkOverlapWithPoint: function(Register,Point,Camera) {
		if(Register.pixelPerfect && Register.sprite != null) return this.checkPixelPerfectOverlap(Point,Register.sprite,Camera); else return Register.object.overlapsPoint(Point,true,Camera);
	}
	,checkPixelPerfectOverlap: function(Point,Sprite,Camera) {
		if(Sprite.angle != 0) flixel_util_FlxAngle.rotatePoint(Point.x,Point.y,Sprite.x + Sprite.origin.x,Sprite.y + Sprite.origin.y,Sprite.angle - 180,Point);
		return Sprite.pixelsOverlapPoint(Point,1,Camera);
	}
	,__class__: flixel_plugin_MouseEventManager
});
var flixel_plugin__$MouseEventManager_ObjectMouseData = function(object,onMouseDown,onMouseUp,onMouseOver,onMouseOut,mouseChildren,mouseEnabled,pixelPerfect) {
	this.object = object;
	this.onMouseDown = onMouseDown;
	this.onMouseUp = onMouseUp;
	this.onMouseOver = onMouseOver;
	this.onMouseOut = onMouseOut;
	this.mouseChildren = mouseChildren;
	this.mouseEnabled = mouseEnabled;
	this.pixelPerfect = pixelPerfect;
};
$hxClasses["flixel.plugin._MouseEventManager.ObjectMouseData"] = flixel_plugin__$MouseEventManager_ObjectMouseData;
flixel_plugin__$MouseEventManager_ObjectMouseData.__name__ = ["flixel","plugin","_MouseEventManager","ObjectMouseData"];
flixel_plugin__$MouseEventManager_ObjectMouseData.prototype = {
	object: null
	,onMouseDown: null
	,onMouseUp: null
	,onMouseOver: null
	,onMouseOut: null
	,mouseChildren: null
	,mouseEnabled: null
	,pixelPerfect: null
	,sprite: null
	,__class__: flixel_plugin__$MouseEventManager_ObjectMouseData
};
var flixel_system_FlxAssets = function() { };
$hxClasses["flixel.system.FlxAssets"] = flixel_system_FlxAssets;
flixel_system_FlxAssets.__name__ = ["flixel","system","FlxAssets"];
flixel_system_FlxAssets.drawLogo = function(graph) {
	graph.beginFill(47394);
	graph.moveTo(50,13);
	graph.lineTo(51,13);
	graph.lineTo(87,50);
	graph.lineTo(87,51);
	graph.lineTo(51,87);
	graph.lineTo(50,87);
	graph.lineTo(13,51);
	graph.lineTo(13,50);
	graph.lineTo(50,13);
	graph.endFill();
	graph.beginFill(16761138);
	graph.moveTo(0,0);
	graph.lineTo(25,0);
	graph.lineTo(50,13);
	graph.lineTo(13,50);
	graph.lineTo(0,25);
	graph.lineTo(0,0);
	graph.endFill();
	graph.beginFill(16066382);
	graph.moveTo(100,0);
	graph.lineTo(75,0);
	graph.lineTo(51,13);
	graph.lineTo(87,50);
	graph.lineTo(100,25);
	graph.lineTo(100,0);
	graph.endFill();
	graph.beginFill(3555839);
	graph.moveTo(0,100);
	graph.lineTo(25,100);
	graph.lineTo(50,87);
	graph.lineTo(13,51);
	graph.lineTo(0,75);
	graph.lineTo(0,100);
	graph.endFill();
	graph.beginFill(314875);
	graph.moveTo(100,100);
	graph.lineTo(75,100);
	graph.lineTo(51,87);
	graph.lineTo(87,51);
	graph.lineTo(100,75);
	graph.lineTo(100,100);
	graph.endFill();
};
flixel_system_FlxAssets.getBitmapData = function(id) {
	return openfl_Assets.getBitmapData(id,false);
};
flixel_system_FlxAssets.getSound = function(id) {
	var extension = "";
	extension = ".ogg";
	return openfl_Assets.getSound(id + extension);
};
flixel_system_FlxAssets.cacheSounds = function() {
	var _g = 0;
	var _g1 = openfl_Assets.list("SOUND");
	while(_g < _g1.length) {
		var id = _g1[_g];
		++_g;
		flixel_FlxG.sound.cache(id);
	}
};
var flixel_system_FlxList = function() {
	this.exists = true;
};
$hxClasses["flixel.system.FlxList"] = flixel_system_FlxList;
flixel_system_FlxList.__name__ = ["flixel","system","FlxList"];
flixel_system_FlxList.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_system_FlxList._cachedListsHead = null;
flixel_system_FlxList.recycle = function() {
	if(flixel_system_FlxList._cachedListsHead != null) {
		var cachedList = flixel_system_FlxList._cachedListsHead;
		flixel_system_FlxList._cachedListsHead = flixel_system_FlxList._cachedListsHead.next;
		flixel_system_FlxList._NUM_CACHED_FLX_LIST--;
		cachedList.exists = true;
		cachedList.next = null;
		return cachedList;
	} else return new flixel_system_FlxList();
};
flixel_system_FlxList.clearCache = function() {
	while(flixel_system_FlxList._cachedListsHead != null) {
		var node = flixel_system_FlxList._cachedListsHead;
		flixel_system_FlxList._cachedListsHead = flixel_system_FlxList._cachedListsHead.next;
		node.object = null;
		node.next = null;
	}
	flixel_system_FlxList._NUM_CACHED_FLX_LIST = 0;
};
flixel_system_FlxList.prototype = {
	object: null
	,next: null
	,exists: null
	,destroy: function() {
		if(!this.exists) return;
		this.object = null;
		if(this.next != null) this.next.destroy();
		this.exists = false;
		this.next = flixel_system_FlxList._cachedListsHead;
		flixel_system_FlxList._cachedListsHead = this;
		flixel_system_FlxList._NUM_CACHED_FLX_LIST++;
	}
	,__class__: flixel_system_FlxList
};
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return [];
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(bytes);
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance;
	instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) openfl_text_Font.__registeredFonts.push(instance);
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend(lime_text_Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var flixel_system_PreloaderFont = function() {
	openfl_text_Font.call(this);
	this.__fromBytes(lime_utils_ByteArray.fromBytes(haxe_Resource.getBytes(flixel_system_PreloaderFont.resourceName)));
};
$hxClasses["flixel.system.PreloaderFont"] = flixel_system_PreloaderFont;
flixel_system_PreloaderFont.__name__ = ["flixel","system","PreloaderFont"];
flixel_system_PreloaderFont.__super__ = openfl_text_Font;
flixel_system_PreloaderFont.prototype = $extend(openfl_text_Font.prototype,{
	__class__: flixel_system_PreloaderFont
});
var flixel_system__$FlxPreloader_GraphicLogoLight = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system__$FlxPreloader_GraphicLogoLight.preload != null) {
		this.__image = flixel_system__$FlxPreloader_GraphicLogoLight.preload;
		width = this.__image.width;
		height = this.__image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system__$FlxPreloader_GraphicLogoLight.resourceName),flixel_system__$FlxPreloader_GraphicLogoLight.resourceType,function(b) {
		if(flixel_system__$FlxPreloader_GraphicLogoLight.preload == null) flixel_system__$FlxPreloader_GraphicLogoLight.preload = b.__image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system._FlxPreloader.GraphicLogoLight"] = flixel_system__$FlxPreloader_GraphicLogoLight;
flixel_system__$FlxPreloader_GraphicLogoLight.__name__ = ["flixel","system","_FlxPreloader","GraphicLogoLight"];
flixel_system__$FlxPreloader_GraphicLogoLight.preload = null;
flixel_system__$FlxPreloader_GraphicLogoLight.__super__ = openfl_display_BitmapData;
flixel_system__$FlxPreloader_GraphicLogoLight.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system__$FlxPreloader_GraphicLogoLight
});
var flixel_system__$FlxPreloader_GraphicLogoCorners = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system__$FlxPreloader_GraphicLogoCorners.preload != null) {
		this.__image = flixel_system__$FlxPreloader_GraphicLogoCorners.preload;
		width = this.__image.width;
		height = this.__image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system__$FlxPreloader_GraphicLogoCorners.resourceName),flixel_system__$FlxPreloader_GraphicLogoCorners.resourceType,function(b) {
		if(flixel_system__$FlxPreloader_GraphicLogoCorners.preload == null) flixel_system__$FlxPreloader_GraphicLogoCorners.preload = b.__image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system._FlxPreloader.GraphicLogoCorners"] = flixel_system__$FlxPreloader_GraphicLogoCorners;
flixel_system__$FlxPreloader_GraphicLogoCorners.__name__ = ["flixel","system","_FlxPreloader","GraphicLogoCorners"];
flixel_system__$FlxPreloader_GraphicLogoCorners.preload = null;
flixel_system__$FlxPreloader_GraphicLogoCorners.__super__ = openfl_display_BitmapData;
flixel_system__$FlxPreloader_GraphicLogoCorners.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system__$FlxPreloader_GraphicLogoCorners
});
var flixel_system_FlxPreloaderBase = function() {
	NMEPreloader.call(this);
};
$hxClasses["flixel.system.FlxPreloaderBase"] = flixel_system_FlxPreloaderBase;
flixel_system_FlxPreloaderBase.__name__ = ["flixel","system","FlxPreloaderBase"];
flixel_system_FlxPreloaderBase.__super__ = NMEPreloader;
flixel_system_FlxPreloaderBase.prototype = $extend(NMEPreloader.prototype,{
	__class__: flixel_system_FlxPreloaderBase
});
var flixel_system_FlxPreloader = function() {
	flixel_system_FlxPreloaderBase.call(this);
};
$hxClasses["flixel.system.FlxPreloader"] = flixel_system_FlxPreloader;
flixel_system_FlxPreloader.__name__ = ["flixel","system","FlxPreloader"];
flixel_system_FlxPreloader.__super__ = flixel_system_FlxPreloaderBase;
flixel_system_FlxPreloader.prototype = $extend(flixel_system_FlxPreloaderBase.prototype,{
	__class__: flixel_system_FlxPreloader
});
var flixel_system_FlxQuadTree = function(X,Y,Width,Height,Parent) {
	flixel_util_FlxRect.call(this);
	this.x = X;
	this.y = Y;
	this.width = Width;
	this.height = Height;
	this;
	this.reset(X,Y,Width,Height,Parent);
};
$hxClasses["flixel.system.FlxQuadTree"] = flixel_system_FlxQuadTree;
flixel_system_FlxQuadTree.__name__ = ["flixel","system","FlxQuadTree"];
flixel_system_FlxQuadTree.divisions = null;
flixel_system_FlxQuadTree._min = null;
flixel_system_FlxQuadTree._object = null;
flixel_system_FlxQuadTree._objectLeftEdge = null;
flixel_system_FlxQuadTree._objectTopEdge = null;
flixel_system_FlxQuadTree._objectRightEdge = null;
flixel_system_FlxQuadTree._objectBottomEdge = null;
flixel_system_FlxQuadTree._list = null;
flixel_system_FlxQuadTree._useBothLists = null;
flixel_system_FlxQuadTree._processingCallback = null;
flixel_system_FlxQuadTree._notifyCallback = null;
flixel_system_FlxQuadTree._iterator = null;
flixel_system_FlxQuadTree._objectHullX = null;
flixel_system_FlxQuadTree._objectHullY = null;
flixel_system_FlxQuadTree._objectHullWidth = null;
flixel_system_FlxQuadTree._objectHullHeight = null;
flixel_system_FlxQuadTree._checkObjectHullX = null;
flixel_system_FlxQuadTree._checkObjectHullY = null;
flixel_system_FlxQuadTree._checkObjectHullWidth = null;
flixel_system_FlxQuadTree._checkObjectHullHeight = null;
flixel_system_FlxQuadTree._cachedTreesHead = null;
flixel_system_FlxQuadTree.recycle = function(X,Y,Width,Height,Parent) {
	if(flixel_system_FlxQuadTree._cachedTreesHead != null) {
		var cachedTree = flixel_system_FlxQuadTree._cachedTreesHead;
		flixel_system_FlxQuadTree._cachedTreesHead = flixel_system_FlxQuadTree._cachedTreesHead.next;
		flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES--;
		cachedTree.reset(X,Y,Width,Height,Parent);
		return cachedTree;
	} else return new flixel_system_FlxQuadTree(X,Y,Width,Height,Parent);
};
flixel_system_FlxQuadTree.clearCache = function() {
	while(flixel_system_FlxQuadTree._cachedTreesHead != null) {
		var node = flixel_system_FlxQuadTree._cachedTreesHead;
		flixel_system_FlxQuadTree._cachedTreesHead = flixel_system_FlxQuadTree._cachedTreesHead.next;
		node.next = null;
	}
	flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES = 0;
};
flixel_system_FlxQuadTree.__super__ = flixel_util_FlxRect;
flixel_system_FlxQuadTree.prototype = $extend(flixel_util_FlxRect.prototype,{
	exists: null
	,_canSubdivide: null
	,_headA: null
	,_tailA: null
	,_headB: null
	,_tailB: null
	,_northWestTree: null
	,_northEastTree: null
	,_southEastTree: null
	,_southWestTree: null
	,_leftEdge: null
	,_rightEdge: null
	,_topEdge: null
	,_bottomEdge: null
	,_halfWidth: null
	,_halfHeight: null
	,_midpointX: null
	,_midpointY: null
	,next: null
	,reset: function(X,Y,Width,Height,Parent) {
		this.exists = true;
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		this;
		this._headA = this._tailA = flixel_system_FlxList.recycle();
		this._headB = this._tailB = flixel_system_FlxList.recycle();
		if(Parent != null) {
			var iterator;
			var ot;
			if(Parent._headA.object != null) {
				iterator = Parent._headA;
				while(iterator != null) {
					if(this._tailA.object != null) {
						ot = this._tailA;
						this._tailA = flixel_system_FlxList.recycle();
						ot.next = this._tailA;
					}
					this._tailA.object = iterator.object;
					iterator = iterator.next;
				}
			}
			if(Parent._headB.object != null) {
				iterator = Parent._headB;
				while(iterator != null) {
					if(this._tailB.object != null) {
						ot = this._tailB;
						this._tailB = flixel_system_FlxList.recycle();
						ot.next = this._tailB;
					}
					this._tailB.object = iterator.object;
					iterator = iterator.next;
				}
			}
		} else flixel_system_FlxQuadTree._min = Math.floor((this.width + this.height) / (2 * flixel_system_FlxQuadTree.divisions));
		this._canSubdivide = this.width > flixel_system_FlxQuadTree._min || this.height > flixel_system_FlxQuadTree._min;
		this._northWestTree = null;
		this._northEastTree = null;
		this._southEastTree = null;
		this._southWestTree = null;
		this._leftEdge = this.x;
		this._rightEdge = this.x + this.width;
		this._halfWidth = this.width / 2;
		this._midpointX = this._leftEdge + this._halfWidth;
		this._topEdge = this.y;
		this._bottomEdge = this.y + this.height;
		this._halfHeight = this.height / 2;
		this._midpointY = this._topEdge + this._halfHeight;
	}
	,destroy: function() {
		this._headA = flixel_util_FlxDestroyUtil.destroy(this._headA);
		this._headB = flixel_util_FlxDestroyUtil.destroy(this._headB);
		this._tailA = flixel_util_FlxDestroyUtil.destroy(this._tailA);
		this._tailB = flixel_util_FlxDestroyUtil.destroy(this._tailB);
		this._northWestTree = flixel_util_FlxDestroyUtil.destroy(this._northWestTree);
		this._northEastTree = flixel_util_FlxDestroyUtil.destroy(this._northEastTree);
		this._southWestTree = flixel_util_FlxDestroyUtil.destroy(this._southWestTree);
		this._southEastTree = flixel_util_FlxDestroyUtil.destroy(this._southEastTree);
		flixel_system_FlxQuadTree._object = null;
		flixel_system_FlxQuadTree._processingCallback = null;
		flixel_system_FlxQuadTree._notifyCallback = null;
		this.exists = false;
		this.next = flixel_system_FlxQuadTree._cachedTreesHead;
		flixel_system_FlxQuadTree._cachedTreesHead = this;
		flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES++;
		flixel_util_FlxRect.prototype.destroy.call(this);
	}
	,load: function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback) {
		this.add(ObjectOrGroup1,0);
		if(ObjectOrGroup2 != null) {
			this.add(ObjectOrGroup2,1);
			flixel_system_FlxQuadTree._useBothLists = true;
		} else flixel_system_FlxQuadTree._useBothLists = false;
		flixel_system_FlxQuadTree._notifyCallback = NotifyCallback;
		flixel_system_FlxQuadTree._processingCallback = ProcessCallback;
	}
	,add: function(ObjectOrGroup,list) {
		flixel_system_FlxQuadTree._list = list;
		var group = flixel_group_FlxGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			var i = 0;
			var basic;
			var members = group.members;
			var l = group.length;
			while(i < l) {
				basic = members[i++];
				if(basic != null && basic.exists) {
					group = flixel_group_FlxGroup.resolveGroup(basic);
					if(group != null) this.add(group,list); else {
						flixel_system_FlxQuadTree._object = js_Boot.__cast(basic , flixel_FlxObject);
						if(flixel_system_FlxQuadTree._object.exists && flixel_system_FlxQuadTree._object.allowCollisions != 0) {
							flixel_system_FlxQuadTree._objectLeftEdge = flixel_system_FlxQuadTree._object.x;
							flixel_system_FlxQuadTree._objectTopEdge = flixel_system_FlxQuadTree._object.y;
							flixel_system_FlxQuadTree._objectRightEdge = flixel_system_FlxQuadTree._object.x + flixel_system_FlxQuadTree._object.get_width();
							flixel_system_FlxQuadTree._objectBottomEdge = flixel_system_FlxQuadTree._object.y + flixel_system_FlxQuadTree._object.get_height();
							this.addObject();
						}
					}
				}
			}
		} else {
			flixel_system_FlxQuadTree._object = js_Boot.__cast(ObjectOrGroup , flixel_FlxObject);
			if(flixel_system_FlxQuadTree._object.exists && flixel_system_FlxQuadTree._object.allowCollisions != 0) {
				flixel_system_FlxQuadTree._objectLeftEdge = flixel_system_FlxQuadTree._object.x;
				flixel_system_FlxQuadTree._objectTopEdge = flixel_system_FlxQuadTree._object.y;
				flixel_system_FlxQuadTree._objectRightEdge = flixel_system_FlxQuadTree._object.x + flixel_system_FlxQuadTree._object.get_width();
				flixel_system_FlxQuadTree._objectBottomEdge = flixel_system_FlxQuadTree._object.y + flixel_system_FlxQuadTree._object.get_height();
				this.addObject();
			}
		}
	}
	,addObject: function() {
		if(!this._canSubdivide || this._leftEdge >= flixel_system_FlxQuadTree._objectLeftEdge && this._rightEdge <= flixel_system_FlxQuadTree._objectRightEdge && this._topEdge >= flixel_system_FlxQuadTree._objectTopEdge && this._bottomEdge <= flixel_system_FlxQuadTree._objectBottomEdge) {
			this.addToList();
			return;
		}
		if(flixel_system_FlxQuadTree._objectLeftEdge > this._leftEdge && flixel_system_FlxQuadTree._objectRightEdge < this._midpointX) {
			if(flixel_system_FlxQuadTree._objectTopEdge > this._topEdge && flixel_system_FlxQuadTree._objectBottomEdge < this._midpointY) {
				if(this._northWestTree == null) this._northWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._topEdge,this._halfWidth,this._halfHeight,this);
				this._northWestTree.addObject();
				return;
			}
			if(flixel_system_FlxQuadTree._objectTopEdge > this._midpointY && flixel_system_FlxQuadTree._objectBottomEdge < this._bottomEdge) {
				if(this._southWestTree == null) this._southWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._midpointY,this._halfWidth,this._halfHeight,this);
				this._southWestTree.addObject();
				return;
			}
		}
		if(flixel_system_FlxQuadTree._objectLeftEdge > this._midpointX && flixel_system_FlxQuadTree._objectRightEdge < this._rightEdge) {
			if(flixel_system_FlxQuadTree._objectTopEdge > this._topEdge && flixel_system_FlxQuadTree._objectBottomEdge < this._midpointY) {
				if(this._northEastTree == null) this._northEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._topEdge,this._halfWidth,this._halfHeight,this);
				this._northEastTree.addObject();
				return;
			}
			if(flixel_system_FlxQuadTree._objectTopEdge > this._midpointY && flixel_system_FlxQuadTree._objectBottomEdge < this._bottomEdge) {
				if(this._southEastTree == null) this._southEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._midpointY,this._halfWidth,this._halfHeight,this);
				this._southEastTree.addObject();
				return;
			}
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._leftEdge && flixel_system_FlxQuadTree._objectLeftEdge < this._midpointX && flixel_system_FlxQuadTree._objectBottomEdge > this._topEdge && flixel_system_FlxQuadTree._objectTopEdge < this._midpointY) {
			if(this._northWestTree == null) this._northWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._topEdge,this._halfWidth,this._halfHeight,this);
			this._northWestTree.addObject();
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._midpointX && flixel_system_FlxQuadTree._objectLeftEdge < this._rightEdge && flixel_system_FlxQuadTree._objectBottomEdge > this._topEdge && flixel_system_FlxQuadTree._objectTopEdge < this._midpointY) {
			if(this._northEastTree == null) this._northEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._topEdge,this._halfWidth,this._halfHeight,this);
			this._northEastTree.addObject();
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._midpointX && flixel_system_FlxQuadTree._objectLeftEdge < this._rightEdge && flixel_system_FlxQuadTree._objectBottomEdge > this._midpointY && flixel_system_FlxQuadTree._objectTopEdge < this._bottomEdge) {
			if(this._southEastTree == null) this._southEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._midpointY,this._halfWidth,this._halfHeight,this);
			this._southEastTree.addObject();
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._leftEdge && flixel_system_FlxQuadTree._objectLeftEdge < this._midpointX && flixel_system_FlxQuadTree._objectBottomEdge > this._midpointY && flixel_system_FlxQuadTree._objectTopEdge < this._bottomEdge) {
			if(this._southWestTree == null) this._southWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._midpointY,this._halfWidth,this._halfHeight,this);
			this._southWestTree.addObject();
		}
	}
	,addToList: function() {
		var ot;
		if(flixel_system_FlxQuadTree._list == 0) {
			if(this._tailA.object != null) {
				ot = this._tailA;
				this._tailA = flixel_system_FlxList.recycle();
				ot.next = this._tailA;
			}
			this._tailA.object = flixel_system_FlxQuadTree._object;
		} else {
			if(this._tailB.object != null) {
				ot = this._tailB;
				this._tailB = flixel_system_FlxList.recycle();
				ot.next = this._tailB;
			}
			this._tailB.object = flixel_system_FlxQuadTree._object;
		}
		if(!this._canSubdivide) return;
		if(this._northWestTree != null) this._northWestTree.addToList();
		if(this._northEastTree != null) this._northEastTree.addToList();
		if(this._southEastTree != null) this._southEastTree.addToList();
		if(this._southWestTree != null) this._southWestTree.addToList();
	}
	,execute: function() {
		var overlapProcessed = false;
		var iterator;
		if(this._headA.object != null) {
			iterator = this._headA;
			while(iterator != null) {
				flixel_system_FlxQuadTree._object = iterator.object;
				if(flixel_system_FlxQuadTree._useBothLists) flixel_system_FlxQuadTree._iterator = this._headB; else flixel_system_FlxQuadTree._iterator = iterator.next;
				if(flixel_system_FlxQuadTree._object != null && flixel_system_FlxQuadTree._object.exists && flixel_system_FlxQuadTree._object.allowCollisions > 0 && flixel_system_FlxQuadTree._iterator != null && flixel_system_FlxQuadTree._iterator.object != null && this.overlapNode()) overlapProcessed = true;
				iterator = iterator.next;
			}
		}
		if(this._northWestTree != null && this._northWestTree.execute()) overlapProcessed = true;
		if(this._northEastTree != null && this._northEastTree.execute()) overlapProcessed = true;
		if(this._southEastTree != null && this._southEastTree.execute()) overlapProcessed = true;
		if(this._southWestTree != null && this._southWestTree.execute()) overlapProcessed = true;
		return overlapProcessed;
	}
	,overlapNode: function() {
		if(flixel_system_FlxQuadTree._object.x < flixel_system_FlxQuadTree._object.last.x) flixel_system_FlxQuadTree._objectHullX = flixel_system_FlxQuadTree._object.x; else flixel_system_FlxQuadTree._objectHullX = flixel_system_FlxQuadTree._object.last.x;
		if(flixel_system_FlxQuadTree._object.y < flixel_system_FlxQuadTree._object.last.y) flixel_system_FlxQuadTree._objectHullY = flixel_system_FlxQuadTree._object.y; else flixel_system_FlxQuadTree._objectHullY = flixel_system_FlxQuadTree._object.last.y;
		flixel_system_FlxQuadTree._objectHullWidth = flixel_system_FlxQuadTree._object.x - flixel_system_FlxQuadTree._object.last.x;
		flixel_system_FlxQuadTree._objectHullWidth = flixel_system_FlxQuadTree._object.get_width() + (flixel_system_FlxQuadTree._objectHullWidth > 0?flixel_system_FlxQuadTree._objectHullWidth:-flixel_system_FlxQuadTree._objectHullWidth);
		flixel_system_FlxQuadTree._objectHullHeight = flixel_system_FlxQuadTree._object.y - flixel_system_FlxQuadTree._object.last.y;
		flixel_system_FlxQuadTree._objectHullHeight = flixel_system_FlxQuadTree._object.get_height() + (flixel_system_FlxQuadTree._objectHullHeight > 0?flixel_system_FlxQuadTree._objectHullHeight:-flixel_system_FlxQuadTree._objectHullHeight);
		var overlapProcessed = false;
		var checkObject;
		while(flixel_system_FlxQuadTree._iterator != null) {
			checkObject = flixel_system_FlxQuadTree._iterator.object;
			if(flixel_system_FlxQuadTree._object == checkObject || !checkObject.exists || checkObject.allowCollisions <= 0) {
				flixel_system_FlxQuadTree._iterator = flixel_system_FlxQuadTree._iterator.next;
				continue;
			}
			if(checkObject.x < checkObject.last.x) flixel_system_FlxQuadTree._checkObjectHullX = checkObject.x; else flixel_system_FlxQuadTree._checkObjectHullX = checkObject.last.x;
			if(checkObject.y < checkObject.last.y) flixel_system_FlxQuadTree._checkObjectHullY = checkObject.y; else flixel_system_FlxQuadTree._checkObjectHullY = checkObject.last.y;
			flixel_system_FlxQuadTree._checkObjectHullWidth = checkObject.x - checkObject.last.x;
			flixel_system_FlxQuadTree._checkObjectHullWidth = checkObject.get_width() + (flixel_system_FlxQuadTree._checkObjectHullWidth > 0?flixel_system_FlxQuadTree._checkObjectHullWidth:-flixel_system_FlxQuadTree._checkObjectHullWidth);
			flixel_system_FlxQuadTree._checkObjectHullHeight = checkObject.y - checkObject.last.y;
			flixel_system_FlxQuadTree._checkObjectHullHeight = checkObject.get_height() + (flixel_system_FlxQuadTree._checkObjectHullHeight > 0?flixel_system_FlxQuadTree._checkObjectHullHeight:-flixel_system_FlxQuadTree._checkObjectHullHeight);
			if(flixel_system_FlxQuadTree._objectHullX + flixel_system_FlxQuadTree._objectHullWidth > flixel_system_FlxQuadTree._checkObjectHullX && flixel_system_FlxQuadTree._objectHullX < flixel_system_FlxQuadTree._checkObjectHullX + flixel_system_FlxQuadTree._checkObjectHullWidth && flixel_system_FlxQuadTree._objectHullY + flixel_system_FlxQuadTree._objectHullHeight > flixel_system_FlxQuadTree._checkObjectHullY && flixel_system_FlxQuadTree._objectHullY < flixel_system_FlxQuadTree._checkObjectHullY + flixel_system_FlxQuadTree._checkObjectHullHeight) {
				if(flixel_system_FlxQuadTree._processingCallback == null || flixel_system_FlxQuadTree._processingCallback(flixel_system_FlxQuadTree._object,checkObject)) {
					overlapProcessed = true;
					if(flixel_system_FlxQuadTree._notifyCallback != null) flixel_system_FlxQuadTree._notifyCallback(flixel_system_FlxQuadTree._object,checkObject);
				}
			}
			if(flixel_system_FlxQuadTree._iterator != null) flixel_system_FlxQuadTree._iterator = flixel_system_FlxQuadTree._iterator.next;
		}
		return overlapProcessed;
	}
	,__class__: flixel_system_FlxQuadTree
});
var flixel_system_FlxSound = function() {
	this._alreadyPaused = false;
	this._volumeAdjust = 1.0;
	flixel_FlxBasic.call(this);
	this.reset();
};
$hxClasses["flixel.system.FlxSound"] = flixel_system_FlxSound;
flixel_system_FlxSound.__name__ = ["flixel","system","FlxSound"];
flixel_system_FlxSound.__super__ = flixel_FlxBasic;
flixel_system_FlxSound.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,persist: null
	,name: null
	,artist: null
	,amplitude: null
	,amplitudeLeft: null
	,amplitudeRight: null
	,autoDestroy: null
	,onComplete: null
	,playing: null
	,time: null
	,_sound: null
	,_channel: null
	,_transform: null
	,_paused: null
	,_volume: null
	,_volumeAdjust: null
	,_looped: null
	,_target: null
	,_radius: null
	,_proximityPan: null
	,_alreadyPaused: null
	,reset: function() {
		this.destroy();
		this.x = 0;
		this.y = 0;
		this.time = 0;
		this._paused = false;
		this._volume = 1.0;
		this._volumeAdjust = 1.0;
		this._looped = false;
		this._target = null;
		this._radius = 0;
		this._proximityPan = false;
		this.set_visible(false);
		this.amplitude = 0;
		this.amplitudeLeft = 0;
		this.amplitudeRight = 0;
		this.autoDestroy = false;
		if(this._transform == null) this._transform = new openfl_media_SoundTransform();
		this._transform.pan = 0;
	}
	,destroy: function() {
		this._transform = null;
		this.set_exists(false);
		this.set_active(false);
		this._target = null;
		this.name = null;
		this.artist = null;
		if(this._channel != null) {
			this._channel.removeEventListener(openfl_events_Event.SOUND_COMPLETE,$bind(this,this.stopped));
			this._channel.stop();
			this._channel = null;
		}
		if(this._sound != null) {
			this._sound.removeEventListener(openfl_events_Event.ID3,$bind(this,this.gotID3));
			this._sound = null;
		}
		this.onComplete = null;
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,update: function() {
		if(!(this._channel != null)) return;
		this.time = this._channel.get_position();
		var radialMultiplier = 1.0;
		var fadeMultiplier = 1.0;
		if(this._target != null) {
			radialMultiplier = flixel_util_FlxMath.getDistance(flixel_util_FlxPoint.get(this._target.x,this._target.y),flixel_util_FlxPoint.get(this.x,this.y)) / this._radius;
			if(radialMultiplier < 0) radialMultiplier = 0;
			if(radialMultiplier > 1) radialMultiplier = 1;
			radialMultiplier = 1 - radialMultiplier;
			if(this._proximityPan) {
				var d = (this.x - this._target.x) / this._radius;
				if(d < -1) d = -1; else if(d > 1) d = 1;
				this._transform.pan = d;
			}
		}
		this._volumeAdjust = radialMultiplier * fadeMultiplier;
		this.updateTransform();
		if(this._transform.volume > 0) {
			this.amplitudeLeft = this._channel.leftPeak / this._transform.volume;
			this.amplitudeRight = this._channel.rightPeak / this._transform.volume;
			this.amplitude = (this.amplitudeLeft + this.amplitudeRight) * 0.5;
		} else {
			this.amplitudeLeft = 0;
			this.amplitudeRight = 0;
			this.amplitude = 0;
		}
	}
	,kill: function() {
		flixel_FlxBasic.prototype.kill.call(this);
		this.cleanup(false);
	}
	,loadEmbedded: function(EmbeddedSound,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = false;
		if(Looped == null) Looped = false;
		this.cleanup(true);
		if(js_Boot.__instanceof(EmbeddedSound,openfl_media_Sound)) this._sound = EmbeddedSound; else if(js_Boot.__instanceof(EmbeddedSound,Class)) this._sound = Type.createInstance(EmbeddedSound,[]); else if(typeof(EmbeddedSound) == "string") this._sound = openfl_Assets.getSound(EmbeddedSound);
		this._looped = Looped;
		this.autoDestroy = AutoDestroy;
		this.updateTransform();
		this.set_exists(true);
		this.onComplete = OnComplete;
		return this;
	}
	,loadStream: function(SoundURL,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = false;
		if(Looped == null) Looped = false;
		this.cleanup(true);
		this._sound = new openfl_media_Sound();
		this._sound.addEventListener(openfl_events_Event.ID3,$bind(this,this.gotID3));
		this._sound.load(new openfl_net_URLRequest(SoundURL));
		this._looped = Looped;
		this.autoDestroy = AutoDestroy;
		this.updateTransform();
		this.set_exists(true);
		this.onComplete = OnComplete;
		return this;
	}
	,loadByteArray: function(Bytes,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) AutoDestroy = false;
		if(Looped == null) Looped = false;
		this.cleanup(true);
		this.onComplete();
		return this;
	}
	,proximity: function(X,Y,TargetObject,Radius,Pan) {
		if(Pan == null) Pan = true;
		this.x = X;
		this.y = Y;
		this._target = TargetObject;
		this._radius = Radius;
		this._proximityPan = Pan;
		return this;
	}
	,play: function(ForceRestart) {
		if(ForceRestart == null) ForceRestart = false;
		if(!this.exists) return this;
		if(ForceRestart) this.cleanup(false,true,true); else if(this._channel != null) return this;
		if(this._paused) this.resume(); else this.startSound(0);
		return this;
	}
	,resume: function() {
		if(this._paused) this.startSound(this.time);
		return this;
	}
	,pause: function() {
		if(!(this._channel != null)) return this;
		this.time = this._channel.get_position();
		this._paused = true;
		this.cleanup(false,false,false);
		return this;
	}
	,stop: function() {
		this.cleanup(this.autoDestroy,true,true);
		return this;
	}
	,fadeOut: function(Duration,To) {
		if(To == null) To = 0;
		if(Duration == null) Duration = 1;
		flixel_tweens_FlxTween.num(this._volume,To,Duration,null,$bind(this,this.volumeTween));
		return this;
	}
	,fadeIn: function(Duration,From,To) {
		if(To == null) To = 1;
		if(From == null) From = 0;
		if(Duration == null) Duration = 1;
		flixel_tweens_FlxTween.num(From,To,Duration,null,$bind(this,this.volumeTween));
		return this;
	}
	,volumeTween: function(f) {
		this.set_volume(f);
	}
	,getActualVolume: function() {
		return this._volume * this._volumeAdjust;
	}
	,setPosition: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		this.x = X;
		this.y = Y;
	}
	,updateTransform: function() {
		this._transform.volume = (flixel_FlxG.sound.muted?0:1) * flixel_FlxG.sound.volume * this._volume * this._volumeAdjust;
		if(this._channel != null) this._channel.set_soundTransform(this._transform);
	}
	,startSound: function(Position) {
		var numLoops;
		if(this._looped && Position == 0) numLoops = 9999; else numLoops = 0;
		this.time = Position;
		this._paused = false;
		this._channel = this._sound.play(this.time,numLoops,this._transform);
		if(this._channel != null) {
			this._channel.addEventListener(openfl_events_Event.SOUND_COMPLETE,$bind(this,this.stopped));
			this.set_active(true);
		} else {
			this.set_exists(false);
			this.set_active(false);
		}
	}
	,stopped: function(event) {
		if(this.onComplete != null) this.onComplete();
		if(this._looped) {
			this.cleanup(false);
			this.play();
		} else this.cleanup(this.autoDestroy);
	}
	,cleanup: function(destroySound,resetPosition,resetFading) {
		if(resetFading == null) resetFading = true;
		if(resetPosition == null) resetPosition = true;
		if(destroySound) {
			this.reset();
			return;
		}
		if(this._channel != null) {
			this._channel.removeEventListener(openfl_events_Event.SOUND_COMPLETE,$bind(this,this.stopped));
			this._channel.stop();
			this._channel = null;
		}
		this.set_active(false);
		if(resetPosition) {
			this.time = 0;
			this._paused = false;
		}
	}
	,gotID3: function(event) {
		this.name = this._sound.get_id3().songName;
		this.artist = this._sound.get_id3().artist;
		this._sound.removeEventListener(openfl_events_Event.ID3,$bind(this,this.gotID3));
	}
	,onFocus: function() {
		if(!this._alreadyPaused) this.resume();
	}
	,onFocusLost: function() {
		this._alreadyPaused = this._paused;
		this.pause();
	}
	,get_playing: function() {
		return this._channel != null;
	}
	,get_volume: function() {
		return this._volume;
	}
	,set_volume: function(Volume) {
		this._volume = Volume;
		if(this._volume < 0) this._volume = 0; else if(this._volume > 1) this._volume = 1;
		this.updateTransform();
		return Volume;
	}
	,get_pan: function() {
		return this._transform.pan;
	}
	,set_pan: function(pan) {
		return this._transform.pan = pan;
	}
	,__class__: flixel_system_FlxSound
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_volume:"set_volume",get_volume:"get_volume",get_playing:"get_playing",set_pan:"set_pan",get_pan:"get_pan"})
});
var flixel_system_FlxSplash = function(MaxSize) {
	this._curPart = 0;
	flixel_FlxState.call(this,MaxSize);
};
$hxClasses["flixel.system.FlxSplash"] = flixel_system_FlxSplash;
flixel_system_FlxSplash.__name__ = ["flixel","system","FlxSplash"];
flixel_system_FlxSplash.nextState = null;
flixel_system_FlxSplash.__super__ = flixel_FlxState;
flixel_system_FlxSplash.prototype = $extend(flixel_FlxState.prototype,{
	_sprite: null
	,_gfx: null
	,_text: null
	,_times: null
	,_colors: null
	,_functions: null
	,_curPart: null
	,_cachedBgColor: null
	,_cachedTimestep: null
	,_cachedAutoPause: null
	,create: function() {
		this._cachedBgColor = flixel_FlxG.cameras.get_bgColor();
		flixel_FlxG.cameras.set_bgColor(-16777216);
		this._cachedTimestep = flixel_FlxG.fixedTimestep;
		flixel_FlxG.fixedTimestep = false;
		this._cachedAutoPause = flixel_FlxG.autoPause;
		flixel_FlxG.autoPause = false;
		flixel_FlxG.keys.enabled = false;
		this._times = [0.041,0.184,0.334,0.495,0.636];
		this._colors = [47394,16761138,16066382,3555839,314875];
		this._functions = [$bind(this,this.drawGreen),$bind(this,this.drawYellow),$bind(this,this.drawRed),$bind(this,this.drawBlue),$bind(this,this.drawLightBlue)];
		var _g = 0;
		var _g1 = this._times;
		while(_g < _g1.length) {
			var time = _g1[_g];
			++_g;
			new flixel_util_FlxTimer(time,$bind(this,this.timerCallback));
		}
		var stageWidth = openfl_Lib.current.stage.stageWidth;
		var stageHeight = openfl_Lib.current.stage.stageHeight;
		this._sprite = new openfl_display_Sprite();
		openfl_Lib.current.stage.addChild(this._sprite);
		this._gfx = this._sprite.get_graphics();
		this._text = new openfl_text_TextField();
		this._text.set_selectable(false);
		this._text.embedFonts = true;
		var dtf = new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEFAULT,16,16777215);
		dtf.align = openfl_text_TextFormatAlign.CENTER;
		this._text.set_defaultTextFormat(dtf);
		this._text.set_text("HaxeFlixel");
		openfl_Lib.current.stage.addChild(this._text);
		this.onResize(stageWidth,stageHeight);
		flixel_FlxG.sound.load(flixel_system_FlxAssets.getSound("assets/sounds/flixel")).play();
	}
	,destroy: function() {
		this._sprite = null;
		this._gfx = null;
		this._text = null;
		this._times = null;
		this._colors = null;
		this._functions = null;
		flixel_FlxState.prototype.destroy.call(this);
	}
	,onResize: function(Width,Height) {
		flixel_FlxState.prototype.onResize.call(this,Width,Height);
		this._sprite.set_x(Width / 2);
		this._sprite.set_y(Height / 2 - 20 * flixel_FlxG.game.get_scaleY());
		this._text.set_width(Width / flixel_FlxG.game.get_scaleX());
		this._text.set_x(0);
		this._text.set_y(this._sprite.get_y() + 80 * flixel_FlxG.game.get_scaleY());
		this._sprite.set_scaleX(this._text.set_scaleX(flixel_FlxG.game.get_scaleX()));
		this._sprite.set_scaleY(this._text.set_scaleY(flixel_FlxG.game.get_scaleY()));
	}
	,timerCallback: function(Timer) {
		this._functions[this._curPart]();
		this._text.set_textColor(this._colors[this._curPart]);
		this._text.set_text("HaxeFlixel");
		this._curPart++;
		if(this._curPart == 5) {
			flixel_tweens_FlxTween.tween(this._sprite,{ alpha : 0},3.0,{ ease : flixel_tweens_FlxEase.quadOut, complete : $bind(this,this.onComplete)});
			flixel_tweens_FlxTween.tween(this._text,{ alpha : 0},3.0,{ ease : flixel_tweens_FlxEase.quadOut});
		}
	}
	,drawGreen: function() {
		this._gfx.beginFill(47394);
		this._gfx.moveTo(0,-37);
		this._gfx.lineTo(1,-37);
		this._gfx.lineTo(37,0);
		this._gfx.lineTo(37,1);
		this._gfx.lineTo(1,37);
		this._gfx.lineTo(0,37);
		this._gfx.lineTo(-37,1);
		this._gfx.lineTo(-37,0);
		this._gfx.lineTo(0,-37);
		this._gfx.endFill();
	}
	,drawYellow: function() {
		this._gfx.beginFill(16761138);
		this._gfx.moveTo(-50,-50);
		this._gfx.lineTo(-25,-50);
		this._gfx.lineTo(0,-37);
		this._gfx.lineTo(-37,0);
		this._gfx.lineTo(-50,-25);
		this._gfx.lineTo(-50,-50);
		this._gfx.endFill();
	}
	,drawRed: function() {
		this._gfx.beginFill(16066382);
		this._gfx.moveTo(50,-50);
		this._gfx.lineTo(25,-50);
		this._gfx.lineTo(1,-37);
		this._gfx.lineTo(37,0);
		this._gfx.lineTo(50,-25);
		this._gfx.lineTo(50,-50);
		this._gfx.endFill();
	}
	,drawBlue: function() {
		this._gfx.beginFill(3555839);
		this._gfx.moveTo(-50,50);
		this._gfx.lineTo(-25,50);
		this._gfx.lineTo(0,37);
		this._gfx.lineTo(-37,1);
		this._gfx.lineTo(-50,25);
		this._gfx.lineTo(-50,50);
		this._gfx.endFill();
	}
	,drawLightBlue: function() {
		this._gfx.beginFill(314875);
		this._gfx.moveTo(50,50);
		this._gfx.lineTo(25,50);
		this._gfx.lineTo(1,37);
		this._gfx.lineTo(37,1);
		this._gfx.lineTo(50,25);
		this._gfx.lineTo(50,50);
		this._gfx.endFill();
	}
	,onComplete: function(Tween) {
		flixel_FlxG.cameras.set_bgColor(this._cachedBgColor);
		flixel_FlxG.fixedTimestep = this._cachedTimestep;
		flixel_FlxG.autoPause = this._cachedAutoPause;
		flixel_FlxG.keys.enabled = true;
		openfl_Lib.current.stage.removeChild(this._sprite);
		openfl_Lib.current.stage.removeChild(this._text);
		flixel_FlxG.switchState(Type.createInstance(flixel_system_FlxSplash.nextState,[]));
		flixel_FlxG.game._gameJustStarted = true;
	}
	,__class__: flixel_system_FlxSplash
});
var flixel_system_debug_ConsoleUtil = function() { };
$hxClasses["flixel.system.debug.ConsoleUtil"] = flixel_system_debug_ConsoleUtil;
flixel_system_debug_ConsoleUtil.__name__ = ["flixel","system","debug","ConsoleUtil"];
flixel_system_debug_ConsoleUtil.callFunction = function(Function,Args) {
	try {
		Reflect.callMethod(null,Function,Args);
		return true;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,openfl_errors_ArgumentError) ) {
			if(e.errorID == 1063) {
				var expected = Std.parseInt(flixel_util_FlxStringUtil.filterDigits(e.message).charAt(4));
				if(expected < Args.length) {
					var shortenedArgs = Args.slice(0,expected);
					Reflect.callMethod(null,Function,shortenedArgs);
				} else return false;
				return true;
			}
			return false;
		} else throw(e);
	}
};
flixel_system_debug_ConsoleUtil.findCommand = function(Alias,Commands) {
	var _g1 = 0;
	var _g = Commands.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(HxOverrides.indexOf(Commands[i].aliases,Alias,0) != -1) return Commands[i];
	}
	return null;
};
flixel_system_debug_ConsoleUtil.resolveObjectAndVariable = function(ObjectAndVariable,Object) {
	var searchArr = ObjectAndVariable.split(".");
	if(searchArr.length == 1) return { object : Object, variableName : ObjectAndVariable};
	var variableName = searchArr.join(".");
	if(!Reflect.isObject(Object)) {
		flixel_FlxG.log.error("'" + (function($this) {
			var $r;
			var cl;
			if(js_Boot.__instanceof(Object,Class)) cl = Object; else cl = Type.getClass(Object);
			var s = Type.getClassName(cl);
			if(s != null) {
				s = StringTools.replace(s,"::",".");
				var pos = s.lastIndexOf(".") + 1;
				s = HxOverrides.substr(s,pos,null);
			}
			$r = s;
			return $r;
		}(this)) + "' is not a valid Object");
		return null;
	}
	var l = searchArr.length;
	var tempObj = Object;
	var tempVarName = "";
	var _g = 0;
	while(_g < l) {
		var i = _g++;
		tempVarName = searchArr[i];
		try {
			if(i < l - 1) tempObj = Reflect.getProperty(tempObj,tempVarName);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			flixel_FlxG.log.error("'" + (function($this) {
				var $r;
				var cl1;
				if(js_Boot.__instanceof(tempObj,Class)) cl1 = tempObj; else cl1 = Type.getClass(tempObj);
				var s1 = Type.getClassName(cl1);
				if(s1 != null) {
					s1 = StringTools.replace(s1,"::",".");
					var pos1 = s1.lastIndexOf(".") + 1;
					s1 = HxOverrides.substr(s1,pos1,null);
				}
				$r = s1;
				return $r;
			}(this)) + "' does not have a field '" + tempVarName + "'");
			return null;
		}
	}
	return { object : tempObj, variableName : tempVarName};
};
flixel_system_debug_ConsoleUtil.resolveObjectAndVariableFromMap = function(ObjectAndVariable,ObjectMap) {
	var splitString = ObjectAndVariable.split(".");
	var object = ObjectMap.get(splitString[0]);
	splitString.shift();
	ObjectAndVariable = splitString.join(".");
	return flixel_system_debug_ConsoleUtil.resolveObjectAndVariable(ObjectAndVariable,object);
};
flixel_system_debug_ConsoleUtil.getInstanceFieldsAdvanced = function(cl,numSuperClassesToInclude) {
	if(numSuperClassesToInclude == null) numSuperClassesToInclude = 0;
	var fields = Type.getInstanceFields(cl);
	if(numSuperClassesToInclude >= 0) {
		var curClass = Type.getSuperClass(cl);
		var superClasses = [];
		while(curClass != null) {
			superClasses.push(curClass);
			curClass = Type.getSuperClass(curClass);
		}
		superClasses.reverse();
		if(numSuperClassesToInclude > superClasses.length) numSuperClassesToInclude = superClasses.length;
		var _g1 = 0;
		var _g = superClasses.length - numSuperClassesToInclude;
		while(_g1 < _g) {
			var i = _g1++;
			var superFields = Type.getInstanceFields(superClasses[i]);
			var _g2 = 0;
			while(_g2 < superFields.length) {
				var superField = superFields[_g2];
				++_g2;
				if(HxOverrides.indexOf(fields,superField,0) != -1) HxOverrides.remove(fields,superField);
			}
		}
	}
	return fields;
};
flixel_system_debug_ConsoleUtil.parseBool = function(s) {
	if(s == "true") return true; else if(s == "false") return false; else return null;
};
flixel_system_debug_ConsoleUtil.log = function(Text) {
	flixel_FlxG.log.advanced([Text],flixel_system_debug_LogStyle.CONSOLE);
};
var flixel_system_debug_ButtonAlignment = $hxClasses["flixel.system.debug.ButtonAlignment"] = { __ename__ : ["flixel","system","debug","ButtonAlignment"], __constructs__ : ["LEFT","MIDDLE","RIGHT"] };
flixel_system_debug_ButtonAlignment.LEFT = ["LEFT",0];
flixel_system_debug_ButtonAlignment.LEFT.toString = $estr;
flixel_system_debug_ButtonAlignment.LEFT.__enum__ = flixel_system_debug_ButtonAlignment;
flixel_system_debug_ButtonAlignment.MIDDLE = ["MIDDLE",1];
flixel_system_debug_ButtonAlignment.MIDDLE.toString = $estr;
flixel_system_debug_ButtonAlignment.MIDDLE.__enum__ = flixel_system_debug_ButtonAlignment;
flixel_system_debug_ButtonAlignment.RIGHT = ["RIGHT",2];
flixel_system_debug_ButtonAlignment.RIGHT.toString = $estr;
flixel_system_debug_ButtonAlignment.RIGHT.__enum__ = flixel_system_debug_ButtonAlignment;
var flixel_system_debug_DebuggerLayout = $hxClasses["flixel.system.debug.DebuggerLayout"] = { __ename__ : ["flixel","system","debug","DebuggerLayout"], __constructs__ : ["STANDARD","MICRO","BIG","TOP","LEFT","RIGHT"] };
flixel_system_debug_DebuggerLayout.STANDARD = ["STANDARD",0];
flixel_system_debug_DebuggerLayout.STANDARD.toString = $estr;
flixel_system_debug_DebuggerLayout.STANDARD.__enum__ = flixel_system_debug_DebuggerLayout;
flixel_system_debug_DebuggerLayout.MICRO = ["MICRO",1];
flixel_system_debug_DebuggerLayout.MICRO.toString = $estr;
flixel_system_debug_DebuggerLayout.MICRO.__enum__ = flixel_system_debug_DebuggerLayout;
flixel_system_debug_DebuggerLayout.BIG = ["BIG",2];
flixel_system_debug_DebuggerLayout.BIG.toString = $estr;
flixel_system_debug_DebuggerLayout.BIG.__enum__ = flixel_system_debug_DebuggerLayout;
flixel_system_debug_DebuggerLayout.TOP = ["TOP",3];
flixel_system_debug_DebuggerLayout.TOP.toString = $estr;
flixel_system_debug_DebuggerLayout.TOP.__enum__ = flixel_system_debug_DebuggerLayout;
flixel_system_debug_DebuggerLayout.LEFT = ["LEFT",4];
flixel_system_debug_DebuggerLayout.LEFT.toString = $estr;
flixel_system_debug_DebuggerLayout.LEFT.__enum__ = flixel_system_debug_DebuggerLayout;
flixel_system_debug_DebuggerLayout.RIGHT = ["RIGHT",5];
flixel_system_debug_DebuggerLayout.RIGHT.toString = $estr;
flixel_system_debug_DebuggerLayout.RIGHT.__enum__ = flixel_system_debug_DebuggerLayout;
var flixel_system_debug_LogStyle = function(Prefix,Color,Size,Bold,Italic,Underlined,ErrorSound,OpenConsole,CallbackFunction) {
	if(OpenConsole == null) OpenConsole = false;
	if(Underlined == null) Underlined = false;
	if(Italic == null) Italic = false;
	if(Bold == null) Bold = false;
	if(Size == null) Size = 12;
	if(Color == null) Color = "FFFFFF";
	if(Prefix == null) Prefix = "";
	this.prefix = Prefix;
	this.color = Color;
	this.size = Size;
	this.bold = Bold;
	this.italic = Italic;
	this.underlined = Underlined;
	this.errorSound = ErrorSound;
	this.openConsole = OpenConsole;
	this.callbackFunction = CallbackFunction;
};
$hxClasses["flixel.system.debug.LogStyle"] = flixel_system_debug_LogStyle;
flixel_system_debug_LogStyle.__name__ = ["flixel","system","debug","LogStyle"];
flixel_system_debug_LogStyle.prototype = {
	prefix: null
	,color: null
	,size: null
	,bold: null
	,italic: null
	,underlined: null
	,errorSound: null
	,openConsole: null
	,callbackFunction: null
	,__class__: flixel_system_debug_LogStyle
};
var flixel_system_debug_Window = function(Title,Icon,Width,Height,Resizable,Bounds,Closable) {
	if(Closable == null) Closable = false;
	if(Resizable == null) Resizable = true;
	if(Height == null) Height = 0;
	if(Width == null) Width = 0;
	openfl_display_Sprite.call(this);
	this.minSize = new openfl_geom_Point(50,30);
	this._width = Std["int"](Math.abs(Width));
	this._height = Std["int"](Math.abs(Height));
	this.updateBounds(Bounds);
	this._drag = new openfl_geom_Point();
	this._resizable = Resizable;
	this._shadow = new openfl_display_Bitmap(new openfl_display_BitmapData(1,2,true,-16777216));
	this._background = new openfl_display_Bitmap(new openfl_display_BitmapData(1,1,true,-580952225));
	this._header = new openfl_display_Bitmap(new openfl_display_BitmapData(1,15,true,-1157627904));
	this._background.set_y(this._header.get_height());
	this._title = new openfl_text_TextField();
	this._title.set_x(2);
	this._title.set_y(-1);
	this._title.set_alpha(0.8);
	this._title.set_height(20);
	this._title.set_selectable(false);
	this._title.multiline = false;
	this._title.embedFonts = true;
	this._title.set_defaultTextFormat(new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEBUGGER,12,16777215));
	this._title.set_text(Title);
	this.addChild(this._shadow);
	this.addChild(this._background);
	this.addChild(this._header);
	this.addChild(this._title);
	if(Icon != null) {
		var _icon = new openfl_display_Bitmap(Icon);
		_icon.set_x(5);
		_icon.set_y(2);
		_icon.set_alpha(0.8);
		this._title.set_x(_icon.get_x() + _icon.get_width() + 2);
		this.addChild(_icon);
	}
	if(this._resizable) {
		this._handle = new openfl_display_Bitmap(new flixel_system_debug__$Window_GraphicWindowHandle(0,0));
		this.addChild(this._handle);
	}
	if(Closable) {
		this._closeButton = new flixel_system_ui_FlxSystemButton(new flixel_system_debug__$Window_GraphicCloseButton(0,0),$bind(this,this.close));
		this._closeButton.set_alpha(0.8);
		this.addChild(this._closeButton);
	} else {
		this._id = flixel_system_debug_Window.WINDOW_AMOUNT;
		this.loadSaveData();
		flixel_system_debug_Window.WINDOW_AMOUNT++;
	}
	if(this._width != 0 || this._height != 0) this.updateSize();
	this.bound();
	this.addEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.init));
};
$hxClasses["flixel.system.debug.Window"] = flixel_system_debug_Window;
flixel_system_debug_Window.__name__ = ["flixel","system","debug","Window"];
flixel_system_debug_Window.__super__ = openfl_display_Sprite;
flixel_system_debug_Window.prototype = $extend(openfl_display_Sprite.prototype,{
	minSize: null
	,maxSize: null
	,toggleButton: null
	,_width: null
	,_height: null
	,_bounds: null
	,_background: null
	,_header: null
	,_shadow: null
	,_title: null
	,_handle: null
	,_closeButton: null
	,_overHeader: null
	,_overHandle: null
	,_drag: null
	,_dragging: null
	,_resizing: null
	,_resizable: null
	,_id: null
	,destroy: function() {
		this.minSize = null;
		this.maxSize = null;
		this._bounds = null;
		if(this._shadow != null) this.removeChild(this._shadow);
		this._shadow = null;
		if(this._background != null) this.removeChild(this._background);
		this._background = null;
		if(this._header != null) this.removeChild(this._header);
		this._header = null;
		if(this._title != null) this.removeChild(this._title);
		this._title = null;
		if(this._handle != null) this.removeChild(this._handle);
		this._handle = null;
		this._drag = null;
		this._closeButton = flixel_util_FlxDestroyUtil.destroy(this._closeButton);
		var stage = openfl_Lib.current.stage;
		if(stage.hasEventListener(openfl_events_MouseEvent.MOUSE_MOVE)) stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
		if(this.hasEventListener(openfl_events_MouseEvent.MOUSE_DOWN)) this.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
		if(stage.hasEventListener(openfl_events_MouseEvent.MOUSE_UP)) stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
	}
	,resize: function(Width,Height) {
		this._width = Std["int"](Math.abs(Width));
		this._height = Std["int"](Math.abs(Height));
		this.updateSize();
	}
	,reposition: function(X,Y) {
		this.set_x(X);
		this.set_y(Y);
		this.bound();
	}
	,updateBounds: function(Bounds) {
		this._bounds = Bounds;
		if(this._bounds != null) this.maxSize = new openfl_geom_Point(this._bounds.width,this._bounds.height); else this.maxSize = new openfl_geom_Point(1.79e+308,1.79e+308);
	}
	,setVisible: function(Value) {
		this.set_visible(Value);
		flixel_FlxG.save.data.windowSettings[this._id] = this.get_visible();
		flixel_FlxG.save.flush();
		if(this.toggleButton != null) this.toggleButton.set_toggled(!this.get_visible());
		if(this.get_visible()) this.parent.addChild(this);
	}
	,toggleVisible: function() {
		this.setVisible(!this.get_visible());
	}
	,putOnTop: function() {
		this.parent.addChild(this);
	}
	,loadSaveData: function() {
		if(flixel_FlxG.save.data.windowSettings != null) this.set_visible(flixel_FlxG.save.data.windowSettings[this._id]); else {
			this.initSaveData();
			this.loadSaveData();
		}
	}
	,initSaveData: function() {
		var settings = [];
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			settings[i] = true;
		}
		flixel_FlxG.save.data.windowSettings = settings;
		flixel_FlxG.save.flush();
	}
	,update: function() {
	}
	,init: function(E) {
		if(this.stage == null) return;
		this.removeEventListener(openfl_events_Event.ENTER_FRAME,$bind(this,this.init));
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.onMouseMove));
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
	}
	,onMouseMove: function(E) {
		var mouseX;
		if(this.get_mouseX() < 0) mouseX = 0; else mouseX = this.get_mouseX();
		var mouseY;
		if(this.get_mouseY() < 0) mouseY = 0; else mouseY = this.get_mouseY();
		if(!this.parent.get_visible()) {
			this._overHandle = this._overHeader = false;
			return;
		}
		if(this._dragging) {
			this._overHeader = true;
			this.reposition(this.parent.get_mouseX() - this._drag.x,this.parent.get_mouseY() - this._drag.y);
		} else if(this._resizing) {
			this._overHandle = true;
			this.resize(mouseX - this._drag.x,mouseY - this._drag.y);
		} else if(mouseX >= 0 && mouseX <= this._width && mouseY >= 0 && mouseY <= this._height) {
			this._overHeader = mouseX <= this._header.get_width() && mouseY <= this._header.get_height();
			if(this._resizable) this._overHandle = mouseX >= this._width - this._handle.get_width() && mouseY >= this._height - this._handle.get_height();
		} else this._overHandle = this._overHeader = false;
	}
	,onMouseDown: function(E) {
		if(this._overHeader) {
			this.parent.addChild(this);
			this._dragging = true;
			this._drag.x = this.get_mouseX();
			this._drag.y = this.get_mouseY();
		} else if(this._overHandle) {
			this.parent.addChild(this);
			this._resizing = true;
			this._drag.x = this._width - this.get_mouseX();
			this._drag.y = this._height - this.get_mouseY();
		}
	}
	,onMouseUp: function(E) {
		this._dragging = false;
		this._resizing = false;
	}
	,bound: function() {
		if(this._bounds != null) {
			this.set_x(flixel_util_FlxMath.bound(this.get_x(),this._bounds.get_left(),this._bounds.get_right() - this._width));
			this.set_y(flixel_util_FlxMath.bound(this.get_y(),this._bounds.get_top(),this._bounds.get_bottom() - this._height));
		}
	}
	,updateSize: function() {
		this._width = Std["int"](flixel_util_FlxMath.bound(this._width,this.minSize.x,this.maxSize.x));
		this._height = Std["int"](flixel_util_FlxMath.bound(this._height,this.minSize.y,this.maxSize.y));
		this._header.set_scaleX(this._width);
		this._background.set_scaleX(this._width);
		this._background.set_scaleY(this._height - this._header.get_height());
		this._shadow.set_scaleX(this._width);
		this._shadow.set_y(this._height);
		this._title.set_width(this._width - 4);
		if(this._resizable) {
			this._handle.set_x(this._width - this._handle.get_width());
			this._handle.set_y(this._height - this._handle.get_height());
		}
		if(this._closeButton != null) {
			this._closeButton.set_x(this._width - this._closeButton.get_width() - 3);
			this._closeButton.set_y(3);
		}
	}
	,close: function() {
		this.destroy();
	}
	,__class__: flixel_system_debug_Window
});
var flixel_system_debug_Watch = function(Title,Icon,Width,Height,Resizable,Bounds,Closable) {
	flixel_system_debug_Window.call(this,Title,Icon,Width,Height,Resizable,Bounds,Closable);
};
$hxClasses["flixel.system.debug.Watch"] = flixel_system_debug_Watch;
flixel_system_debug_Watch.__name__ = ["flixel","system","debug","Watch"];
flixel_system_debug_Watch.__super__ = flixel_system_debug_Window;
flixel_system_debug_Watch.prototype = $extend(flixel_system_debug_Window.prototype,{
	__class__: flixel_system_debug_Watch
});
var flixel_system_debug_Tracker = function(Title,Icon,Width,Height,Resizable,Bounds,Closable) {
	flixel_system_debug_Watch.call(this,Title,Icon,Width,Height,Resizable,Bounds,Closable);
};
$hxClasses["flixel.system.debug.Tracker"] = flixel_system_debug_Tracker;
flixel_system_debug_Tracker.__name__ = ["flixel","system","debug","Tracker"];
flixel_system_debug_Tracker.__super__ = flixel_system_debug_Watch;
flixel_system_debug_Tracker.prototype = $extend(flixel_system_debug_Watch.prototype,{
	__class__: flixel_system_debug_Tracker
});
var flixel_system_debug_TrackerProfile = function(ObjectClass,Variables,Extensions) {
	this.objectClass = ObjectClass;
	this.variables = Variables;
	this.extensions = Extensions;
};
$hxClasses["flixel.system.debug.TrackerProfile"] = flixel_system_debug_TrackerProfile;
flixel_system_debug_TrackerProfile.__name__ = ["flixel","system","debug","TrackerProfile"];
flixel_system_debug_TrackerProfile.prototype = {
	objectClass: null
	,variables: null
	,extensions: null
	,toString: function() {
		return flixel_util_FlxStringUtil.getDebugString([flixel_util_LabelValuePair._pool.get().create("variables",this.variables),flixel_util_LabelValuePair._pool.get().create("extensions",this.extensions)]);
	}
	,__class__: flixel_system_debug_TrackerProfile
};
var flixel_system_debug__$Window_GraphicWindowHandle = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$Window_GraphicWindowHandle.preload != null) {
		this.__image = flixel_system_debug__$Window_GraphicWindowHandle.preload;
		width = this.__image.width;
		height = this.__image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$Window_GraphicWindowHandle.resourceName),flixel_system_debug__$Window_GraphicWindowHandle.resourceType,function(b) {
		if(flixel_system_debug__$Window_GraphicWindowHandle.preload == null) flixel_system_debug__$Window_GraphicWindowHandle.preload = b.__image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._Window.GraphicWindowHandle"] = flixel_system_debug__$Window_GraphicWindowHandle;
flixel_system_debug__$Window_GraphicWindowHandle.__name__ = ["flixel","system","debug","_Window","GraphicWindowHandle"];
flixel_system_debug__$Window_GraphicWindowHandle.preload = null;
flixel_system_debug__$Window_GraphicWindowHandle.__super__ = openfl_display_BitmapData;
flixel_system_debug__$Window_GraphicWindowHandle.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$Window_GraphicWindowHandle
});
var flixel_system_debug__$Window_GraphicCloseButton = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$Window_GraphicCloseButton.preload != null) {
		this.__image = flixel_system_debug__$Window_GraphicCloseButton.preload;
		width = this.__image.width;
		height = this.__image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_system_debug__$Window_GraphicCloseButton.resourceName),flixel_system_debug__$Window_GraphicCloseButton.resourceType,function(b) {
		if(flixel_system_debug__$Window_GraphicCloseButton.preload == null) flixel_system_debug__$Window_GraphicCloseButton.preload = b.__image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.system.debug._Window.GraphicCloseButton"] = flixel_system_debug__$Window_GraphicCloseButton;
flixel_system_debug__$Window_GraphicCloseButton.__name__ = ["flixel","system","debug","_Window","GraphicCloseButton"];
flixel_system_debug__$Window_GraphicCloseButton.preload = null;
flixel_system_debug__$Window_GraphicCloseButton.__super__ = openfl_display_BitmapData;
flixel_system_debug__$Window_GraphicCloseButton.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$Window_GraphicCloseButton
});
var flixel_system_layer_DrawStackItem = function() {
	this.antialiasing = false;
	this.initialized = false;
	this.blending = 0;
	this.colored = false;
	this.position = 0;
	this.drawData = [];
};
$hxClasses["flixel.system.layer.DrawStackItem"] = flixel_system_layer_DrawStackItem;
flixel_system_layer_DrawStackItem.__name__ = ["flixel","system","layer","DrawStackItem"];
flixel_system_layer_DrawStackItem.prototype = {
	graphics: null
	,drawData: null
	,position: null
	,next: null
	,colored: null
	,blending: null
	,initialized: null
	,antialiasing: null
	,reset: function() {
		this.graphics = null;
		this.initialized = false;
		this.antialiasing = false;
		this.position = 0;
	}
	,dispose: function() {
		this.graphics = null;
		this.drawData = null;
		this.next = null;
	}
	,__class__: flixel_system_layer_DrawStackItem
};
var flixel_system_layer_Region = function(startX,startY,tileWidth,tileHeight,spacingX,spacingY,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(spacingY == null) spacingY = 0;
	if(spacingX == null) spacingX = 0;
	if(tileHeight == null) tileHeight = 0;
	if(tileWidth == null) tileWidth = 0;
	if(startY == null) startY = 0;
	if(startX == null) startX = 0;
	this.startX = startX;
	this.startY = startY;
	this.tileWidth = tileWidth;
	this.tileHeight = tileHeight;
	this.spacingX = spacingX;
	this.spacingY = spacingY;
	this.width = width;
	this.height = height;
};
$hxClasses["flixel.system.layer.Region"] = flixel_system_layer_Region;
flixel_system_layer_Region.__name__ = ["flixel","system","layer","Region"];
flixel_system_layer_Region.prototype = {
	startX: null
	,startY: null
	,width: null
	,height: null
	,tileWidth: null
	,tileHeight: null
	,spacingX: null
	,spacingY: null
	,numTiles: null
	,get_numTiles: function() {
		return this.get_numRows() * this.get_numCols();
	}
	,numRows: null
	,get_numRows: function() {
		var num = 1;
		if(this.tileHeight != 0) num = (this.height + this.spacingY) / (this.tileHeight + this.spacingY) | 0;
		return num;
	}
	,numCols: null
	,get_numCols: function() {
		var num = 1;
		if(this.tileWidth != 0) num = (this.width + this.spacingX) / (this.tileWidth + this.spacingX) | 0;
		return num;
	}
	,clone: function() {
		return new flixel_system_layer_Region(this.startX,this.startY,this.tileWidth,this.tileHeight,this.spacingX,this.spacingY,this.width,this.height);
	}
	,__class__: flixel_system_layer_Region
	,__properties__: {get_numCols:"get_numCols",get_numRows:"get_numRows",get_numTiles:"get_numTiles"}
};
var flixel_system_layer_TileSheetData = function(Bitmap) {
	this.bitmap = Bitmap;
	this.flxSpriteFrames = new haxe_ds_StringMap();
	this.flxFrames = new haxe_ds_StringMap();
	this.frameNames = [];
	this.framesArr = [];
};
$hxClasses["flixel.system.layer.TileSheetData"] = flixel_system_layer_TileSheetData;
flixel_system_layer_TileSheetData.__name__ = ["flixel","system","layer","TileSheetData"];
flixel_system_layer_TileSheetData.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_system_layer_TileSheetData.prototype = {
	flxSpriteFrames: null
	,flxFrames: null
	,frameNames: null
	,framesArr: null
	,bitmap: null
	,getFrame: function(name) {
		return this.flxFrames.get(name);
	}
	,getSpriteSheetFrames: function(region,origin) {
		var bitmapWidth = region.width;
		var bitmapHeight = region.height;
		var startX = region.startX;
		var startY = region.startY;
		var endX = startX + bitmapWidth;
		var endY = startY + bitmapHeight;
		var xSpacing = region.spacingX;
		var ySpacing = region.spacingY;
		var width;
		if(region.tileWidth == 0) width = bitmapWidth; else width = region.tileWidth;
		var height;
		if(region.tileHeight == 0) height = bitmapHeight; else height = region.tileHeight;
		var pointX = 0.5 * width;
		var pointY = 0.5 * height;
		if(origin != null) {
			pointX = origin.x;
			pointY = origin.y;
		}
		var key = width + "_" + height + "_" + startX + "_" + startY + "_" + endX + "_" + endY + "_" + xSpacing + "_" + ySpacing + "_" + pointX + "_" + pointY;
		if(this.flxSpriteFrames.exists(key)) return this.flxSpriteFrames.get(key);
		var numRows = region.get_numRows();
		var numCols = region.get_numCols();
		var tempPoint = origin;
		if(origin == null) tempPoint = new openfl_geom_Point(pointX,pointY);
		var spriteData = new flixel_system_layer_frames_FlxSpriteFrames(key);
		var frame;
		var tempRect;
		var spacedWidth = width + xSpacing;
		var spacedHeight = height + ySpacing;
		var _g1 = 0;
		var _g = numRows;
		while(_g1 < _g) {
			var j = _g1++;
			var _g3 = 0;
			var _g2 = numCols;
			while(_g3 < _g2) {
				var i = _g3++;
				tempRect = new openfl_geom_Rectangle(startX + i * spacedWidth,startY + j * spacedHeight,width,height);
				frame = this.addSpriteSheetFrame(tempRect,tempPoint);
				spriteData.addFrame(frame);
			}
		}
		this.flxSpriteFrames.set(key,spriteData);
		return spriteData;
	}
	,getSpriteSheetFrameKey: function(rect,point) {
		return rect.x + "_" + rect.y + "_" + rect.width + "_" + rect.height + "_" + point.x + "_" + point.y;
	}
	,getKeyForSpriteSheetFrames: function(width,height,startX,startY,endX,endY,xSpacing,ySpacing,pointX,pointY) {
		return width + "_" + height + "_" + startX + "_" + startY + "_" + endX + "_" + endY + "_" + xSpacing + "_" + ySpacing + "_" + pointX + "_" + pointY;
	}
	,containsSpriteSheetFrames: function(width,height,startX,startY,endX,endY,xSpacing,ySpacing,pointX,pointY) {
		var key = width + "_" + height + "_" + startX + "_" + startY + "_" + endX + "_" + endY + "_" + xSpacing + "_" + ySpacing + "_" + pointX + "_" + pointY;
		return this.flxSpriteFrames.exists(key);
	}
	,addSpriteSheetFrame: function(rect,point) {
		var key = rect.x + "_" + rect.y + "_" + rect.width + "_" + rect.height + "_" + point.x + "_" + point.y;
		if(this.flxFrames.exists(key)) return this.flxFrames.get(key);
		var frame = new flixel_system_layer_frames_FlxFrame(this);
		frame.name = key;
		frame.frame = rect;
		frame.trimmed = false;
		frame.sourceSize.set(rect.width,rect.height);
		frame.offset.set(0,0);
		frame.center.set(0.5 * rect.width,0.5 * rect.height);
		this.flxFrames.set(key,frame);
		this.frameNames.push(key);
		this.framesArr.push(frame);
		return frame;
	}
	,containsFrame: function(key) {
		return this.flxFrames.exists(key);
	}
	,destroy: function() {
		this.bitmap = null;
		var $it0 = this.flxSpriteFrames.iterator();
		while( $it0.hasNext() ) {
			var frames = $it0.next();
			frames.destroy();
		}
		this.flxSpriteFrames = null;
		var _g = 0;
		var _g1 = this.framesArr;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			frame.destroy();
		}
		this.flxFrames = null;
		this.frameNames = null;
		this.framesArr = null;
	}
	,getTexturePackerFrames: function(data,startX,startY) {
		if(startY == null) startY = 0;
		if(startX == null) startX = 0;
		if(this.flxSpriteFrames.exists(data.assetName)) return this.flxSpriteFrames.get(data.assetName);
		data.parseData();
		var frame;
		var packerFrames = new flixel_system_layer_frames_FlxSpriteFrames(data.assetName);
		var l = data.frames.length;
		var _g = 0;
		while(_g < l) {
			var i = _g++;
			frame = this.addTexturePackerFrame(data.frames[i],startX,startY);
			packerFrames.addFrame(frame);
		}
		this.flxSpriteFrames.set(data.assetName,packerFrames);
		return packerFrames;
	}
	,addTexturePackerFrame: function(frameData,startX,startY) {
		if(startY == null) startY = 0;
		if(startX == null) startX = 0;
		var key = frameData.name;
		if(this.flxFrames.exists(key)) return this.flxFrames.get(key);
		var texFrame = null;
		if(frameData.rotated) texFrame = new flixel_system_layer_frames_FlxRotatedFrame(this); else texFrame = new flixel_system_layer_frames_FlxFrame(this);
		texFrame.trimmed = frameData.trimmed;
		texFrame.name = key;
		texFrame.sourceSize.copyFrom(frameData.sourceSize);
		texFrame.offset.copyFrom(frameData.offset);
		texFrame.center.set(0,0);
		texFrame.frame = frameData.frame.clone();
		if(frameData.rotated) texFrame.center.set(texFrame.frame.height * 0.5 + texFrame.offset.x,texFrame.frame.width * 0.5 + texFrame.offset.y); else texFrame.center.set(texFrame.frame.width * 0.5 + texFrame.offset.x,texFrame.frame.height * 0.5 + texFrame.offset.y);
		texFrame.additionalAngle = frameData.additionalAngle;
		this.flxFrames.set(key,texFrame);
		this.frameNames.push(key);
		this.framesArr.push(texFrame);
		return texFrame;
	}
	,destroyFrameBitmapDatas: function() {
		var numFrames = this.frameNames.length;
		var _g = 0;
		var _g1 = this.framesArr;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			frame.destroyBitmapDatas();
		}
	}
	,__class__: flixel_system_layer_TileSheetData
};
var openfl_geom_Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl_display_Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = [];
	this.__tileRects = [];
	this.__tileUVs = [];
	this.__rectTile = new openfl_geom_Rectangle();
	this.__rectUV = new openfl_geom_Rectangle();
	this.__point = new openfl_geom_Point();
};
$hxClasses["openfl.display.Tilesheet"] = openfl_display_Tilesheet;
openfl_display_Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl_display_Tilesheet.prototype = {
	__bitmap: null
	,__centerPoints: null
	,__tileRects: null
	,__tileUVs: null
	,__rectTile: null
	,__rectUV: null
	,__point: null
	,addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = openfl_display_Tilesheet.__defaultPoint;
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl_geom_Rectangle(rectangle.get_left() / this.__bitmap.width,rectangle.get_top() / this.__bitmap.height,rectangle.get_right() / this.__bitmap.width,rectangle.get_bottom() / this.__bitmap.height));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags,count);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl_display_Tilesheet
};
var flixel_system_layer_TileSheetExt = function(bitmap) {
	this.numTiles = 0;
	openfl_display_Tilesheet.call(this,bitmap);
	this.tileIDs = new haxe_ds_StringMap();
	this.tileOrder = [];
};
$hxClasses["flixel.system.layer.TileSheetExt"] = flixel_system_layer_TileSheetExt;
flixel_system_layer_TileSheetExt.__name__ = ["flixel","system","layer","TileSheetExt"];
flixel_system_layer_TileSheetExt.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_system_layer_TileSheetExt.__super__ = openfl_display_Tilesheet;
flixel_system_layer_TileSheetExt.prototype = $extend(openfl_display_Tilesheet.prototype,{
	numTiles: null
	,tileIDs: null
	,tileOrder: null
	,rebuildFromOld: function(old) {
		var _g1 = 0;
		var _g = old.tileOrder.length;
		while(_g1 < _g) {
			var i = _g1++;
			var tileName = old.tileOrder[i];
			var tileObj = old.tileIDs.get(tileName);
			this.addTileRect(tileObj.rect,tileObj.point);
		}
		this.tileIDs = old.tileIDs;
		this.tileOrder = old.tileOrder;
		this.numTiles = old.numTiles;
		old.tileIDs = null;
		old.tileOrder = null;
		flixel_util_FlxDestroyUtil.destroy(old);
	}
	,getKey: function(rect,point) {
		var key = rect.x + "_" + rect.y + "_" + rect.width + "_" + rect.height + "_";
		if(point != null) key = key + point.x + "_" + point.y;
		return key;
	}
	,addTileRectID: function(rect,point) {
		var key = this.getKey(rect,point);
		if(this.tileIDs.exists(key)) return this.tileIDs.get(key).id;
		this.addTileRect(rect,point);
		var tileID = this.numTiles;
		this.numTiles++;
		this.tileOrder[tileID] = key;
		var value = new flixel_system_layer__$TileSheetExt_RectPointTileID(tileID,rect,point);
		this.tileIDs.set(key,value);
		return tileID;
	}
	,destroy: function() {
		this.tileOrder = null;
		if(this.tileIDs != null) {
			var $it0 = this.tileIDs.iterator();
			while( $it0.hasNext() ) {
				var tileObj = $it0.next();
				flixel_util_FlxDestroyUtil.destroy(tileObj);
			}
		}
		this.tileIDs = null;
	}
	,__class__: flixel_system_layer_TileSheetExt
});
var flixel_system_layer__$TileSheetExt_RectPointTileID = function(id,rect,point) {
	this.id = id;
	this.rect = rect;
	this.point = point;
};
$hxClasses["flixel.system.layer._TileSheetExt.RectPointTileID"] = flixel_system_layer__$TileSheetExt_RectPointTileID;
flixel_system_layer__$TileSheetExt_RectPointTileID.__name__ = ["flixel","system","layer","_TileSheetExt","RectPointTileID"];
flixel_system_layer__$TileSheetExt_RectPointTileID.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_system_layer__$TileSheetExt_RectPointTileID.prototype = {
	rect: null
	,point: null
	,id: null
	,destroy: function() {
		this.rect = null;
		this.point = null;
	}
	,__class__: flixel_system_layer__$TileSheetExt_RectPointTileID
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
	this.__array = new Float32Array([a,b,c,d,tx,ty,0,0,1]);
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.x = 0;
			vector3D.y = 0;
			vector3D.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new openfl_geom_Matrix();
		result.a = this.a * m.a + this.b * m.c;
		result.b = this.a * m.b + this.b * m.d;
		result.c = this.c * m.a + this.d * m.c;
		result.d = this.c * m.b + this.d * m.d;
		result.tx = this.tx * m.a + this.ty * m.c + m.tx;
		result.ty = this.tx * m.b + this.ty * m.d + m.ty;
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		var m = new openfl_geom_Matrix();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var flixel_system_layer_frames_FlxFrame = function(tileSheet) {
	this.additionalAngle = 0;
	this.tileID = -1;
	this.trimmed = false;
	this._tileSheet = tileSheet;
	this.additionalAngle = 0;
	this.sourceSize = flixel_util_FlxPoint.get(null,null);
	this.offset = flixel_util_FlxPoint.get(null,null);
	this.center = flixel_util_FlxPoint.get(null,null);
	this.type = flixel_system_layer_frames_FrameType.REGULAR;
};
$hxClasses["flixel.system.layer.frames.FlxFrame"] = flixel_system_layer_frames_FlxFrame;
flixel_system_layer_frames_FlxFrame.__name__ = ["flixel","system","layer","frames","FlxFrame"];
flixel_system_layer_frames_FlxFrame.prototype = {
	name: null
	,frame: null
	,trimmed: null
	,tileID: null
	,additionalAngle: null
	,sourceSize: null
	,offset: null
	,center: null
	,type: null
	,_bitmapData: null
	,_hReversedBitmapData: null
	,_vReversedBitmapData: null
	,_hvReversedBitmapData: null
	,_tileSheet: null
	,paintOnBitmap: function(bmd) {
		var result = null;
		if(bmd != null && (bmd.width == this.sourceSize.x && bmd.height == this.sourceSize.y)) {
			result = bmd;
			var w = bmd.width;
			var h = bmd.height;
			if(w > this.frame.width || h > this.frame.height) {
				flixel_system_layer_frames_FlxFrame.RECT.x = flixel_system_layer_frames_FlxFrame.RECT.y = 0;
				flixel_system_layer_frames_FlxFrame.RECT.width = w;
				flixel_system_layer_frames_FlxFrame.RECT.height = h;
				bmd.fillRect(flixel_system_layer_frames_FlxFrame.RECT,0);
			}
		} else if(bmd != null) bmd.dispose();
		if(result == null) result = new openfl_display_BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		flixel_system_layer_frames_FlxFrame.POINT.x = this.offset.x;
		flixel_system_layer_frames_FlxFrame.POINT.y = this.offset.y;
		result.copyPixels(this._tileSheet.bitmap,this.frame,flixel_system_layer_frames_FlxFrame.POINT);
		return result;
	}
	,getBitmap: function() {
		if(this._bitmapData != null) return this._bitmapData;
		this._bitmapData = this.paintOnBitmap();
		return this._bitmapData;
	}
	,getHReversedBitmap: function() {
		if(this._hReversedBitmapData != null) return this._hReversedBitmapData;
		var normalFrame = this.getBitmap();
		flixel_system_layer_frames_FlxFrame.MATRIX.identity();
		flixel_system_layer_frames_FlxFrame.MATRIX.scale(-1,1);
		flixel_system_layer_frames_FlxFrame.MATRIX.translate(this.sourceSize.x | 0,0);
		this._hReversedBitmapData = new openfl_display_BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		this._hReversedBitmapData.draw(normalFrame,flixel_system_layer_frames_FlxFrame.MATRIX);
		return this._hReversedBitmapData;
	}
	,getVReversedBitmap: function() {
		if(this._vReversedBitmapData != null) return this._vReversedBitmapData;
		var normalFrame = this.getBitmap();
		flixel_system_layer_frames_FlxFrame.MATRIX.identity();
		flixel_system_layer_frames_FlxFrame.MATRIX.scale(1,-1);
		flixel_system_layer_frames_FlxFrame.MATRIX.translate(0,this.sourceSize.y | 0);
		this._vReversedBitmapData = new openfl_display_BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		this._vReversedBitmapData.draw(normalFrame,flixel_system_layer_frames_FlxFrame.MATRIX);
		return this._vReversedBitmapData;
	}
	,getHVReversedBitmap: function() {
		if(this._hvReversedBitmapData != null) return this._hvReversedBitmapData;
		var normalFrame = this.getBitmap();
		flixel_system_layer_frames_FlxFrame.MATRIX.identity();
		flixel_system_layer_frames_FlxFrame.MATRIX.scale(-1,-1);
		flixel_system_layer_frames_FlxFrame.MATRIX.translate(this.sourceSize.x | 0,this.sourceSize.y | 0);
		this._hvReversedBitmapData = new openfl_display_BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		this._hvReversedBitmapData.draw(normalFrame,flixel_system_layer_frames_FlxFrame.MATRIX);
		return this._hvReversedBitmapData;
	}
	,destroy: function() {
		this.name = null;
		this.frame = null;
		this._tileSheet = null;
		this.sourceSize = flixel_util_FlxDestroyUtil.put(this.sourceSize);
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this.center = flixel_util_FlxDestroyUtil.put(this.center);
		this.destroyBitmapDatas();
	}
	,destroyBitmapDatas: function() {
		this._bitmapData = flixel_util_FlxDestroyUtil.dispose(this._bitmapData);
		this._hReversedBitmapData = flixel_util_FlxDestroyUtil.dispose(this._hReversedBitmapData);
		this._vReversedBitmapData = flixel_util_FlxDestroyUtil.dispose(this._vReversedBitmapData);
		this._hvReversedBitmapData = flixel_util_FlxDestroyUtil.dispose(this._hvReversedBitmapData);
	}
	,__class__: flixel_system_layer_frames_FlxFrame
};
var flixel_system_layer_frames_FlxRotatedFrame = function(tileSheet) {
	flixel_system_layer_frames_FlxFrame.call(this,tileSheet);
	this.type = flixel_system_layer_frames_FrameType.ROTATED;
};
$hxClasses["flixel.system.layer.frames.FlxRotatedFrame"] = flixel_system_layer_frames_FlxRotatedFrame;
flixel_system_layer_frames_FlxRotatedFrame.__name__ = ["flixel","system","layer","frames","FlxRotatedFrame"];
flixel_system_layer_frames_FlxRotatedFrame.__super__ = flixel_system_layer_frames_FlxFrame;
flixel_system_layer_frames_FlxRotatedFrame.prototype = $extend(flixel_system_layer_frames_FlxFrame.prototype,{
	paintOnBitmap: function(bmd) {
		var result = null;
		if(bmd != null && (bmd.width == this.sourceSize.x && bmd.height == this.sourceSize.y)) result = bmd; else if(bmd != null) bmd.dispose();
		if(result == null) result = new openfl_display_BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		var temp = new openfl_display_BitmapData(this.frame.width | 0,this.frame.height | 0,true,0);
		flixel_system_layer_frames_FlxFrame.POINT.x = flixel_system_layer_frames_FlxFrame.POINT.y = 0;
		temp.copyPixels(this._tileSheet.bitmap,this.frame,flixel_system_layer_frames_FlxFrame.POINT);
		flixel_system_layer_frames_FlxFrame.MATRIX.identity();
		flixel_system_layer_frames_FlxFrame.MATRIX.translate(-0.5 * this.frame.width,-0.5 * this.frame.height);
		flixel_system_layer_frames_FlxFrame.MATRIX.rotate(-90. * (Math.PI / 180));
		flixel_system_layer_frames_FlxFrame.MATRIX.translate(this.offset.x + 0.5 * this.frame.height,this.offset.y + 0.5 * this.frame.width);
		result = new openfl_display_BitmapData(this.sourceSize.x | 0,this.sourceSize.y | 0,true,0);
		result.draw(temp,flixel_system_layer_frames_FlxFrame.MATRIX);
		temp.dispose();
		return result;
	}
	,__class__: flixel_system_layer_frames_FlxRotatedFrame
});
var flixel_system_layer_frames_FlxSpriteFrames = function(name) {
	this.name = name;
	this.frames = [];
	this.framesHash = new haxe_ds_StringMap();
};
$hxClasses["flixel.system.layer.frames.FlxSpriteFrames"] = flixel_system_layer_frames_FlxSpriteFrames;
flixel_system_layer_frames_FlxSpriteFrames.__name__ = ["flixel","system","layer","frames","FlxSpriteFrames"];
flixel_system_layer_frames_FlxSpriteFrames.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_system_layer_frames_FlxSpriteFrames.prototype = {
	frames: null
	,framesHash: null
	,name: null
	,addFrame: function(frame) {
		this.frames.push(frame);
		this.framesHash.set(frame.name,frame);
	}
	,destroy: function() {
		this.frames = null;
		this.framesHash = null;
		this.name = null;
	}
	,__class__: flixel_system_layer_frames_FlxSpriteFrames
};
var flixel_system_layer_frames_FrameType = $hxClasses["flixel.system.layer.frames.FrameType"] = { __ename__ : ["flixel","system","layer","frames","FrameType"], __constructs__ : ["REGULAR","ROTATED"] };
flixel_system_layer_frames_FrameType.REGULAR = ["REGULAR",0];
flixel_system_layer_frames_FrameType.REGULAR.toString = $estr;
flixel_system_layer_frames_FrameType.REGULAR.__enum__ = flixel_system_layer_frames_FrameType;
flixel_system_layer_frames_FrameType.ROTATED = ["ROTATED",1];
flixel_system_layer_frames_FrameType.ROTATED.toString = $estr;
flixel_system_layer_frames_FrameType.ROTATED.__enum__ = flixel_system_layer_frames_FrameType;
var flixel_system_replay_CodeValuePair = function(Code,Value) {
	if(Value == null) Value = 0;
	if(Code == null) Code = 0;
	this.code = Code;
	this.value = Value;
};
$hxClasses["flixel.system.replay.CodeValuePair"] = flixel_system_replay_CodeValuePair;
flixel_system_replay_CodeValuePair.__name__ = ["flixel","system","replay","CodeValuePair"];
flixel_system_replay_CodeValuePair.prototype = {
	code: null
	,value: null
	,__class__: flixel_system_replay_CodeValuePair
};
var flixel_system_replay_FlxReplay = function() {
	this.seed = 0;
	this.frame = 0;
	this.frameCount = 0;
	this.finished = false;
	this._frames = null;
	this._capacity = 0;
	this._marker = 0;
};
$hxClasses["flixel.system.replay.FlxReplay"] = flixel_system_replay_FlxReplay;
flixel_system_replay_FlxReplay.__name__ = ["flixel","system","replay","FlxReplay"];
flixel_system_replay_FlxReplay.prototype = {
	seed: null
	,frame: null
	,frameCount: null
	,finished: null
	,_frames: null
	,_capacity: null
	,_marker: null
	,destroy: function() {
		if(this._frames == null) return;
		var i = this.frameCount - 1;
		while(i >= 0) this._frames[i--].destroy();
		this._frames = null;
	}
	,create: function(Seed) {
		this.destroy();
		this.init();
		this.seed = Seed;
		this.rewind();
	}
	,load: function(FileContents) {
		this.init();
		var lines = FileContents.split("\n");
		this.seed = Std.parseInt(lines[0]);
		var line;
		var i = 1;
		var l = lines.length;
		while(i < l) {
			line = lines[i++];
			if(line.length > 3) {
				this._frames[this.frameCount++] = new flixel_system_replay_FrameRecord().load(line);
				if(this.frameCount >= this._capacity) {
					this._capacity *= 2;
					flixel_util_FlxArrayUtil.setLength_flixel_system_replay_FrameRecord(this._frames,this._capacity);
				}
			}
		}
		this.rewind();
	}
	,save: function() {
		if(this.frameCount <= 0) return null;
		var output = this.seed + "\n";
		var i = 0;
		while(i < this.frameCount) output += this._frames[i++].save() + "\n";
		return output;
	}
	,recordFrame: function() {
		var continueFrame = true;
		var keysRecord = flixel_FlxG.keys.record();
		if(keysRecord == null) continueFrame = false;
		var mouseRecord = flixel_FlxG.mouse.record();
		if(mouseRecord == null) continueFrame = false;
		if(continueFrame) {
			this.frame++;
			return;
		}
		var frameRecorded = new flixel_system_replay_FrameRecord().create(this.frame++);
		frameRecorded.mouse = mouseRecord;
		frameRecorded.keys = keysRecord;
		this._frames[this.frameCount++] = frameRecorded;
		if(this.frameCount >= this._capacity) {
			this._capacity *= 2;
			flixel_util_FlxArrayUtil.setLength_flixel_system_replay_FrameRecord(this._frames,this._capacity);
		}
	}
	,playNextFrame: function() {
		flixel_FlxG.inputs.reset();
		if(this._marker >= this.frameCount) {
			this.finished = true;
			return;
		}
		if(this._frames[this._marker].frame != this.frame++) return;
		var fr = this._frames[this._marker++];
		if(fr.keys != null) flixel_FlxG.keys.playback(fr.keys);
		if(fr.mouse != null) flixel_FlxG.mouse.playback(fr.mouse);
	}
	,rewind: function() {
		this._marker = 0;
		this.frame = 0;
		this.finished = false;
	}
	,init: function() {
		this._capacity = 100;
		this._frames = [];
		flixel_util_FlxArrayUtil.setLength_flixel_system_replay_FrameRecord(this._frames,this._capacity);
		this.frameCount = 0;
	}
	,__class__: flixel_system_replay_FlxReplay
};
var flixel_system_replay_FrameRecord = function() {
	this.frame = 0;
	this.keys = null;
	this.mouse = null;
};
$hxClasses["flixel.system.replay.FrameRecord"] = flixel_system_replay_FrameRecord;
flixel_system_replay_FrameRecord.__name__ = ["flixel","system","replay","FrameRecord"];
flixel_system_replay_FrameRecord.prototype = {
	frame: null
	,keys: null
	,mouse: null
	,create: function(Frame,Keys,Mouse) {
		this.frame = Math.floor(Frame);
		this.keys = Keys;
		this.mouse = Mouse;
		return this;
	}
	,destroy: function() {
		this.keys = null;
		this.mouse = null;
	}
	,save: function() {
		var output = this.frame + "k";
		if(this.keys != null) {
			var object;
			var i = 0;
			var l = this.keys.length;
			while(i < l) {
				if(i > 0) output += ",";
				object = this.keys[i++];
				output += object.code + ":" + object.value;
			}
		}
		output += "m";
		if(this.mouse != null) output += this.mouse.x + "," + this.mouse.y + "," + this.mouse.button + "," + this.mouse.wheel;
		return output;
	}
	,load: function(Data) {
		var i;
		var l;
		var array = Data.split("k");
		this.frame = Std.parseInt(array[0]);
		array = array[1].split("m");
		var keyData = array[0];
		var mouseData = array[1];
		if(keyData.length > 0) {
			array = keyData.split(",");
			var keyPair;
			i = 0;
			l = array.length;
			while(i < l) {
				keyPair = array[i++].split(":");
				if(keyPair.length == 2) {
					if(this.keys == null) this.keys = [];
					this.keys.push(new flixel_system_replay_CodeValuePair(Std.parseInt(keyPair[0]),Std.parseInt(keyPair[1])));
				}
			}
		}
		if(mouseData.length > 0) {
			array = mouseData.split(",");
			if(array.length >= 4) this.mouse = new flixel_system_replay_MouseRecord(Std.parseInt(array[0]),Std.parseInt(array[1]),Std.parseInt(array[2]),Std.parseInt(array[3]));
		}
		return this;
	}
	,__class__: flixel_system_replay_FrameRecord
};
var flixel_system_replay_MouseRecord = function(X,Y,Button,Wheel) {
	flixel_util_FlxPoint.call(this);
	this.set(X,Y);
	this.button = Button;
	this.wheel = Wheel;
};
$hxClasses["flixel.system.replay.MouseRecord"] = flixel_system_replay_MouseRecord;
flixel_system_replay_MouseRecord.__name__ = ["flixel","system","replay","MouseRecord"];
flixel_system_replay_MouseRecord.__super__ = flixel_util_FlxPoint;
flixel_system_replay_MouseRecord.prototype = $extend(flixel_util_FlxPoint.prototype,{
	button: null
	,wheel: null
	,__class__: flixel_system_replay_MouseRecord
});
var flixel_system_ui_FlxFocusLostScreen = function() {
	openfl_display_Sprite.call(this);
	this.draw();
	var logo = new openfl_display_Sprite();
	flixel_system_FlxAssets.drawLogo(logo.get_graphics());
	logo.set_scaleX(logo.set_scaleY(0.2));
	logo.set_x(logo.set_y(5));
	logo.set_alpha(0.35);
	this.addChild(logo);
	this.set_visible(false);
};
$hxClasses["flixel.system.ui.FlxFocusLostScreen"] = flixel_system_ui_FlxFocusLostScreen;
flixel_system_ui_FlxFocusLostScreen.__name__ = ["flixel","system","ui","FlxFocusLostScreen"];
flixel_system_ui_FlxFocusLostScreen.__super__ = openfl_display_Sprite;
flixel_system_ui_FlxFocusLostScreen.prototype = $extend(openfl_display_Sprite.prototype,{
	draw: function() {
		var gfx = this.get_graphics();
		var screenWidth = Std["int"](flixel_FlxCamera.defaultZoom * flixel_FlxG.width * flixel_FlxG.game.get_scaleX());
		var screenHeight = Std["int"](flixel_FlxCamera.defaultZoom * flixel_FlxG.height * flixel_FlxG.game.get_scaleY());
		gfx.clear();
		gfx.moveTo(0,0);
		gfx.beginFill(0,0.5);
		gfx.drawRect(0,0,screenWidth,screenHeight);
		gfx.endFill();
		var halfWidth = screenWidth / 2 | 0;
		var halfHeight = screenHeight / 2 | 0;
		var helper = Std["int"](Math.min(halfWidth,halfHeight) / 3);
		gfx.moveTo(halfWidth - helper,halfHeight - helper);
		gfx.beginFill(16777215,0.65);
		gfx.lineTo(halfWidth + helper,halfHeight);
		gfx.lineTo(halfWidth - helper,halfHeight + helper);
		gfx.lineTo(halfWidth - helper,halfHeight - helper);
		gfx.endFill();
		this.set_scaleX(1 / flixel_FlxG.game.get_scaleX());
		this.set_scaleY(1 / flixel_FlxG.game.get_scaleY());
	}
	,__class__: flixel_system_ui_FlxFocusLostScreen
});
var flixel_system_ui_FlxSoundTray = function() {
	this._defaultScale = 2.0;
	this._width = 80;
	openfl_display_Sprite.call(this);
	this.set_visible(false);
	this.set_scaleX(this._defaultScale);
	this.set_scaleY(this._defaultScale);
	var tmp = new openfl_display_Bitmap(new openfl_display_BitmapData(this._width,30,true,2130706432));
	this.screenCenter();
	this.addChild(tmp);
	var text = new openfl_text_TextField();
	text.set_width(tmp.get_width());
	text.set_height(tmp.get_height());
	text.multiline = true;
	text.set_wordWrap(true);
	text.set_selectable(false);
	var dtf = new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEFAULT,8,16777215);
	dtf.align = openfl_text_TextFormatAlign.CENTER;
	text.set_defaultTextFormat(dtf);
	this.addChild(text);
	text.set_text("VOLUME");
	text.set_y(16);
	var bx = 10;
	var by = 14;
	this._bars = [];
	var _g = 0;
	while(_g < 10) {
		var i = _g++;
		tmp = new openfl_display_Bitmap(new openfl_display_BitmapData(4,i + 1,false,-1));
		tmp.set_x(bx);
		tmp.set_y(by);
		this.addChild(tmp);
		this._bars.push(tmp);
		bx += 6;
		by--;
	}
	this.set_y(-this.get_height());
	this.set_visible(false);
};
$hxClasses["flixel.system.ui.FlxSoundTray"] = flixel_system_ui_FlxSoundTray;
flixel_system_ui_FlxSoundTray.__name__ = ["flixel","system","ui","FlxSoundTray"];
flixel_system_ui_FlxSoundTray.__super__ = openfl_display_Sprite;
flixel_system_ui_FlxSoundTray.prototype = $extend(openfl_display_Sprite.prototype,{
	active: null
	,_timer: null
	,_bars: null
	,_width: null
	,_defaultScale: null
	,update: function(MS) {
		if(this._timer > 0) this._timer -= MS / 1000; else if(this.get_y() > -this.get_height()) {
			var _g = this;
			_g.set_y(_g.get_y() - MS / 1000 * flixel_FlxG.height * 2);
			if(this.get_y() <= -this.get_height()) {
				this.set_visible(false);
				this.active = false;
				flixel_FlxG.save.data.mute = flixel_FlxG.sound.muted;
				flixel_FlxG.save.data.volume = flixel_FlxG.sound.volume;
				flixel_FlxG.save.flush();
			}
		}
	}
	,show: function(Silent) {
		if(Silent == null) Silent = false;
		if(!Silent) flixel_FlxG.sound.load(flixel_system_FlxAssets.getSound("assets/sounds/beep")).play();
		this._timer = 1;
		this.set_y(0);
		this.set_visible(true);
		this.active = true;
		var globalVolume = Math.round(flixel_FlxG.sound.volume * 10);
		if(flixel_FlxG.sound.muted) globalVolume = 0;
		var _g1 = 0;
		var _g = this._bars.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < globalVolume) this._bars[i].set_alpha(1); else this._bars[i].set_alpha(0.5);
		}
	}
	,screenCenter: function() {
		this.set_scaleX(this._defaultScale / flixel_FlxG.game.get_scaleX());
		this.set_scaleY(this._defaultScale / flixel_FlxG.game.get_scaleY());
		this.set_x((0.5 * (openfl_Lib.current.stage.stageWidth - this._width * this._defaultScale) - flixel_FlxG.game.get_x()) / flixel_FlxG.game.get_scaleX());
	}
	,__class__: flixel_system_ui_FlxSoundTray
});
var flixel_system_ui_FlxSystemButton = function(Icon,UpHandler,ToggleMode) {
	if(ToggleMode == null) ToggleMode = false;
	this._mouseDown = false;
	this.toggled = false;
	this.toggleMode = false;
	this.enabled = true;
	openfl_display_Sprite.call(this);
	if(Icon != null) {
		this._icon = new openfl_display_Bitmap(Icon);
		this.addChild(this._icon);
	}
	this.upHandler = UpHandler;
	this.toggleMode = ToggleMode;
	this.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
	this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
	this.addEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
	this.addEventListener(openfl_events_MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
};
$hxClasses["flixel.system.ui.FlxSystemButton"] = flixel_system_ui_FlxSystemButton;
flixel_system_ui_FlxSystemButton.__name__ = ["flixel","system","ui","FlxSystemButton"];
flixel_system_ui_FlxSystemButton.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_system_ui_FlxSystemButton.__super__ = openfl_display_Sprite;
flixel_system_ui_FlxSystemButton.prototype = $extend(openfl_display_Sprite.prototype,{
	upHandler: null
	,enabled: null
	,toggleMode: null
	,toggled: null
	,_icon: null
	,_mouseDown: null
	,changeIcon: function(Icon) {
		if(this._icon != null) this.removeChild(this._icon);
		this._icon = new openfl_display_Bitmap(Icon);
		this.addChild(this._icon);
	}
	,destroy: function() {
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.onMouseUp));
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.onMouseDown));
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_OUT,$bind(this,this.onMouseOut));
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_OVER,$bind(this,this.onMouseOver));
		this._icon = null;
		this.upHandler = null;
	}
	,onMouseUp: function(E) {
		if(this.enabled && this._mouseDown) {
			this.set_toggled(!this.toggled);
			this._mouseDown = false;
			if(this.upHandler != null) this.upHandler();
		}
	}
	,onMouseDown: function(E) {
		this._mouseDown = true;
	}
	,onMouseOver: function(E) {
		var _g = this;
		_g.set_alpha(_g.get_alpha() - 0.2);
	}
	,onMouseOut: function(E) {
		var _g = this;
		_g.set_alpha(_g.get_alpha() + 0.2);
	}
	,set_toggled: function(Value) {
		if(this.toggleMode) this.set_alpha(Value?0.3:1);
		return this.toggled = Value;
	}
	,__class__: flixel_system_ui_FlxSystemButton
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_toggled:"set_toggled"})
});
var flixel_text_FlxText = function(X,Y,FieldWidth,Text,Size,EmbeddedFont) {
	if(EmbeddedFont == null) EmbeddedFont = true;
	if(Size == null) Size = 8;
	if(FieldWidth == null) FieldWidth = 0;
	if(Y == null) Y = 0;
	if(X == null) X = 0;
	this._heightInc = 0;
	this._widthInc = 0;
	this.borderQuality = 1;
	this.borderSize = 1;
	this.borderColor = 0;
	this.borderStyle = 0;
	flixel_FlxSprite.call(this,X,Y);
	this._filters = [];
	var setTextEmpty = false;
	if(Text == null || Text == "") {
		Text = "";
		setTextEmpty = true;
	}
	this._textField = new openfl_text_TextField();
	this._textField.set_selectable(false);
	this._textField.multiline = true;
	this._textField.set_wordWrap(true);
	this._defaultFormat = new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEFAULT,Size,16777215);
	this._formatAdjusted = new openfl_text_TextFormat();
	this._textField.set_defaultTextFormat(this._defaultFormat);
	this._textField.set_text(Text);
	this.set_fieldWidth(FieldWidth);
	this._textField.embedFonts = EmbeddedFont;
	this._formats = [];
	this._textField.set_height(Text.length <= 0?1:10);
	this.allowCollisions = 0;
	this.set_moves(false);
	var key = flixel_FlxG.bitmap.getUniqueKey("text");
	var graphicWidth;
	if(FieldWidth <= 0) graphicWidth = 1; else graphicWidth = FieldWidth | 0;
	this.makeGraphic(graphicWidth,1,0,false,key);
	this.calcFrame();
	if(setTextEmpty) this.set_text("");
	this.shadowOffset = flixel_util_FlxPoint.get(1,1);
};
$hxClasses["flixel.text.FlxText"] = flixel_text_FlxText;
flixel_text_FlxText.__name__ = ["flixel","text","FlxText"];
flixel_text_FlxText.__super__ = flixel_FlxSprite;
flixel_text_FlxText.prototype = $extend(flixel_FlxSprite.prototype,{
	borderStyle: null
	,borderColor: null
	,borderSize: null
	,borderQuality: null
	,shadowOffset: null
	,_textField: null
	,_defaultFormat: null
	,_formatAdjusted: null
	,_formats: null
	,_filters: null
	,_widthInc: null
	,_heightInc: null
	,destroy: function() {
		this._textField = null;
		this._defaultFormat = null;
		this._formatAdjusted = null;
		this._filters = null;
		if(this._formats != null) {
			var _g = 0;
			var _g1 = this._formats;
			while(_g < _g1.length) {
				var format = _g1[_g];
				++_g;
				if(format != null) {
					format.destroy();
					format = null;
				}
			}
		}
		this._formats = null;
		this.shadowOffset = flixel_util_FlxDestroyUtil.put(this.shadowOffset);
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,addFormat: function(Format,Start,End) {
		if(End == null) End = -1;
		if(Start == null) Start = -1;
		if(Start > -1) Format.start = Start; else Format.start = Format.start;
		if(End > -1) Format.end = End; else Format.end = Format.end;
		this._formats.push(Format);
		this._formats.sort(function(left,right) {
			if(left.start < right.start) return -1; else return 1;
		});
		this.dirty = true;
	}
	,removeFormat: function(Format) {
		flixel_util_FlxArrayUtil.fastSplice_flixel_text_FlxTextFormat(this._formats,Format);
		this.dirty = true;
	}
	,clearFormats: function() {
		var _g = 0;
		var _g1 = this._formats;
		while(_g < _g1.length) {
			var format = _g1[_g];
			++_g;
			format.destroy();
			format = null;
		}
		this._formats = [];
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
	}
	,setFormat: function(Font,Size,Color,Alignment,BorderStyle,BorderColor,Embedded) {
		if(Embedded == null) Embedded = true;
		if(BorderColor == null) BorderColor = 0;
		if(BorderStyle == null) BorderStyle = 0;
		if(Color == null) Color = 16777215;
		if(Size == null) Size = 8;
		if(Embedded) {
			if(Font == null) this._defaultFormat.font = flixel_system_FlxAssets.FONT_DEFAULT; else this._defaultFormat.font = openfl_Assets.getFont(Font).get_fontName();
		} else if(Font != null) this._defaultFormat.font = Font;
		this._textField.embedFonts = Embedded;
		this._defaultFormat.size = Size;
		Color &= 16777215;
		this._defaultFormat.color = Color;
		this._defaultFormat.align = this.convertTextAlignmentFromString(Alignment);
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this.set_borderStyle(BorderStyle);
		this.set_borderColor(BorderColor);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return this;
	}
	,setBorderStyle: function(Style,Color,Size,Quality) {
		if(Quality == null) Quality = 1;
		if(Size == null) Size = 1;
		if(Color == null) Color = 0;
		this.set_borderStyle(Style);
		this.set_borderColor(Color);
		this.set_borderSize(Size);
		this.set_borderQuality(Quality);
	}
	,addFilter: function(filter,widthInc,heightInc) {
		if(heightInc == null) heightInc = 0;
		if(widthInc == null) widthInc = 0;
		this._filters.push(filter);
		this._widthInc = widthInc;
		this._heightInc = heightInc;
		this.dirty = true;
	}
	,removeFilter: function(filter) {
		var removed = HxOverrides.remove(this._filters,filter);
		if(removed) this.dirty = true;
	}
	,clearFilters: function() {
		if(this._filters.length > 0) this.dirty = true;
		this._filters = [];
	}
	,updateFrameData: function() {
		if(this.cachedGraphics != null) {
			this.framesData = this.cachedGraphics.get_tilesheet().getSpriteSheetFrames(this.region);
			this.set_frame(this.framesData.frames[0]);
			this.frames = 1;
		}
	}
	,applyFormats: function(FormatAdjusted,UseBorderColor) {
		if(UseBorderColor == null) UseBorderColor = false;
		if(UseBorderColor) FormatAdjusted.color = this.borderColor; else FormatAdjusted.color = this._defaultFormat.color;
		this._textField.setTextFormat(FormatAdjusted,0,this._textField.get_text().length);
		var _g = 0;
		var _g1 = this._formats;
		while(_g < _g1.length) {
			var format = _g1[_g];
			++_g;
			if(this._textField.get_text().length - 1 < format.start) break; else {
				FormatAdjusted.font = format.format.font;
				FormatAdjusted.bold = format.format.bold;
				FormatAdjusted.italic = format.format.italic;
				FormatAdjusted.size = format.format.size;
				if(UseBorderColor) FormatAdjusted.color = format.borderColor; else FormatAdjusted.color = format.format.color;
			}
			this._textField.setTextFormat(FormatAdjusted,format.start,Std["int"](Math.min(format.end,this._textField.get_text().length)));
		}
	}
	,set_fieldWidth: function(value) {
		if(this._textField != null) {
			if(value <= 0) {
				this.set_wordWrap(false);
				this.set_autoSize(true);
			} else this._textField.set_width(value);
			this.dirty = true;
		}
		return value;
	}
	,get_fieldWidth: function() {
		if(this._textField != null) return this._textField.get_width(); else return 0;
	}
	,set_autoSize: function(value) {
		if(this._textField != null) {
			if(value) this._textField.set_autoSize(openfl_text_TextFieldAutoSize.LEFT); else this._textField.set_autoSize(openfl_text_TextFieldAutoSize.NONE);
			this.dirty = true;
		}
		return value;
	}
	,get_autoSize: function() {
		if(this._textField != null) return this._textField.autoSize != openfl_text_TextFieldAutoSize.NONE; else return false;
	}
	,get_text: function() {
		return this._textField.get_text();
	}
	,set_text: function(Text) {
		var ot = this._textField.get_text();
		this._textField.set_text(Text);
		if(this._textField.get_text() != ot) this.dirty = true;
		return this._textField.get_text();
	}
	,get_size: function() {
		return this._defaultFormat.size;
	}
	,set_size: function(Size) {
		this._defaultFormat.size = Size;
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Size;
	}
	,set_color: function(Color) {
		Color &= 16777215;
		if(this._defaultFormat.color == Color) return Color;
		this._defaultFormat.color = Color;
		this.color = Color;
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Color;
	}
	,get_font: function() {
		return this._defaultFormat.font;
	}
	,set_font: function(Font) {
		this._textField.embedFonts = true;
		this._defaultFormat.font = openfl_Assets.getFont(Font).get_fontName();
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Font;
	}
	,get_embedded: function() {
		return this._textField.embedFonts = true;
	}
	,get_systemFont: function() {
		return this._defaultFormat.font;
	}
	,set_systemFont: function(Font) {
		this._textField.embedFonts = false;
		this._defaultFormat.font = Font;
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Font;
	}
	,get_bold: function() {
		return this._defaultFormat.bold;
	}
	,set_bold: function(value) {
		if(this._defaultFormat.bold != value) {
			this._defaultFormat.bold = value;
			this._textField.set_defaultTextFormat(this._defaultFormat);
			this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
			this.dirty = true;
		}
		return value;
	}
	,get_italic: function() {
		return this._defaultFormat.italic;
	}
	,set_italic: function(value) {
		if(this._defaultFormat.italic != value) {
			this._defaultFormat.italic = value;
			this._textField.set_defaultTextFormat(this._defaultFormat);
			this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
			this.dirty = true;
		}
		return value;
	}
	,get_wordWrap: function() {
		return this._textField.get_wordWrap();
	}
	,set_wordWrap: function(value) {
		if(this._textField.get_wordWrap() != value) {
			this._textField.set_wordWrap(value);
			this.dirty = true;
		}
		return value;
	}
	,get_alignment: function() {
		return js_Boot.__cast(this._defaultFormat.align , String);
	}
	,set_alignment: function(Alignment) {
		this._defaultFormat.align = this.convertTextAlignmentFromString(Alignment);
		this._textField.set_defaultTextFormat(this._defaultFormat);
		this._textField.setTextFormat(this._defaultFormat,0,this._textField.get_text().length);
		this.dirty = true;
		return Alignment;
	}
	,set_borderStyle: function(style) {
		if(style != this.borderStyle) {
			this.borderStyle = style;
			this.dirty = true;
		}
		return this.borderStyle;
	}
	,set_borderColor: function(Color) {
		Color &= 16777215;
		if(this.borderColor != Color && this.borderStyle != 0) this.dirty = true;
		this.borderColor = Color;
		return Color;
	}
	,set_borderSize: function(Value) {
		if(Value != this.borderSize && this.borderStyle != 0) this.dirty = true;
		this.borderSize = Value;
		return Value;
	}
	,set_borderQuality: function(Value) {
		if(Value < 0) Value = 0; else if(Value > 1) Value = 1;
		if(Value != this.borderQuality && this.borderStyle != 0) this.dirty = true;
		this.borderQuality = Value;
		return Value;
	}
	,get_textField: function() {
		return this._textField;
	}
	,set_cachedGraphics: function(Value) {
		var cached = flixel_FlxSprite.prototype.set_cachedGraphics.call(this,Value);
		if(Value != null) Value.set_destroyOnNoUse(true);
		return cached;
	}
	,updateColorTransform: function() {
		if(this.alpha != 1) {
			if(this.colorTransform == null) this.colorTransform = new openfl_geom_ColorTransform(1,1,1,this.alpha); else this.colorTransform.alphaMultiplier = this.alpha;
			this.useColorTransform = true;
		} else {
			if(this.colorTransform != null) this.colorTransform.alphaMultiplier = 1;
			this.useColorTransform = false;
		}
		this.dirty = true;
	}
	,regenGraphics: function() {
		var oldWidth = this.cachedGraphics.bitmap.width;
		var oldHeight = this.cachedGraphics.bitmap.height;
		var newWidth = this._textField.get_width() + this._widthInc;
		var newHeight = this._textField.get_textHeight() + this._heightInc + 4;
		if(this._textField.get_textHeight() == 0) newHeight = oldHeight;
		if(oldWidth != newWidth || oldHeight != newHeight) {
			this.set_height(newHeight - this._heightInc);
			var key = this.cachedGraphics.key;
			flixel_FlxG.bitmap.remove(key);
			this.makeGraphic(newWidth | 0,newHeight | 0,0,false,key);
			this.frameHeight = Std["int"](this.get_height());
			this._textField.set_height(this.get_height() * 1.2);
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = newWidth;
			this._flashRect.height = newHeight;
		} else this.cachedGraphics.bitmap.fillRect(this._flashRect,0);
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) RunOnCpp = false;
		if(this._textField == null) return;
		if(this._filters != null) this._textField.set_filters(this._filters);
		this.regenGraphics();
		if(this._textField != null && this._textField.get_text() != null && this._textField.get_text().length > 0) {
			this._formatAdjusted.font = this._defaultFormat.font;
			this._formatAdjusted.size = this._defaultFormat.size;
			this._formatAdjusted.bold = this._defaultFormat.bold;
			this._formatAdjusted.italic = this._defaultFormat.italic;
			this._formatAdjusted.color = this._defaultFormat.color;
			this._formatAdjusted.align = this._defaultFormat.align;
			this._matrix.identity();
			this._matrix.translate(0.5 * this._widthInc | 0,0.5 * this._heightInc | 0);
			if(this._defaultFormat.align == openfl_text_TextFormatAlign.CENTER && this._textField.get_numLines() == 1) {
				this._formatAdjusted.align = openfl_text_TextFormatAlign.LEFT;
				this._textField.setTextFormat(this._formatAdjusted,0,this._textField.get_text().length);
				this._matrix.translate(Math.floor((this.get_width() - this._textField.get_textWidth()) / 2),0);
			}
			if(this.borderStyle != 0) {
				var iterations = this.borderSize * this.borderQuality | 0;
				if(iterations <= 0) iterations = 1;
				var delta = this.borderSize / iterations;
				if(this.borderStyle == 1) {
					this.applyFormats(this._formatAdjusted,true);
					var _g = 0;
					while(_g < iterations) {
						var iter = _g++;
						this._matrix.translate(delta,delta);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
					}
					this._matrix.translate(-this.shadowOffset.x * this.borderSize,-this.shadowOffset.y * this.borderSize);
					this.applyFormats(this._formatAdjusted,false);
				} else if(this.borderStyle == 2) {
					this.applyFormats(this._formatAdjusted,true);
					var itd = delta;
					var _g1 = 0;
					while(_g1 < iterations) {
						var iter1 = _g1++;
						this._matrix.translate(-itd,-itd);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(0,itd);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(0,itd);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(-itd,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(-itd,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(0,-itd);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd,0);
						itd += delta;
					}
					this.applyFormats(this._formatAdjusted,false);
				} else if(this.borderStyle == 3) {
					this.applyFormats(this._formatAdjusted,true);
					var itd1 = delta;
					var _g2 = 0;
					while(_g2 < iterations) {
						var iter2 = _g2++;
						this._matrix.translate(-itd1,-itd1);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd1 * 2,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(0,itd1 * 2);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(-itd1 * 2,0);
						this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
						this._matrix.translate(itd1,-itd1);
						itd1 += delta;
					}
					this.applyFormats(this._formatAdjusted,false);
				}
			} else this.applyFormats(this._formatAdjusted,false);
			this.cachedGraphics.bitmap.draw(this._textField,this._matrix);
		}
		this.dirty = false;
		if(this.framePixels == null || this.framePixels.width != this.cachedGraphics.bitmap.width || this.framePixels.height != this.cachedGraphics.bitmap.height) {
			this.framePixels = flixel_util_FlxDestroyUtil.dispose(this.framePixels);
			this.framePixels = new openfl_display_BitmapData(this.cachedGraphics.bitmap.width,this.cachedGraphics.bitmap.height,true,0);
		}
		this.framePixels.copyPixels(this.cachedGraphics.bitmap,this._flashRect,this._flashPointZero);
		if(this.useColorTransform) this.framePixels.colorTransform(this._flashRect,this.colorTransform);
	}
	,dtfCopy: function() {
		var defaultTextFormat = this._textField.get_defaultTextFormat();
		return new openfl_text_TextFormat(defaultTextFormat.font,defaultTextFormat.size,defaultTextFormat.color,defaultTextFormat.bold,defaultTextFormat.italic,defaultTextFormat.underline,defaultTextFormat.url,defaultTextFormat.target,defaultTextFormat.align);
	}
	,convertTextAlignmentFromString: function(StrAlign) {
		if(StrAlign == "right") return openfl_text_TextFormatAlign.RIGHT; else if(StrAlign == "center") return openfl_text_TextFormatAlign.CENTER; else if(StrAlign == "justify") return openfl_text_TextFormatAlign.JUSTIFY; else return openfl_text_TextFormatAlign.LEFT;
	}
	,updateFormat: function(Format) {
		this._textField.setTextFormat(Format,0,this._textField.get_text().length);
	}
	,__class__: flixel_text_FlxText
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_fieldWidth:"set_fieldWidth",get_fieldWidth:"get_fieldWidth",get_textField:"get_textField",set_borderQuality:"set_borderQuality",set_borderSize:"set_borderSize",set_borderColor:"set_borderColor",set_borderStyle:"set_borderStyle",set_alignment:"set_alignment",get_alignment:"get_alignment",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_italic:"set_italic",get_italic:"get_italic",set_bold:"set_bold",get_bold:"get_bold",set_systemFont:"set_systemFont",get_systemFont:"get_systemFont",get_embedded:"get_embedded",set_font:"set_font",get_font:"get_font",set_size:"set_size",get_size:"get_size",set_text:"set_text",get_text:"get_text"})
});
var flixel_text_FlxTextFormat = function(FontColor,Bold,Italic,BorderColor,Start,End) {
	if(End == null) End = -1;
	if(Start == null) Start = -1;
	this.end = -1;
	this.start = -1;
	if(FontColor != null) FontColor &= 16777215;
	if(BorderColor != null) BorderColor &= 16777215;
	this.format = new openfl_text_TextFormat(null,null,FontColor,Bold,Italic);
	if(Start > -1) this.start = Start;
	if(End > -1) this.end = End;
	if(BorderColor == null) this.borderColor = 0; else this.borderColor = BorderColor;
};
$hxClasses["flixel.text.FlxTextFormat"] = flixel_text_FlxTextFormat;
flixel_text_FlxTextFormat.__name__ = ["flixel","text","FlxTextFormat"];
flixel_text_FlxTextFormat.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_text_FlxTextFormat.prototype = {
	borderColor: null
	,start: null
	,end: null
	,format: null
	,destroy: function() {
		this.format = null;
	}
	,__class__: flixel_text_FlxTextFormat
};
var flixel_text_pxText_PxBitmapFont = function() {
	this._maxHeight = 0;
	this._point = new openfl_geom_Point();
	this._matrix = new openfl_geom_Matrix();
	this._colorTransform = new openfl_geom_ColorTransform();
	this._glyphs = [];
};
$hxClasses["flixel.text.pxText.PxBitmapFont"] = flixel_text_pxText_PxBitmapFont;
flixel_text_pxText_PxBitmapFont.__name__ = ["flixel","text","pxText","PxBitmapFont"];
flixel_text_pxText_PxBitmapFont.store = function(PxHandle,PxFont) {
	flixel_text_pxText_PxBitmapFont._storedFonts.set(PxHandle,PxFont);
};
flixel_text_pxText_PxBitmapFont.fetch = function(PxHandle) {
	var f = flixel_text_pxText_PxBitmapFont._storedFonts.get(PxHandle);
	return f;
};
flixel_text_pxText_PxBitmapFont.clearStorage = function() {
	var $it0 = flixel_text_pxText_PxBitmapFont._storedFonts.iterator();
	while( $it0.hasNext() ) {
		var font = $it0.next();
		font.dispose();
	}
	flixel_text_pxText_PxBitmapFont._storedFonts = new haxe_ds_StringMap();
};
flixel_text_pxText_PxBitmapFont.prototype = {
	_glyphs: null
	,_glyphString: null
	,_maxHeight: null
	,_matrix: null
	,_colorTransform: null
	,_point: null
	,_tileRects: null
	,_symbols: null
	,_region: null
	,cachedGraphics: null
	,loadPixelizer: function(PxBitmapData,PxLetters) {
		this.reset();
		this._glyphString = PxLetters;
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			this._glyphs.push(null);
		}
		if(PxBitmapData != null) {
			this._tileRects = [];
			var result = this.preparePixelizerBitmapData(PxBitmapData,this._tileRects);
			var key = flixel_FlxG.bitmap.getUniqueKey("font");
			this.setCachedGraphics(flixel_FlxG.bitmap.addWithSpaces(result,0,0,1,1,false,key));
			this._region = new flixel_system_layer_Region();
			this._region.width = this.cachedGraphics.bitmap.width;
			this._region.height = this.cachedGraphics.bitmap.height;
			var currRect;
			this.updateGlyphData();
		}
		return this;
	}
	,loadAngelCode: function(pBitmapData,pXMLData) {
		this.reset();
		if(pBitmapData != null && pXMLData != null) {
			this._symbols = [];
			var result = this.prepareAngelCodeBitmapData(pBitmapData,pXMLData,this._symbols);
			var key = flixel_FlxG.bitmap.getUniqueKey("font");
			this.setCachedGraphics(flixel_FlxG.bitmap.addWithSpaces(result,0,0,1,1,false,key));
			this.updateGlyphData();
		}
		return this;
	}
	,updateGlyphData: function(Tiles) {
		var rect;
		if(this._symbols != null) {
			this._glyphString = "";
			var point = new openfl_geom_Point();
			var bd;
			var charString;
			var _g = 0;
			var _g1 = this._symbols;
			while(_g < _g1.length) {
				var symbol = _g1[_g];
				++_g;
				rect = new openfl_geom_Rectangle();
				rect.x = symbol.x;
				rect.y = symbol.y;
				rect.width = symbol.width;
				rect.height = symbol.height;
				point.x = symbol.xoffset;
				point.y = symbol.yoffset;
				charString = String.fromCharCode(symbol.charCode);
				this._glyphString += charString;
				var xadvance = symbol.xadvance;
				var charWidth = xadvance;
				if(rect.width > xadvance) {
					charWidth = symbol.width;
					point.x = 0;
				}
				bd = null;
				if(charString != " " && charString != "") bd = new openfl_display_BitmapData(charWidth,symbol.height + symbol.yoffset,true,0); else bd = new openfl_display_BitmapData(charWidth,1,true,0);
				bd.copyPixels(this.cachedGraphics.bitmap,rect,point,null,null,true);
				this.setGlyph(symbol.charCode,bd);
			}
		} else if(this._tileRects != null) {
			var _g11 = 0;
			var _g2 = this._tileRects.length;
			while(_g11 < _g2) {
				var letterID = _g11++;
				rect = this._tileRects[letterID];
				var bd1 = new openfl_display_BitmapData(rect.width | 0,rect.height | 0,true,0);
				bd1.copyPixels(this.cachedGraphics.bitmap,rect,flixel_text_pxText_PxBitmapFont.ZERO_POINT,null,null,true);
				this.setGlyph(HxOverrides.cca(this._glyphString,letterID),bd1);
			}
		}
	}
	,reset: function() {
		this.dispose();
		this._maxHeight = 0;
		this._glyphs = [];
		this._symbols = null;
		this._tileRects = null;
		this._glyphString = "";
	}
	,preparePixelizerBitmapData: function(PxBitmapData,PxRects) {
		var bgColor = PxBitmapData.getPixel(0,0);
		var cy = 0;
		var cx;
		while(cy < PxBitmapData.height) {
			var rowHeight = 0;
			cx = 0;
			while(cx < PxBitmapData.width) {
				if(Std["int"](PxBitmapData.getPixel(cx,cy)) != bgColor) {
					var gx = cx;
					var gy = cy;
					while(Std["int"](PxBitmapData.getPixel(gx,cy)) != bgColor) gx++;
					while(Std["int"](PxBitmapData.getPixel(cx,gy)) != bgColor) gy++;
					var gw = gx - cx;
					var gh = gy - cy;
					PxRects.push(new openfl_geom_Rectangle(cx,cy,gw,gh));
					if(gh > rowHeight) rowHeight = gh;
					if(gh > this._maxHeight) this._maxHeight = gh;
					cx += gw;
				}
				cx++;
			}
			cy += rowHeight + 1;
		}
		PxBitmapData.floodFill(0,0,0);
		return PxBitmapData;
	}
	,prepareAngelCodeBitmapData: function(PxBitmapData,PxXMLData,PxSymbols) {
		var chars = null;
		var $it0 = PxXMLData.elements();
		while( $it0.hasNext() ) {
			var node = $it0.next();
			if((function($this) {
				var $r;
				if(node.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + node.nodeType);
				$r = node.nodeName;
				return $r;
			}(this)) == "font") {
				var $it1 = node.elements();
				while( $it1.hasNext() ) {
					var nodeChild = $it1.next();
					if((function($this) {
						var $r;
						if(nodeChild.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + nodeChild.nodeType);
						$r = nodeChild.nodeName;
						return $r;
					}(this)) == "chars") {
						chars = nodeChild;
						break;
					}
				}
			}
		}
		var symbol;
		var maxX = 0;
		var maxY = 0;
		if(chars != null) {
			var $it2 = chars.elements();
			while( $it2.hasNext() ) {
				var node1 = $it2.next();
				if((function($this) {
					var $r;
					if(node1.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + node1.nodeType);
					$r = node1.nodeName;
					return $r;
				}(this)) == "char") {
					symbol = new flixel_text_pxText__$PxBitmapFont_HelperSymbol();
					symbol.x = Std.parseInt(node1.get("x"));
					symbol.y = Std.parseInt(node1.get("y"));
					symbol.width = Std.parseInt(node1.get("width"));
					symbol.height = Std.parseInt(node1.get("height"));
					symbol.xoffset = Std.parseInt(node1.get("xoffset"));
					symbol.yoffset = Std.parseInt(node1.get("yoffset"));
					symbol.xadvance = Std.parseInt(node1.get("xadvance"));
					symbol.charCode = Std.parseInt(node1.get("id"));
					PxSymbols.push(symbol);
					maxX = symbol.x + symbol.width;
					maxY = symbol.y + symbol.height;
				}
			}
		}
		return PxBitmapData;
	}
	,getPreparedGlyphs: function(PxScale,PxColor,PxUseColorTransform) {
		if(PxUseColorTransform == null) PxUseColorTransform = true;
		var result = [];
		this._matrix.identity();
		this._matrix.scale(PxScale,PxScale);
		var colorMultiplier = 0.00392156862745098;
		this._colorTransform.redOffset = 0;
		this._colorTransform.greenOffset = 0;
		this._colorTransform.blueOffset = 0;
		this._colorTransform.redMultiplier = (PxColor >> 16) * colorMultiplier;
		this._colorTransform.greenMultiplier = (PxColor >> 8 & 255) * colorMultiplier;
		this._colorTransform.blueMultiplier = (PxColor & 255) * colorMultiplier;
		var glyph;
		var preparedGlyph;
		var _g1 = 0;
		var _g = this._glyphs.length;
		while(_g1 < _g) {
			var i = _g1++;
			glyph = this._glyphs[i];
			var bdWidth;
			var bdHeight;
			if(glyph != null) {
				if(PxScale > 0) {
					bdWidth = Math.ceil(glyph.width * PxScale);
					bdHeight = Math.ceil(glyph.height * PxScale);
				} else {
					bdWidth = 1;
					bdHeight = 1;
				}
				preparedGlyph = new openfl_display_BitmapData(bdWidth,bdHeight,true,0);
				if(PxUseColorTransform) preparedGlyph.draw(glyph,this._matrix,this._colorTransform); else preparedGlyph.draw(glyph,this._matrix);
				result[i] = preparedGlyph;
			}
		}
		return result;
	}
	,dispose: function() {
		var bd;
		var _g1 = 0;
		var _g = this._glyphs.length;
		while(_g1 < _g) {
			var i = _g1++;
			bd = this._glyphs[i];
			if(bd != null) this._glyphs[i].dispose();
		}
		this._symbols = null;
		this._tileRects = null;
		this.setCachedGraphics(null);
		this._region = null;
		this._glyphs = null;
	}
	,getFontData: function() {
		var output = "";
		var _g1 = 0;
		var _g = this._glyphString.length;
		while(_g1 < _g) {
			var i = _g1++;
			var charCode = HxOverrides.cca(this._glyphString,i);
			var glyph = this._glyphs[charCode];
			output += HxOverrides.substr(this._glyphString,i,1);
			output += glyph.width;
			output += glyph.height;
			var _g3 = 0;
			var _g2 = glyph.height;
			while(_g3 < _g2) {
				var py = _g3++;
				var _g5 = 0;
				var _g4 = glyph.width;
				while(_g5 < _g4) {
					var px = _g5++;
					if(glyph.getPixel32(px,py) != 0) output += "1"; else output += "0";
				}
			}
		}
		return output;
	}
	,setGlyph: function(PxCharID,PxBitmapData) {
		if(this._glyphs[PxCharID] != null) this._glyphs[PxCharID].dispose();
		this._glyphs[PxCharID] = PxBitmapData;
		if(PxBitmapData.height > this._maxHeight) this._maxHeight = PxBitmapData.height;
	}
	,render: function(PxBitmapData,PxFontData,PxText,PxColor,PxOffsetX,PxOffsetY,PxLetterSpacing) {
		this._point.x = PxOffsetX;
		this._point.y = PxOffsetY;
		var glyph;
		var _g1 = 0;
		var _g = PxText.length;
		while(_g1 < _g) {
			var i = _g1++;
			var charCode = HxOverrides.cca(PxText,i);
			glyph = PxFontData[charCode];
			if(glyph != null) {
				PxBitmapData.copyPixels(glyph,glyph.rect,this._point,null,null,true);
				this._point.x += glyph.width + PxLetterSpacing;
			}
		}
	}
	,getTextWidth: function(PxText,PxLetterSpacing,PxFontScale) {
		if(PxFontScale == null) PxFontScale = 1;
		if(PxLetterSpacing == null) PxLetterSpacing = 0;
		var w = 0;
		var textLength = PxText.length;
		var _g1 = 0;
		var _g = textLength;
		while(_g1 < _g) {
			var i = _g1++;
			var charCode = HxOverrides.cca(PxText,i);
			var glyph = this._glyphs[charCode];
			if(glyph != null) w += glyph.width;
		}
		w = Math.round(w * PxFontScale);
		if(textLength > 1) w += (textLength - 1) * PxLetterSpacing;
		return w;
	}
	,getFontHeight: function() {
		return this._maxHeight;
	}
	,get_numLetters: function() {
		return this._glyphs.length;
	}
	,setCachedGraphics: function(value) {
		if(this.cachedGraphics != null && this.cachedGraphics != value) {
			var _g = this.cachedGraphics;
			var _g1 = _g.useCount;
			_g.set_useCount(_g1 - 1);
			_g1;
		}
		if(this.cachedGraphics != value && value != null) {
			var _g2 = value;
			var _g11 = _g2.useCount;
			_g2.set_useCount(_g11 + 1);
			_g11;
			value.persist = true;
		}
		this.cachedGraphics = value;
	}
	,__class__: flixel_text_pxText_PxBitmapFont
	,__properties__: {get_numLetters:"get_numLetters"}
};
var flixel_text_pxText__$PxBitmapFont_HelperSymbol = function() {
};
$hxClasses["flixel.text.pxText._PxBitmapFont.HelperSymbol"] = flixel_text_pxText__$PxBitmapFont_HelperSymbol;
flixel_text_pxText__$PxBitmapFont_HelperSymbol.__name__ = ["flixel","text","pxText","_PxBitmapFont","HelperSymbol"];
flixel_text_pxText__$PxBitmapFont_HelperSymbol.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,xoffset: null
	,yoffset: null
	,xadvance: null
	,charCode: null
	,__class__: flixel_text_pxText__$PxBitmapFont_HelperSymbol
};
var flixel_tile_FlxTile = function(Tilemap,Index,Width,Height,Visible,AllowCollisions) {
	this.mapIndex = 0;
	this.callbackFunction = null;
	flixel_FlxObject.call(this,0,0,Width,Height);
	this.set_immovable(true);
	this.set_moves(false);
	this.filter = null;
	this.tilemap = Tilemap;
	this.index = Index;
	this.set_visible(Visible);
	this.allowCollisions = AllowCollisions;
};
$hxClasses["flixel.tile.FlxTile"] = flixel_tile_FlxTile;
flixel_tile_FlxTile.__name__ = ["flixel","tile","FlxTile"];
flixel_tile_FlxTile.__super__ = flixel_FlxObject;
flixel_tile_FlxTile.prototype = $extend(flixel_FlxObject.prototype,{
	callbackFunction: null
	,filter: null
	,tilemap: null
	,index: null
	,mapIndex: null
	,destroy: function() {
		this.callbackFunction = null;
		this.tilemap = null;
		flixel_FlxObject.prototype.destroy.call(this);
	}
	,__class__: flixel_tile_FlxTile
});
var flixel_tile_FlxTileblock = function(X,Y,Width,Height) {
	flixel_FlxSprite.call(this,X,Y);
	this.makeGraphic(Width,Height,0,true);
	this.set_active(false);
	this.set_immovable(true);
	this.set_moves(false);
};
$hxClasses["flixel.tile.FlxTileblock"] = flixel_tile_FlxTileblock;
flixel_tile_FlxTileblock.__name__ = ["flixel","tile","FlxTileblock"];
flixel_tile_FlxTileblock.__super__ = flixel_FlxSprite;
flixel_tile_FlxTileblock.prototype = $extend(flixel_FlxSprite.prototype,{
	loadTiles: function(TileGraphic,TileWidth,TileHeight,Empties) {
		if(Empties == null) Empties = 0;
		if(TileHeight == null) TileHeight = 0;
		if(TileWidth == null) TileWidth = 0;
		if(TileGraphic == null) return this;
		var sprite = new flixel_FlxSprite().loadGraphic(TileGraphic,true,TileWidth,TileHeight);
		var spriteWidth = Std["int"](sprite.get_width());
		var spriteHeight = Std["int"](sprite.get_height());
		var total = sprite.frames + Empties;
		var regen = false;
		if(this.get_width() % sprite.get_width() != 0) {
			this.set_width(Std["int"](this.get_width() / spriteWidth + 1) * spriteWidth);
			regen = true;
		}
		if(this.get_height() % sprite.get_height() != 0) {
			this.set_height(Std["int"](this.get_height() / spriteHeight + 1) * spriteHeight);
			regen = true;
		}
		if(regen) this.makeGraphic(Std["int"](this.get_width()),Std["int"](this.get_height()),0,true); else flixel_util_FlxSpriteUtil.fill(this,0);
		var row = 0;
		var column;
		var destinationX;
		var destinationY = 0;
		var widthInTiles = Std["int"](this.get_width() / spriteWidth);
		var heightInTiles = Std["int"](this.get_height() / spriteHeight);
		while(row < heightInTiles) {
			destinationX = 0;
			column = 0;
			while(column < widthInTiles) {
				if((flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * total > Empties) {
					sprite.animation.randomFrame();
					if(sprite.dirty) {
						sprite.dirty = true;
						sprite.calcFrame();
					}
					this.stamp(sprite,destinationX,destinationY);
				}
				destinationX += spriteWidth;
				column++;
			}
			destinationY += spriteHeight;
			row++;
		}
		sprite.destroy();
		this.dirty = true;
		return this;
	}
	,__class__: flixel_tile_FlxTileblock
});
var flixel_tile_GraphicAuto = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_tile_GraphicAuto.preload != null) {
		this.__image = flixel_tile_GraphicAuto.preload;
		width = this.__image.width;
		height = this.__image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_tile_GraphicAuto.resourceName),flixel_tile_GraphicAuto.resourceType,function(b) {
		if(flixel_tile_GraphicAuto.preload == null) flixel_tile_GraphicAuto.preload = b.__image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.tile.GraphicAuto"] = flixel_tile_GraphicAuto;
flixel_tile_GraphicAuto.__name__ = ["flixel","tile","GraphicAuto"];
flixel_tile_GraphicAuto.preload = null;
flixel_tile_GraphicAuto.__super__ = openfl_display_BitmapData;
flixel_tile_GraphicAuto.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_tile_GraphicAuto
});
var flixel_tile_GraphicAutoAlt = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) fillRGBA = -1;
	if(transparent == null) transparent = true;
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_tile_GraphicAutoAlt.preload != null) {
		this.__image = flixel_tile_GraphicAutoAlt.preload;
		width = this.__image.width;
		height = this.__image.height;
	} else this.__fromBase64(haxe_Resource.getString(flixel_tile_GraphicAutoAlt.resourceName),flixel_tile_GraphicAutoAlt.resourceType,function(b) {
		if(flixel_tile_GraphicAutoAlt.preload == null) flixel_tile_GraphicAutoAlt.preload = b.__image;
		if(onload != null) onload(b);
	});
};
$hxClasses["flixel.tile.GraphicAutoAlt"] = flixel_tile_GraphicAutoAlt;
flixel_tile_GraphicAutoAlt.__name__ = ["flixel","tile","GraphicAutoAlt"];
flixel_tile_GraphicAutoAlt.preload = null;
flixel_tile_GraphicAutoAlt.__super__ = openfl_display_BitmapData;
flixel_tile_GraphicAutoAlt.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_tile_GraphicAutoAlt
});
var flixel_tile_FlxTilemapBuffer = function(TileWidth,TileHeight,WidthInTiles,HeightInTiles,Camera,ScaleX,ScaleY) {
	if(ScaleY == null) ScaleY = 1.0;
	if(ScaleX == null) ScaleX = 1.0;
	this.pixelPerfectRender = true;
	this.columns = 0;
	this.rows = 0;
	this.dirty = false;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.updateColumns(TileWidth,WidthInTiles,ScaleX,Camera);
	this.updateRows(TileHeight,HeightInTiles,ScaleY,Camera);
	this.pixels = new openfl_display_BitmapData(this.columns * TileWidth | 0,this.rows * TileHeight | 0,true,0);
	this._flashRect = new openfl_geom_Rectangle(0,0,this.pixels.width,this.pixels.height);
	this._matrix = new openfl_geom_Matrix();
	this.dirty = true;
};
$hxClasses["flixel.tile.FlxTilemapBuffer"] = flixel_tile_FlxTilemapBuffer;
flixel_tile_FlxTilemapBuffer.__name__ = ["flixel","tile","FlxTilemapBuffer"];
flixel_tile_FlxTilemapBuffer.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,dirty: null
	,rows: null
	,columns: null
	,pixelPerfectRender: null
	,pixels: null
	,_flashRect: null
	,_matrix: null
	,destroy: function() {
		this.pixels = null;
		this._matrix = null;
	}
	,fill: function(Color) {
		if(Color == null) Color = 0;
		this.pixels.fillRect(this._flashRect,Color);
	}
	,draw: function(Camera,FlashPoint,ScaleX,ScaleY) {
		if(ScaleY == null) ScaleY = 1.0;
		if(ScaleX == null) ScaleX = 1.0;
		if(this.pixelPerfectRender) {
			FlashPoint.x = Math.floor(FlashPoint.x);
			FlashPoint.y = Math.floor(FlashPoint.y);
		}
		if(this.pixelPerfectRender && (ScaleX == 1.0 && ScaleY == 1.0)) Camera.buffer.copyPixels(this.pixels,this._flashRect,FlashPoint,null,null,true); else {
			this._matrix.identity();
			this._matrix.scale(ScaleX,ScaleY);
			this._matrix.translate(FlashPoint.x,FlashPoint.y);
			Camera.buffer.draw(this.pixels,this._matrix);
		}
	}
	,updateColumns: function(TileWidth,WidthInTiles,ScaleX,Camera) {
		if(ScaleX == null) ScaleX = 1.0;
		if(WidthInTiles < 0) WidthInTiles = 0;
		if(Camera == null) Camera = flixel_FlxG.camera;
		this.columns = Math.ceil(Camera.width / (TileWidth * ScaleX)) + 1;
		if(this.columns > WidthInTiles) this.columns = WidthInTiles;
		this.width = this.columns * TileWidth * ScaleX | 0;
	}
	,updateRows: function(TileHeight,HeightInTiles,ScaleY,Camera) {
		if(ScaleY == null) ScaleY = 1.0;
		if(HeightInTiles < 0) HeightInTiles = 0;
		if(Camera == null) Camera = flixel_FlxG.camera;
		this.rows = Math.ceil(Camera.height / (TileHeight * ScaleY)) + 1;
		if(this.rows > HeightInTiles) this.rows = HeightInTiles;
		this.height = this.rows * TileHeight * ScaleY | 0;
	}
	,__class__: flixel_tile_FlxTilemapBuffer
};
var flixel_tile_FlxTilemap = function() {
	this._startingIndex = 0;
	this._scaledTileHeight = 0;
	this._scaledTileWidth = 0;
	this._tileHeight = 0;
	this._tileWidth = 0;
	this.tileScaleHack = 1.01;
	this.totalTiles = 0;
	this.heightInTiles = 0;
	this.widthInTiles = 0;
	this.auto = 0;
	flixel_FlxObject.call(this);
	this.collisionType = 3;
	this._buffers = [];
	this._flashPoint = new openfl_geom_Point();
	this.set_immovable(true);
	this.set_moves(false);
	this.scale = new flixel_util_FlxCallbackPoint($bind(this,this.setScaleXCallback),$bind(this,this.setScaleYCallback),$bind(this,this.setScaleXYCallback));
	this.scale.set(1,1);
	flixel_FlxG.signals.gameResized.add($bind(this,this.onGameResize));
};
$hxClasses["flixel.tile.FlxTilemap"] = flixel_tile_FlxTilemap;
flixel_tile_FlxTilemap.__name__ = ["flixel","tile","FlxTilemap"];
flixel_tile_FlxTilemap.__super__ = flixel_FlxObject;
flixel_tile_FlxTilemap.prototype = $extend(flixel_FlxObject.prototype,{
	auto: null
	,widthInTiles: null
	,heightInTiles: null
	,totalTiles: null
	,tileScaleHack: null
	,customTileRemap: null
	,scale: null
	,region: null
	,framesData: null
	,cachedGraphics: null
	,_randomIndices: null
	,_randomChoices: null
	,_randomLambda: null
	,_flashPoint: null
	,_flashRect: null
	,_buffers: null
	,_data: null
	,_rects: null
	,_tileWidth: null
	,_tileHeight: null
	,_scaledTileWidth: null
	,_scaledTileHeight: null
	,_tileObjects: null
	,_startingIndex: null
	,destroy: function() {
		this._flashPoint = null;
		this._flashRect = null;
		var i = 0;
		var l;
		if(this._tileObjects != null) {
			l = this._tileObjects.length;
			var _g = 0;
			while(_g < l) {
				var i1 = _g++;
				this._tileObjects[i1].destroy();
			}
			this._tileObjects = null;
		}
		if(this._buffers != null) {
			i = 0;
			l = this._buffers.length;
			var _g1 = 0;
			while(_g1 < l) {
				var i2 = _g1++;
				this._buffers[i2].destroy();
			}
			this._buffers = null;
		}
		this._data = null;
		this._rects = null;
		this.framesData = null;
		this.set_cachedGraphics(null);
		this.region = null;
		this.scale = flixel_util_FlxDestroyUtil.destroy(this.scale);
		flixel_FlxG.signals.gameResized.remove($bind(this,this.onGameResize));
		flixel_FlxObject.prototype.destroy.call(this);
	}
	,loadMap: function(MapData,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex) {
		if(CollideIndex == null) CollideIndex = 1;
		if(DrawIndex == null) DrawIndex = 1;
		if(StartingIndex == null) StartingIndex = 0;
		if(AutoTile == null) AutoTile = 0;
		if(TileHeight == null) TileHeight = 0;
		if(TileWidth == null) TileWidth = 0;
		this.auto = AutoTile;
		if(StartingIndex <= 0) this._startingIndex = 0; else this._startingIndex = StartingIndex;
		if(typeof(MapData) == "string") {
			MapData = StringTools.rtrim(MapData);
			this._data = [];
			var columns;
			var rows = MapData.split("\n");
			this.heightInTiles = rows.length;
			this.widthInTiles = 0;
			var row = 0;
			var column;
			while(row < this.heightInTiles) {
				columns = rows[row++].split(",");
				if(columns.length < 1) {
					this.heightInTiles = this.heightInTiles - 1;
					continue;
				}
				if(this.widthInTiles == 0) this.widthInTiles = columns.length;
				column = 0;
				while(column < this.widthInTiles) {
					var curTile = Std.parseInt(columns[column]);
					this._data.push(curTile);
					column++;
				}
			}
		} else if((MapData instanceof Array) && MapData.__enum__ == null) {
			this._data = MapData;
			this._data = this._data.slice();
		} else throw new js__$Boot_HaxeError("Unexpected MapData format '" + Std.string(Type["typeof"](MapData)) + "' passed into loadMap. Map data must be CSV string or Array<Int>.");
		var i;
		this.totalTiles = this._data.length;
		if(this.auto > 0) {
			this._startingIndex = 1;
			DrawIndex = 1;
			CollideIndex = 1;
			i = 0;
			while(i < this.totalTiles) this.autoTile(i++);
		}
		if(this.customTileRemap != null) {
			i = 0;
			while(i < this.totalTiles) {
				var old_index = this._data[i];
				var new_index = old_index;
				if(old_index < this.customTileRemap.length) new_index = this.customTileRemap[old_index];
				this._data[i] = new_index;
				i++;
			}
		}
		if(this._randomIndices != null) {
			var randLambda;
			if(this._randomLambda != null) randLambda = this._randomLambda; else randLambda = flixel_util_FlxRandom["float"];
			i = 0;
			while(i < this.totalTiles) {
				var old_index1 = this._data[i];
				var j = 0;
				var new_index1 = old_index1;
				var _g = 0;
				var _g1 = this._randomIndices;
				while(_g < _g1.length) {
					var rand = _g1[_g];
					++_g;
					if(old_index1 == rand) {
						var k = Std["int"](randLambda() * this._randomChoices[j].length);
						new_index1 = this._randomChoices[j][k];
					}
					j++;
				}
				this._data[i] = new_index1;
				i++;
			}
		}
		this.set_cachedGraphics(flixel_FlxG.bitmap.addWithSpaces(TileGraphic,0,0,1,1,false,null));
		this._tileWidth = TileWidth;
		if(this._tileWidth <= 0) this._tileWidth = this.cachedGraphics.bitmap.height;
		this._tileHeight = TileHeight;
		if(this._tileHeight <= 0) this._tileHeight = this._tileWidth;
		if(!js_Boot.__instanceof(TileGraphic,flixel_util_loaders_TextureRegion)) {
			this.region = new flixel_system_layer_Region(0,0,this._tileWidth,this._tileHeight);
			this.region.width = (this.cachedGraphics.bitmap.width / this._tileWidth | 0) * this._tileWidth;
			this.region.height = (this.cachedGraphics.bitmap.height / this._tileHeight | 0) * this._tileHeight;
		} else {
			var spriteRegion = TileGraphic;
			this.region = spriteRegion.region.clone();
			if(this.region.tileWidth > 0) this._tileWidth = this.region.tileWidth; else this.region.tileWidth = this._tileWidth;
			if(this.region.tileHeight > 0) this._tileHeight = this.region.tileWidth; else this.region.tileHeight = this._tileHeight;
		}
		this._tileObjects = [];
		var length = this.region.get_numTiles();
		length += this._startingIndex;
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			this._tileObjects[i1] = new flixel_tile_FlxTile(this,i1,this._tileWidth,this._tileHeight,i1 >= DrawIndex,i1 >= CollideIndex?this.allowCollisions:0);
		}
		this._scaledTileWidth = this._tileWidth * this.scale.x;
		this._scaledTileHeight = this._tileHeight * this.scale.y;
		this.set_width(this.widthInTiles * this._scaledTileWidth);
		this.set_height(this.heightInTiles * this._scaledTileHeight);
		this._rects = [];
		flixel_util_FlxArrayUtil.setLength_openfl_geom_Rectangle(this._rects,this.totalTiles);
		i = 0;
		while(i < this.totalTiles) this.updateTile(i++);
		return this;
	}
	,setCustomTileMappings: function(mappings,randomIndices,randomChoices,randomLambda) {
		this.customTileRemap = mappings;
		this._randomIndices = randomIndices;
		this._randomChoices = randomChoices;
		this._randomLambda = randomLambda;
		if(this._randomIndices != null && (this._randomChoices == null || this._randomChoices.length == 0)) throw new js__$Boot_HaxeError("You must provide valid 'randomChoices' if you wish to randomize tilemap indicies, please read documentation of 'setCustomTileMappings' function.");
	}
	,draw: function() {
		var cameras = this.get_cameras();
		var camera;
		var buffer;
		var i = 0;
		var l = cameras.length;
		while(i < l) {
			camera = cameras[i];
			if(!camera.visible || !camera.exists) continue;
			if(this._buffers[i] == null) this._buffers[i] = this.createBuffer(camera);
			buffer = this._buffers[i++];
			buffer.dirty = true;
			if(!buffer.dirty) {
				this._point.set_x(this.x - camera.scroll.x * this.scrollFactor.x + buffer.x);
				this._point.set_y(this.y - camera.scroll.y * this.scrollFactor.y + buffer.y);
				buffer.dirty = this._point.x > 0 || this._point.y > 0 || this._point.x + buffer.width < camera.width || this._point.y + buffer.height < camera.height;
			}
			if(buffer.dirty) {
				this.drawTilemap(buffer,camera);
				buffer.dirty = false;
			}
			this._flashPoint.x = this.x - camera.scroll.x * this.scrollFactor.x + buffer.x;
			this._flashPoint.y = this.y - camera.scroll.y * this.scrollFactor.y + buffer.y;
			buffer.draw(camera,this._flashPoint,this.scale.x,this.scale.y);
		}
	}
	,getData: function(Simple) {
		if(Simple == null) Simple = false;
		if(!Simple) return this._data;
		var i = 0;
		var l = this._data.length;
		var data = [];
		flixel_util_FlxArrayUtil.setLength_Int(data,l);
		while(i < l) {
			if(this._tileObjects[this._data[i]].allowCollisions > 0) data[i] = 1; else data[i] = 0;
			i++;
		}
		return data;
	}
	,setDirty: function(Dirty) {
		if(Dirty == null) Dirty = true;
		var _g = 0;
		var _g1 = this._buffers;
		while(_g < _g1.length) {
			var buffer = _g1[_g];
			++_g;
			buffer.dirty = true;
		}
	}
	,findPath: function(Start,End,Simplify,RaySimplify,WideDiagonal) {
		if(WideDiagonal == null) WideDiagonal = true;
		if(RaySimplify == null) RaySimplify = false;
		if(Simplify == null) Simplify = true;
		var startIndex = ((Start.y - this.y) / this._scaledTileHeight | 0) * this.widthInTiles + ((Start.x - this.x) / this._scaledTileWidth | 0);
		var endIndex = ((End.y - this.y) / this._scaledTileHeight | 0) * this.widthInTiles + ((End.x - this.x) / this._scaledTileWidth | 0);
		if(this._tileObjects[this._data[startIndex]].allowCollisions > 0 || this._tileObjects[this._data[endIndex]].allowCollisions > 0) return null;
		var distances = this.computePathDistance(startIndex,endIndex,WideDiagonal);
		if(distances == null) return null;
		var points = [];
		this.walkPath(distances,endIndex,points);
		var node;
		node = points[points.length - 1];
		node.set_x(Start.x);
		node.set_y(Start.y);
		node = points[0];
		node.set_x(End.x);
		node.set_y(End.y);
		if(Simplify) this.simplifyPath(points);
		if(RaySimplify) this.raySimplifyPath(points);
		var path = [];
		var i = points.length - 1;
		while(i >= 0) {
			node = points[i--];
			if(node != null) path.push(node);
		}
		return path;
	}
	,overlaps: function(ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		var group = flixel_group_FlxGroup.resolveGroup(ObjectOrGroup);
		if(group != null) return flixel_group_FlxGroup.overlaps($bind(this,this.tilemapOverlapsCallback),group,0,0,InScreenSpace,Camera); else if(ObjectOrGroup.collisionType == 1 || ObjectOrGroup.collisionType == 3?this.overlapsWithCallback(js_Boot.__cast(ObjectOrGroup , flixel_FlxObject)):this.overlaps(ObjectOrGroup,false,null)) return true;
		return false;
	}
	,tilemapOverlapsCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		if(ObjectOrGroup.collisionType == 1 || ObjectOrGroup.collisionType == 3) return this.overlapsWithCallback(js_Boot.__cast(ObjectOrGroup , flixel_FlxObject)); else return this.overlaps(ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsAt: function(X,Y,ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		var group = flixel_group_FlxGroup.resolveGroup(ObjectOrGroup);
		if(group != null) return flixel_group_FlxGroup.overlaps($bind(this,this.tilemapOverlapsAtCallback),group,X,Y,InScreenSpace,Camera); else if(ObjectOrGroup.collisionType == 1 || ObjectOrGroup.collisionType == 3?this.overlapsWithCallback(js_Boot.__cast(ObjectOrGroup , flixel_FlxObject),null,false,this._point.set(X,Y)):this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera)) return true;
		return false;
	}
	,tilemapOverlapsAtCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		if(ObjectOrGroup.collisionType == 1 || ObjectOrGroup.collisionType == 3) return this.overlapsWithCallback(js_Boot.__cast(ObjectOrGroup , flixel_FlxObject),null,false,this._point.set(X,Y)); else return this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsWithCallback: function(Object,Callback,FlipCallbackParams,Position) {
		if(FlipCallbackParams == null) FlipCallbackParams = false;
		var results = false;
		var X = this.x;
		var Y = this.y;
		if(Position != null) {
			X = Position.x;
			Y = Position.y;
		}
		var selectionX = Math.floor((Object.x - X) / this._scaledTileWidth);
		var selectionY = Math.floor((Object.y - Y) / this._scaledTileHeight);
		var selectionWidth = selectionX + Math.ceil(Object.get_width() / this._scaledTileWidth) + 1;
		var selectionHeight = selectionY + Math.ceil(Object.get_height() / this._scaledTileHeight) + 1;
		selectionX = Std["int"](flixel_util_FlxMath.bound(selectionX,0,this.widthInTiles));
		selectionY = Std["int"](flixel_util_FlxMath.bound(selectionY,0,this.heightInTiles));
		selectionWidth = Std["int"](flixel_util_FlxMath.bound(selectionWidth,0,this.widthInTiles));
		selectionHeight = Std["int"](flixel_util_FlxMath.bound(selectionHeight,0,this.heightInTiles));
		var rowStart = selectionY * this.widthInTiles;
		var row = selectionY;
		var column;
		var tile;
		var overlapFound;
		var deltaX = X - this.last.x;
		var deltaY = Y - this.last.y;
		while(row < selectionHeight) {
			column = selectionX;
			while(column < selectionWidth) {
				var index = rowStart + column;
				if(index < 0 || index > this._data.length - 1) {
					column++;
					continue;
				}
				var dataIndex = this._data[index];
				if(dataIndex < 0) {
					column++;
					continue;
				}
				tile = this._tileObjects[dataIndex];
				tile.set_width(this._scaledTileWidth);
				tile.set_height(this._scaledTileHeight);
				tile.set_x(X + column * tile.get_width());
				tile.set_y(Y + row * tile.get_height());
				tile.last.set_x(tile.x - deltaX);
				tile.last.set_y(tile.y - deltaY);
				overlapFound = Object.x + Object.get_width() > tile.x && Object.x < tile.x + tile.get_width() && Object.y + Object.get_height() > tile.y && Object.y < tile.y + tile.get_height();
				if(tile.allowCollisions != 0) {
					if(Callback != null) {
						if(FlipCallbackParams) overlapFound = Callback(Object,tile); else overlapFound = Callback(tile,Object);
					}
				}
				if(overlapFound) {
					if(tile.callbackFunction != null && (tile.filter == null || js_Boot.__instanceof(Object,tile.filter))) {
						tile.mapIndex = rowStart + column;
						tile.callbackFunction(tile,Object);
					}
					if(tile.allowCollisions != 0) results = true;
				}
				column++;
			}
			rowStart += this.widthInTiles;
			row++;
		}
		return results;
	}
	,overlapsPoint: function(WorldPoint,InScreenSpace,Camera) {
		if(InScreenSpace == null) InScreenSpace = false;
		if(!InScreenSpace) return this._tileObjects[this._data[Math.floor(Math.floor((WorldPoint.y - this.y) / this._scaledTileHeight) * this.widthInTiles + (WorldPoint.x - this.x) / this._scaledTileWidth)]].allowCollisions > 0;
		if(Camera == null) Camera = flixel_FlxG.camera;
		WorldPoint.set_x(WorldPoint.x - Camera.scroll.x);
		WorldPoint.set_y(WorldPoint.y - Camera.scroll.y);
		this.getScreenXY(this._point,Camera);
		var result = this._tileObjects[this._data[((WorldPoint.y - WorldPoint.y) / this._scaledTileHeight | 0) * this.widthInTiles + (WorldPoint.x - WorldPoint.x) / this._scaledTileWidth | 0]].allowCollisions > 0;
		if(WorldPoint._weak) WorldPoint.put();
		return result;
	}
	,getTile: function(X,Y) {
		return this._data[Y * this.widthInTiles + X];
	}
	,getTileByIndex: function(Index) {
		return this._data[Index];
	}
	,getTileCollisions: function(Index) {
		return this._tileObjects[Index].allowCollisions;
	}
	,getTileInstances: function(Index) {
		var array = null;
		var i = 0;
		var l = this.widthInTiles * this.heightInTiles;
		while(i < l) {
			if(this._data[i] == Index) {
				if(array == null) array = [];
				array.push(i);
			}
			i++;
		}
		return array;
	}
	,getTileCoords: function(Index,Midpoint) {
		if(Midpoint == null) Midpoint = true;
		var array = null;
		var point;
		var i = 0;
		var l = this.widthInTiles * this.heightInTiles;
		while(i < l) {
			if(this._data[i] == Index) {
				point = flixel_util_FlxPoint.get(this.x + (i % this.widthInTiles | 0) * this._scaledTileWidth,this.y + (i / this.widthInTiles | 0) * this._scaledTileHeight);
				if(Midpoint) {
					var _g = point;
					_g.set_x(_g.x + this._scaledTileWidth * 0.5);
					var _g1 = point;
					_g1.set_y(_g1.y + this._scaledTileHeight * 0.5);
				}
				if(array == null) array = [];
				array.push(point);
			}
			i++;
		}
		return array;
	}
	,setTile: function(X,Y,Tile,UpdateGraphics) {
		if(UpdateGraphics == null) UpdateGraphics = true;
		if(X >= this.widthInTiles || Y >= this.heightInTiles) return false;
		return this.setTileByIndex(Y * this.widthInTiles + X,Tile,UpdateGraphics);
	}
	,setTileByIndex: function(Index,Tile,UpdateGraphics) {
		if(UpdateGraphics == null) UpdateGraphics = true;
		if(Index >= this._data.length) return false;
		var ok = true;
		this._data[Index] = Tile;
		if(!UpdateGraphics) return ok;
		this.setDirty();
		if(this.auto == 0) {
			this.updateTile(Index);
			return ok;
		}
		var i;
		var row = (Index / this.widthInTiles | 0) - 1;
		var rowLength = row + 3;
		var column = Index % this.widthInTiles - 1;
		var columnHeight = column + 3;
		while(row < rowLength) {
			column = columnHeight - 3;
			while(column < columnHeight) {
				if(row >= 0 && row < this.heightInTiles && column >= 0 && column < this.widthInTiles) {
					i = row * this.widthInTiles + column;
					this.autoTile(i);
					this.updateTile(i);
				}
				column++;
			}
			row++;
		}
		return ok;
	}
	,setTileProperties: function(Tile,AllowCollisions,Callback,CallbackFilter,Range) {
		if(Range == null) Range = 1;
		if(AllowCollisions == null) AllowCollisions = 4369;
		if(Range <= 0) Range = 1;
		var tile;
		var i = Tile;
		var l = Tile + Range;
		while(i < l) {
			tile = this._tileObjects[i++];
			tile.allowCollisions = AllowCollisions;
			tile.callbackFunction = Callback;
			tile.filter = CallbackFilter;
		}
	}
	,follow: function(Camera,Border,UpdateWorld) {
		if(UpdateWorld == null) UpdateWorld = true;
		if(Border == null) Border = 0;
		if(Camera == null) Camera = flixel_FlxG.camera;
		Camera.setBounds(this.x + Border * this._scaledTileWidth,this.y + Border * this._scaledTileHeight,this.get_width() - Border * this._scaledTileWidth * 2,this.get_height() - Border * this._scaledTileHeight * 2,UpdateWorld);
	}
	,getBounds: function(Bounds) {
		if(Bounds == null) Bounds = flixel_util_FlxRect.get(null,null,null,null);
		return Bounds.set(this.x,this.y,this.get_width(),this.get_height());
	}
	,ray: function(Start,End,Result,Resolution) {
		if(Resolution == null) Resolution = 1;
		var step = this._scaledTileWidth;
		if(this._scaledTileHeight < this._scaledTileWidth) step = this._scaledTileHeight;
		step /= Resolution;
		var deltaX = End.x - Start.x;
		var deltaY = End.y - Start.y;
		var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
		var steps = Math.ceil(distance / step);
		var stepX = deltaX / steps;
		var stepY = deltaY / steps;
		var curX = Start.x - stepX - this.x;
		var curY = Start.y - stepY - this.y;
		var tileX;
		var tileY;
		var i = 0;
		if(Start._weak) Start.put();
		if(End._weak) End.put();
		while(i < steps) {
			curX += stepX;
			curY += stepY;
			if(curX < 0 || curX > this.get_width() || curY < 0 || curY > this.get_height()) {
				i++;
				continue;
			}
			tileX = Math.floor(curX / this._scaledTileWidth);
			tileY = Math.floor(curY / this._scaledTileHeight);
			if(this._tileObjects[this._data[tileY * this.widthInTiles + tileX]].allowCollisions != 0) {
				tileX *= this._scaledTileWidth | 0;
				tileY *= this._scaledTileHeight | 0;
				var rx = 0;
				var ry = 0;
				var q;
				var lx = curX - stepX;
				var ly = curY - stepY;
				q = tileX;
				if(deltaX < 0) q += this._scaledTileWidth;
				rx = q;
				ry = ly + stepY * ((q - lx) / stepX);
				if(ry > tileY && ry < tileY + this._scaledTileHeight) {
					if(Result == null) Result = flixel_util_FlxPoint.get(null,null);
					Result.set_x(rx);
					Result.set_y(ry);
					return false;
				}
				q = tileY;
				if(deltaY < 0) q += this._scaledTileHeight;
				rx = lx + stepX * ((q - ly) / stepY);
				ry = q;
				if(rx > tileX && rx < tileX + this._scaledTileWidth) {
					if(Result == null) Result = flixel_util_FlxPoint.get(null,null);
					Result.set_x(rx);
					Result.set_y(ry);
					return false;
				}
				return true;
			}
			i++;
		}
		return true;
	}
	,updateFrameData: function() {
		if(this.cachedGraphics != null && this._tileWidth >= 1 && this._tileHeight >= 1) {
			this.framesData = this.cachedGraphics.get_tilesheet().getSpriteSheetFrames(this.region,new openfl_geom_Point(0,0));
			var i = 0;
			while(i < this.totalTiles) this.updateTile(i++);
		}
	}
	,tileToFlxSprite: function(X,Y,NewTile) {
		if(NewTile == null) NewTile = 0;
		var rowIndex = X + Y * this.widthInTiles;
		var rect = null;
		rect = this._rects[rowIndex];
		var pt = new openfl_geom_Point(0,0);
		var tileSprite = new flixel_FlxSprite();
		tileSprite.makeGraphic(this._tileWidth,this._tileHeight,0,true);
		tileSprite.set_x(X * this._tileWidth + this.x);
		tileSprite.set_y(Y * this._tileHeight + this.y);
		tileSprite.scale.set_x(this.scale.x);
		tileSprite.scale.set_y(this.scale.y);
		if(rect != null) tileSprite.get_pixels().copyPixels(this.cachedGraphics.bitmap,rect,pt);
		tileSprite.dirty = true;
		tileSprite.updateFrameData();
		if(NewTile >= 0) this.setTile(X,Y,NewTile);
		return tileSprite;
	}
	,updateBuffers: function() {
		var i = 0;
		var l;
		if(this._buffers != null) {
			i = 0;
			l = this._buffers.length;
			var _g = 0;
			while(_g < l) {
				var i1 = _g++;
				this._buffers[i1].destroy();
			}
			this._buffers = null;
		}
		this._buffers = [];
	}
	,drawTilemap: function(Buffer,Camera) {
		Buffer.fill();
		this._point.set_x(Camera.scroll.x * this.scrollFactor.x - this.x);
		this._point.set_y(Camera.scroll.y * this.scrollFactor.y - this.y);
		var screenXInTiles = Math.floor(this._point.x / this._scaledTileWidth);
		var screenYInTiles = Math.floor(this._point.y / this._scaledTileHeight);
		var screenRows = Buffer.rows;
		var screenColumns = Buffer.columns;
		if(screenXInTiles < 0) screenXInTiles = 0;
		if(screenXInTiles > this.widthInTiles - screenColumns) screenXInTiles = this.widthInTiles - screenColumns;
		if(screenYInTiles < 0) screenYInTiles = 0;
		if(screenYInTiles > this.heightInTiles - screenRows) screenYInTiles = this.heightInTiles - screenRows;
		var rowIndex = screenYInTiles * this.widthInTiles + screenXInTiles;
		this._flashPoint.y = 0;
		var row = 0;
		var column;
		var columnIndex;
		var tile;
		while(row < screenRows) {
			columnIndex = rowIndex;
			column = 0;
			this._flashPoint.x = 0;
			while(column < screenColumns) {
				this._flashRect = this._rects[columnIndex];
				if(this._flashRect != null) Buffer.pixels.copyPixels(this.cachedGraphics.bitmap,this._flashRect,this._flashPoint,null,null,true);
				this._flashPoint.x += this._tileWidth;
				column++;
				columnIndex++;
			}
			this._flashPoint.y += this._tileHeight;
			rowIndex += this.widthInTiles;
			row++;
		}
		Buffer.x = screenXInTiles * this._scaledTileWidth;
		Buffer.y = screenYInTiles * this._scaledTileHeight;
	}
	,simplifyPath: function(Points) {
		var deltaPrevious;
		var deltaNext;
		var last = Points[0];
		var node;
		var i = 1;
		var l = Points.length - 1;
		while(i < l) {
			node = Points[i];
			deltaPrevious = (node.x - last.x) / (node.y - last.y);
			deltaNext = (node.x - Points[i + 1].x) / (node.y - Points[i + 1].y);
			if(last.x == Points[i + 1].x || last.y == Points[i + 1].y || deltaPrevious == deltaNext) Points[i] = null; else last = node;
			i++;
		}
	}
	,raySimplifyPath: function(Points) {
		var source = Points[0];
		var lastIndex = -1;
		var node;
		var i = 1;
		var l = Points.length;
		while(i < l) {
			node = Points[i++];
			if(node == null) continue;
			if(this.ray(source,node,this._point)) {
				if(lastIndex >= 0) Points[lastIndex] = null;
			} else source = Points[lastIndex];
			lastIndex = i - 1;
		}
	}
	,computePathDistance: function(StartIndex,EndIndex,WideDiagonal,StopOnEnd) {
		if(StopOnEnd == null) StopOnEnd = true;
		var mapSize = this.widthInTiles * this.heightInTiles;
		var distances = [];
		flixel_util_FlxArrayUtil.setLength_Int(distances,mapSize);
		var i = 0;
		while(i < mapSize) {
			if(this._tileObjects[this._data[i]].allowCollisions != 0) distances[i] = -2; else distances[i] = -1;
			i++;
		}
		distances[StartIndex] = 0;
		var distance = 1;
		var neighbors = [StartIndex];
		var current;
		var currentIndex;
		var left;
		var right;
		var up;
		var down;
		var currentLength;
		var foundEnd = false;
		while(neighbors.length > 0) {
			current = neighbors;
			neighbors = [];
			i = 0;
			currentLength = current.length;
			while(i < currentLength) {
				currentIndex = current[i++];
				if(currentIndex == (EndIndex | 0)) {
					foundEnd = true;
					if(StopOnEnd) {
						neighbors = [];
						break;
					}
				}
				left = currentIndex % this.widthInTiles > 0;
				right = currentIndex % this.widthInTiles < this.widthInTiles - 1;
				up = currentIndex / this.widthInTiles > 0;
				down = currentIndex / this.widthInTiles < this.heightInTiles - 1;
				var index;
				if(up) {
					index = currentIndex - this.widthInTiles;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(right) {
					index = currentIndex + 1;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(down) {
					index = currentIndex + this.widthInTiles;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(left) {
					index = currentIndex - 1;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(up && right) {
					index = currentIndex - this.widthInTiles + 1;
					if(WideDiagonal && distances[index] == -1 && distances[currentIndex - this.widthInTiles] >= -1 && distances[currentIndex + 1] >= -1) {
						distances[index] = distance;
						neighbors.push(index);
					} else if(!WideDiagonal && distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(right && down) {
					index = currentIndex + this.widthInTiles + 1;
					if(WideDiagonal && distances[index] == -1 && distances[currentIndex + this.widthInTiles] >= -1 && distances[currentIndex + 1] >= -1) {
						distances[index] = distance;
						neighbors.push(index);
					} else if(!WideDiagonal && distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(left && down) {
					index = currentIndex + this.widthInTiles - 1;
					if(WideDiagonal && distances[index] == -1 && distances[currentIndex + this.widthInTiles] >= -1 && distances[currentIndex - 1] >= -1) {
						distances[index] = distance;
						neighbors.push(index);
					} else if(!WideDiagonal && distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(up && left) {
					index = currentIndex - this.widthInTiles - 1;
					if(WideDiagonal && distances[index] == -1 && distances[currentIndex - this.widthInTiles] >= -1 && distances[currentIndex - 1] >= -1) {
						distances[index] = distance;
						neighbors.push(index);
					} else if(!WideDiagonal && distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
			}
			distance++;
		}
		if(!foundEnd) distances = null;
		return distances;
	}
	,walkPath: function(Data,Start,Points) {
		Points.push(flixel_util_FlxPoint.get(this.x + Math.floor(Start % this.widthInTiles) * this._scaledTileWidth + this._scaledTileWidth * 0.5,this.y + Math.floor(Start / this.widthInTiles) * this._scaledTileHeight + this._scaledTileHeight * 0.5));
		if(Data[Start] == 0) return;
		var left = Start % this.widthInTiles > 0;
		var right = Start % this.widthInTiles < this.widthInTiles - 1;
		var up = Start / this.widthInTiles > 0;
		var down = Start / this.widthInTiles < this.heightInTiles - 1;
		var current = Data[Start];
		var i;
		if(up) {
			i = Start - this.widthInTiles;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(right) {
			i = Start + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(down) {
			i = Start + this.widthInTiles;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(left) {
			i = Start - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(up && right) {
			i = Start - this.widthInTiles + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(right && down) {
			i = Start + this.widthInTiles + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(left && down) {
			i = Start + this.widthInTiles - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		if(up && left) {
			i = Start - this.widthInTiles - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) return this.walkPath(Data,i,Points);
		}
		return;
	}
	,updateTile: function(Index) {
		var tile = this._tileObjects[this._data[Index]];
		if(tile == null || !tile.visible) {
			this._rects[Index] = null;
			return;
		}
		var rx = (this._data[Index] - this._startingIndex) * (this._tileWidth + this.region.spacingX);
		var ry = 0;
		if(rx >= this.region.width) {
			ry = (rx / this.region.width | 0) * (this._tileHeight + this.region.spacingY);
			rx %= this.region.width;
		}
		this._rects[Index] = new openfl_geom_Rectangle(rx + this.region.startX,ry + this.region.startY,this._tileWidth,this._tileHeight);
	}
	,autoTile: function(Index) {
		if(this._data[Index] == 0) return;
		this._data[Index] = 0;
		if(Index - this.widthInTiles < 0 || this._data[Index - this.widthInTiles] > 0) this._data[Index] += 1;
		if(Index % this.widthInTiles >= this.widthInTiles - 1 || this._data[Index + 1] > 0) this._data[Index] += 2;
		if((Index + this.widthInTiles | 0) >= this.totalTiles || this._data[Index + this.widthInTiles] > 0) this._data[Index] += 4;
		if(Index % this.widthInTiles <= 0 || this._data[Index - 1] > 0) this._data[Index] += 8;
		if(this.auto == 2 && this._data[Index] == 15) {
			if(Index % this.widthInTiles > 0 && (Index + this.widthInTiles | 0) < this.totalTiles && this._data[Index + this.widthInTiles - 1] <= 0) this._data[Index] = 1;
			if(Index % this.widthInTiles > 0 && Index - this.widthInTiles >= 0 && this._data[Index - this.widthInTiles - 1] <= 0) this._data[Index] = 2;
			if(Index % this.widthInTiles < this.widthInTiles - 1 && Index - this.widthInTiles >= 0 && this._data[Index - this.widthInTiles + 1] <= 0) this._data[Index] = 4;
			if(Index % this.widthInTiles < this.widthInTiles - 1 && (Index + this.widthInTiles | 0) < this.totalTiles && this._data[Index + this.widthInTiles + 1] <= 0) this._data[Index] = 8;
		}
		this._data[Index] += 1;
	}
	,createBuffer: function(camera) {
		var buffer = new flixel_tile_FlxTilemapBuffer(this._tileWidth,this._tileHeight,this.widthInTiles,this.heightInTiles,camera,this.scale.x,this.scale.y);
		buffer.pixelPerfectRender = this.pixelPerfectRender;
		return buffer;
	}
	,onGameResize: function(_,_1) {
		var _g1 = 0;
		var _g = this.get_cameras().length;
		while(_g1 < _g) {
			var i = _g1++;
			var camera = this.get_cameras()[i];
			var buffer = this._buffers[i];
			flixel_tile_FlxTilemap._helperBuffer.updateColumns(this._tileWidth,this.widthInTiles,this.scale.x,camera);
			flixel_tile_FlxTilemap._helperBuffer.updateRows(this._tileHeight,this.heightInTiles,this.scale.y,camera);
			if(buffer == null || flixel_tile_FlxTilemap._helperBuffer.columns != buffer.columns || flixel_tile_FlxTilemap._helperBuffer.rows != buffer.rows) {
				if(buffer != null) buffer.destroy();
				this._buffers[i] = this.createBuffer(camera);
			}
		}
	}
	,set_cachedGraphics: function(Value) {
		var oldCached = this.cachedGraphics;
		if(this.cachedGraphics != Value && Value != null) {
			var _g = Value;
			var _g1 = _g.useCount;
			_g.set_useCount(_g1 + 1);
			_g1;
		}
		if(oldCached != null && oldCached != Value) {
			var _g2 = oldCached;
			var _g11 = _g2.useCount;
			_g2.set_useCount(_g11 - 1);
			_g11;
		}
		return this.cachedGraphics = Value;
	}
	,set_pixelPerfectRender: function(Value) {
		if(this._buffers != null) {
			var _g = 0;
			var _g1 = this._buffers;
			while(_g < _g1.length) {
				var buffer = _g1[_g];
				++_g;
				buffer.pixelPerfectRender = Value;
			}
		}
		return this.pixelPerfectRender = Value;
	}
	,setScaleXYCallback: function(Scale) {
		this.setScaleXCallback(Scale);
		this.setScaleYCallback(Scale);
	}
	,setScaleXCallback: function(Scale) {
		this._scaledTileWidth = this._tileWidth * this.scale.x;
		this.set_width(this.widthInTiles * this._scaledTileWidth);
		if(this.get_cameras() != null) {
			var _g1 = 0;
			var _g = this.get_cameras().length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this._buffers[i] != null) this._buffers[i].updateColumns(this._tileWidth,this.widthInTiles,this.scale.x,this.get_cameras()[i]);
			}
		}
	}
	,setScaleYCallback: function(Scale) {
		this._scaledTileHeight = this._tileHeight * this.scale.y;
		this.set_height(this.heightInTiles * this._scaledTileHeight);
		if(this.get_cameras() != null) {
			var _g1 = 0;
			var _g = this.get_cameras().length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this._buffers[i] != null) this._buffers[i].updateRows(this._tileHeight,this.heightInTiles,this.scale.y,this.get_cameras()[i]);
			}
		}
	}
	,__class__: flixel_tile_FlxTilemap
	,__properties__: $extend(flixel_FlxObject.prototype.__properties__,{set_cachedGraphics:"set_cachedGraphics"})
});
var flixel_tweens_FlxEase = function() { };
$hxClasses["flixel.tweens.FlxEase"] = flixel_tweens_FlxEase;
flixel_tweens_FlxEase.__name__ = ["flixel","tweens","FlxEase"];
flixel_tweens_FlxEase.quadIn = function(t) {
	return t * t;
};
flixel_tweens_FlxEase.quadOut = function(t) {
	return -t * (t - 2);
};
flixel_tweens_FlxEase.quadInOut = function(t) {
	if(t <= .5) return t * t * 2; else return 1 - --t * t * 2;
};
flixel_tweens_FlxEase.cubeIn = function(t) {
	return t * t * t;
};
flixel_tweens_FlxEase.cubeOut = function(t) {
	return 1 + --t * t * t;
};
flixel_tweens_FlxEase.cubeInOut = function(t) {
	if(t <= .5) return t * t * t * 4; else return 1 + --t * t * t * 4;
};
flixel_tweens_FlxEase.quartIn = function(t) {
	return t * t * t * t;
};
flixel_tweens_FlxEase.quartOut = function(t) {
	return 1 - (t -= 1) * t * t * t;
};
flixel_tweens_FlxEase.quartInOut = function(t) {
	if(t <= .5) return t * t * t * t * 8; else return (1 - (t = t * 2 - 2) * t * t * t) / 2 + .5;
};
flixel_tweens_FlxEase.quintIn = function(t) {
	return t * t * t * t * t;
};
flixel_tweens_FlxEase.quintOut = function(t) {
	return (t = t - 1) * t * t * t * t + 1;
};
flixel_tweens_FlxEase.quintInOut = function(t) {
	if((t *= 2) < 1) return t * t * t * t * t / 2; else return ((t -= 2) * t * t * t * t + 2) / 2;
};
flixel_tweens_FlxEase.sineIn = function(t) {
	return -Math.cos(flixel_tweens_FlxEase.PI2 * t) + 1;
};
flixel_tweens_FlxEase.sineOut = function(t) {
	return Math.sin(flixel_tweens_FlxEase.PI2 * t);
};
flixel_tweens_FlxEase.sineInOut = function(t) {
	return -Math.cos(Math.PI * t) / 2 + .5;
};
flixel_tweens_FlxEase.bounceIn = function(t) {
	t = 1 - t;
	if(t < flixel_tweens_FlxEase.B1) return 1 - 7.5625 * t * t;
	if(t < flixel_tweens_FlxEase.B2) return 1 - (7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75);
	if(t < flixel_tweens_FlxEase.B4) return 1 - (7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375);
	return 1 - (7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375);
};
flixel_tweens_FlxEase.bounceOut = function(t) {
	if(t < flixel_tweens_FlxEase.B1) return 7.5625 * t * t;
	if(t < flixel_tweens_FlxEase.B2) return 7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75;
	if(t < flixel_tweens_FlxEase.B4) return 7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375;
	return 7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375;
};
flixel_tweens_FlxEase.bounceInOut = function(t) {
	if(t < .5) {
		t = 1 - t * 2;
		if(t < flixel_tweens_FlxEase.B1) return (1 - 7.5625 * t * t) / 2;
		if(t < flixel_tweens_FlxEase.B2) return (1 - (7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75)) / 2;
		if(t < flixel_tweens_FlxEase.B4) return (1 - (7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375)) / 2;
		return (1 - (7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375)) / 2;
	}
	t = t * 2 - 1;
	if(t < flixel_tweens_FlxEase.B1) return 7.5625 * t * t / 2 + .5;
	if(t < flixel_tweens_FlxEase.B2) return (7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75) / 2 + .5;
	if(t < flixel_tweens_FlxEase.B4) return (7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375) / 2 + .5;
	return (7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375) / 2 + .5;
};
flixel_tweens_FlxEase.circIn = function(t) {
	return -(Math.sqrt(1 - t * t) - 1);
};
flixel_tweens_FlxEase.circOut = function(t) {
	return Math.sqrt(1 - (t - 1) * (t - 1));
};
flixel_tweens_FlxEase.circInOut = function(t) {
	if(t <= .5) return (Math.sqrt(1 - t * t * 4) - 1) / -2; else return (Math.sqrt(1 - (t * 2 - 2) * (t * 2 - 2)) + 1) / 2;
};
flixel_tweens_FlxEase.expoIn = function(t) {
	return Math.pow(2,10 * (t - 1));
};
flixel_tweens_FlxEase.expoOut = function(t) {
	return -Math.pow(2,-10 * t) + 1;
};
flixel_tweens_FlxEase.expoInOut = function(t) {
	if(t < .5) return Math.pow(2,10 * (t * 2 - 1)) / 2; else return (-Math.pow(2,-10 * (t * 2 - 1)) + 2) / 2;
};
flixel_tweens_FlxEase.backIn = function(t) {
	return t * t * (2.70158 * t - 1.70158);
};
flixel_tweens_FlxEase.backOut = function(t) {
	return 1 - --t * t * (-2.70158 * t - 1.70158);
};
flixel_tweens_FlxEase.backInOut = function(t) {
	t *= 2;
	if(t < 1) return t * t * (2.70158 * t - 1.70158) / 2;
	t--;
	return (1 - --t * t * (-2.70158 * t - 1.70158)) / 2 + .5;
};
flixel_tweens_FlxEase.elasticIn = function(t) {
	return -(flixel_tweens_FlxEase.ELASTIC_AMPLITUDE * Math.pow(2,10 * (t -= 1)) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / (2 * Math.PI) * Math.asin(1 / flixel_tweens_FlxEase.ELASTIC_AMPLITUDE)) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD));
};
flixel_tweens_FlxEase.elasticOut = function(t) {
	return flixel_tweens_FlxEase.ELASTIC_AMPLITUDE * Math.pow(2,-10 * t) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / (2 * Math.PI) * Math.asin(1 / flixel_tweens_FlxEase.ELASTIC_AMPLITUDE)) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD) + 1;
};
flixel_tweens_FlxEase.elasticInOut = function(t) {
	if(t < 0.5) return -0.5 * (Math.pow(2,10 * (t -= 0.5)) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / 4) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD));
	return Math.pow(2,-10 * (t -= 0.5)) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / 4) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD) * 0.5 + 1;
};
var flixel_tweens_misc_AngleTween = function(Options) {
	flixel_tweens_FlxTween.call(this,Options);
};
$hxClasses["flixel.tweens.misc.AngleTween"] = flixel_tweens_misc_AngleTween;
flixel_tweens_misc_AngleTween.__name__ = ["flixel","tweens","misc","AngleTween"];
flixel_tweens_misc_AngleTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_AngleTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	angle: null
	,sprite: null
	,_start: null
	,_range: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this.sprite = null;
	}
	,tween: function(FromAngle,ToAngle,Duration,Sprite) {
		this._start = this.angle = FromAngle;
		var d = ToAngle - this.angle;
		var a = Math.abs(d);
		if(a > 181) this._range = (360 - a) * (d > 0?-1:1); else if(a < 179) this._range = d; else this._range = flixel_util_FlxRandom.floatRanged(180,-180);
		this.duration = Duration;
		this.sprite = Sprite;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_FlxTween.prototype.update.call(this);
		this.angle = (this._start + this._range * this.scale) % 360;
		if(this.angle < 0) this.angle += 360;
		if(this.sprite != null) this.sprite.set_angle(this.angle);
	}
	,__class__: flixel_tweens_misc_AngleTween
});
var flixel_tweens_misc_ColorTween = function(Options) {
	this.alpha = 1;
	flixel_tweens_FlxTween.call(this,Options);
};
$hxClasses["flixel.tweens.misc.ColorTween"] = flixel_tweens_misc_ColorTween;
flixel_tweens_misc_ColorTween.__name__ = ["flixel","tweens","misc","ColorTween"];
flixel_tweens_misc_ColorTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_ColorTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	color: null
	,alpha: null
	,sprite: null
	,red: null
	,green: null
	,blue: null
	,_startA: null
	,_startR: null
	,_startG: null
	,_startB: null
	,_rangeA: null
	,_rangeR: null
	,_rangeG: null
	,_rangeB: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this.sprite = null;
	}
	,tween: function(Duration,FromColor,ToColor,FromAlpha,ToAlpha,Sprite) {
		if(ToAlpha == null) ToAlpha = 1;
		if(FromAlpha == null) FromAlpha = 1;
		FromColor &= 16777215;
		ToColor &= 16777215;
		this.color = FromColor;
		this.red = FromColor >> 16 & 255;
		this.green = FromColor >> 8 & 255;
		this.blue = FromColor & 255;
		this._startR = this.red / 255;
		this._startG = this.green / 255;
		this._startB = this.blue / 255;
		this._rangeR = (ToColor >> 16 & 255) / 255 - this._startR;
		this._rangeG = (ToColor >> 8 & 255) / 255 - this._startG;
		this._rangeB = (ToColor & 255) / 255 - this._startB;
		this._startA = this.alpha = FromAlpha;
		this._rangeA = ToAlpha - this.alpha;
		this.duration = Duration;
		this.sprite = Sprite;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_FlxTween.prototype.update.call(this);
		this.alpha = this._startA + this._rangeA * this.scale;
		this.red = (this._startR + this._rangeR * this.scale) * 255 | 0;
		this.green = (this._startG + this._rangeG * this.scale) * 255 | 0;
		this.blue = (this._startB + this._rangeB * this.scale) * 255 | 0;
		this.color = this.red << 16 | this.green << 8 | this.blue;
		if(this.sprite != null) {
			this.sprite.set_color(this.color);
			this.sprite.set_alpha(this.alpha);
		}
	}
	,__class__: flixel_tweens_misc_ColorTween
});
var flixel_tweens_misc_NumTween = function(Options) {
	flixel_tweens_FlxTween.call(this,Options);
};
$hxClasses["flixel.tweens.misc.NumTween"] = flixel_tweens_misc_NumTween;
flixel_tweens_misc_NumTween.__name__ = ["flixel","tweens","misc","NumTween"];
flixel_tweens_misc_NumTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_NumTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	value: null
	,_tweenFunction: null
	,_start: null
	,_range: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this._tweenFunction = null;
	}
	,tween: function(fromValue,toValue,duration,tweenFunction) {
		this._tweenFunction = tweenFunction;
		this._start = this.value = fromValue;
		this._range = toValue - this.value;
		this.duration = duration;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_FlxTween.prototype.update.call(this);
		this.value = this._start + this._range * this.scale;
		if(this._tweenFunction != null) this._tweenFunction(this.value);
	}
	,__class__: flixel_tweens_misc_NumTween
});
var flixel_tweens_misc_VarTween = function(Options) {
	flixel_tweens_FlxTween.call(this,Options);
	this._vars = [];
	this._startValues = [];
	this._range = [];
};
$hxClasses["flixel.tweens.misc.VarTween"] = flixel_tweens_misc_VarTween;
flixel_tweens_misc_VarTween.__name__ = ["flixel","tweens","misc","VarTween"];
flixel_tweens_misc_VarTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_VarTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	_object: null
	,_properties: null
	,_vars: null
	,_startValues: null
	,_range: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this._object = null;
		this._properties = null;
	}
	,tween: function(object,properties,duration) {
		this._object = object;
		this._properties = properties;
		this.duration = duration;
		this.start();
		return this;
	}
	,update: function() {
		var delay;
		if(this.executions > 0) delay = this.loopDelay; else delay = this.startDelay;
		if(this._secondsSinceStart < delay) flixel_tweens_FlxTween.prototype.update.call(this); else {
			if(this._vars.length < 1) this.initializeVars();
			flixel_tweens_FlxTween.prototype.update.call(this);
			var i = this._vars.length;
			while(i-- > 0) Reflect.setProperty(this._object,this._vars[i],this._startValues[i] + this._range[i] * this.scale);
		}
	}
	,initializeVars: function() {
		var p;
		var fields;
		if(Reflect.isObject(this._properties)) fields = Reflect.fields(this._properties); else throw new js__$Boot_HaxeError("Unsupported properties container - use an object containing key/value pairs.");
		var _g = 0;
		while(_g < fields.length) {
			var p1 = fields[_g];
			++_g;
			if(Reflect.getProperty(this._object,p1) == null) throw new js__$Boot_HaxeError("The Object does not have the property \"" + p1 + "\", or it is not accessible.");
			var a = Reflect.getProperty(this._object,p1);
			if((function($this) {
				var $r;
				var f = a;
				$r = isNaN(f);
				return $r;
			}(this))) throw new js__$Boot_HaxeError("The property \"" + p1 + "\" is not numeric.");
			this._vars.push(p1);
			this._startValues.push(a);
			this._range.push(Reflect.getProperty(this._properties,p1) - a);
		}
	}
	,__class__: flixel_tweens_misc_VarTween
});
var flixel_tweens_motion_Motion = function(Options) {
	this.y = 0;
	this.x = 0;
	flixel_tweens_FlxTween.call(this,Options);
};
$hxClasses["flixel.tweens.motion.Motion"] = flixel_tweens_motion_Motion;
flixel_tweens_motion_Motion.__name__ = ["flixel","tweens","motion","Motion"];
flixel_tweens_motion_Motion.__super__ = flixel_tweens_FlxTween;
flixel_tweens_motion_Motion.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	x: null
	,y: null
	,_object: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this._object = null;
	}
	,setObject: function(object) {
		this._object = object;
		this._object.set_immovable(true);
		return this;
	}
	,update: function() {
		flixel_tweens_FlxTween.prototype.update.call(this);
		this.postUpdate();
	}
	,postUpdate: function() {
		if(this._object != null) this._object.setPosition(this.x,this.y);
	}
	,__class__: flixel_tweens_motion_Motion
});
var flixel_tweens_motion_CircularMotion = function(Options) {
	this._angleFinish = 0;
	this._angleStart = 0;
	this._radius = 0;
	this._centerY = 0;
	this._centerX = 0;
	this.angle = 0;
	flixel_tweens_motion_Motion.call(this,Options);
};
$hxClasses["flixel.tweens.motion.CircularMotion"] = flixel_tweens_motion_CircularMotion;
flixel_tweens_motion_CircularMotion.__name__ = ["flixel","tweens","motion","CircularMotion"];
flixel_tweens_motion_CircularMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_CircularMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	angle: null
	,_centerX: null
	,_centerY: null
	,_radius: null
	,_angleStart: null
	,_angleFinish: null
	,setMotion: function(CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration) {
		if(UseDuration == null) UseDuration = true;
		this._centerX = CenterX;
		this._centerY = CenterY;
		this._radius = Radius;
		this.angle = this._angleStart = Angle * Math.PI / -180;
		this._angleFinish = Math.PI * 2 * (Clockwise?1:-1);
		if(UseDuration) this.duration = DurationOrSpeed; else this.duration = this._radius * (Math.PI * 2) / DurationOrSpeed;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_motion_Motion.prototype.update.call(this);
		this.angle = this._angleStart + this._angleFinish * this.scale;
		this.x = this._centerX + Math.cos(this.angle) * this._radius;
		this.y = this._centerY + Math.sin(this.angle) * this._radius;
		if(this.finished) this.postUpdate();
	}
	,get_circumference: function() {
		return this._radius * (Math.PI * 2);
	}
	,__class__: flixel_tweens_motion_CircularMotion
	,__properties__: $extend(flixel_tweens_motion_Motion.prototype.__properties__,{get_circumference:"get_circumference"})
});
var flixel_tweens_motion_CubicMotion = function(Options) {
	this._tt = 0;
	this._ttt = 0;
	this._bY = 0;
	this._bX = 0;
	this._aY = 0;
	this._aX = 0;
	this._toY = 0;
	this._toX = 0;
	this._fromY = 0;
	this._fromX = 0;
	flixel_tweens_motion_Motion.call(this,Options);
};
$hxClasses["flixel.tweens.motion.CubicMotion"] = flixel_tweens_motion_CubicMotion;
flixel_tweens_motion_CubicMotion.__name__ = ["flixel","tweens","motion","CubicMotion"];
flixel_tweens_motion_CubicMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_CubicMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_fromX: null
	,_fromY: null
	,_toX: null
	,_toY: null
	,_aX: null
	,_aY: null
	,_bX: null
	,_bY: null
	,_ttt: null
	,_tt: null
	,setMotion: function(fromX,fromY,aX,aY,bX,bY,toX,toY,duration) {
		this.x = this._fromX = fromX;
		this.y = this._fromY = fromY;
		this._aX = aX;
		this._aY = aY;
		this._bX = bX;
		this._bY = bY;
		this._toX = toX;
		this._toY = toY;
		this.duration = duration;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_motion_Motion.prototype.update.call(this);
		this.x = this.scale * this.scale * this.scale * (this._toX + 3 * (this._aX - this._bX) - this._fromX) + 3 * this.scale * this.scale * (this._fromX - 2 * this._aX + this._bX) + 3 * this.scale * (this._aX - this._fromX) + this._fromX;
		this.y = this.scale * this.scale * this.scale * (this._toY + 3 * (this._aY - this._bY) - this._fromY) + 3 * this.scale * this.scale * (this._fromY - 2 * this._aY + this._bY) + 3 * this.scale * (this._aY - this._fromY) + this._fromY;
		if(this.finished) this.postUpdate();
	}
	,__class__: flixel_tweens_motion_CubicMotion
});
var flixel_tweens_motion_LinearMotion = function(Options) {
	this._distance = -1;
	this._moveY = 0;
	this._moveX = 0;
	this._fromY = 0;
	this._fromX = 0;
	flixel_tweens_motion_Motion.call(this,Options);
};
$hxClasses["flixel.tweens.motion.LinearMotion"] = flixel_tweens_motion_LinearMotion;
flixel_tweens_motion_LinearMotion.__name__ = ["flixel","tweens","motion","LinearMotion"];
flixel_tweens_motion_LinearMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_LinearMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_fromX: null
	,_fromY: null
	,_moveX: null
	,_moveY: null
	,_distance: null
	,setMotion: function(FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration) {
		if(UseDuration == null) UseDuration = true;
		this._distance = -1;
		this.x = this._fromX = FromX;
		this.y = this._fromY = FromY;
		this._moveX = ToX - FromX;
		this._moveY = ToY - FromY;
		if(UseDuration) this.duration = DurationOrSpeed; else this.duration = this.get_distance() / DurationOrSpeed;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_motion_Motion.prototype.update.call(this);
		this.x = this._fromX + this._moveX * this.scale;
		this.y = this._fromY + this._moveY * this.scale;
		if(this.x == this._fromX + this._moveX && this.y == this._fromY + this._moveY && this.active && this._secondsSinceStart >= this.duration) this.finished = true;
		if(this.finished) this.postUpdate();
	}
	,get_distance: function() {
		if(this._distance >= 0) return this._distance;
		return this._distance = Math.sqrt(this._moveX * this._moveX + this._moveY * this._moveY);
	}
	,__class__: flixel_tweens_motion_LinearMotion
	,__properties__: $extend(flixel_tweens_motion_Motion.prototype.__properties__,{get_distance:"get_distance"})
});
var flixel_tweens_motion_LinearPath = function(Options) {
	this._index = 0;
	this._speed = 0;
	this.distance = 0;
	flixel_tweens_motion_Motion.call(this,Options);
	this.points = [];
	this._pointD = [0];
	this._pointT = [0];
};
$hxClasses["flixel.tweens.motion.LinearPath"] = flixel_tweens_motion_LinearPath;
flixel_tweens_motion_LinearPath.__name__ = ["flixel","tweens","motion","LinearPath"];
flixel_tweens_motion_LinearPath.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_LinearPath.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	distance: null
	,points: null
	,_pointD: null
	,_pointT: null
	,_speed: null
	,_index: null
	,_last: null
	,_prevPoint: null
	,_nextPoint: null
	,destroy: function() {
		flixel_tweens_motion_Motion.prototype.destroy.call(this);
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			point = flixel_util_FlxDestroyUtil.put(point);
		}
		this._last = flixel_util_FlxDestroyUtil.put(this._last);
		this._prevPoint = flixel_util_FlxDestroyUtil.put(this._prevPoint);
		this._nextPoint = flixel_util_FlxDestroyUtil.put(this._nextPoint);
	}
	,setMotion: function(DurationOrSpeed,UseDuration) {
		if(UseDuration == null) UseDuration = true;
		this.updatePath();
		if(UseDuration) {
			this.duration = DurationOrSpeed;
			this._speed = this.distance / DurationOrSpeed;
		} else {
			this.duration = this.distance / DurationOrSpeed;
			this._speed = DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,addPoint: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		if(this._last != null) {
			this.distance += Math.sqrt((x - this._last.x) * (x - this._last.x) + (y - this._last.y) * (y - this._last.y));
			this._pointD[this.points.length] = this.distance;
		}
		this.points[this.points.length] = this._last = flixel_util_FlxPoint.get(x,y);
		return this;
	}
	,getPoint: function(index) {
		if(index == null) index = 0;
		if(this.points.length == 0) throw new js__$Boot_HaxeError("No points have been added to the path yet.");
		return this.points[index % this.points.length];
	}
	,start: function() {
		if(this.backward) this._index = this.points.length - 1; else this._index = 0;
		flixel_tweens_motion_Motion.prototype.start.call(this);
		return this;
	}
	,update: function() {
		flixel_tweens_motion_Motion.prototype.update.call(this);
		var td;
		var tt;
		if(this.points == null) return;
		if(!this.backward) {
			if(this._index < this.points.length - 1) while(this.scale > this._pointT[this._index + 1]) {
				this._index++;
				if(this._index == this.points.length - 1) {
					this._index -= 1;
					break;
				}
			}
			td = this._pointT[this._index];
			tt = this._pointT[this._index + 1] - td;
			td = (this.scale - td) / tt;
			this._prevPoint = this.points[this._index];
			this._nextPoint = this.points[this._index + 1];
			this.x = this._prevPoint.x + (this._nextPoint.x - this._prevPoint.x) * td;
			this.y = this._prevPoint.y + (this._nextPoint.y - this._prevPoint.y) * td;
		} else {
			if(this._index > 0) while(this.scale < this._pointT[this._index - 1]) {
				this._index -= 1;
				if(this._index == 0) {
					this._index += 1;
					break;
				}
			}
			td = this._pointT[this._index];
			tt = this._pointT[this._index - 1] - td;
			td = (this.scale - td) / tt;
			this._prevPoint = this.points[this._index];
			this._nextPoint = this.points[this._index - 1];
			this.x = this._prevPoint.x + (this._nextPoint.x - this._prevPoint.x) * td;
			this.y = this._prevPoint.y + (this._nextPoint.y - this._prevPoint.y) * td;
		}
		flixel_tweens_motion_Motion.prototype.postUpdate.call(this);
	}
	,updatePath: function() {
		if(this.points.length < 2) throw new js__$Boot_HaxeError("A LinearPath must have at least 2 points to operate.");
		if(this._pointD.length == this._pointT.length) return;
		var i = 0;
		while(i < this.points.length) this._pointT[i] = this._pointD[i++] / this.distance;
	}
	,__class__: flixel_tweens_motion_LinearPath
});
var flixel_tweens_motion_QuadMotion = function(Options) {
	this._controlY = 0;
	this._controlX = 0;
	this._toY = 0;
	this._toX = 0;
	this._fromY = 0;
	this._fromX = 0;
	this._distance = -1;
	flixel_tweens_motion_Motion.call(this,Options);
};
$hxClasses["flixel.tweens.motion.QuadMotion"] = flixel_tweens_motion_QuadMotion;
flixel_tweens_motion_QuadMotion.__name__ = ["flixel","tweens","motion","QuadMotion"];
flixel_tweens_motion_QuadMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_QuadMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_distance: null
	,_fromX: null
	,_fromY: null
	,_toX: null
	,_toY: null
	,_controlX: null
	,_controlY: null
	,setMotion: function(FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration) {
		if(UseDuration == null) UseDuration = true;
		this._distance = -1;
		this.x = this._fromX = FromX;
		this.y = this._fromY = FromY;
		this._controlX = ControlX;
		this._controlY = ControlY;
		this._toX = ToX;
		this._toY = ToY;
		if(UseDuration) this.duration = DurationOrSpeed; else this.duration = this.get_distance() / DurationOrSpeed;
		this.start();
		return this;
	}
	,update: function() {
		flixel_tweens_motion_Motion.prototype.update.call(this);
		this.x = this._fromX * (1 - this.scale) * (1 - this.scale) + this._controlX * 2 * (1 - this.scale) * this.scale + this._toX * this.scale * this.scale;
		this.y = this._fromY * (1 - this.scale) * (1 - this.scale) + this._controlY * 2 * (1 - this.scale) * this.scale + this._toY * this.scale * this.scale;
		if(this.finished) this.postUpdate();
	}
	,get_distance: function() {
		if(this._distance >= 0) return this._distance;
		var a = flixel_util_FlxPoint.get(null,null);
		var b = flixel_util_FlxPoint.get(null,null);
		a.set_x(this.x - 2 * this._controlX + this._toX);
		a.set_y(this.y - 2 * this._controlY + this._toY);
		b.set_x(2 * this._controlX - 2 * this.x);
		b.set_y(2 * this._controlY - 2 * this.y);
		var A = 4 * (a.x * a.x + a.y * a.y);
		var B = 4 * (a.x * b.x + a.y * b.y);
		var C = b.x * b.x + b.y * b.y;
		var ABC = 2 * Math.sqrt(A + B + C);
		var A2 = Math.sqrt(A);
		var A32 = 2 * A * A2;
		var C2 = 2 * Math.sqrt(C);
		var BA = B / A2;
		a.put();
		b.put();
		return (A32 * ABC + A2 * B * (ABC - C2) + (4 * C * A - B * B) * Math.log((2 * A2 + BA + ABC) / (BA + C2))) / (4 * A32);
	}
	,__class__: flixel_tweens_motion_QuadMotion
	,__properties__: $extend(flixel_tweens_motion_Motion.prototype.__properties__,{get_distance:"get_distance"})
});
var flixel_tweens_motion_QuadPath = function(Options) {
	this._updateCurve = true;
	this._numSegs = 0;
	this._index = 0;
	this._speed = 0;
	this._distance = 0;
	flixel_tweens_motion_Motion.call(this,Options);
	this._points = [];
	this._curveT = [];
	this._curveD = [];
};
$hxClasses["flixel.tweens.motion.QuadPath"] = flixel_tweens_motion_QuadPath;
flixel_tweens_motion_QuadPath.__name__ = ["flixel","tweens","motion","QuadPath"];
flixel_tweens_motion_QuadPath.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_QuadPath.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_points: null
	,_distance: null
	,_speed: null
	,_index: null
	,_numSegs: null
	,_updateCurve: null
	,_curveT: null
	,_curveD: null
	,_a: null
	,_b: null
	,_c: null
	,destroy: function() {
		flixel_tweens_motion_Motion.prototype.destroy.call(this);
		var _g = 0;
		var _g1 = this._points;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			point = flixel_util_FlxDestroyUtil.put(point);
		}
		this._a = flixel_util_FlxDestroyUtil.put(this._a);
		this._b = flixel_util_FlxDestroyUtil.put(this._b);
		this._c = flixel_util_FlxDestroyUtil.put(this._c);
	}
	,setMotion: function(DurationOrSpeed,UseDuration) {
		if(UseDuration == null) UseDuration = true;
		this.updatePath();
		if(UseDuration) {
			this.duration = DurationOrSpeed;
			this._speed = this._distance / DurationOrSpeed;
		} else {
			this.duration = this._distance / DurationOrSpeed;
			this._speed = DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,addPoint: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		this._updateCurve = true;
		this._points.push(flixel_util_FlxPoint.get(x,y));
		return this;
	}
	,getPoint: function(index) {
		if(index == null) index = 0;
		if(this._points.length == 0) throw new js__$Boot_HaxeError("No points have been added to the path yet.");
		return this._points[index % this._points.length];
	}
	,start: function() {
		if(this.backward) this._index = this._numSegs - 1; else this._index = 0;
		flixel_tweens_motion_Motion.prototype.start.call(this);
		return this;
	}
	,update: function() {
		flixel_tweens_motion_Motion.prototype.update.call(this);
		var td;
		var tt;
		if(!this.backward && this._points != null) {
			if(this._index < this._numSegs - 1) while(this.scale > this._curveT[this._index + 1]) {
				this._index++;
				if(this._index == this._numSegs - 1) break;
			}
			td = this._curveT[this._index];
			tt = this._curveT[this._index + 1] - td;
			td = (this.scale - td) / tt;
			this._a = this._points[this._index * 2];
			this._b = this._points[this._index * 2 + 1];
			this._c = this._points[this._index * 2 + 2];
			this.x = this._a.x * (1 - td) * (1 - td) + this._b.x * 2 * (1 - td) * td + this._c.x * td * td;
			this.y = this._a.y * (1 - td) * (1 - td) + this._b.y * 2 * (1 - td) * td + this._c.y * td * td;
		} else if(this._points != null) {
			if(this._index > 0) while(this.scale < this._curveT[this._index]) {
				this._index--;
				if(this._index == 0) break;
			}
			td = this._curveT[this._index + 1];
			tt = this._curveT[this._index] - td;
			td = (this.scale - td) / tt;
			this._a = this._points[this._index * 2 + 2];
			this._b = this._points[this._index * 2 + 1];
			this._c = this._points[this._index * 2];
			this.x = this._a.x * (1 - td) * (1 - td) + this._b.x * 2 * (1 - td) * td + this._c.x * td * td;
			this.y = this._a.y * (1 - td) * (1 - td) + this._b.y * 2 * (1 - td) * td + this._c.y * td * td;
		}
		flixel_tweens_motion_Motion.prototype.postUpdate.call(this);
	}
	,updatePath: function() {
		if((this._points.length - 1) % 2 != 0 || this._points.length < 3) throw new js__$Boot_HaxeError("A QuadPath must have at least 3 points to operate and number of points must be a odd.");
		if(!this._updateCurve) return;
		this._updateCurve = false;
		var i = 0;
		var j = 0;
		this._distance = 0;
		this._numSegs = (this._points.length - 1) / 2 | 0;
		while(i < this._numSegs) {
			j = i * 2;
			this._curveD[i] = this.getCurveLength(this._points[j],this._points[j + 1],this._points[j + 2]);
			this._distance += this._curveD[i++];
		}
		i = 0;
		var d = 0;
		while(i < this._numSegs) {
			d += this._curveD[i];
			this._curveT[i++] = d / this._distance;
		}
		this._curveT[this._numSegs - 1] = 1;
		this._curveT.unshift(0);
	}
	,getCurveLength: function(start,control,finish) {
		var a = flixel_util_FlxPoint.get(null,null);
		var b = flixel_util_FlxPoint.get(null,null);
		a.set_x(start.x - 2 * control.x + finish.x);
		a.set_y(start.y - 2 * control.y + finish.y);
		b.set_x(2 * control.x - 2 * start.x);
		b.set_y(2 * control.y - 2 * start.y);
		var A = 4 * (a.x * a.x + a.y * a.y);
		var B = 4 * (a.x * b.x + a.y * b.y);
		var C = b.x * b.x + b.y * b.y;
		var ABC = 2 * Math.sqrt(A + B + C);
		var A2 = Math.sqrt(A);
		var A32 = 2 * A * A2;
		var C2 = 2 * Math.sqrt(C);
		var BA = B / A2;
		a.put();
		b.put();
		return (A32 * ABC + A2 * B * (ABC - C2) + (4 * C * A - B * B) * Math.log((2 * A2 + BA + ABC) / (BA + C2))) / (4 * A32);
	}
	,__class__: flixel_tweens_motion_QuadPath
});
var flixel_util_FlxAngle = function() { };
$hxClasses["flixel.util.FlxAngle"] = flixel_util_FlxAngle;
flixel_util_FlxAngle.__name__ = ["flixel","util","FlxAngle"];
flixel_util_FlxAngle.__properties__ = {get_TO_RAD:"get_TO_RAD",get_TO_DEG:"get_TO_DEG"}
flixel_util_FlxAngle.rotatePoint = function(X,Y,PivotX,PivotY,Angle,point) {
	var sin = 0;
	var cos = 0;
	var radians = Angle * -(Math.PI / 180);
	while(radians < -Math.PI) radians += Math.PI * 2;
	while(radians > Math.PI) radians = radians - Math.PI * 2;
	if(radians < 0) {
		sin = 1.27323954 * radians + .405284735 * radians * radians;
		if(sin < 0) sin = .225 * (sin * -sin - sin) + sin; else sin = .225 * (sin * sin - sin) + sin;
	} else {
		sin = 1.27323954 * radians - 0.405284735 * radians * radians;
		if(sin < 0) sin = .225 * (sin * -sin - sin) + sin; else sin = .225 * (sin * sin - sin) + sin;
	}
	radians += Math.PI / 2;
	if(radians > Math.PI) radians = radians - Math.PI * 2;
	if(radians < 0) {
		cos = 1.27323954 * radians + 0.405284735 * radians * radians;
		if(cos < 0) cos = .225 * (cos * -cos - cos) + cos; else cos = .225 * (cos * cos - cos) + cos;
	} else {
		cos = 1.27323954 * radians - 0.405284735 * radians * radians;
		if(cos < 0) cos = .225 * (cos * -cos - cos) + cos; else cos = .225 * (cos * cos - cos) + cos;
	}
	var dx = X - PivotX;
	var dy = Y - PivotY;
	if(point == null) point = flixel_util_FlxPoint.get(null,null);
	point.set_x(PivotX + cos * dx - sin * dy);
	point.set_y(PivotY - sin * dx - cos * dy);
	return point;
};
flixel_util_FlxAngle.getAngle = function(Point1,Point2) {
	var x = Point2.x - Point1.x;
	var y = Point2.y - Point1.y;
	var angle = 0;
	if(x != 0 || y != 0) {
		var c1 = Math.PI * 0.25;
		var c2 = 3 * c1;
		var ay;
		if(y < 0) ay = -y; else ay = y;
		if(x >= 0) angle = c1 - c1 * ((x - ay) / (x + ay)); else angle = c2 - c1 * ((x + ay) / (ay - x));
		angle = (y < 0?-angle:angle) * (180 / Math.PI);
		if(angle > 90) angle = angle - 270; else angle += 90;
	}
	if(Point1._weak) Point1.put();
	if(Point2._weak) Point2.put();
	return angle;
};
flixel_util_FlxAngle.sinCosGenerator = function(length,sinAmplitude,cosAmplitude,frequency) {
	if(frequency == null) frequency = 1.0;
	if(cosAmplitude == null) cosAmplitude = 1.0;
	if(sinAmplitude == null) sinAmplitude = 1.0;
	var sin = sinAmplitude;
	var cos = cosAmplitude;
	var frq = frequency * Math.PI / length;
	flixel_util_FlxAngle.cosTable = [];
	flixel_util_FlxAngle.sinTable = [];
	var _g = 0;
	while(_g < length) {
		var c = _g++;
		cos -= sin * frq;
		sin += cos * frq;
		flixel_util_FlxAngle.cosTable[c] = cos;
		flixel_util_FlxAngle.sinTable[c] = sin;
	}
};
flixel_util_FlxAngle.wrapAngle = function(angle) {
	if(angle > 180) angle = -180; else if(angle < -180) angle = 180;
	return angle;
};
flixel_util_FlxAngle.angleLimit = function(angle,min,max) {
	if(angle > max) angle = max; else if(angle < min) angle = min;
	return angle;
};
flixel_util_FlxAngle.asDegrees = function(radians) {
	return radians * (180 / Math.PI);
};
flixel_util_FlxAngle.asRadians = function(degrees) {
	return degrees * (Math.PI / 180);
};
flixel_util_FlxAngle.angleBetween = function(SpriteA,SpriteB,AsDegrees) {
	if(AsDegrees == null) AsDegrees = false;
	var dx = SpriteB.x + SpriteB.origin.x - (SpriteA.x + SpriteA.origin.x);
	var dy = SpriteB.y + SpriteB.origin.y - (SpriteA.y + SpriteA.origin.y);
	if(AsDegrees) return flixel_util_FlxAngle.asDegrees(Math.atan2(dy,dx)); else return Math.atan2(dy,dx);
};
flixel_util_FlxAngle.angleBetweenPoint = function(Sprite,Target,AsDegrees) {
	if(AsDegrees == null) AsDegrees = false;
	var dx = Target.x - (Sprite.x + Sprite.origin.x);
	var dy = Target.y - (Sprite.y + Sprite.origin.y);
	if(AsDegrees) return flixel_util_FlxAngle.asDegrees(Math.atan2(dy,dx)); else return Math.atan2(dy,dx);
};
flixel_util_FlxAngle.angleBetweenMouse = function(Object,AsDegrees) {
	if(AsDegrees == null) AsDegrees = false;
	if(Object == null) return 0;
	var p = Object.getScreenXY();
	var dx = flixel_FlxG.mouse.screenX - p.x;
	var dy = flixel_FlxG.mouse.screenY - p.y;
	if(AsDegrees) return flixel_util_FlxAngle.asDegrees(Math.atan2(dy,dx)); else return Math.atan2(dy,dx);
};
flixel_util_FlxAngle.angleBetweenTouch = function(Object,Touch,AsDegrees) {
	if(AsDegrees == null) AsDegrees = false;
	var p = Object.getScreenXY();
	var dx = Touch.screenX - p.x;
	var dy = Touch.screenY - p.y;
	if(AsDegrees) return flixel_util_FlxAngle.asDegrees(Math.atan2(dy,dx)); else return Math.atan2(dy,dx);
};
flixel_util_FlxAngle.getCartesianCoords = function(Radius,Angle,point) {
	var p = point;
	if(p == null) p = flixel_util_FlxPoint.get(null,null);
	p.set_x(Radius * Math.cos(Angle * (Math.PI / 180)));
	p.set_y(Radius * Math.sin(Angle * (Math.PI / 180)));
	return p;
};
flixel_util_FlxAngle.getPolarCoords = function(X,Y,point) {
	var p = point;
	if(p == null) p = flixel_util_FlxPoint.get(null,null);
	p.set_x(Math.sqrt(X * X + Y * Y));
	p.set_y(Math.atan2(Y,X) * (180 / Math.PI));
	return p;
};
flixel_util_FlxAngle.get_TO_DEG = function() {
	return 180 / Math.PI;
};
flixel_util_FlxAngle.get_TO_RAD = function() {
	return Math.PI / 180;
};
var flixel_util_FlxArrayUtil = function() { };
$hxClasses["flixel.util.FlxArrayUtil"] = flixel_util_FlxArrayUtil;
flixel_util_FlxArrayUtil.__name__ = ["flixel","util","FlxArrayUtil"];
flixel_util_FlxArrayUtil.fastSplice_flixel_text_FlxTextFormat = function(array,element) {
	var index = HxOverrides.indexOf(array,element,0);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
};
flixel_util_FlxArrayUtil.setLength_flixel_input_keyboard_FlxKey = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
};
flixel_util_FlxArrayUtil.getRandom_flixel_group_FlxTypedGroup_T = function(Objects,StartIndex,EndIndex) {
	if(EndIndex == null) EndIndex = 0;
	if(StartIndex == null) StartIndex = 0;
	return flixel_util_FlxRandom.getObject_getRandom_T(Objects,StartIndex,EndIndex);
};
flixel_util_FlxArrayUtil.setLength_Int = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
};
flixel_util_FlxArrayUtil.setLength_openfl_geom_Rectangle = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
};
flixel_util_FlxArrayUtil.fastSplice_flixel_tweens_FlxTween = function(array,element) {
	var index = HxOverrides.indexOf(array,element,0);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.fastSplice_flixel_util_FlxTimer = function(array,element) {
	var index = HxOverrides.indexOf(array,element,0);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.fastSplice_flixel_util_FlxPath = function(array,element) {
	var index = HxOverrides.indexOf(array,element,0);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.setLength_flixel_system_replay_FrameRecord = function(array,newLength) {
	if(newLength < 0) return;
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff < 0) {
		diff = -diff;
		var _g = 0;
		while(_g < diff) {
			var i = _g++;
			array.pop();
		}
	}
};
flixel_util_FlxArrayUtil.swapAndPop_fastSplice_T = function(array,index) {
	array[index] = array[array.length - 1];
	array.pop();
	return array;
};
flixel_util_FlxArrayUtil.clearArray = function(array,recursive) {
	if(recursive == null) recursive = false;
	if(array != null) {
		if(!recursive) while(array.length > 0) array.pop(); else while(array.length > 0) {
			var thing = array.pop();
			if((thing instanceof Array) && thing.__enum__ == null) flixel_util_FlxArrayUtil.clearArray(array,recursive);
		}
	}
};
var flixel_util_FlxBitmapDataPool = function() { };
$hxClasses["flixel.util.FlxBitmapDataPool"] = flixel_util_FlxBitmapDataPool;
flixel_util_FlxBitmapDataPool.__name__ = ["flixel","util","FlxBitmapDataPool"];
flixel_util_FlxBitmapDataPool.__properties__ = {set_maxLength:"set_maxLength"}
flixel_util_FlxBitmapDataPool.get = function(w,h,transparent,fillColor,exactSize) {
	if(exactSize == null) exactSize = false;
	if(transparent == null) transparent = true;
	var res = null;
	var node = flixel_util_FlxBitmapDataPool._head;
	while(node != null) {
		var bmd = node.bmd;
		if(bmd.transparent == transparent && bmd.width >= w && bmd.height >= h && (!exactSize || exactSize && bmd.width == w && bmd.height == h)) {
			res = bmd;
			if(node.prev != null) node.prev.next = node.next;
			if(node.next != null) node.next.prev = node.prev;
			if(node == flixel_util_FlxBitmapDataPool._head) flixel_util_FlxBitmapDataPool._head = node.next;
			if(node == flixel_util_FlxBitmapDataPool._tail) flixel_util_FlxBitmapDataPool._tail = node.prev;
			node = null;
			flixel_util_FlxBitmapDataPool.$length--;
			break;
		}
		node = node.next;
	}
	if(res != null) {
		if(fillColor != null) {
			flixel_util_FlxBitmapDataPool._rect.x = 0;
			flixel_util_FlxBitmapDataPool._rect.y = 0;
			flixel_util_FlxBitmapDataPool._rect.width = w;
			flixel_util_FlxBitmapDataPool._rect.height = h;
			res.fillRect(flixel_util_FlxBitmapDataPool._rect,fillColor);
		}
	} else res = new openfl_display_BitmapData(w,h,transparent,fillColor != null?fillColor:-1);
	return res;
};
flixel_util_FlxBitmapDataPool.put = function(bmd) {
	if(flixel_util_FlxBitmapDataPool.$length >= flixel_util_FlxBitmapDataPool.maxLength) {
		var last = flixel_util_FlxBitmapDataPool._tail;
		last.bmd.dispose();
		if(last.prev != null) {
			last.prev.next = null;
			flixel_util_FlxBitmapDataPool._tail = last.prev;
		}
		last = null;
		flixel_util_FlxBitmapDataPool.$length--;
	}
	var node = new flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode(bmd);
	node.next = flixel_util_FlxBitmapDataPool._head;
	if(flixel_util_FlxBitmapDataPool._head == null) flixel_util_FlxBitmapDataPool._head = flixel_util_FlxBitmapDataPool._tail = node; else {
		flixel_util_FlxBitmapDataPool._head = node;
		node.next.prev = node;
	}
	flixel_util_FlxBitmapDataPool.$length++;
};
flixel_util_FlxBitmapDataPool.clear = function() {
	var node = flixel_util_FlxBitmapDataPool._head;
	while(node != null) {
		var bmd = node.bmd;
		bmd.dispose();
		bmd = null;
		node = node.next;
	}
	flixel_util_FlxBitmapDataPool.$length = 0;
	flixel_util_FlxBitmapDataPool._head = flixel_util_FlxBitmapDataPool._tail = null;
};
flixel_util_FlxBitmapDataPool.set_maxLength = function(value) {
	if(flixel_util_FlxBitmapDataPool.maxLength != value) {
		var node = flixel_util_FlxBitmapDataPool._tail;
		while(node != null && flixel_util_FlxBitmapDataPool.$length > value) {
			var bmd = node.bmd;
			bmd.dispose();
			bmd = null;
			node = node.prev;
			flixel_util_FlxBitmapDataPool.$length--;
		}
	}
	return flixel_util_FlxBitmapDataPool.maxLength = value;
};
var flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode = function(bmd,prev,next) {
	this.bmd = bmd;
	this.prev = prev;
	this.next = next;
};
$hxClasses["flixel.util._FlxBitmapDataPool.FlxBitmapDataPoolNode"] = flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode;
flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode.__name__ = ["flixel","util","_FlxBitmapDataPool","FlxBitmapDataPoolNode"];
flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode.prototype = {
	bmd: null
	,prev: null
	,next: null
	,__class__: flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode
};
var flixel_util_FlxCollision = function() { };
$hxClasses["flixel.util.FlxCollision"] = flixel_util_FlxCollision;
flixel_util_FlxCollision.__name__ = ["flixel","util","FlxCollision"];
flixel_util_FlxCollision.pixelPerfectCheck = function(Contact,Target,AlphaTolerance,Camera) {
	if(AlphaTolerance == null) AlphaTolerance = 1;
	var considerRotation = Contact.angle != 0 || Target.angle != 0;
	if(Camera != null) Camera = Camera; else Camera = flixel_FlxG.camera;
	flixel_util_FlxCollision.pointA.x = Contact.x - (Camera.scroll.x * Contact.scrollFactor.x | 0) - Contact.offset.x;
	flixel_util_FlxCollision.pointA.y = Contact.y - (Camera.scroll.y * Contact.scrollFactor.y | 0) - Contact.offset.y;
	flixel_util_FlxCollision.pointB.x = Target.x - (Camera.scroll.x * Target.scrollFactor.x | 0) - Target.offset.x;
	flixel_util_FlxCollision.pointB.y = Target.y - (Camera.scroll.y * Target.scrollFactor.y | 0) - Target.offset.y;
	if(considerRotation) {
		flixel_util_FlxCollision.centerA.setTo(Contact.origin.x,Contact.origin.y);
		flixel_util_FlxCollision.centerB.setTo(Target.origin.x,Target.origin.y);
		flixel_util_FlxCollision.boundsA.x = flixel_util_FlxCollision.pointA.x + flixel_util_FlxCollision.centerA.x - flixel_util_FlxCollision.centerA.get_length();
		flixel_util_FlxCollision.boundsA.y = flixel_util_FlxCollision.pointA.y + flixel_util_FlxCollision.centerA.y - flixel_util_FlxCollision.centerA.get_length();
		flixel_util_FlxCollision.boundsA.width = flixel_util_FlxCollision.centerA.get_length() * 2;
		flixel_util_FlxCollision.boundsA.height = flixel_util_FlxCollision.boundsA.width;
		flixel_util_FlxCollision.boundsB.x = flixel_util_FlxCollision.pointB.x + flixel_util_FlxCollision.centerB.x - flixel_util_FlxCollision.centerB.get_length();
		flixel_util_FlxCollision.boundsB.y = flixel_util_FlxCollision.pointB.y + flixel_util_FlxCollision.centerB.y - flixel_util_FlxCollision.centerB.get_length();
		flixel_util_FlxCollision.boundsB.width = flixel_util_FlxCollision.centerB.get_length() * 2;
		flixel_util_FlxCollision.boundsB.height = flixel_util_FlxCollision.boundsB.width;
	} else {
		flixel_util_FlxCollision.boundsA.x = flixel_util_FlxCollision.pointA.x;
		flixel_util_FlxCollision.boundsA.y = flixel_util_FlxCollision.pointA.y;
		flixel_util_FlxCollision.boundsA.width = Contact.frameWidth;
		flixel_util_FlxCollision.boundsA.height = Contact.frameHeight;
		flixel_util_FlxCollision.boundsB.x = flixel_util_FlxCollision.pointB.x;
		flixel_util_FlxCollision.boundsB.y = flixel_util_FlxCollision.pointB.y;
		flixel_util_FlxCollision.boundsB.width = Target.frameWidth;
		flixel_util_FlxCollision.boundsB.height = Target.frameHeight;
	}
	var intersect = flixel_util_FlxCollision.boundsA.intersection(flixel_util_FlxCollision.boundsB);
	if(intersect.isEmpty() || intersect.width < 1 || intersect.height < 1) return false;
	flixel_util_FlxCollision.matrixA.identity();
	flixel_util_FlxCollision.matrixA.translate(-(intersect.x - flixel_util_FlxCollision.boundsA.x),-(intersect.y - flixel_util_FlxCollision.boundsA.y));
	flixel_util_FlxCollision.matrixB.identity();
	flixel_util_FlxCollision.matrixB.translate(-(intersect.x - flixel_util_FlxCollision.boundsB.x),-(intersect.y - flixel_util_FlxCollision.boundsB.y));
	var testA = Contact.framePixels;
	var testB = Target.framePixels;
	var overlapWidth = intersect.width | 0;
	var overlapHeight = intersect.height | 0;
	if(considerRotation) {
		flixel_util_FlxCollision.testMatrix.identity();
		flixel_util_FlxCollision.testMatrix.translate(-Contact.origin.x,-Contact.origin.y);
		flixel_util_FlxCollision.testMatrix.rotate(Contact.angle * (Math.PI / 180));
		flixel_util_FlxCollision.testMatrix.translate(flixel_util_FlxCollision.boundsA.width / 2,flixel_util_FlxCollision.boundsA.height / 2);
		var testA2 = flixel_util_FlxBitmapDataPool.get(Math.floor(flixel_util_FlxCollision.boundsA.width),Math.floor(flixel_util_FlxCollision.boundsA.height),true,0,false);
		testA2.draw(testA,flixel_util_FlxCollision.testMatrix,null,null,null,false);
		testA = testA2;
		flixel_util_FlxCollision.testMatrix.identity();
		flixel_util_FlxCollision.testMatrix.translate(-Target.origin.x,-Target.origin.y);
		flixel_util_FlxCollision.testMatrix.rotate(Target.angle * (Math.PI / 180));
		flixel_util_FlxCollision.testMatrix.translate(flixel_util_FlxCollision.boundsB.width / 2,flixel_util_FlxCollision.boundsB.height / 2);
		var testB2 = flixel_util_FlxBitmapDataPool.get(Math.floor(flixel_util_FlxCollision.boundsB.width),Math.floor(flixel_util_FlxCollision.boundsB.height),true,0,false);
		testB2.draw(testB,flixel_util_FlxCollision.testMatrix,null,null,null,false);
		testB = testB2;
	}
	flixel_util_FlxCollision.boundsA.x = -flixel_util_FlxCollision.matrixA.tx | 0;
	flixel_util_FlxCollision.boundsA.y = -flixel_util_FlxCollision.matrixA.ty | 0;
	flixel_util_FlxCollision.boundsA.width = overlapWidth;
	flixel_util_FlxCollision.boundsA.height = overlapHeight;
	flixel_util_FlxCollision.boundsB.x = -flixel_util_FlxCollision.matrixB.tx | 0;
	flixel_util_FlxCollision.boundsB.y = -flixel_util_FlxCollision.matrixB.ty | 0;
	flixel_util_FlxCollision.boundsB.width = overlapWidth;
	flixel_util_FlxCollision.boundsB.height = overlapHeight;
	var pixelsA = testA.getPixels(flixel_util_FlxCollision.boundsA);
	var pixelsB = testB.getPixels(flixel_util_FlxCollision.boundsB);
	var hit = false;
	var alphaA = 0;
	var alphaB = 0;
	var overlapPixels = overlapWidth * overlapHeight;
	var alphaIdx = 0;
	var _g1 = 0;
	var _g = Math.ceil(overlapPixels / 2);
	while(_g1 < _g) {
		var i = _g1++;
		alphaIdx = i << 3;
		pixelsA.position = pixelsB.position = alphaIdx;
		alphaA = pixelsA.readUnsignedByte();
		alphaB = pixelsB.readUnsignedByte();
		if(alphaA >= AlphaTolerance && alphaB >= AlphaTolerance) {
			hit = true;
			break;
		}
	}
	if(!hit) {
		var _g11 = 0;
		var _g2 = overlapPixels >> 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			alphaIdx = (i1 << 3) + 4;
			pixelsA.position = pixelsB.position = alphaIdx;
			alphaA = pixelsA.readUnsignedByte();
			alphaB = pixelsB.readUnsignedByte();
			if(alphaA >= AlphaTolerance && alphaB >= AlphaTolerance) {
				hit = true;
				break;
			}
		}
	}
	if(considerRotation) {
		flixel_util_FlxBitmapDataPool.put(testA);
		flixel_util_FlxBitmapDataPool.put(testB);
	}
	return hit;
};
flixel_util_FlxCollision.pixelPerfectPointCheck = function(PointX,PointY,Target,AlphaTolerance) {
	if(AlphaTolerance == null) AlphaTolerance = 1;
	if(flixel_util_FlxMath.pointInCoordinates(PointX,PointY,Math.floor(Target.x),Math.floor(Target.y),Std["int"](Target.get_width()),Std["int"](Target.get_height())) == false) return false;
	var test = Target.framePixels;
	var pixelAlpha = 0;
	pixelAlpha = flixel_util_FlxColorUtil.getAlpha(test.getPixel32(Math.floor(PointX - Target.x),Math.floor(PointY - Target.y)));
	if(pixelAlpha >= AlphaTolerance) return true; else return false;
};
flixel_util_FlxCollision.createCameraWall = function(Camera,Placement,Thickness,AdjustWorldBounds) {
	if(AdjustWorldBounds == null) AdjustWorldBounds = false;
	var left = null;
	var right = null;
	var top = null;
	var bottom = null;
	switch(Placement) {
	case 0:
		left = new flixel_tile_FlxTileblock(Math.floor(Camera.x - Thickness),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		right = new flixel_tile_FlxTileblock(Math.floor(Camera.x + Camera.width),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		top = new flixel_tile_FlxTileblock(Math.floor(Camera.x - Thickness),Math.floor(Camera.y - Thickness),Camera.width + Thickness * 2,Thickness);
		bottom = new flixel_tile_FlxTileblock(Math.floor(Camera.x - Thickness),Camera.height,Camera.width + Thickness * 2,Thickness);
		if(AdjustWorldBounds) flixel_FlxG.worldBounds.set(Camera.x - Thickness,Camera.y - Thickness,Camera.width + Thickness * 2,Camera.height + Thickness * 2);
		break;
	case 1:
		left = new flixel_tile_FlxTileblock(Math.floor(Camera.x),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		right = new flixel_tile_FlxTileblock(Math.floor(Camera.x + Camera.width - Thickness),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		top = new flixel_tile_FlxTileblock(Math.floor(Camera.x),Math.floor(Camera.y),Camera.width,Thickness);
		bottom = new flixel_tile_FlxTileblock(Math.floor(Camera.x),Camera.height - Thickness,Camera.width,Thickness);
		if(AdjustWorldBounds) flixel_FlxG.worldBounds.set(Camera.x,Camera.y,Camera.width,Camera.height);
		break;
	}
	var result = new flixel_group_FlxGroup(4);
	result.add(left);
	result.add(right);
	result.add(top);
	result.add(bottom);
	return result;
};
var flixel_util_FlxColor = function() { };
$hxClasses["flixel.util.FlxColor"] = flixel_util_FlxColor;
flixel_util_FlxColor.__name__ = ["flixel","util","FlxColor"];
var flixel_util_FlxColorUtil = function() { };
$hxClasses["flixel.util.FlxColorUtil"] = flixel_util_FlxColorUtil;
flixel_util_FlxColorUtil.__name__ = ["flixel","util","FlxColorUtil"];
flixel_util_FlxColorUtil.makeFromARGB = function(Alpha,Red,Green,Blue) {
	if(Alpha == null) Alpha = 1.0;
	return (((Alpha > 1?Alpha:Alpha * 255) | 0) & 255) << 24 | (Red & 255) << 16 | (Green & 255) << 8 | Blue & 255;
};
flixel_util_FlxColorUtil.makeFromHSBA = function(Hue,Saturation,Brightness,Alpha) {
	if(Alpha == null) Alpha = 1.0;
	var red;
	var green;
	var blue;
	if(Saturation == 0.0) {
		red = Brightness;
		green = Brightness;
		blue = Brightness;
	} else {
		if(Hue == 360) Hue = 0;
		var slice = Hue / 60 | 0;
		var hf = Hue / 60 - slice;
		var aa = Brightness * (1 - Saturation);
		var bb = Brightness * (1 - Saturation * hf);
		var cc = Brightness * (1 - Saturation * (1.0 - hf));
		switch(slice) {
		case 0:
			red = Brightness;
			green = cc;
			blue = aa;
			break;
		case 1:
			red = bb;
			green = Brightness;
			blue = aa;
			break;
		case 2:
			red = aa;
			green = Brightness;
			blue = cc;
			break;
		case 3:
			red = aa;
			green = bb;
			blue = Brightness;
			break;
		case 4:
			red = cc;
			green = aa;
			blue = Brightness;
			break;
		case 5:
			red = Brightness;
			green = aa;
			blue = bb;
			break;
		default:
			red = 0;
			green = 0;
			blue = 0;
		}
	}
	return (((Alpha > 1?Alpha:Alpha * 255) | 0) & 255) << 24 | (red * 255 | 0) << 16 | (green * 255 | 0) << 8 | (blue * 255 | 0);
};
flixel_util_FlxColorUtil.getARGB = function(Color,Results) {
	var red = Color >> 16 & 255;
	var green = Color >> 8 & 255;
	var blue = Color & 255;
	var alpha = flixel_util_FlxMath.roundDecimal((Color >> 24 & 255) / 255,4);
	if(Results != null) Results = { red : red, green : green, blue : blue, alpha : alpha};
	return { red : red, green : green, blue : blue, alpha : alpha};
};
flixel_util_FlxColorUtil.getHSBA = function(Color,Results) {
	var hue;
	var saturation;
	var brightness;
	var alpha;
	var red = (Color >> 16 & 255) / 255;
	var green = (Color >> 8 & 255) / 255;
	var blue = (Color & 255) / 255;
	var m;
	if(red > green) m = red; else m = green;
	var dmax;
	if(m > blue) dmax = m; else dmax = blue;
	if(red > green) m = green; else m = red;
	var dmin;
	if(m > blue) dmin = blue; else dmin = m;
	var range = dmax - dmin;
	brightness = flixel_util_FlxMath.roundDecimal(dmax,4);
	saturation = 0;
	hue = 0;
	if(dmax != 0) saturation = flixel_util_FlxMath.roundDecimal(range / dmax,4);
	if(saturation != 0) {
		if(red == dmax) hue = (green - blue) / range; else if(green == dmax) hue = 2 + (blue - red) / range; else if(blue == dmax) hue = 4 + (red - green) / range;
		hue *= 60;
		if(hue < 0) hue += 360;
	}
	alpha = flixel_util_FlxMath.roundDecimal((Color >> 24 & 255) / 255,4);
	if(Results != null) Results = { hue : hue | 0, brightness : brightness, saturation : saturation, alpha : alpha};
	return { hue : hue | 0, brightness : brightness, saturation : saturation, alpha : alpha};
};
flixel_util_FlxColorUtil.getAlpha = function(Color) {
	return Color >> 24 & 255;
};
flixel_util_FlxColorUtil.getAlphaFloat = function(Color) {
	var f = Color >> 24 & 255;
	return f / 255;
};
flixel_util_FlxColorUtil.getRed = function(Color) {
	return Color >> 16 & 255;
};
flixel_util_FlxColorUtil.getGreen = function(Color) {
	return Color >> 8 & 255;
};
flixel_util_FlxColorUtil.getBlue = function(Color) {
	return Color & 255;
};
flixel_util_FlxColorUtil.getRandomColor = function(Min,Max,Alpha) {
	if(Alpha == null) Alpha = 255;
	if(Max == null) Max = 255;
	if(Min == null) Min = 0;
	return flixel_util_FlxRandom.color(Min,Max,Alpha);
};
flixel_util_FlxColorUtil.getColor32 = function(Alpha,Red,Green,Blue) {
	return Alpha << 24 | Red << 16 | Green << 8 | Blue;
};
flixel_util_FlxColorUtil.getColor24 = function(Red,Green,Blue) {
	return Red << 16 | Green << 8 | Blue;
};
flixel_util_FlxColorUtil.getHSVColorWheel = function(Alpha) {
	if(Alpha == null) Alpha = 255;
	var colors = [];
	var _g = 0;
	while(_g < 360) {
		var c = _g++;
		colors[c] = flixel_util_FlxColorUtil.HSVtoARGB(c,1.0,1.0,Alpha);
	}
	return colors;
};
flixel_util_FlxColorUtil.getComplementHarmony = function(Color) {
	var hsv = flixel_util_FlxColorUtil.RGBtoHSV(Color);
	var opposite = flixel_util_FlxMath.wrapValue(hsv.hue | 0,180,359);
	return flixel_util_FlxColorUtil.HSVtoARGB(opposite,1.0,1.0);
};
flixel_util_FlxColorUtil.getAnalogousHarmony = function(Color,Threshold) {
	if(Threshold == null) Threshold = 30;
	var hsv = flixel_util_FlxColorUtil.RGBtoHSV(Color);
	if(Threshold > 359 || Threshold < 0) null;
	var warmer = flixel_util_FlxMath.wrapValue(hsv.hue | 0,359 - Threshold,359);
	var colder = flixel_util_FlxMath.wrapValue(hsv.hue | 0,Threshold,359);
	return { color1 : Color, color2 : flixel_util_FlxColorUtil.HSVtoARGB(warmer,1.0,1.0), color3 : flixel_util_FlxColorUtil.HSVtoARGB(colder,1.0,1.0), hue1 : hsv.hue | 0, hue2 : warmer, hue3 : colder};
};
flixel_util_FlxColorUtil.getSplitComplementHarmony = function(Color,Threshold) {
	if(Threshold == null) Threshold = 30;
	var hsv = flixel_util_FlxColorUtil.RGBtoHSV(Color);
	if(Threshold >= 359 || Threshold <= 0) null;
	var opposite = flixel_util_FlxMath.wrapValue(hsv.hue | 0,180,359);
	var warmer = flixel_util_FlxMath.wrapValue(hsv.hue | 0,opposite - Threshold,359);
	var colder = flixel_util_FlxMath.wrapValue(hsv.hue | 0,opposite + Threshold,359);
	return { color1 : Color, color2 : flixel_util_FlxColorUtil.HSVtoARGB(warmer,hsv.saturation,hsv.value), color3 : flixel_util_FlxColorUtil.HSVtoARGB(colder,hsv.saturation,hsv.value), hue1 : hsv.hue | 0, hue2 : warmer, hue3 : colder};
};
flixel_util_FlxColorUtil.getTriadicHarmony = function(Color) {
	var hsv = flixel_util_FlxColorUtil.RGBtoHSV(Color);
	var triadic1 = flixel_util_FlxMath.wrapValue(hsv.hue | 0,120,359);
	var triadic2 = flixel_util_FlxMath.wrapValue(triadic1,120,359);
	return { color1 : Color, color2 : flixel_util_FlxColorUtil.HSVtoARGB(triadic1,1.0,1.0), color3 : flixel_util_FlxColorUtil.HSVtoARGB(triadic2,1.0,1.0)};
};
flixel_util_FlxColorUtil.getColorInfo = function(Color) {
	var argb = flixel_util_FlxColorUtil.getARGB(Color,null);
	var hsl = flixel_util_FlxColorUtil.RGBtoHSV(Color);
	var result = flixel_util_FlxColorUtil.ARGBtoHexString(Color) + "\n";
	result += "Alpha: " + argb.alpha + " Red: " + argb.red + " Green: " + argb.green + " Blue: " + argb.blue + "\n";
	result += "Hue: " + hsl.hue + " Saturation: " + hsl.saturation + " Lightnes: " + hsl.lightness;
	return result;
};
flixel_util_FlxColorUtil.ARGBtoHexString = function(Color) {
	var argb = flixel_util_FlxColorUtil.getARGB(Color,null);
	return "0x" + flixel_util_FlxColorUtil.colorToHexString(argb.alpha | 0) + flixel_util_FlxColorUtil.colorToHexString(argb.red) + flixel_util_FlxColorUtil.colorToHexString(argb.green) + flixel_util_FlxColorUtil.colorToHexString(argb.blue);
};
flixel_util_FlxColorUtil.ARGBtoWebString = function(Color) {
	var argb = flixel_util_FlxColorUtil.getARGB(Color,null);
	return "#" + flixel_util_FlxColorUtil.colorToHexString(argb.red) + flixel_util_FlxColorUtil.colorToHexString(argb.green) + flixel_util_FlxColorUtil.colorToHexString(argb.blue);
};
flixel_util_FlxColorUtil.colorToHexString = function(Color) {
	var digits = "0123456789ABCDEF";
	var lsd = Color % 16;
	var msd = (Color - lsd) / 16;
	return digits.charAt(msd | 0) + digits.charAt(lsd | 0);
};
flixel_util_FlxColorUtil.HSVtoARGB = function(H,S,V,Alpha) {
	if(Alpha == null) Alpha = 255;
	var result = 0;
	if(S == 0.0) result = Alpha << 24 | (V * 255 | 0) << 16 | (V * 255 | 0) << 8 | (V * 255 | 0); else {
		H = H / 60.0;
		var f = H - (H | 0);
		var p = V * (1.0 - S);
		var q = V * (1.0 - S * f);
		var t = V * (1.0 - S * (1.0 - f));
		var _g = H | 0;
		switch(_g) {
		case 0:
			result = Alpha << 24 | (V * 255 | 0) << 16 | (t * 255 | 0) << 8 | (p * 255 | 0);
			break;
		case 1:
			result = Alpha << 24 | (q * 255 | 0) << 16 | (V * 255 | 0) << 8 | (p * 255 | 0);
			break;
		case 2:
			result = Alpha << 24 | (p * 255 | 0) << 16 | (V * 255 | 0) << 8 | (t * 255 | 0);
			break;
		case 3:
			result = Alpha << 24 | (p * 255 | 0) << 16 | (q * 255 | 0) << 8 | (V * 255 | 0);
			break;
		case 4:
			result = Alpha << 24 | (t * 255 | 0) << 16 | (p * 255 | 0) << 8 | (V * 255 | 0);
			break;
		case 5:
			result = Alpha << 24 | (V * 255 | 0) << 16 | (p * 255 | 0) << 8 | (q * 255 | 0);
			break;
		default:
			null;
		}
	}
	return result;
};
flixel_util_FlxColorUtil.RGBtoHSV = function(Color) {
	var rgb = flixel_util_FlxColorUtil.getARGB(Color,null);
	var red = rgb.red / 255;
	var green = rgb.green / 255;
	var blue = rgb.blue / 255;
	var min = Math.min(red,Math.min(green,blue));
	var max = Math.max(red,Math.max(green,blue));
	var delta = max - min;
	var lightness = (max + min) / 2;
	var hue = 0;
	var saturation;
	if(delta == 0) {
		hue = 0;
		saturation = 0;
	} else {
		if(lightness < 0.5) saturation = delta / (max + min); else saturation = delta / (2 - max - min);
		var delta_r = ((max - red) / 6 + delta / 2) / delta;
		var delta_g = ((max - green) / 6 + delta / 2) / delta;
		var delta_b = ((max - blue) / 6 + delta / 2) / delta;
		if(red == max) hue = delta_b - delta_g; else if(green == max) hue = 0.33333333333333331 + delta_r - delta_b; else if(blue == max) hue = 0.66666666666666663 + delta_g - delta_r;
		if(hue < 0) hue += 1;
		if(hue > 1) hue -= 1;
	}
	hue *= 360;
	hue = Math.round(hue);
	return { hue : hue, saturation : saturation, lightness : lightness, value : lightness};
};
flixel_util_FlxColorUtil.ARGBtoRGB = function(Color) {
	return (Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255;
};
flixel_util_FlxColorUtil.interpolateColor = function(Color1,Color2,Steps,CurrentStep,Alpha) {
	if(Alpha == null) Alpha = 255;
	var src1 = flixel_util_FlxColorUtil.getARGB(Color1,null);
	var src2 = flixel_util_FlxColorUtil.getARGB(Color2,null);
	var r = (src2.red - src1.red) * CurrentStep / Steps + src1.red | 0;
	var g = (src2.green - src1.green) * CurrentStep / Steps + src1.green | 0;
	var b = (src2.blue - src1.blue) * CurrentStep / Steps + src1.blue | 0;
	return Alpha << 24 | r << 16 | g << 8 | b;
};
flixel_util_FlxColorUtil.interpolateColorWithRGB = function(Color,R2,G2,B2,Steps,CurrentStep) {
	var src = flixel_util_FlxColorUtil.getARGB(Color,null);
	var r = (R2 - src.red) * CurrentStep / Steps + src.red | 0;
	var g = (G2 - src.green) * CurrentStep / Steps + src.green | 0;
	var b = (B2 - src.blue) * CurrentStep / Steps + src.blue | 0;
	return r << 16 | g << 8 | b;
};
flixel_util_FlxColorUtil.interpolateRGB = function(R1,G1,B1,R2,G2,B2,Steps,CurrentStep) {
	var r = (R2 - R1) * CurrentStep / Steps + R1 | 0;
	var g = (G2 - G1) * CurrentStep / Steps + G1 | 0;
	var b = (B2 - B1) * CurrentStep / Steps + B1 | 0;
	return r << 16 | g << 8 | b;
};
flixel_util_FlxColorUtil.darken = function(Color,Factor) {
	if(Factor == null) Factor = 0.2;
	flixel_util_FlxMath.bound(Factor,0,1);
	var r = Color >> 16 & 255;
	var g = Color >> 8 & 255;
	var b = Color & 255;
	var a = flixel_util_FlxColorUtil.getAlphaFloat(Color);
	Factor = 1 - Factor;
	r = r * Factor | 0;
	g = g * Factor | 0;
	b = b * Factor | 0;
	return (((a > 1?a:a * 255) | 0) & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
flixel_util_FlxColorUtil.brighten = function(Color,Factor) {
	if(Factor == null) Factor = 0.2;
	flixel_util_FlxMath.bound(Factor,0,1);
	var r = Color >> 16 & 255;
	var g = Color >> 8 & 255;
	var b = Color & 255;
	var a = flixel_util_FlxColorUtil.getAlphaFloat(Color);
	r += (255 - r) * Factor | 0;
	g += (255 - g) * Factor | 0;
	b += (255 - b) * Factor | 0;
	return (((a > 1?a:a * 255) | 0) & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
var flixel_util_FlxDestroyUtil = function() { };
$hxClasses["flixel.util.FlxDestroyUtil"] = flixel_util_FlxDestroyUtil;
flixel_util_FlxDestroyUtil.__name__ = ["flixel","util","FlxDestroyUtil"];
flixel_util_FlxDestroyUtil.destroy = function(object) {
	if(object != null) object.destroy();
	return null;
};
flixel_util_FlxDestroyUtil.destroyArray = function(array) {
	if(array != null) while(array.length > 0) flixel_util_FlxDestroyUtil.destroy(array.pop());
	return null;
};
flixel_util_FlxDestroyUtil.put = function(object) {
	if(object != null) object.put();
	return null;
};
flixel_util_FlxDestroyUtil.putArray = function(array) {
	if(array != null) while(array.length > 0) flixel_util_FlxDestroyUtil.put(array.pop());
	return null;
};
flixel_util_FlxDestroyUtil.dispose = function(Bitmap) {
	if(Bitmap != null) Bitmap.dispose();
	return null;
};
var flixel_util_FlxMath = function() { };
$hxClasses["flixel.util.FlxMath"] = flixel_util_FlxMath;
flixel_util_FlxMath.__name__ = ["flixel","util","FlxMath"];
flixel_util_FlxMath.roundDecimal = function(Value,Precision) {
	var mult = 1;
	var _g = 0;
	while(_g < Precision) {
		var i = _g++;
		mult *= 10;
	}
	return Math.round(Value * mult) / mult;
};
flixel_util_FlxMath.bound = function(Value,Min,Max) {
	var lowerBound;
	if(Value < Min) lowerBound = Min; else lowerBound = Value;
	if(lowerBound > Max) return Max; else return lowerBound;
};
flixel_util_FlxMath.lerp = function(Min,Max,Ratio) {
	return Min + Ratio * (Max - Min);
};
flixel_util_FlxMath.inBounds = function(Value,Min,Max) {
	return Value > Min && Value < Max;
};
flixel_util_FlxMath.isOdd = function(n) {
	if(((n | 0) & 1) != 0) return true; else return false;
};
flixel_util_FlxMath.isEven = function(n) {
	if(((n | 0) & 1) != 0) return false; else return true;
};
flixel_util_FlxMath.numericComparison = function(num1,num2) {
	if(num2 > num1) return -1; else if(num1 > num2) return 1;
	return 0;
};
flixel_util_FlxMath.pointInCoordinates = function(pointX,pointY,rectX,rectY,rectWidth,rectHeight) {
	if(pointX >= rectX && pointX <= rectX + rectWidth) {
		if(pointY >= rectY && pointY <= rectY + rectHeight) return true;
	}
	return false;
};
flixel_util_FlxMath.pointInFlxRect = function(pointX,pointY,rect) {
	if(pointX >= rect.x && pointX <= rect.x + rect.width && pointY >= rect.y && pointY <= rect.y + rect.height) return true;
	return false;
};
flixel_util_FlxMath.mouseInFlxRect = function(useWorldCoords,rect) {
	if(rect == null) return true;
	if(useWorldCoords) return flixel_util_FlxMath.pointInFlxRect(Math.floor(flixel_FlxG.mouse.x),Math.floor(flixel_FlxG.mouse.y),rect); else return flixel_util_FlxMath.pointInFlxRect(flixel_FlxG.mouse.screenX,flixel_FlxG.mouse.screenY,rect);
};
flixel_util_FlxMath.pointInRectangle = function(pointX,pointY,rect) {
	if(pointX >= rect.x && pointX <= rect.get_right() && pointY >= rect.y && pointY <= rect.get_bottom()) return true;
	return false;
};
flixel_util_FlxMath.maxAdd = function(value,amount,max,min) {
	if(min == null) min = 0;
	value += amount;
	if(value > max) value = max; else if(value <= min) value = min;
	return value;
};
flixel_util_FlxMath.wrapValue = function(value,amount,max) {
	var diff;
	value = Std["int"](Math.abs(value));
	amount = Std["int"](Math.abs(amount));
	max = Std["int"](Math.abs(max));
	diff = (value + amount) % max;
	return diff;
};
flixel_util_FlxMath.dotProduct = function(ax,ay,bx,by) {
	return ax * bx + ay * by;
};
flixel_util_FlxMath.vectorLength = function(dx,dy) {
	return Math.sqrt(dx * dx + dy * dy);
};
flixel_util_FlxMath.getDistance = function(Point1,Point2) {
	var dx = Point1.x - Point2.x;
	var dy = Point1.y - Point2.y;
	if(Point1._weak) Point1.put();
	if(Point2._weak) Point2.put();
	return Math.sqrt(dx * dx + dy * dy);
};
flixel_util_FlxMath.distanceBetween = function(SpriteA,SpriteB) {
	var dx = SpriteA.x + SpriteA.origin.x - (SpriteB.x + SpriteB.origin.x);
	var dy = SpriteA.y + SpriteA.origin.y - (SpriteB.y + SpriteB.origin.y);
	return Std["int"](Math.sqrt(dx * dx + dy * dy));
};
flixel_util_FlxMath.isDistanceWithin = function(SpriteA,SpriteB,Distance,IncludeEqual) {
	if(IncludeEqual == null) IncludeEqual = false;
	var dx = SpriteA.x + SpriteA.origin.x - (SpriteB.x + SpriteB.origin.x);
	var dy = SpriteA.y + SpriteA.origin.y - (SpriteB.y + SpriteB.origin.y);
	if(IncludeEqual) return dx * dx + dy * dy <= Distance * Distance; else return dx * dx + dy * dy < Distance * Distance;
};
flixel_util_FlxMath.distanceToPoint = function(Sprite,Target) {
	var dx = Sprite.x + Sprite.origin.x - Target.x;
	var dy = Sprite.y + Sprite.origin.y - Target.y;
	if(Target._weak) Target.put();
	return Std["int"](Math.sqrt(dx * dx + dy * dy));
};
flixel_util_FlxMath.isDistanceToPointWithin = function(Sprite,Target,Distance,IncludeEqual) {
	if(IncludeEqual == null) IncludeEqual = false;
	var dx = Sprite.x + Sprite.origin.x - Target.x;
	var dy = Sprite.y + Sprite.origin.y - Target.y;
	if(Target._weak) Target.put();
	if(IncludeEqual) return dx * dx + dy * dy <= Distance * Distance; else return dx * dx + dy * dy < Distance * Distance;
};
flixel_util_FlxMath.distanceToMouse = function(Sprite) {
	var dx = Sprite.x + Sprite.origin.x - flixel_FlxG.mouse.screenX;
	var dy = Sprite.y + Sprite.origin.y - flixel_FlxG.mouse.screenY;
	return Std["int"](Math.sqrt(dx * dx + dy * dy));
};
flixel_util_FlxMath.isDistanceToMouseWithin = function(Sprite,Distance,IncludeEqual) {
	if(IncludeEqual == null) IncludeEqual = false;
	var dx = Sprite.x + Sprite.origin.x - flixel_FlxG.mouse.screenX;
	var dy = Sprite.y + Sprite.origin.y - flixel_FlxG.mouse.screenY;
	if(IncludeEqual) return dx * dx + dy * dy <= Distance * Distance; else return dx * dx + dy * dy < Distance * Distance;
};
flixel_util_FlxMath.distanceToTouch = function(Sprite,Touch) {
	var dx = Sprite.x + Sprite.origin.x - Touch.screenX;
	var dy = Sprite.y + Sprite.origin.y - Touch.screenY;
	return Std["int"](Math.sqrt(dx * dx + dy * dy));
};
flixel_util_FlxMath.isDistanceToTouchWithin = function(Sprite,Touch,Distance,IncludeEqual) {
	if(IncludeEqual == null) IncludeEqual = false;
	var dx = Sprite.x + Sprite.origin.x - Touch.screenX;
	var dy = Sprite.y + Sprite.origin.y - Touch.screenY;
	if(IncludeEqual) return dx * dx + dy * dy <= Distance * Distance; else return dx * dx + dy * dy < Distance * Distance;
};
flixel_util_FlxMath.getDecimals = function(Number) {
	var helperArray = (Number == null?"null":"" + Number).split(".");
	var decimals = 0;
	if(helperArray.length > 1) decimals = helperArray[1].length;
	return decimals;
};
flixel_util_FlxMath.equal = function(aValueA,aValueB,aDiff) {
	if(aDiff == null) aDiff = 0.00001;
	return Math.abs(aValueA - aValueB) <= aDiff;
};
flixel_util_FlxMath.signOf = function(f) {
	if(f < 0) return -1; else return 1;
};
flixel_util_FlxMath.sameSign = function(f1,f2) {
	return (f1 < 0?-1:1) == (f2 < 0?-1:1);
};
var flixel_util_FlxCallbackPoint = function(setXCallback,setYCallback,setXYCallback) {
	flixel_util_FlxPoint.call(this);
	this._setXCallback = setXCallback;
	this._setYCallback = setXYCallback;
	this._setXYCallback = setXYCallback;
	if(this._setXCallback != null) {
		if(this._setYCallback == null) this._setYCallback = setXCallback;
		if(this._setXYCallback == null) this._setXYCallback = setXCallback;
	}
};
$hxClasses["flixel.util.FlxCallbackPoint"] = flixel_util_FlxCallbackPoint;
flixel_util_FlxCallbackPoint.__name__ = ["flixel","util","FlxCallbackPoint"];
flixel_util_FlxCallbackPoint.__super__ = flixel_util_FlxPoint;
flixel_util_FlxCallbackPoint.prototype = $extend(flixel_util_FlxPoint.prototype,{
	_setXCallback: null
	,_setYCallback: null
	,_setXYCallback: null
	,set: function(X,Y) {
		if(Y == null) Y = 0;
		if(X == null) X = 0;
		flixel_util_FlxPoint.prototype.set.call(this,X,Y);
		if(this._setXYCallback != null) this._setXYCallback(this);
		return this;
	}
	,set_x: function(Value) {
		flixel_util_FlxPoint.prototype.set_x.call(this,Value);
		if(this._setXCallback != null) this._setXCallback(this);
		return Value;
	}
	,set_y: function(Value) {
		flixel_util_FlxPoint.prototype.set_y.call(this,Value);
		if(this._setYCallback != null) this._setYCallback(this);
		return Value;
	}
	,destroy: function() {
		flixel_util_FlxPoint.prototype.destroy.call(this);
		this._setXCallback = null;
		this._setYCallback = null;
		this._setXYCallback = null;
	}
	,put: function() {
	}
	,__class__: flixel_util_FlxCallbackPoint
});
var flixel_util_FlxRandom = function() { };
$hxClasses["flixel.util.FlxRandom"] = flixel_util_FlxRandom;
flixel_util_FlxRandom.__name__ = ["flixel","util","FlxRandom"];
flixel_util_FlxRandom.__properties__ = {set_globalSeed:"set_globalSeed"}
flixel_util_FlxRandom.getObject_getRandom_T = function(Objects,StartIndex,EndIndex) {
	if(EndIndex == null) EndIndex = 0;
	if(StartIndex == null) StartIndex = 0;
	var selected = null;
	if(Objects.length != 0) {
		if(StartIndex < 0) StartIndex = 0;
		if(EndIndex < StartIndex) {
			StartIndex = StartIndex + EndIndex;
			EndIndex = StartIndex - EndIndex;
			StartIndex = StartIndex - EndIndex;
		}
		if(EndIndex <= 0 || EndIndex > Objects.length - 1) EndIndex = Objects.length - 1;
		selected = Objects[flixel_util_FlxRandom.intRanged(StartIndex,EndIndex)];
	}
	return selected;
};
flixel_util_FlxRandom.shuffleArray_shuffle_T = function(Objects,HowManyTimes) {
	HowManyTimes = Std["int"](Math.max(HowManyTimes,0));
	var tempObject = null;
	var _g = 0;
	while(_g < HowManyTimes) {
		var i = _g++;
		flixel_util_FlxRandom._intHelper2 = flixel_util_FlxRandom.intRanged(0,Objects.length - 1);
		flixel_util_FlxRandom._intHelper3 = flixel_util_FlxRandom.intRanged(0,Objects.length - 1);
		tempObject = Objects[flixel_util_FlxRandom._intHelper2];
		Objects[flixel_util_FlxRandom._intHelper2] = Objects[flixel_util_FlxRandom._intHelper3];
		Objects[flixel_util_FlxRandom._intHelper3] = tempObject;
	}
	return Objects;
};
flixel_util_FlxRandom.set_globalSeed = function(NewSeed) {
	if(NewSeed < 1) NewSeed = 1;
	if(NewSeed > 2147483647) NewSeed = 2147483647;
	flixel_util_FlxRandom._internalSeed = NewSeed;
	flixel_util_FlxRandom.globalSeed = NewSeed;
	return flixel_util_FlxRandom.globalSeed;
};
flixel_util_FlxRandom.updateStateSeed = function() {
	return flixel_util_FlxRandom._stateSeed = flixel_util_FlxRandom._internalSeed;
};
flixel_util_FlxRandom.updateRecordingSeed = function(StandardMode) {
	if(StandardMode == null) StandardMode = true;
	return flixel_util_FlxRandom._recordingSeed = flixel_util_FlxRandom.set_globalSeed(StandardMode?flixel_util_FlxRandom.globalSeed:flixel_util_FlxRandom._stateSeed);
};
flixel_util_FlxRandom.getRecordingSeed = function() {
	return flixel_util_FlxRandom._recordingSeed;
};
flixel_util_FlxRandom.resetGlobalSeed = function() {
	return flixel_util_FlxRandom.set_globalSeed(Std["int"](Math.random() * 2147483647));
};
flixel_util_FlxRandom["int"] = function() {
	return flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647;
};
flixel_util_FlxRandom["float"] = function() {
	return (flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647;
};
flixel_util_FlxRandom.intRanged = function(Min,Max,Excludes) {
	if(Max == null) Max = 2147483647;
	if(Min == null) Min = 0;
	if(Min == Max) flixel_util_FlxRandom._intHelper = Min; else {
		if(Min > Max) {
			Min = Min + Max;
			Max = Min - Max;
			Min = Min - Max;
		}
		if(Excludes == null) flixel_util_FlxRandom._intHelper = Math.floor(Min + (flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * (Max - Min + 1)); else do flixel_util_FlxRandom._intHelper = Math.floor(Min + (flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * (Max - Min + 1)); while(HxOverrides.indexOf(Excludes,flixel_util_FlxRandom._intHelper,0) >= 0);
	}
	return flixel_util_FlxRandom._intHelper;
};
flixel_util_FlxRandom.floatRanged = function(Min,Max,Excludes) {
	if(Max == null) Max = 1;
	if(Min == null) Min = 0;
	if(Min == Max) flixel_util_FlxRandom._floatHelper = Min; else {
		if(Min > Max) {
			Min = Min + Max;
			Max = Min - Max;
			Min = Min - Max;
		}
		if(Excludes == null) flixel_util_FlxRandom._floatHelper = Min + (flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * (Max - Min); else do flixel_util_FlxRandom._floatHelper = Min + (flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647) / 2147483647 * (Max - Min); while(HxOverrides.indexOf(Excludes,flixel_util_FlxRandom._floatHelper,0) >= 0);
	}
	return flixel_util_FlxRandom._floatHelper;
};
flixel_util_FlxRandom.chanceRoll = function(Chance) {
	if(Chance == null) Chance = 50;
	return flixel_util_FlxRandom.floatRanged(0,100) < Chance;
};
flixel_util_FlxRandom.sign = function(Chance) {
	if(Chance == null) Chance = 50;
	if(flixel_util_FlxRandom.floatRanged(0,100) < Chance) return 1; else return -1;
};
flixel_util_FlxRandom.weightedPick = function(WeightsArray) {
	flixel_util_FlxRandom._floatHelper = 0;
	var _g = 0;
	while(_g < WeightsArray.length) {
		var i = WeightsArray[_g];
		++_g;
		flixel_util_FlxRandom._floatHelper += i;
	}
	flixel_util_FlxRandom._floatHelper = flixel_util_FlxRandom.floatRanged(0,flixel_util_FlxRandom._floatHelper);
	var _g1 = 0;
	var _g2 = WeightsArray.length;
	while(_g1 < _g2) {
		var i1 = _g1++;
		if(flixel_util_FlxRandom._floatHelper < WeightsArray[i1]) {
			flixel_util_FlxRandom._intHelper = i1;
			break;
		}
		flixel_util_FlxRandom._floatHelper -= WeightsArray[i1];
	}
	return flixel_util_FlxRandom._intHelper;
};
flixel_util_FlxRandom.color = function(Min,Max,Alpha,GreyScale) {
	if(GreyScale == null) GreyScale = false;
	if(Alpha == null) Alpha = 255;
	if(Max == null) Max = 255;
	if(Min == null) Min = 0;
	if(Min < 0) Min = 0;
	if(Min > 255) Min = 255;
	if(Max < 0) Max = 0;
	if(Max > 255) Max = 255;
	if(Alpha < 0) Alpha = 0;
	if(Alpha > 255) Alpha = 255;
	if(Max < Min) {
		Min = Min + Max;
		Max = Min - Max;
		Min = Min - Max;
	}
	flixel_util_FlxRandom._red = flixel_util_FlxRandom.intRanged(Min,Max);
	if(GreyScale) flixel_util_FlxRandom._green = flixel_util_FlxRandom._red; else flixel_util_FlxRandom._green = flixel_util_FlxRandom.intRanged(Min,Max);
	if(GreyScale) flixel_util_FlxRandom._blue = flixel_util_FlxRandom._red; else flixel_util_FlxRandom._blue = flixel_util_FlxRandom.intRanged(Min,Max);
	return (((Alpha > 1?Alpha:Alpha * 255) | 0) & 255) << 24 | (flixel_util_FlxRandom._red & 255) << 16 | (flixel_util_FlxRandom._green & 255) << 8 | flixel_util_FlxRandom._blue & 255;
};
flixel_util_FlxRandom.colorExt = function(RedMinimum,RedMaximum,GreenMinimum,GreenMaximum,BlueMinimum,BlueMaximum,AlphaMinimum,AlphaMaximum) {
	if(AlphaMaximum == null) AlphaMaximum = -1;
	if(AlphaMinimum == null) AlphaMinimum = -1;
	if(BlueMaximum == null) BlueMaximum = 255;
	if(BlueMinimum == null) BlueMinimum = 0;
	if(GreenMaximum == null) GreenMaximum = 255;
	if(GreenMinimum == null) GreenMinimum = 0;
	if(RedMaximum == null) RedMaximum = 255;
	if(RedMinimum == null) RedMinimum = 0;
	if(RedMinimum < 0) RedMinimum = 0;
	if(RedMinimum > 255) RedMinimum = 255;
	if(RedMaximum < 0) RedMaximum = 0;
	if(RedMaximum > 255) RedMaximum = 255;
	if(GreenMinimum < 0) GreenMinimum = 0;
	if(GreenMinimum > 255) GreenMinimum = 255;
	if(GreenMaximum < 0) GreenMaximum = 0;
	if(GreenMaximum > 255) GreenMaximum = 255;
	if(BlueMinimum < 0) BlueMinimum = 0;
	if(BlueMinimum > 255) BlueMinimum = 255;
	if(BlueMaximum < 0) BlueMaximum = 0;
	if(BlueMaximum > 255) BlueMaximum = 255;
	if(AlphaMinimum == -1) AlphaMinimum = 255;
	if(AlphaMaximum == -1) AlphaMaximum = 255;
	if(AlphaMinimum < 0) AlphaMinimum = 0;
	if(AlphaMinimum > 255) AlphaMinimum = 255;
	if(AlphaMaximum < 0) AlphaMaximum = 0;
	if(AlphaMaximum > 255) AlphaMaximum = 255;
	flixel_util_FlxRandom._red = flixel_util_FlxRandom.intRanged(RedMinimum,RedMaximum);
	flixel_util_FlxRandom._green = flixel_util_FlxRandom.intRanged(GreenMinimum,GreenMaximum);
	flixel_util_FlxRandom._blue = flixel_util_FlxRandom.intRanged(BlueMinimum,BlueMaximum);
	flixel_util_FlxRandom._alpha = flixel_util_FlxRandom.intRanged(AlphaMinimum,AlphaMaximum);
	return flixel_util_FlxColorUtil.makeFromARGB(flixel_util_FlxRandom._alpha,flixel_util_FlxRandom._red,flixel_util_FlxRandom._green,flixel_util_FlxRandom._blue);
};
flixel_util_FlxRandom.generate = function() {
	return flixel_util_FlxRandom._internalSeed = flixel_util_FlxRandom._internalSeed * 48271 % 2147483647 & 2147483647;
};
var flixel_util__$FlxSignal_FlxSignalHandler = function(listener,dispatchOnce) {
	this.dispatchOnce = false;
	this.listener = listener;
	this.dispatchOnce = dispatchOnce;
};
$hxClasses["flixel.util._FlxSignal.FlxSignalHandler"] = flixel_util__$FlxSignal_FlxSignalHandler;
flixel_util__$FlxSignal_FlxSignalHandler.__name__ = ["flixel","util","_FlxSignal","FlxSignalHandler"];
flixel_util__$FlxSignal_FlxSignalHandler.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util__$FlxSignal_FlxSignalHandler.prototype = {
	listener: null
	,dispatchOnce: null
	,destroy: function() {
		this.listener = null;
	}
	,__class__: flixel_util__$FlxSignal_FlxSignalHandler
};
var flixel_util__$FlxSignal_FlxSignalBase = function() {
	this._handlers = [];
};
$hxClasses["flixel.util._FlxSignal.FlxSignalBase"] = flixel_util__$FlxSignal_FlxSignalBase;
flixel_util__$FlxSignal_FlxSignalBase.__name__ = ["flixel","util","_FlxSignal","FlxSignalBase"];
flixel_util__$FlxSignal_FlxSignalBase.__interfaces__ = [flixel_interfaces_IFlxSignal];
flixel_util__$FlxSignal_FlxSignalBase.prototype = {
	dispatch: null
	,_handlers: null
	,add: function(listener) {
		if(listener != null) this.registerListener(listener,false);
	}
	,addOnce: function(listener) {
		if(listener != null) this.registerListener(listener,true);
	}
	,remove: function(listener) {
		if(listener != null) {
			var handler = this.getHandler(listener);
			if(handler != null) {
				HxOverrides.remove(this._handlers,handler);
				handler.destroy();
				handler = null;
			}
		}
	}
	,has: function(listener) {
		if(listener == null) return false;
		return this.getHandler(listener) != null;
	}
	,removeAll: function() {
		while(this._handlers.length > 0) {
			var handler = this._handlers.pop();
			handler.destroy();
			handler = null;
		}
	}
	,destroy: function() {
		this.removeAll();
		this._handlers = null;
	}
	,registerListener: function(listener,dispatchOnce) {
		var handler = this.getHandler(listener);
		if(handler == null) {
			handler = new flixel_util__$FlxSignal_FlxSignalHandler(listener,dispatchOnce);
			this._handlers.push(handler);
			return handler;
		} else if(handler.dispatchOnce != dispatchOnce) throw new js__$Boot_HaxeError("You cannot addOnce() then add() the same listener without removing the relationship first."); else return handler;
	}
	,getHandler: function(listener) {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			if(handler.listener == listener) return handler;
		}
		return null;
	}
	,__class__: flixel_util__$FlxSignal_FlxSignalBase
};
var flixel_util__$FlxSignal_FlxSignal0 = function() {
	flixel_util__$FlxSignal_FlxSignalBase.call(this);
	this.dispatch = $bind(this,this.dispatch0);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal0"] = flixel_util__$FlxSignal_FlxSignal0;
flixel_util__$FlxSignal_FlxSignal0.__name__ = ["flixel","util","_FlxSignal","FlxSignal0"];
flixel_util__$FlxSignal_FlxSignal0.__super__ = flixel_util__$FlxSignal_FlxSignalBase;
flixel_util__$FlxSignal_FlxSignal0.prototype = $extend(flixel_util__$FlxSignal_FlxSignalBase.prototype,{
	dispatch0: function() {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener();
			if(handler.dispatchOnce) this.remove(handler.listener);
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal0
});
var flixel_util__$FlxSignal_FlxSignal1 = function() {
	flixel_util__$FlxSignal_FlxSignalBase.call(this);
	this.dispatch = $bind(this,this.dispatch1);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal1"] = flixel_util__$FlxSignal_FlxSignal1;
flixel_util__$FlxSignal_FlxSignal1.__name__ = ["flixel","util","_FlxSignal","FlxSignal1"];
flixel_util__$FlxSignal_FlxSignal1.__super__ = flixel_util__$FlxSignal_FlxSignalBase;
flixel_util__$FlxSignal_FlxSignal1.prototype = $extend(flixel_util__$FlxSignal_FlxSignalBase.prototype,{
	dispatch1: function(value1) {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1);
			if(handler.dispatchOnce) this.remove(handler.listener);
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal1
});
var flixel_util__$FlxSignal_FlxSignal2 = function() {
	flixel_util__$FlxSignal_FlxSignalBase.call(this);
	this.dispatch = $bind(this,this.dispatch2);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal2"] = flixel_util__$FlxSignal_FlxSignal2;
flixel_util__$FlxSignal_FlxSignal2.__name__ = ["flixel","util","_FlxSignal","FlxSignal2"];
flixel_util__$FlxSignal_FlxSignal2.__super__ = flixel_util__$FlxSignal_FlxSignalBase;
flixel_util__$FlxSignal_FlxSignal2.prototype = $extend(flixel_util__$FlxSignal_FlxSignalBase.prototype,{
	dispatch2: function(value1,value2) {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1,value2);
			if(handler.dispatchOnce) this.remove(handler.listener);
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal2
});
var flixel_util__$FlxSignal_FlxSignal3 = function() {
	flixel_util__$FlxSignal_FlxSignalBase.call(this);
	this.dispatch = $bind(this,this.dispatch3);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal3"] = flixel_util__$FlxSignal_FlxSignal3;
flixel_util__$FlxSignal_FlxSignal3.__name__ = ["flixel","util","_FlxSignal","FlxSignal3"];
flixel_util__$FlxSignal_FlxSignal3.__super__ = flixel_util__$FlxSignal_FlxSignalBase;
flixel_util__$FlxSignal_FlxSignal3.prototype = $extend(flixel_util__$FlxSignal_FlxSignalBase.prototype,{
	dispatch3: function(value1,value2,value3) {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1,value2,value3);
			if(handler.dispatchOnce) this.remove(handler.listener);
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal3
});
var flixel_util__$FlxSignal_FlxSignal4 = function() {
	flixel_util__$FlxSignal_FlxSignalBase.call(this);
	this.dispatch = $bind(this,this.dispatch4);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal4"] = flixel_util__$FlxSignal_FlxSignal4;
flixel_util__$FlxSignal_FlxSignal4.__name__ = ["flixel","util","_FlxSignal","FlxSignal4"];
flixel_util__$FlxSignal_FlxSignal4.__super__ = flixel_util__$FlxSignal_FlxSignalBase;
flixel_util__$FlxSignal_FlxSignal4.prototype = $extend(flixel_util__$FlxSignal_FlxSignalBase.prototype,{
	dispatch4: function(value1,value2,value3,value4) {
		var _g = 0;
		var _g1 = this._handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1,value2,value3,value4);
			if(handler.dispatchOnce) this.remove(handler.listener);
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal4
});
var flixel_util_FlxSort = function() { };
$hxClasses["flixel.util.FlxSort"] = flixel_util_FlxSort;
flixel_util_FlxSort.__name__ = ["flixel","util","FlxSort"];
flixel_util_FlxSort.byY = function(Order,Obj1,Obj2) {
	return flixel_util_FlxSort.byValues(Order,Obj1.y,Obj2.y);
};
flixel_util_FlxSort.byValues = function(Order,Value1,Value2) {
	var result = 0;
	if(Value1 < Value2) result = Order; else if(Value1 > Value2) result = -Order;
	return result;
};
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__class__: openfl_display_LoaderInfo
});
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_events_UncaughtErrorEvents = function(target) {
	openfl_events_EventDispatcher.call(this,target);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier += second.redMultiplier;
		this.greenMultiplier += second.greenMultiplier;
		this.blueMultiplier += second.blueMultiplier;
		this.alphaMultiplier += second.alphaMultiplier;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) skipAlphaMultiplier = false;
		return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		return new Float32Array([this.redMultiplier,0,0,0,this.redOffset / 255,0,this.greenMultiplier,0,0,this.greenOffset / 255,0,0,this.blueMultiplier,0,this.blueOffset / 255,0,0,0,this.alphaMultiplier,this.alphaOffset / 255]);
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var flixel_util_FlxSpriteUtil = function() { };
$hxClasses["flixel.util.FlxSpriteUtil"] = flixel_util_FlxSpriteUtil;
flixel_util_FlxSpriteUtil.__name__ = ["flixel","util","FlxSpriteUtil"];
flixel_util_FlxSpriteUtil.alphaMask = function(output,source,mask) {
	var data = null;
	if(typeof(source) == "string") data = flixel_system_FlxAssets.getBitmapData(source); else if(js_Boot.__instanceof(source,Class)) data = Type.createInstance(source,[]).bitmapData; else if(js_Boot.__instanceof(source,openfl_display_BitmapData)) data = (js_Boot.__cast(source , openfl_display_BitmapData)).clone(); else return null;
	var maskData = null;
	if(typeof(mask) == "string") maskData = flixel_system_FlxAssets.getBitmapData(mask); else if(js_Boot.__instanceof(mask,Class)) maskData = Type.createInstance(mask,[]).bitmapData; else if(js_Boot.__instanceof(mask,openfl_display_BitmapData)) maskData = mask; else return null;
	data.copyChannel(maskData,new openfl_geom_Rectangle(0,0,data.width,data.height),new openfl_geom_Point(),8,8);
	output.set_pixels(data);
	return output;
};
flixel_util_FlxSpriteUtil.alphaMaskFlxSprite = function(sprite,mask,output) {
	if(sprite.dirty) {
		sprite.dirty = true;
		sprite.calcFrame();
	}
	var data = sprite.get_pixels().clone();
	data.copyChannel(mask.get_pixels(),new openfl_geom_Rectangle(0,0,sprite.get_width(),sprite.get_height()),new openfl_geom_Point(),8,8);
	output.set_pixels(data);
	return output;
};
flixel_util_FlxSpriteUtil.screenWrap = function(sprite,Left,Right,Top,Bottom) {
	if(Bottom == null) Bottom = true;
	if(Top == null) Top = true;
	if(Right == null) Right = true;
	if(Left == null) Left = true;
	if(Left && sprite.x + sprite.frameWidth <= 0) sprite.set_x(flixel_FlxG.width); else if(Right && sprite.x >= flixel_FlxG.width) sprite.set_x(0);
	if(Top && sprite.y + sprite.frameHeight <= 0) sprite.set_y(flixel_FlxG.height); else if(Bottom && sprite.y >= flixel_FlxG.height) sprite.set_y(0);
	return sprite;
};
flixel_util_FlxSpriteUtil.bound = function(sprite,MinX,MaxX,MinY,MaxY) {
	if(MaxY == null) MaxY = 0;
	if(MinY == null) MinY = 0;
	if(MaxX == null) MaxX = 0;
	if(MinX == null) MinX = 0;
	if(MaxX <= 0) MaxX = flixel_FlxG.width;
	if(MaxY <= 0) MaxY = flixel_FlxG.height;
	MaxX -= sprite.frameWidth;
	MaxY -= sprite.frameHeight;
	sprite.set_x(flixel_util_FlxMath.bound(sprite.x,MinX,MaxX));
	sprite.set_y(flixel_util_FlxMath.bound(sprite.y,MinY,MaxY));
	return sprite;
};
flixel_util_FlxSpriteUtil.space = function(objects,startX,startY,horizontalSpacing,verticalSpacing,spaceFromBounds) {
	if(spaceFromBounds == null) spaceFromBounds = false;
	if(verticalSpacing == null) verticalSpacing = 0;
	if(horizontalSpacing == null) horizontalSpacing = 0;
	var prevWidth = 0;
	var prevHeight = 0;
	var _g1 = 0;
	var _g = objects.length;
	while(_g1 < _g) {
		var i = _g1++;
		var object = objects[i];
		if(spaceFromBounds) {
			object.set_x(startX + prevWidth + i * horizontalSpacing);
			object.set_y(startY + prevHeight + i * verticalSpacing);
		} else {
			object.set_x(startX + i * horizontalSpacing);
			object.set_y(startY + i * verticalSpacing);
		}
	}
};
flixel_util_FlxSpriteUtil.screenCenter = function(object,xAxis,yAxis) {
	if(yAxis == null) yAxis = true;
	if(xAxis == null) xAxis = true;
	if(xAxis) object.set_x(flixel_FlxG.width / 2 - object.get_width() / 2);
	if(yAxis) object.set_y(flixel_FlxG.height / 2 - object.get_height() / 2);
	return object;
};
flixel_util_FlxSpriteUtil.drawLine = function(sprite,StartX,StartY,EndX,EndY,lineStyle,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	flixel_util_FlxSpriteUtil.flashGfx.beginFill(0,flixel_util_FlxColorUtil.getAlphaFloat(0));
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(StartX,StartY);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(EndX,EndY);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.drawRect = function(sprite,X,Y,Width,Height,Color,lineStyle,fillStyle,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
	flixel_util_FlxSpriteUtil.flashGfx.drawRect(X,Y,Width,Height);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.drawRoundRect = function(sprite,X,Y,Width,Height,EllipseWidth,EllipseHeight,Color,lineStyle,fillStyle,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
	flixel_util_FlxSpriteUtil.flashGfx.drawRoundRect(X,Y,Width,Height,EllipseWidth,EllipseHeight);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.drawCircle = function(sprite,X,Y,Radius,Color,lineStyle,fillStyle,drawStyle) {
	if(Color == null) Color = -1;
	if(Radius == null) Radius = -1;
	if(Y == null) Y = -1;
	if(X == null) X = -1;
	if(X == -1 || Y == -1) {
		var midPoint = sprite.getGraphicMidpoint();
		if(X == -1) X = midPoint.x;
		if(Y == -1) Y = midPoint.y;
	}
	if(Radius < 1) {
		var minVal = Math.min(sprite.frameWidth,sprite.frameHeight);
		Radius = minVal / 2;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
	flixel_util_FlxSpriteUtil.flashGfx.drawCircle(X,Y,Radius);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.drawEllipse = function(sprite,X,Y,Width,Height,Color,lineStyle,fillStyle,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
	flixel_util_FlxSpriteUtil.flashGfx.drawEllipse(X,Y,Width,Height);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.drawTriangle = function(sprite,X,Y,Height,Color,lineStyle,fillStyle,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(X + Height / 2,Y);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(X + Height,Height + Y);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(X,Height + Y);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(X + Height / 2,Y);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.drawPolygon = function(sprite,Vertices,Color,lineStyle,fillStyle,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
	var p = Vertices.shift();
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(p.x,p.y);
	var _g = 0;
	while(_g < Vertices.length) {
		var p1 = Vertices[_g];
		++_g;
		flixel_util_FlxSpriteUtil.flashGfx.lineTo(p1.x,p1.y);
	}
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	sprite;
	return sprite;
};
flixel_util_FlxSpriteUtil.beginDraw = function(Color,lineStyle,fillStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	flixel_util_FlxSpriteUtil.setLineStyle(lineStyle);
	if(fillStyle != null && fillStyle.hasFill) flixel_util_FlxSpriteUtil.flashGfx.beginFill(flixel_util_FlxColorUtil.ARGBtoRGB(fillStyle.color),flixel_util_FlxColorUtil.getAlphaFloat(fillStyle.color)); else flixel_util_FlxSpriteUtil.flashGfx.beginFill((Color >> 16 & 255) << 16 | (Color >> 8 & 255) << 8 | Color & 255,flixel_util_FlxColorUtil.getAlphaFloat(Color));
};
flixel_util_FlxSpriteUtil.endDraw = function(sprite,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.updateSpriteGraphic = function(sprite,drawStyle) {
	if(drawStyle == null) drawStyle = { smoothing : false}; else if(drawStyle.smoothing == null) drawStyle.smoothing = false;
	sprite.get_pixels().draw(flixel_util_FlxSpriteUtil.flashGfxSprite,drawStyle.matrix,drawStyle.colorTransform,drawStyle.blendMode,drawStyle.clipRect,drawStyle.smoothing);
	sprite.dirty = true;
	sprite.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
	return sprite;
};
flixel_util_FlxSpriteUtil.setLineStyle = function(lineStyle) {
	if(lineStyle != null) {
		var color;
		var alpha;
		if(lineStyle.color == null) {
			color = 0;
			alpha = 1;
		} else {
			color = flixel_util_FlxColorUtil.ARGBtoRGB(lineStyle.color);
			alpha = flixel_util_FlxColorUtil.getAlphaFloat(lineStyle.color);
		}
		if(lineStyle.pixelHinting == null) lineStyle.pixelHinting = false;
		if(lineStyle.miterLimit == null) lineStyle.miterLimit = 3;
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color,alpha,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
};
flixel_util_FlxSpriteUtil.fill = function(sprite,Color) {
	sprite.get_pixels().fillRect(sprite.get_pixels().rect,Color);
	if(sprite.get_pixels() != sprite.framePixels) sprite.dirty = true;
	sprite.cachedGraphics.get_tilesheet().destroyFrameBitmapDatas();
	return sprite;
};
flixel_util_FlxSpriteUtil.flicker = function(Object,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback) {
	if(ForceRestart == null) ForceRestart = true;
	if(EndVisibility == null) EndVisibility = true;
	if(Interval == null) Interval = 0.04;
	if(Duration == null) Duration = 1;
	flixel_effects_FlxFlicker.flicker(Object,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback);
	return Object;
};
flixel_util_FlxSpriteUtil.isFlickering = function(Object) {
	return flixel_effects_FlxFlicker.isFlickering(Object);
};
flixel_util_FlxSpriteUtil.stopFlickering = function(Object) {
	flixel_effects_FlxFlicker.stopFlickering(Object);
	return Object;
};
flixel_util_FlxSpriteUtil.fadeIn = function(sprite,Duration,ResetAlpha,OnComplete) {
	if(Duration == null) Duration = 1;
	if(ResetAlpha) sprite.set_alpha(0);
	flixel_tweens_FlxTween.color(sprite,Duration,sprite.color,sprite.color,sprite.alpha,1,OnComplete != null?{ complete : OnComplete}:null);
	return sprite;
};
flixel_util_FlxSpriteUtil.fadeOut = function(sprite,Duration,FadeToBlack,OnComplete) {
	if(Duration == null) Duration = 1;
	flixel_tweens_FlxTween.color(sprite,Duration,sprite.color,FadeToBlack?-16777216:sprite.color,sprite.alpha,0,OnComplete != null?{ complete : OnComplete}:null);
	return sprite;
};
var flixel_util_FlxStringUtil = function() { };
$hxClasses["flixel.util.FlxStringUtil"] = flixel_util_FlxStringUtil;
flixel_util_FlxStringUtil.__name__ = ["flixel","util","FlxStringUtil"];
flixel_util_FlxStringUtil.formatTicks = function(StartTicks,EndTicks) {
	return Math.abs(EndTicks - StartTicks) / 1000 + "s";
};
flixel_util_FlxStringUtil.formatTime = function(Seconds,ShowMS) {
	if(ShowMS == null) ShowMS = false;
	var timeString = (Seconds / 60 | 0) + ":";
	var timeStringHelper = (Seconds | 0) % 60;
	if(timeStringHelper < 10) timeString += "0";
	timeString += timeStringHelper;
	if(ShowMS) {
		timeString += ".";
		timeStringHelper = (Seconds - (Seconds | 0)) * 100 | 0;
		if(timeStringHelper < 10) timeString += "0";
		timeString += timeStringHelper;
	}
	return timeString;
};
flixel_util_FlxStringUtil.formatArray = function(AnyArray) {
	var string = "";
	if(AnyArray != null && AnyArray.length > 0) {
		string = Std.string(AnyArray[0]);
		var i = 1;
		var l = AnyArray.length;
		while(i < l) string += ", " + Std.string(AnyArray[i++]);
	}
	return string;
};
flixel_util_FlxStringUtil.formatStringMap = function(AnyMap) {
	var string = "";
	var $it0 = AnyMap.keys();
	while( $it0.hasNext() ) {
		var key = $it0.next();
		if(key == null) string += "null"; else string += "" + key;
		string += ", ";
	}
	return string.substring(0,string.length - 2);
};
flixel_util_FlxStringUtil.formatMoney = function(Amount,ShowDecimal,EnglishStyle) {
	if(EnglishStyle == null) EnglishStyle = true;
	if(ShowDecimal == null) ShowDecimal = true;
	var helper;
	var amount = Math.floor(Amount);
	var string = "";
	var comma = "";
	var zeroes = "";
	while(amount > 0) {
		if(string.length > 0 && comma.length <= 0) {
			if(EnglishStyle) comma = ","; else comma = ".";
		}
		zeroes = "";
		helper = amount - Math.floor(amount / 1000) * 1000;
		amount = Math.floor(amount / 1000);
		if(amount > 0) {
			if(helper < 100) zeroes += "0";
			if(helper < 10) zeroes += "0";
		}
		string = zeroes + helper + comma + string;
	}
	if(ShowDecimal) {
		amount = (Amount * 100 | 0) - (Amount | 0) * 100;
		string += (EnglishStyle?".":",") + amount;
		if(amount < 10) string += "0";
	}
	return string;
};
flixel_util_FlxStringUtil.formatBytes = function(Bytes,Precision) {
	if(Precision == null) Precision = 2;
	var units = ["Bytes","kB","MB","GB","TB","PB"];
	var curUnit = 0;
	while(Bytes >= 1024 && curUnit < units.length - 1) {
		Bytes /= 1024;
		curUnit++;
	}
	return flixel_util_FlxMath.roundDecimal(Bytes,Precision) + units[curUnit];
};
flixel_util_FlxStringUtil.filterDigits = function(Input) {
	var output_b = "";
	var _g1 = 0;
	var _g = Input.length;
	while(_g1 < _g) {
		var i = _g1++;
		var c = HxOverrides.cca(Input,i);
		if(c >= 48 && c <= 57) output_b += String.fromCharCode(c);
	}
	return output_b;
};
flixel_util_FlxStringUtil.htmlFormat = function(Text,Size,Color,Bold,Italic,Underlined) {
	if(Underlined == null) Underlined = false;
	if(Italic == null) Italic = false;
	if(Bold == null) Bold = false;
	if(Color == null) Color = "FFFFFF";
	if(Size == null) Size = 12;
	var prefix = "<font size='" + Size + "' color='#" + Color + "'>";
	var suffix = "</font>";
	if(Bold) {
		prefix = "<b>" + prefix;
		suffix = suffix + "</b>";
	}
	if(Italic) {
		prefix = "<i>" + prefix;
		suffix = suffix + "</i>";
	}
	if(Underlined) {
		prefix = "<u>" + prefix;
		suffix = suffix + "</u>";
	}
	return prefix + Text + suffix;
};
flixel_util_FlxStringUtil.getDomain = function(url) {
	var urlStart = url.indexOf("://") + 3;
	var urlEnd = url.indexOf("/",urlStart);
	var home = url.substring(urlStart,urlEnd);
	var LastDot = home.lastIndexOf(".") - 1;
	var domEnd = home.lastIndexOf(".",LastDot) + 1;
	home = home.substring(domEnd,home.length);
	home = home.split(":")[0];
	if(home == "") return "local"; else return home;
};
flixel_util_FlxStringUtil.sameClassName = function(Obj1,Obj2,Simple) {
	if(Simple == null) Simple = true;
	return (function($this) {
		var $r;
		var cl;
		if(js_Boot.__instanceof(Obj1,Class)) cl = Obj1; else cl = Type.getClass(Obj1);
		var s = Type.getClassName(cl);
		if(s != null) {
			s = StringTools.replace(s,"::",".");
			if(Simple) {
				var pos = s.lastIndexOf(".") + 1;
				s = HxOverrides.substr(s,pos,null);
			}
		}
		$r = s;
		return $r;
	}(this)) == (function($this) {
		var $r;
		var cl1;
		if(js_Boot.__instanceof(Obj2,Class)) cl1 = Obj2; else cl1 = Type.getClass(Obj2);
		var s1 = Type.getClassName(cl1);
		if(s1 != null) {
			s1 = StringTools.replace(s1,"::",".");
			if(Simple) {
				var pos1 = s1.lastIndexOf(".") + 1;
				s1 = HxOverrides.substr(s1,pos1,null);
			}
		}
		$r = s1;
		return $r;
	}(this));
};
flixel_util_FlxStringUtil.toIntArray = function(Data) {
	if(Data != null && Data != "") {
		var strArray = Data.split(",");
		var iArray = [];
		var _g = 0;
		while(_g < strArray.length) {
			var str = strArray[_g];
			++_g;
			iArray.push(Std.parseInt(str));
		}
		return iArray;
	}
	return null;
};
flixel_util_FlxStringUtil.toFloatArray = function(Data) {
	if(Data != null && Data != "") {
		var strArray = Data.split(",");
		var fArray = [];
		var _g = 0;
		while(_g < strArray.length) {
			var str = strArray[_g];
			++_g;
			fArray.push(parseFloat(str));
		}
		return fArray;
	}
	return null;
};
flixel_util_FlxStringUtil.arrayToCSV = function(Data,Width,Invert) {
	if(Invert == null) Invert = false;
	var row = 0;
	var column;
	var csv = "";
	var Height = Data.length / Width | 0;
	var index;
	var offset = 0;
	while(row < Height) {
		column = 0;
		while(column < Width) {
			index = Data[offset];
			if(Invert) {
				if(index == 0) index = 1; else if(index == 1) index = 0;
			}
			if(column == 0) {
				if(row == 0) csv += index; else csv += "\n" + index;
			} else csv += ", " + index;
			column++;
			offset++;
		}
		row++;
	}
	return csv;
};
flixel_util_FlxStringUtil.bitmapToCSV = function(Bitmap,Invert,Scale,ColorMap) {
	if(Scale == null) Scale = 1;
	if(Invert == null) Invert = false;
	if(Scale < 1) Scale = 1;
	if(Scale > 1) {
		var bd = Bitmap;
		Bitmap = new openfl_display_BitmapData(Bitmap.width * Scale,Bitmap.height * Scale);
		var bdW = bd.width;
		var bdH = bd.height;
		var pCol = 0;
		var _g = 0;
		while(_g < bdW) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < bdH) {
				var j = _g1++;
				pCol = bd.getPixel(i,j);
				var _g2 = 0;
				while(_g2 < Scale) {
					var k = _g2++;
					var _g3 = 0;
					while(_g3 < Scale) {
						var m = _g3++;
						Bitmap.setPixel(i * Scale + k,j * Scale + m,pCol);
					}
				}
			}
		}
	}
	var row = 0;
	var column;
	var pixel;
	var csv = "";
	var bitmapWidth = Bitmap.width;
	var bitmapHeight = Bitmap.height;
	while(row < bitmapHeight) {
		column = 0;
		while(column < bitmapWidth) {
			pixel = Bitmap.getPixel(column,row);
			if(ColorMap != null) pixel = HxOverrides.indexOf(ColorMap,pixel,0); else if(Invert && pixel > 0 || !Invert && pixel == 0) pixel = 1; else pixel = 0;
			if(column == 0) {
				if(row == 0) csv += pixel; else csv += "\n" + pixel;
			} else csv += ", " + pixel;
			column++;
		}
		row++;
	}
	return csv;
};
flixel_util_FlxStringUtil.imageToCSV = function(ImageFile,Invert,Scale) {
	if(Scale == null) Scale = 1;
	if(Invert == null) Invert = false;
	var tempBitmapData;
	if(typeof(ImageFile) == "string") tempBitmapData = flixel_system_FlxAssets.getBitmapData(ImageFile); else tempBitmapData = Type.createInstance(ImageFile,[]).bitmapData;
	return flixel_util_FlxStringUtil.bitmapToCSV(tempBitmapData,Invert,Scale);
};
flixel_util_FlxStringUtil.getDebugString = function(LabelValuePairs) {
	var output = "(";
	var _g = 0;
	while(_g < LabelValuePairs.length) {
		var pair = LabelValuePairs[_g];
		++_g;
		output += pair.label + ": ";
		var value = pair.value;
		if(typeof(value) == "number") value = flixel_util_FlxMath.roundDecimal(value,flixel_FlxG["debugger"].precision);
		output += Std.string(value) + " | ";
		flixel_util_LabelValuePair._pool.put(pair);
	}
	output = StringTools.trim(HxOverrides.substr(output,0,output.length - 2));
	return output + ")";
};
var flixel_util_LabelValuePair = function() {
};
$hxClasses["flixel.util.LabelValuePair"] = flixel_util_LabelValuePair;
flixel_util_LabelValuePair.__name__ = ["flixel","util","LabelValuePair"];
flixel_util_LabelValuePair.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util_LabelValuePair.weak = function(label,value) {
	return flixel_util_LabelValuePair._pool.get().create(label,value);
};
flixel_util_LabelValuePair.prototype = {
	label: null
	,value: null
	,create: function(label,value) {
		this.label = label;
		this.value = value;
		return this;
	}
	,put: function() {
		flixel_util_LabelValuePair._pool.put(this);
	}
	,destroy: function() {
		this.label = null;
		this.value = null;
	}
	,__class__: flixel_util_LabelValuePair
};
var flixel_util_FlxVelocity = function() { };
$hxClasses["flixel.util.FlxVelocity"] = flixel_util_FlxVelocity;
flixel_util_FlxVelocity.__name__ = ["flixel","util","FlxVelocity"];
flixel_util_FlxVelocity.moveTowardsObject = function(Source,Dest,Speed,MaxTime) {
	if(MaxTime == null) MaxTime = 0;
	if(Speed == null) Speed = 60;
	var a = flixel_util_FlxAngle.angleBetween(Source,Dest,null);
	if(MaxTime > 0) {
		var d = flixel_util_FlxMath.distanceBetween(Source,Dest);
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
};
flixel_util_FlxVelocity.accelerateTowardsObject = function(Source,Dest,Acceleration,MaxXSpeed,MaxYSpeed) {
	var a = flixel_util_FlxAngle.angleBetween(Source,Dest,null);
	Source.velocity.set_x(0);
	Source.velocity.set_y(0);
	Source.acceleration.set_x(Math.cos(a) * Acceleration);
	Source.acceleration.set_y(Math.sin(a) * Acceleration);
	Source.maxVelocity.set_x(MaxXSpeed);
	Source.maxVelocity.set_y(MaxYSpeed);
};
flixel_util_FlxVelocity.moveTowardsMouse = function(Source,Speed,MaxTime) {
	if(MaxTime == null) MaxTime = 0;
	if(Speed == null) Speed = 60;
	var a = flixel_util_FlxAngle.angleBetweenMouse(Source);
	if(MaxTime > 0) {
		var d = flixel_util_FlxMath.distanceToMouse(Source);
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
};
flixel_util_FlxVelocity.moveTowardsTouch = function(Source,Touch,Speed,MaxTime) {
	if(MaxTime == null) MaxTime = 0;
	if(Speed == null) Speed = 60;
	var a = flixel_util_FlxAngle.angleBetweenTouch(Source,Touch,null);
	if(MaxTime > 0) {
		var d = flixel_util_FlxMath.distanceToTouch(Source,Touch);
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
};
flixel_util_FlxVelocity.accelerateTowardsMouse = function(Source,Acceleration,MaxXSpeed,MaxYSpeed) {
	var a = flixel_util_FlxAngle.angleBetweenMouse(Source);
	Source.velocity.set_x(0);
	Source.velocity.set_y(0);
	Source.acceleration.set_x(Math.cos(a) * Acceleration);
	Source.acceleration.set_y(Math.sin(a) * Acceleration);
	Source.maxVelocity.set_x(MaxXSpeed);
	Source.maxVelocity.set_y(MaxYSpeed);
};
flixel_util_FlxVelocity.accelerateTowardsTouch = function(Source,Touch,Acceleration,MaxXSpeed,MaxYSpeed) {
	var a = flixel_util_FlxAngle.angleBetweenTouch(Source,Touch,null);
	Source.velocity.set_x(0);
	Source.velocity.set_y(0);
	Source.acceleration.set_x(Math.cos(a) * Acceleration);
	Source.acceleration.set_y(Math.sin(a) * Acceleration);
	Source.maxVelocity.set_x(MaxXSpeed);
	Source.maxVelocity.set_y(MaxYSpeed);
};
flixel_util_FlxVelocity.moveTowardsPoint = function(Source,Target,Speed,MaxTime) {
	if(MaxTime == null) MaxTime = 0;
	if(Speed == null) Speed = 60;
	var a = flixel_util_FlxAngle.angleBetweenPoint(Source,Target);
	if(MaxTime > 0) {
		var d = flixel_util_FlxMath.distanceToPoint(Source,Target);
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
	if(Target._weak) Target.put();
};
flixel_util_FlxVelocity.accelerateTowardsPoint = function(Source,Target,Acceleration,MaxXSpeed,MaxYSpeed) {
	var a = flixel_util_FlxAngle.angleBetweenPoint(Source,Target);
	Source.velocity.set_x(0);
	Source.velocity.set_y(0);
	Source.acceleration.set_x(Math.cos(a) * Acceleration);
	Source.acceleration.set_y(Math.sin(a) * Acceleration);
	Source.maxVelocity.set_x(MaxXSpeed);
	Source.maxVelocity.set_y(MaxYSpeed);
	if(Target._weak) Target.put();
};
flixel_util_FlxVelocity.velocityFromAngle = function(Angle,Speed) {
	var a = Angle * (Math.PI / 180);
	var result = flixel_util_FlxPoint.get(null,null);
	result.set_x(Math.cos(a) * Speed);
	result.set_y(Math.sin(a) * Speed);
	return result;
};
flixel_util_FlxVelocity.velocityFromFacing = function(Parent,Speed) {
	var a = 0;
	if(Parent.facing == 1) a = 180 * (Math.PI / 180); else if(Parent.facing == 16) a = 0 * (Math.PI / 180); else if(Parent.facing == 256) a = -90 * (Math.PI / 180); else if(Parent.facing == 4096) a = 90 * (Math.PI / 180);
	var result = flixel_util_FlxPoint.get(null,null);
	result.set_x(Math.cos(a) * Speed);
	result.set_y(Math.sin(a) * Speed);
	return result;
};
flixel_util_FlxVelocity.computeVelocity = function(Velocity,Acceleration,Drag,Max) {
	if(Acceleration != 0) Velocity += Acceleration * flixel_FlxG.elapsed; else if(Drag != 0) {
		var drag = Drag * flixel_FlxG.elapsed;
		if(Velocity - drag > 0) Velocity = Velocity - drag; else if(Velocity + drag < 0) Velocity += drag; else Velocity = 0;
	}
	if(Velocity != 0 && Max != 0) {
		if(Velocity > Max) Velocity = Max; else if(Velocity < -Max) Velocity = -Max;
	}
	return Velocity;
};
var flixel_util_loaders_CachedGraphics = function(Key,Bitmap,Persist) {
	if(Persist == null) Persist = false;
	this.useCount = 0;
	this.isDumped = false;
	this.destroyOnNoUse = true;
	this.persist = false;
	this.key = Key;
	this.bitmap = Bitmap;
	this.persist = Persist;
};
$hxClasses["flixel.util.loaders.CachedGraphics"] = flixel_util_loaders_CachedGraphics;
flixel_util_loaders_CachedGraphics.__name__ = ["flixel","util","loaders","CachedGraphics"];
flixel_util_loaders_CachedGraphics.prototype = {
	key: null
	,bitmap: null
	,assetsKey: null
	,assetsClass: null
	,data: null
	,persist: null
	,destroyOnNoUse: null
	,isDumped: null
	,tilesheet: null
	,useCount: null
	,_tilesheet: null
	,dump: function() {
	}
	,undump: function() {
	}
	,onContext: function() {
		if(this.isDumped) {
			this.undump();
			this.dump();
		}
	}
	,getRegionForFrame: function(FrameName) {
		var region = new flixel_util_loaders_TextureRegion(this);
		var frame = this.get_tilesheet().getFrame(FrameName);
		if(frame != null) {
			region.region.startX = frame.frame.x | 0;
			region.region.startY = frame.frame.y | 0;
			region.region.width = frame.frame.width | 0;
			region.region.height = frame.frame.height | 0;
		}
		return region;
	}
	,destroy: function() {
		this.bitmap = flixel_util_FlxDestroyUtil.dispose(this.bitmap);
		this.data = flixel_util_FlxDestroyUtil.destroy(this.data);
		this._tilesheet = flixel_util_FlxDestroyUtil.destroy(this._tilesheet);
		this.key = null;
		this.assetsKey = null;
		this.assetsClass = null;
	}
	,get_tilesheet: function() {
		if(this._tilesheet == null) {
			if(this.isDumped) this.onContext();
			this._tilesheet = new flixel_system_layer_TileSheetData(this.bitmap);
		}
		return this._tilesheet;
	}
	,getBitmapFromSystem: function() {
		var newBitmap = null;
		if(this.assetsClass != null) newBitmap = Type.createInstance(js_Boot.__cast(this.assetsClass , Class),[]); else if(this.assetsKey != null) newBitmap = openfl_Assets.getBitmapData(this.assetsKey,false);
		return newBitmap;
	}
	,get_canBeDumped: function() {
		return this.assetsClass != null || this.assetsKey != null;
	}
	,set_useCount: function(Value) {
		if(Value <= 0 && this.destroyOnNoUse && !this.persist) flixel_FlxG.bitmap.remove(this.key);
		return this.useCount = Value;
	}
	,set_destroyOnNoUse: function(Value) {
		if(Value && this.useCount == 0 && this.key != null && !this.persist) flixel_FlxG.bitmap.remove(this.key);
		return this.destroyOnNoUse = Value;
	}
	,__class__: flixel_util_loaders_CachedGraphics
	,__properties__: {set_useCount:"set_useCount",get_tilesheet:"get_tilesheet",get_canBeDumped:"get_canBeDumped",set_destroyOnNoUse:"set_destroyOnNoUse"}
};
var flixel_util_loaders_TextureAtlasFrame = function() {
	this.additionalAngle = 0;
	this.offset = null;
	this.sourceSize = null;
	this.trimmed = false;
	this.rotated = false;
	this.frame = null;
	this.name = null;
};
$hxClasses["flixel.util.loaders.TextureAtlasFrame"] = flixel_util_loaders_TextureAtlasFrame;
flixel_util_loaders_TextureAtlasFrame.__name__ = ["flixel","util","loaders","TextureAtlasFrame"];
flixel_util_loaders_TextureAtlasFrame.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util_loaders_TextureAtlasFrame.prototype = {
	name: null
	,frame: null
	,rotated: null
	,trimmed: null
	,sourceSize: null
	,offset: null
	,additionalAngle: null
	,destroy: function() {
		this.name = null;
		this.frame = null;
		this.sourceSize = null;
		this.offset = null;
	}
	,__class__: flixel_util_loaders_TextureAtlasFrame
};
var flixel_util_loaders_TexturePackerData = function(Description,AssetName) {
	this.assetName = AssetName;
	this.description = Description;
	this.frames = [];
	this.parseData();
};
$hxClasses["flixel.util.loaders.TexturePackerData"] = flixel_util_loaders_TexturePackerData;
flixel_util_loaders_TexturePackerData.__name__ = ["flixel","util","loaders","TexturePackerData"];
flixel_util_loaders_TexturePackerData.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util_loaders_TexturePackerData.prototype = {
	frames: null
	,assetName: null
	,description: null
	,asset: null
	,parseData: function() {
		if(this.frames.length != 0) return;
		if(this.assetName == null || this.description == null) return;
		this.asset = flixel_FlxG.bitmap.addWithSpaces(this.assetName,0,0,1,1,false,null).bitmap;
		var data = JSON.parse(openfl_Assets.getText(this.description));
		var _g = 0;
		var _g1 = Lambda.array(data.frames);
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			var texFrame = new flixel_util_loaders_TextureAtlasFrame();
			texFrame.trimmed = frame.trimmed;
			texFrame.rotated = frame.rotated;
			texFrame.name = frame.filename;
			texFrame.sourceSize = flixel_util_FlxPoint.get(frame.sourceSize.w,frame.sourceSize.h);
			texFrame.offset = flixel_util_FlxPoint.get(0,0);
			texFrame.offset.set(frame.spriteSourceSize.x,frame.spriteSourceSize.y);
			if(frame.rotated) {
				texFrame.frame = new openfl_geom_Rectangle(frame.frame.x,frame.frame.y,frame.frame.h,frame.frame.w);
				texFrame.additionalAngle = -90;
			} else {
				texFrame.frame = new openfl_geom_Rectangle(frame.frame.x,frame.frame.y,frame.frame.w,frame.frame.h);
				texFrame.additionalAngle = 0;
			}
			this.frames.push(texFrame);
		}
	}
	,destroy: function() {
		this.frames = flixel_util_FlxDestroyUtil.destroyArray(this.frames);
		this.assetName = null;
		this.description = null;
		this.asset = null;
	}
	,__class__: flixel_util_loaders_TexturePackerData
};
var flixel_util_loaders_TextureRegion = function(data,startX,startY,tileWidth,tileHeight,spacingX,spacingY,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(spacingY == null) spacingY = 0;
	if(spacingX == null) spacingX = 0;
	if(tileHeight == null) tileHeight = 0;
	if(tileWidth == null) tileWidth = 0;
	if(startY == null) startY = 0;
	if(startX == null) startX = 0;
	this.data = data;
	if(width <= 0) width = data.bitmap.width;
	if(height <= 0) height = data.bitmap.height;
	this.region = new flixel_system_layer_Region(startX,startY,tileWidth,tileHeight,spacingX,spacingY,width,height);
};
$hxClasses["flixel.util.loaders.TextureRegion"] = flixel_util_loaders_TextureRegion;
flixel_util_loaders_TextureRegion.__name__ = ["flixel","util","loaders","TextureRegion"];
flixel_util_loaders_TextureRegion.__interfaces__ = [flixel_interfaces_IFlxDestroyable];
flixel_util_loaders_TextureRegion.prototype = {
	data: null
	,region: null
	,clone: function() {
		return new flixel_util_loaders_TextureRegion(this.data,this.region.startX,this.region.startY,this.region.tileWidth,this.region.tileHeight,this.region.spacingX,this.region.spacingY,this.region.width,this.region.height);
	}
	,destroy: function() {
		this.data = null;
		this.region = null;
	}
	,__class__: flixel_util_loaders_TextureRegion
};
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.lastException = null;
haxe_CallStack.getStack = function(e) {
	if(e == null) return [];
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) site = haxe_CallStack.wrapCallSite(site);
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.wrapCallSite = null;
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) return []; else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") stack.shift();
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else m.push(haxe_StackItem.Module(StringTools.trim(line)));
		}
		return m;
	} else return s;
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.content = null;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return haxe_io_Bytes.ofString(x.str);
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.get(s);
		if(x != null) {
			this.buf.b += "R";
			if(x == null) this.buf.b += "null"; else this.buf.b += "" + x;
			return;
		}
		this.shash.set(s,this.scount++);
		this.buf.b += "y";
		s = encodeURIComponent(s);
		if(s.length == null) this.buf.b += "null"; else this.buf.b += "" + s.length;
		this.buf.b += ":";
		if(s == null) this.buf.b += "null"; else this.buf.b += "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				if(i == null) this.buf.b += "null"; else this.buf.b += "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		{
			var _g = Type["typeof"](v);
			switch(_g[1]) {
			case 0:
				this.buf.b += "n";
				break;
			case 1:
				var v1 = v;
				if(v1 == 0) {
					this.buf.b += "z";
					return;
				}
				this.buf.b += "i";
				if(v1 == null) this.buf.b += "null"; else this.buf.b += "" + v1;
				break;
			case 2:
				var v2 = v;
				if(isNaN(v2)) this.buf.b += "k"; else if(!isFinite(v2)) if(v2 < 0) this.buf.b += "m"; else this.buf.b += "p"; else {
					this.buf.b += "d";
					if(v2 == null) this.buf.b += "null"; else this.buf.b += "" + v2;
				}
				break;
			case 3:
				if(v) this.buf.b += "t"; else this.buf.b += "f";
				break;
			case 6:
				var c = _g[2];
				if(c == String) {
					this.serializeString(v);
					return;
				}
				if(this.useCache && this.serializeRef(v)) return;
				switch(c) {
				case Array:
					var ucount = 0;
					this.buf.b += "a";
					var l = v.length;
					var _g1 = 0;
					while(_g1 < l) {
						var i = _g1++;
						if(v[i] == null) ucount++; else {
							if(ucount > 0) {
								if(ucount == 1) this.buf.b += "n"; else {
									this.buf.b += "u";
									if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
								}
								ucount = 0;
							}
							this.serialize(v[i]);
						}
					}
					if(ucount > 0) {
						if(ucount == 1) this.buf.b += "n"; else {
							this.buf.b += "u";
							if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
						}
					}
					this.buf.b += "h";
					break;
				case List:
					this.buf.b += "l";
					var v3 = v;
					var _g1_head = v3.h;
					var _g1_val = null;
					while(_g1_head != null) {
						var i1;
						_g1_val = _g1_head[0];
						_g1_head = _g1_head[1];
						i1 = _g1_val;
						this.serialize(i1);
					}
					this.buf.b += "h";
					break;
				case Date:
					var d = v;
					this.buf.b += "v";
					this.buf.add(d.getTime());
					break;
				case haxe_ds_StringMap:
					this.buf.b += "b";
					var v4 = v;
					var $it0 = v4.keys();
					while( $it0.hasNext() ) {
						var k = $it0.next();
						this.serializeString(k);
						this.serialize(__map_reserved[k] != null?v4.getReserved(k):v4.h[k]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_IntMap:
					this.buf.b += "q";
					var v5 = v;
					var $it1 = v5.keys();
					while( $it1.hasNext() ) {
						var k1 = $it1.next();
						this.buf.b += ":";
						if(k1 == null) this.buf.b += "null"; else this.buf.b += "" + k1;
						this.serialize(v5.h[k1]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_ObjectMap:
					this.buf.b += "M";
					var v6 = v;
					var $it2 = v6.keys();
					while( $it2.hasNext() ) {
						var k2 = $it2.next();
						var id = Reflect.field(k2,"__id__");
						Reflect.deleteField(k2,"__id__");
						this.serialize(k2);
						k2.__id__ = id;
						this.serialize(v6.h[k2.__id__]);
					}
					this.buf.b += "h";
					break;
				case haxe_io_Bytes:
					var v7 = v;
					var i2 = 0;
					var max = v7.length - 2;
					var charsBuf = new StringBuf();
					var b64 = haxe_Serializer.BASE64;
					while(i2 < max) {
						var b1 = v7.get(i2++);
						var b2 = v7.get(i2++);
						var b3 = v7.get(i2++);
						charsBuf.add(b64.charAt(b1 >> 2));
						charsBuf.add(b64.charAt((b1 << 4 | b2 >> 4) & 63));
						charsBuf.add(b64.charAt((b2 << 2 | b3 >> 6) & 63));
						charsBuf.add(b64.charAt(b3 & 63));
					}
					if(i2 == max) {
						var b11 = v7.get(i2++);
						var b21 = v7.get(i2++);
						charsBuf.add(b64.charAt(b11 >> 2));
						charsBuf.add(b64.charAt((b11 << 4 | b21 >> 4) & 63));
						charsBuf.add(b64.charAt(b21 << 2 & 63));
					} else if(i2 == max + 1) {
						var b12 = v7.get(i2++);
						charsBuf.add(b64.charAt(b12 >> 2));
						charsBuf.add(b64.charAt(b12 << 4 & 63));
					}
					var chars = charsBuf.b;
					this.buf.b += "s";
					if(chars.length == null) this.buf.b += "null"; else this.buf.b += "" + chars.length;
					this.buf.b += ":";
					if(chars == null) this.buf.b += "null"; else this.buf.b += "" + chars;
					break;
				default:
					if(this.useCache) this.cache.pop();
					if(v.hxSerialize != null) {
						this.buf.b += "C";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						v.hxSerialize(this);
						this.buf.b += "g";
					} else {
						this.buf.b += "c";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						this.serializeFields(v);
					}
				}
				break;
			case 4:
				if(js_Boot.__instanceof(v,Class)) {
					var className = Type.getClassName(v);
					this.buf.b += "A";
					this.serializeString(className);
				} else if(js_Boot.__instanceof(v,Enum)) {
					this.buf.b += "B";
					this.serializeString(Type.getEnumName(v));
				} else {
					if(this.useCache && this.serializeRef(v)) return;
					this.buf.b += "o";
					this.serializeFields(v);
				}
				break;
			case 7:
				var e = _g[2];
				if(this.useCache) {
					if(this.serializeRef(v)) return;
					this.cache.pop();
				}
				if(this.useEnumIndex) this.buf.b += "j"; else this.buf.b += "w";
				this.serializeString(Type.getEnumName(e));
				if(this.useEnumIndex) {
					this.buf.b += ":";
					this.buf.b += Std.string(v[1]);
				} else this.serializeString(v[0]);
				this.buf.b += ":";
				var l1 = v.length;
				this.buf.b += Std.string(l1 - 2);
				var _g11 = 2;
				while(_g11 < l1) {
					var i3 = _g11++;
					this.serialize(v[i3]);
				}
				if(this.useCache) this.cache.push(v);
				break;
			case 5:
				throw new js__$Boot_HaxeError("Cannot serialize function");
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
			}
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = haxe_Timer.stamp();
	var r = f();
	haxe_Log.trace(haxe_Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_1) {
			return null;
		}}; else this.resolver = r;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
		}
		return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw new js__$Boot_HaxeError("Invalid object");
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!(typeof(k) == "string")) throw new js__$Boot_HaxeError("Invalid object key");
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) throw new js__$Boot_HaxeError("Invalid enum format");
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			return this.readFloat();
		case 121:
			var len = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) throw new js__$Boot_HaxeError("Invalid string length");
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 107:
			return NaN;
		case 109:
			return -Infinity;
		case 112:
			return Infinity;
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) throw new js__$Boot_HaxeError("Invalid reference");
			return this.cache[n1];
		case 82:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.scache.length) throw new js__$Boot_HaxeError("Invalid string reference");
			return this.scache[n2];
		case 120:
			throw new js__$Boot_HaxeError(this.unserialize());
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw new js__$Boot_HaxeError("Class not found " + name);
			var o1 = Type.createEmptyInstance(cl);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 119:
			var name1 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name1);
			if(edecl == null) throw new js__$Boot_HaxeError("Enum not found " + name1);
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name2 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name2);
			if(edecl1 == null) throw new js__$Boot_HaxeError("Enum not found " + name2);
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl1)[index];
			if(tag == null) throw new js__$Boot_HaxeError("Unknown enum index " + name2 + "@" + index);
			var e1 = this.unserializeEnum(edecl1,tag);
			this.cache.push(e1);
			return e1;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf1 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				h.set(s1,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h1 = new haxe_ds_IntMap();
			this.cache.push(h1);
			var buf3 = this.buf;
			var c1 = this.get(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				h1.set(i,this.unserialize());
				c1 = this.get(this.pos++);
			}
			if(c1 != 104) throw new js__$Boot_HaxeError("Invalid IntMap format");
			return h1;
		case 77:
			var h2 = new haxe_ds_ObjectMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s2 = this.unserialize();
				h2.set(s2,this.unserialize());
			}
			this.pos++;
			return h2;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				var s3 = HxOverrides.substr(this.buf,this.pos,19);
				d = HxOverrides.strDate(s3);
				this.pos += 19;
			} else {
				var t = this.readFloat();
				var d1 = new Date();
				d1.setTime(t);
				d = d1;
			}
			this.cache.push(d);
			return d;
		case 115:
			var len1 = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw new js__$Boot_HaxeError("Invalid bytes length");
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len1 & 3;
			var size;
			size = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len1 - rest);
			var bytes = haxe_io_Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c2 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c2 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c2 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c21 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c21 << 4 | c31 >> 2);
				}
			}
			this.pos += len1;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name3 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name3);
			if(cl1 == null) throw new js__$Boot_HaxeError("Class not found " + name3);
			var o2 = Type.createEmptyInstance(cl1);
			this.cache.push(o2);
			o2.hxUnserialize(this);
			if(this.get(this.pos++) != 103) throw new js__$Boot_HaxeError("Invalid custom data");
			return o2;
		case 65:
			var name4 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name4);
			if(cl2 == null) throw new js__$Boot_HaxeError("Class not found " + name4);
			return cl2;
		case 66:
			var name5 = this.unserialize();
			var e2 = this.resolver.resolveEnum(name5);
			if(e2 == null) throw new js__$Boot_HaxeError("Enum not found " + name5);
			return e2;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_Utf8 = function() { };
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = ["haxe","Utf8"];
haxe_Utf8.charCodeAt = function(s,index) {
	return HxOverrides.cca(s,index);
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) return hb;
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe_io_Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return node.value;
			if(c < 0) node = node.left; else node = node.right;
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) return new haxe_ds_TreeNode(null,k,v,null);
		var c = this.compare(k,node.key);
		if(c == 0) return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null?0:node._height); else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl;
		if(l == null) hl = 0; else hl = l._height;
		var hr;
		if(r == null) hr = 0; else hr = r._height;
		if(hl > hr + 2) {
			if((function($this) {
				var $r;
				var _this = l.left;
				$r = _this == null?0:_this._height;
				return $r;
			}(this)) >= (function($this) {
				var $r;
				var _this1 = l.right;
				$r = _this1 == null?0:_this1._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r)); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
		} else if(hr > hl + 2) {
			if((function($this) {
				var $r;
				var _this2 = r.right;
				$r = _this2 == null?0:_this2._height;
				return $r;
			}(this)) > (function($this) {
				var $r;
				var _this3 = r.left;
				$r = _this3 == null?0:_this3._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
		} else return new haxe_ds_TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) h = -1;
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) this._height = ((function($this) {
		var $r;
		var _this = $this.left;
		$r = _this == null?0:_this._height;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var _this1 = $this.right;
		$r = _this1 == null?0:_this1._height;
		return $r;
	}(this))?(function($this) {
		var $r;
		var _this2 = $this.left;
		$r = _this2 == null?0:_this2._height;
		return $r;
	}(this)):(function($this) {
		var $r;
		var _this3 = $this.right;
		$r = _this3 == null?0:_this3._height;
		return $r;
	}(this))) + 1; else this._height = h;
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) return d;
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) return 0;
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) return ld;
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) return d;
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) return this.compare(v1,v2); else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) return this.compareArgs(v1,v2); else return Reflect.compare(v1,v2);
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
haxe_ds__$Vector_Vector_$Impl_$.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
haxe_ds__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var a = [];
	var len = this1.length;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		a[i] = this1[i];
	}
	return a;
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe_io_Path
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Object.prototype.hasOwnProperty.call(val,"name")) this.name = Reflect.field(val,"name"); else this.name = "Error";
	if(Object.prototype.hasOwnProperty.call(val,"message")) this.message = Reflect.field(val,"message"); else this.message = Std.string(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
};
$hxClasses["lime.AssetCache"] = lime_AssetCache;
lime_AssetCache.__name__ = ["lime","AssetCache"];
lime_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime_AssetCache
};
var lime_Assets = function() { };
$hxClasses["lime.Assets"] = lime_Assets;
lime_Assets.__name__ = ["lime","Assets"];
lime_Assets.exists = function(id,type) {
	lime_Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) return audio;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.audio.set(id,audio1);
				return audio1;
			} else haxe_Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 115, className : "lime.Assets", methodName : "getAudioBuffer"});
		} else haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 121, className : "lime.Assets", methodName : "getAudioBuffer"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 127, className : "lime.Assets", methodName : "getAudioBuffer"});
	return null;
};
lime_Assets.getBytes = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) return library.getBytes(symbolName); else haxe_Log.trace("[Assets] String or ByteArray asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 164, className : "lime.Assets", methodName : "getBytes"});
		} else haxe_Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 170, className : "lime.Assets", methodName : "getBytes"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 176, className : "lime.Assets", methodName : "getBytes"});
	return null;
};
lime_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.font.exists(id)) return lime_Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.font.set(id,font);
				return font;
			} else haxe_Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 227, className : "lime.Assets", methodName : "getFont"});
		} else haxe_Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 233, className : "lime.Assets", methodName : "getFont"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 239, className : "lime.Assets", methodName : "getFont"});
	return null;
};
lime_Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime_Assets.cache.enabled) lime_Assets.cache.image.set(id,image1);
				return image1;
			} else haxe_Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 297, className : "lime.Assets", methodName : "getImage"});
		} else haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 303, className : "lime.Assets", methodName : "getImage"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 309, className : "lime.Assets", methodName : "getImage"});
	return null;
};
lime_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_Assets.libraries.get(name);
};
lime_Assets.getPath = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe_Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 426, className : "lime.Assets", methodName : "getPath"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 432, className : "lime.Assets", methodName : "getPath"});
	return null;
};
lime_Assets.getText = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else haxe_Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 469, className : "lime.Assets", methodName : "getText"});
		} else haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 475, className : "lime.Assets", methodName : "getText"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 481, className : "lime.Assets", methodName : "getText"});
	return null;
};
lime_Assets.initialize = function() {
	if(!lime_Assets.initialized) {
		lime_Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime_Assets.initialized = true;
	}
};
lime_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			if(lime_Assets.cache.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(lime_Assets.cache.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(lime_Assets.cache.audio.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
lime_Assets.isValidAudio = function(buffer) {
	return buffer != null;
	return true;
};
lime_Assets.isValidImage = function(buffer) {
	return true;
};
lime_Assets.list = function(type) {
	lime_Assets.initialize();
	var items = [];
	var $it0 = lime_Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime_Assets.loadAudioBuffer = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
		var audio = lime_Assets.cache.audio.get(id);
		if(lime_Assets.isValidAudio(audio)) {
			handler(audio);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(useCache && lime_Assets.cache.enabled) library.loadAudioBuffer(symbolName,function(audio1) {
				var value = audio1;
				lime_Assets.cache.audio.set(id,value);
				handler(audio1);
			}); else library.loadAudioBuffer(symbolName,handler);
			return;
		} else haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 666, className : "lime.Assets", methodName : "loadAudioBuffer"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 672, className : "lime.Assets", methodName : "loadAudioBuffer"});
	handler(null);
};
lime_Assets.loadBytes = function(id,handler) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe_Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 702, className : "lime.Assets", methodName : "loadBytes"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 708, className : "lime.Assets", methodName : "loadBytes"});
	handler(null);
};
lime_Assets.loadImage = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
		var image = lime_Assets.cache.image.get(id);
		if(lime_Assets.isValidImage(image)) {
			handler(image);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(useCache && lime_Assets.cache.enabled) library.loadImage(symbolName,function(image1) {
				lime_Assets.cache.image.set(id,image1);
				handler(image1);
			}); else library.loadImage(symbolName,handler);
			return;
		} else haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 765, className : "lime.Assets", methodName : "loadImage"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 771, className : "lime.Assets", methodName : "loadImage"});
	handler(null);
};
lime_Assets.loadLibrary = function(name,handler) {
	lime_Assets.initialize();
	var data = lime_Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		lime_Assets.libraries.set(name,library);
		library.eventCallback = lime_Assets.library_onEvent;
		library.load(handler);
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + name + "\"",{ fileName : "Assets.hx", lineNumber : 800, className : "lime.Assets", methodName : "loadLibrary"});
};
lime_Assets.loadText = function(id,handler) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			library.loadText(symbolName,handler);
			return;
		} else haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 891, className : "lime.Assets", methodName : "loadText"});
	} else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 897, className : "lime.Assets", methodName : "loadText"});
	handler(null);
};
lime_Assets.registerLibrary = function(name,library) {
	if(lime_Assets.libraries.exists(name)) lime_Assets.unloadLibrary(name);
	if(library != null) library.eventCallback = lime_Assets.library_onEvent;
	lime_Assets.libraries.set(name,library);
};
lime_Assets.unloadLibrary = function(name) {
	lime_Assets.initialize();
	var library = lime_Assets.libraries.get(name);
	if(library != null) {
		lime_Assets.cache.clear(name + ":");
		library.eventCallback = null;
	}
	lime_Assets.libraries.remove(name);
};
lime_Assets.library_onEvent = function(library,type) {
	if(type == "change") lime_Assets.cache.clear();
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		}
		return keyCode;
	}
	,create: function(config) {
		this.parent.config = config;
		if(config != null) {
			var $window = new lime_ui_Window(config);
			var renderer = new lime_graphics_Renderer($window);
			this.parent.addWindow($window);
			this.parent.addRenderer(renderer);
			this.parent.init(renderer.context);
		}
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] 
										   || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleUpdateEvent();
		return 0;
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) return 60; else if(this.framePeriod == 1000) return 0; else return 1000 / this.framePeriod;
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				var listeners = this.parent.windows[0].onKeyDown.listeners;
				var repeat = this.parent.windows[0].onKeyDown.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](keyCode,modifier);
					if(!repeat[i]) {
						this.parent.windows[0].onKeyDown.remove(listeners[i]);
						length--;
					} else i++;
				}
				if(this.parent.windows[0].backend.getEnableTextEvents()) {
					var listeners1 = this.parent.windows[0].onTextInput.listeners;
					var repeat1 = this.parent.windows[0].onTextInput.repeat;
					var length1 = listeners1.length;
					var i1 = 0;
					while(i1 < length1) {
						listeners1[i1](String.fromCharCode(event.keyCode));
						if(!repeat1[i1]) {
							this.parent.windows[0].onTextInput.remove(listeners1[i1]);
							length1--;
						} else i1++;
					}
				}
			} else {
				var listeners2 = this.parent.windows[0].onKeyUp.listeners;
				var repeat2 = this.parent.windows[0].onKeyUp.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](keyCode,modifier);
					if(!repeat2[i2]) {
						this.parent.windows[0].onKeyUp.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
			}
		}
	}
	,handleUpdateEvent: function(__) {
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var listeners = this.parent.onUpdate.listeners;
			var repeat = this.parent.onUpdate.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](this.deltaTime | 0);
				if(!repeat[i]) {
					this.parent.onUpdate.remove(listeners[i]);
					length--;
				} else i++;
			}
			if(this.parent.renderers[0] != null) {
				var listeners1 = this.parent.renderers[0].onRender.listeners;
				var repeat1 = this.parent.renderers[0].onRender.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](this.parent.renderers[0].context);
					if(!repeat1[i1]) {
						this.parent.renderers[0].onRender.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				this.parent.renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else this.nextUpdate = this.currentUpdate + this.framePeriod;
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleUpdateEvent));
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				var listeners = this.parent.windows[0].onWindowFocusIn.listeners;
				var repeat = this.parent.windows[0].onWindowFocusIn.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i]();
					if(!repeat[i]) {
						this.parent.windows[0].onWindowFocusIn.remove(listeners[i]);
						length--;
					} else i++;
				}
				var listeners1 = this.parent.windows[0].onWindowActivate.listeners;
				var repeat1 = this.parent.windows[0].onWindowActivate.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1]();
					if(!repeat1[i1]) {
						this.parent.windows[0].onWindowActivate.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				break;
			case "blur":
				var listeners2 = this.parent.windows[0].onWindowFocusOut.listeners;
				var repeat2 = this.parent.windows[0].onWindowFocusOut.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2]();
					if(!repeat2[i2]) {
						this.parent.windows[0].onWindowFocusOut.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
				var listeners3 = this.parent.windows[0].onWindowDeactivate.listeners;
				var repeat3 = this.parent.windows[0].onWindowDeactivate.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3]();
					if(!repeat3[i3]) {
						this.parent.windows[0].onWindowDeactivate.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) {
					var listeners4 = this.parent.windows[0].onWindowResize.listeners;
					var repeat4 = this.parent.windows[0].onWindowResize.repeat;
					var length4 = listeners4.length;
					var i4 = 0;
					while(i4 < length4) {
						listeners4[i4](this.parent.windows[0].__width,this.parent.windows[0].__height);
						if(!repeat4[i4]) {
							this.parent.windows[0].onWindowResize.remove(listeners4[i4]);
							length4--;
						} else i4++;
					}
				}
				break;
			case "beforeunload":
				var listeners5 = this.parent.windows[0].onWindowClose.listeners;
				var repeat5 = this.parent.windows[0].onWindowClose.repeat;
				var length5 = listeners5.length;
				var i5 = 0;
				while(i5 < length5) {
					listeners5[i5]();
					if(!repeat5[i5]) {
						this.parent.windows[0].onWindowClose.remove(listeners5[i5]);
						length5--;
					} else i5++;
				}
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) this.framePeriod = -1; else if(value > 0) this.framePeriod = 1000 / value; else this.framePeriod = 1000;
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.__cursor = null;
lime__$backend_html5_HTML5Mouse.__hidden = null;
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.warp = function(x,y,window) {
};
lime__$backend_html5_HTML5Mouse.get_cursor = function() {
	if(lime__$backend_html5_HTML5Mouse.__cursor == null) return lime_ui_MouseCursor.DEFAULT;
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.get_lock = function() {
	return false;
};
lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
	return value;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div); else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d")); else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			var listeners = this.parent.onRenderContextLost.listeners;
			var repeat = this.parent.onRenderContextLost.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i]();
				if(!repeat[i]) {
					this.parent.onRenderContextLost.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "webglcontextrestored":
			this.createContext();
			var listeners1 = this.parent.onRenderContextRestored.listeners;
			var repeat1 = this.parent.onRenderContextRestored.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](this.parent.context);
				if(!repeat1[i1]) {
					this.parent.onRenderContextRestored.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		default:
		}
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,enableTextEvents: null
	,parent: null
	,setHeight: null
	,setWidth: null
	,close: function() {
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		}
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				var listeners = this.parent.onMouseDown.listeners;
				var repeat = this.parent.onMouseDown.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](x,y,event.button);
					if(!repeat[i]) {
						this.parent.onMouseDown.remove(listeners[i]);
						length--;
					} else i++;
				}
				break;
			case "mouseenter":
				var listeners1 = this.parent.onWindowEnter.listeners;
				var repeat1 = this.parent.onWindowEnter.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1]();
					if(!repeat1[i1]) {
						this.parent.onWindowEnter.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				break;
			case "mouseleave":
				var listeners2 = this.parent.onWindowLeave.listeners;
				var repeat2 = this.parent.onWindowLeave.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2]();
					if(!repeat2[i2]) {
						this.parent.onWindowLeave.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
				break;
			case "mouseup":
				var listeners3 = this.parent.onMouseUp.listeners;
				var repeat3 = this.parent.onMouseUp.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3](x,y,event.button);
					if(!repeat3[i3]) {
						this.parent.onMouseUp.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
				break;
			case "mousemove":
				var listeners4 = this.parent.onMouseMove.listeners;
				var repeat4 = this.parent.onMouseMove.repeat;
				var length4 = listeners4.length;
				var i4 = 0;
				while(i4 < length4) {
					listeners4[i4](x,y);
					if(!repeat4[i4]) {
						this.parent.onMouseMove.remove(listeners4[i4]);
						length4--;
					} else i4++;
				}
				break;
			default:
			}
		} else {
			var listeners5 = this.parent.onMouseWheel.listeners;
			var repeat5 = this.parent.onMouseWheel.repeat;
			var length5 = listeners5.length;
			var i5 = 0;
			while(i5 < length5) {
				listeners5[i5](event.deltaX,-event.deltaY);
				if(!repeat5[i5]) {
					this.parent.onMouseWheel.remove(listeners5[i5]);
					length5--;
				} else i5++;
			}
		}
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var touch = event.changedTouches[0];
		var id = touch.identifier;
		var x = 0.0;
		var y = 0.0;
		if(this.element != null) {
			if(this.canvas != null) {
				var rect = this.canvas.getBoundingClientRect();
				x = (touch.clientX - rect.left) * (this.parent.__width / rect.width);
				y = (touch.clientY - rect.top) * (this.parent.__height / rect.height);
			} else if(this.div != null) {
				var rect1 = this.div.getBoundingClientRect();
				x = touch.clientX - rect1.left;
				y = touch.clientY - rect1.top;
			} else {
				var rect2 = this.element.getBoundingClientRect();
				x = (touch.clientX - rect2.left) * (this.parent.__width / rect2.width);
				y = (touch.clientY - rect2.top) * (this.parent.__height / rect2.height);
			}
		} else {
			x = touch.clientX;
			y = touch.clientY;
		}
		var _g = event.type;
		switch(_g) {
		case "touchstart":
			var listeners = this.parent.onTouchStart.listeners;
			var repeat = this.parent.onTouchStart.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](x,y,id);
				if(!repeat[i]) {
					this.parent.onTouchStart.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "touchmove":
			var listeners1 = this.parent.onTouchMove.listeners;
			var repeat1 = this.parent.onTouchMove.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](x,y,id);
				if(!repeat1[i1]) {
					this.parent.onTouchMove.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		case "touchend":
			var listeners2 = this.parent.onTouchEnd.listeners;
			var repeat2 = this.parent.onTouchEnd.repeat;
			var length2 = listeners2.length;
			var i2 = 0;
			while(i2 < length2) {
				listeners2[i2](x,y,id);
				if(!repeat2[i2]) {
					this.parent.onTouchEnd.remove(listeners2[i2]);
					length2--;
				} else i2++;
			}
			break;
		default:
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setEnableTextEvents: function(value) {
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMinimized: function(value) {
		return false;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	init: null
	,onGamepadAxisMove: null
	,onGamepadButtonDown: null
	,onGamepadButtonUp: null
	,onGamepadConnect: null
	,onGamepadDisconnect: null
	,onKeyDown: null
	,onKeyUp: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onTextEdit: null
	,onTextInput: null
	,onTouchEnd: null
	,onTouchMove: null
	,onTouchStart: null
	,onWindowActivate: null
	,onWindowClose: null
	,onWindowDeactivate: null
	,onWindowEnter: null
	,onWindowFocusIn: null
	,onWindowFocusOut: null
	,onWindowFullscreen: null
	,onWindowLeave: null
	,onWindowMove: null
	,onWindowMinimize: null
	,onWindowResize: null
	,onWindowRestore: null
	,render: null
	,update: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	init: function(context) {
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchEnd: function(x,y,id) {
	}
	,onTouchMove: function(x,y,id) {
	}
	,onTouchStart: function(x,y,id) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowEnter: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app_Event();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) lime_app_Application.current = this;
	this.modules = [];
	this.renderers = [];
	this.windows = [];
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.onUpdate.add($bind(this,this.update));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.current = null;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	config: null
	,modules: null
	,onUpdate: null
	,renderer: null
	,renderers: null
	,window: null
	,windows: null
	,backend: null
	,initialized: null
	,addModule: function(module) {
		this.modules.push(module);
		if(this.initialized && this.renderers[0] != null) module.init(this.renderers[0].context);
	}
	,addRenderer: function(renderer) {
		renderer.onRender.add($bind(this,this.render));
		renderer.onRenderContextLost.add($bind(this,this.onRenderContextLost));
		renderer.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
		this.renderers.push(renderer);
	}
	,addWindow: function(window) {
		this.windows.push(window);
		window.onGamepadAxisMove.add($bind(this,this.onGamepadAxisMove));
		window.onGamepadButtonDown.add($bind(this,this.onGamepadButtonDown));
		window.onGamepadButtonUp.add($bind(this,this.onGamepadButtonUp));
		window.onGamepadConnect.add($bind(this,this.onGamepadConnect));
		window.onGamepadDisconnect.add($bind(this,this.onGamepadDisconnect));
		window.onKeyDown.add($bind(this,this.onKeyDown));
		window.onKeyUp.add($bind(this,this.onKeyUp));
		window.onMouseDown.add($bind(this,this.onMouseDown));
		window.onMouseMove.add($bind(this,this.onMouseMove));
		window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
		window.onMouseUp.add($bind(this,this.onMouseUp));
		window.onMouseWheel.add($bind(this,this.onMouseWheel));
		window.onTextEdit.add($bind(this,this.onTextEdit));
		window.onTextInput.add($bind(this,this.onTextInput));
		window.onTouchStart.add($bind(this,this.onTouchStart));
		window.onTouchMove.add($bind(this,this.onTouchMove));
		window.onTouchEnd.add($bind(this,this.onTouchEnd));
		window.onWindowActivate.add($bind(this,this.onWindowActivate));
		window.onWindowClose.add($bind(this,this.onWindowClose));
		window.onWindowDeactivate.add($bind(this,this.onWindowDeactivate));
		window.onWindowEnter.add($bind(this,this.onWindowEnter));
		window.onWindowFocusIn.add($bind(this,this.onWindowFocusIn));
		window.onWindowFocusOut.add($bind(this,this.onWindowFocusOut));
		window.onWindowFullscreen.add($bind(this,this.onWindowFullscreen));
		window.onWindowLeave.add($bind(this,this.onWindowLeave));
		window.onWindowMinimize.add($bind(this,this.onWindowMinimize));
		window.onWindowMove.add($bind(this,this.onWindowMove));
		window.onWindowResize.add($bind(this,this.onWindowResize));
		window.onWindowRestore.add($bind(this,this.onWindowRestore));
		window.create(this);
	}
	,create: function(config) {
		this.backend.create(config);
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,init: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.init(context);
		}
		this.initialized = true;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onKeyDown: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(keyCode,modifier);
		}
	}
	,onKeyUp: function(keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(keyCode,modifier);
		}
	}
	,onMouseDown: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(x,y,button);
		}
	}
	,onMouseMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(x,y);
		}
	}
	,onMouseMoveRelative: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(x,y);
		}
	}
	,onMouseUp: function(x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(x,y,button);
		}
	}
	,onMouseWheel: function(deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(deltaX,deltaY);
		}
	}
	,onRenderContextLost: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost();
		}
	}
	,onRenderContextRestored: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(context);
		}
	}
	,onTextEdit: function(text,start,length) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextEdit(text,start,length);
		}
	}
	,onTextInput: function(text) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextInput(text);
		}
	}
	,onTouchEnd: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(x,y,id);
		}
	}
	,onTouchMove: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(x,y,id);
		}
	}
	,onTouchStart: function(x,y,id) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(x,y,id);
		}
	}
	,onWindowActivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate();
		}
	}
	,onWindowClose: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose();
		}
	}
	,onWindowDeactivate: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate();
		}
	}
	,onWindowEnter: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowEnter();
		}
	}
	,onWindowFocusIn: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn();
		}
	}
	,onWindowFocusOut: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut();
		}
	}
	,onWindowFullscreen: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen();
		}
	}
	,onWindowLeave: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowLeave();
		}
	}
	,onWindowMinimize: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize();
		}
	}
	,onWindowMove: function(x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(x,y);
		}
	}
	,onWindowResize: function(width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(width,height);
		}
	}
	,onWindowRestore: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore();
		}
	}
	,removeModule: function(module) {
		HxOverrides.remove(this.modules,module);
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.renderers,renderer,0) > -1) HxOverrides.remove(this.renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && HxOverrides.indexOf(this.windows,window,0) > -1) {
			window.close();
			HxOverrides.remove(this.windows,window);
		}
	}
	,render: function(context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(context);
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_renderer: function() {
		return this.renderers[0];
	}
	,get_window: function() {
		return this.windows[0];
	}
	,__class__: lime_app_Application
	,__properties__: {get_window:"get_window",get_renderer:"get_renderer",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var lime_app_Event = function() {
	this.listeners = [];
	this.priorities = [];
	this.repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	listeners: null
	,repeat: null
	,priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,remove: function(listener) {
		var index = HxOverrides.indexOf(this.listeners,listener,0);
		if(index > -1) {
			this.listeners.splice(index,1);
			this.priorities.splice(index,1);
			this.repeat.splice(index,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Preloader = function() {
	this.total = 0;
	this.loaded = 0;
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	complete: null
	,onComplete: null
	,loaded: null
	,total: null
	,create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				var image = new Image();
				lime_app_Preloader.images.set(url,image);
				image.onload = $bind(this,this.image_onLoad);
				image.src = url;
				this.total++;
				break;
			case "BINARY":
				var loader = new lime_net_URLLoader();
				loader.set_dataFormat(lime_net_URLLoaderDataFormat.BINARY);
				lime_app_Preloader.loaders.set(url,loader);
				this.total++;
				break;
			case "TEXT":
				var loader1 = new lime_net_URLLoader();
				lime_app_Preloader.loaders.set(url,loader1);
				this.total++;
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime_app_Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime_app_Preloader.loaders.get(url1);
			loader2.onComplete.add($bind(this,this.loader_onComplete));
			loader2.load(new lime_net_URLRequest(url1));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			_g.loaded++;
			_g.update(_g.loaded,_g.total);
			if(_g.loaded == _g.total) _g.start();
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_g.loaded++;
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					_g.update(_g.loaded,_g.total);
					if(_g.loaded == _g.total) _g.start();
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
	}
	,start: function() {
		if(this.onComplete != null) this.onComplete();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(loader) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime_app_Preloader
};
var lime_audio_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime_audio_ALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime_audio_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_audio_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_audio_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime_audio_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_audio_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_audio_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_audio_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_audio_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_audio_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_audio_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_audio_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_audio_openal_AL.enable(capability);
	}
	,genSource: function() {
		return lime_audio_openal_AL.genSource();
	}
	,genSources: function(n) {
		return lime_audio_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return lime_audio_openal_AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime_audio_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_audio_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_audio_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_audio_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_audio_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_audio_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_audio_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_audio_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_audio_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_audio_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_audio_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_audio_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_audio_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_audio_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_audio_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_audio_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_audio_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_audio_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param) {
		return lime_audio_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_audio_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_audio_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_audio_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_audio_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_audio_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_audio_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_audio_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_audio_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_audio_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_audio_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_audio_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_audio_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_audio_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_audio_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_audio_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_audio_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_audio_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_audio_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_audio_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_audio_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_audio_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_audio_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_audio_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_audio_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_audio_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_audio_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_audio_openal_AL.speedOfSound(value);
	}
	,__class__: lime_audio_ALAudioContext
};
var lime_audio_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime_audio_ALCAudioContext.prototype = {
	FALSE: null
	,TRUE: null
	,FREQUENCY: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,NO_ERROR: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,OUT_OF_MEMORY: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,EXTENSIONS: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,closeDevice: function(device) {
		return lime_audio_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_audio_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_audio_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_audio_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_audio_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_audio_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_audio_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_audio_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_audio_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_audio_openal_ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime_audio_openal_ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime_audio_openal_ALC.suspendContext(context);
	}
	,__class__: lime_audio_ALCAudioContext
};
var lime_audio_AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime_audio_AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime_audio_AudioBuffer.fromFile = function(path) {
	return null;
};
lime_audio_AudioBuffer.fromURL = function(url,handler) {
};
lime_audio_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,id: null
	,sampleRate: null
	,src: null
	,dispose: function() {
	}
	,__class__: lime_audio_AudioBuffer
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : ["lime","audio","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = ["lime","audio","AudioManager"];
lime_audio_AudioManager.context = null;
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
		} else lime_audio_AudioManager.context = context;
	}
};
lime_audio_AudioManager.resume = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime_audio_AudioManager.shutdown = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime_audio_AudioManager.suspend = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
var lime_audio_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) loops = 0;
	if(offset == null) offset = 0;
	this.onComplete = new lime_app_Event();
	this.buffer = buffer;
	this.offset = offset;
	if(length != null && length != 0) this.set_length(length);
	this.loops = loops;
	this.id = 0;
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = ["lime","audio","AudioSource"];
lime_audio_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,loops: null
	,offset: null
	,id: null
	,playing: null
	,pauseTime: null
	,__length: null
	,dispose: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.id != 0) al.deleteSource(this.id);
				break;
			default:
			}
		}
	}
	,init: function() {
		{
			var _g = lime_audio_AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if(this.buffer.id == 0) {
					this.buffer.id = al.genBuffer();
					var format = 0;
					if(this.buffer.channels == 1) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
					} else if(this.buffer.channels == 2) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
					}
					al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
				}
				this.id = al.genSource();
				al.sourcei(this.id,al.BUFFER,this.buffer.id);
				break;
			default:
			}
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,timer_onRun: function() {
	}
	,get_currentTime: function() {
		return 0;
	}
	,set_currentTime: function(value) {
		return this.pauseTime = value;
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return 1;
	}
	,get_length: function() {
		if(this.__length != null) return this.__length;
		return 0;
	}
	,set_length: function(value) {
		return this.__length = value;
	}
	,__class__: lime_audio_AudioSource
	,__properties__: {set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_audio_FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime_audio_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime_audio_FlashAudioContext
};
var lime_audio_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime_audio_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.src != null) return buffer.src.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_audio_AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) return buffer.src.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) return buffer.src.buffered;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) return buffer.src.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) return buffer.src.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) return buffer.src.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) return buffer.src.error;
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) return buffer.src.loop;
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) return buffer.src.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) return buffer.src.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) return buffer.src.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) return buffer.src.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) return buffer.src.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) return buffer.src.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) return buffer.src.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) return buffer.src.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) return buffer.src.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) return buffer.src.load();
	}
	,pause: function(buffer) {
		if(buffer.src != null) return buffer.src.pause();
	}
	,play: function(buffer) {
		if(buffer.src != null) return buffer.src.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) buffer.src.autoplay = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) buffer.src.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) buffer.src.loop = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) buffer.src.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) buffer.src.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) buffer.src.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) buffer.src.volume = value;
	}
	,__class__: lime_audio_HTML5AudioContext
};
var lime_audio_openal_AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
lime_audio_openal_AL.__name__ = ["lime","audio","openal","AL"];
lime_audio_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_audio_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.bufferf = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_audio_openal_AL.bufferi = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_audio_openal_AL.deleteBuffer = function(buffer) {
};
lime_audio_openal_AL.deleteBuffers = function(buffers) {
};
lime_audio_openal_AL.deleteSource = function(source) {
};
lime_audio_openal_AL.deleteSources = function(sources) {
};
lime_audio_openal_AL.disable = function(capability) {
};
lime_audio_openal_AL.distanceModel = function(distanceModel) {
};
lime_audio_openal_AL.dopplerFactor = function(value) {
};
lime_audio_openal_AL.dopplerVelocity = function(value) {
};
lime_audio_openal_AL.enable = function(capability) {
};
lime_audio_openal_AL.genSource = function() {
	return 0;
};
lime_audio_openal_AL.genSources = function(n) {
	return null;
};
lime_audio_openal_AL.genBuffer = function() {
	return 0;
};
lime_audio_openal_AL.genBuffers = function(n) {
	return null;
};
lime_audio_openal_AL.getBoolean = function(param) {
	return false;
};
lime_audio_openal_AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getDouble = function(param) {
	return 0;
};
lime_audio_openal_AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_audio_openal_AL.getError = function() {
	return 0;
};
lime_audio_openal_AL.getErrorString = function() {
	var _g = lime_audio_openal_AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_AL.getFloat = function(param) {
	return 0;
};
lime_audio_openal_AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getInteger = function(param) {
	return 0;
};
lime_audio_openal_AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListener3f = function(param) {
	return null;
};
lime_audio_openal_AL.getListener3i = function(param) {
	return null;
};
lime_audio_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_audio_openal_AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_audio_openal_AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_audio_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcefv = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getString = function(param) {
	return null;
};
lime_audio_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_audio_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_audio_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_audio_openal_AL.isSource = function(source) {
	return false;
};
lime_audio_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listenerf = function(param,value) {
};
lime_audio_openal_AL.listenerfv = function(param,values) {
};
lime_audio_openal_AL.listeneri = function(param,value) {
};
lime_audio_openal_AL.listeneriv = function(param,values) {
};
lime_audio_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.sourcef = function(source,param,value) {
};
lime_audio_openal_AL.sourcefv = function(source,param,values) {
};
lime_audio_openal_AL.sourcei = function(source,param,value) {
};
lime_audio_openal_AL.sourceiv = function(source,param,values) {
};
lime_audio_openal_AL.sourcePlay = function(source) {
};
lime_audio_openal_AL.sourcePlayv = function(sources) {
};
lime_audio_openal_AL.sourceStop = function(source) {
};
lime_audio_openal_AL.sourceStopv = function(sources) {
};
lime_audio_openal_AL.sourceRewind = function(source) {
};
lime_audio_openal_AL.sourceRewindv = function(sources) {
};
lime_audio_openal_AL.sourcePause = function(source) {
};
lime_audio_openal_AL.sourcePausev = function(sources) {
};
lime_audio_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_audio_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_audio_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_audio_openal_AL.speedOfSound = function(value) {
};
var lime_audio_openal_ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
lime_audio_openal_ALC.__name__ = ["lime","audio","openal","ALC"];
lime_audio_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_audio_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_audio_openal_ALC.destroyContext = function(context) {
};
lime_audio_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_audio_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_audio_openal_ALC.getError = function(device) {
	return 0;
};
lime_audio_openal_ALC.getErrorString = function(device) {
	var _g = lime_audio_openal_ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_audio_openal_ALC.getString = function(device,param) {
	return null;
};
lime_audio_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_audio_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_audio_openal_ALC.processContext = function(context) {
};
lime_audio_openal_ALC.suspendContext = function(context) {
};
var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	clear: function() {
	}
	,clearColor: function(r,g,b,a) {
	}
	,clearDepth: function(depth) {
	}
	,clearStencil: function(stencil) {
	}
	,__class__: lime_graphics_ConsoleRenderContext
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime_graphics_FlashRenderContext.prototype = {
	accessibilityImplementation: null
	,accessibilityProperties: null
	,alpha: null
	,blendMode: null
	,blendShader: null
	,buttonMode: null
	,cacheAsBitmap: null
	,contextMenu: null
	,doubleClickEnabled: null
	,dropTarget: null
	,filters: null
	,focusRect: null
	,graphics: null
	,height: null
	,hitArea: null
	,loaderInfo: null
	,mask: null
	,mouseChildren: null
	,mouseEnabled: null
	,mouseX: null
	,mouseY: null
	,name: null
	,needsSoftKeyboard: null
	,numChildren: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,rotation: null
	,rotationX: null
	,rotationY: null
	,rotationZ: null
	,scale9Grid: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,scrollRect: null
	,softKeyboardInputAreaOfInterest: null
	,soundTransform: null
	,stage: null
	,tabChildren: null
	,tabEnabled: null
	,tabIndex: null
	,textSnapshot: null
	,transform: null
	,useHandCursor: null
	,visible: null
	,width: null
	,x: null
	,y: null
	,z: null
	,addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.renderers[0] != null) {
			var _g = lime_app_Application.current.renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				this.type = lime_graphics_ImageType.FLASH;
				break;
			default:
				this.type = lime_graphics_ImageType.DATA;
			}
		} else this.type = lime_graphics_ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime_graphics_ImageBuffer(new Uint8Array(width * height * 4),width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.__base64Encoder = null;
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,bitmapData.width,bitmapData.height);
	buffer.__srcBitmapData = bitmapData;
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	return lime_graphics_Image.__base64Encoder.encodeBytes(haxe_io_Bytes.ofData(bytes.byteView)).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 255 && bytes.readUnsignedByte() == 216;
};
lime_graphics_Image.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 137 && bytes.readUnsignedByte() == 80 && bytes.readUnsignedByte() == 78 && bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 13 && bytes.readUnsignedByte() == 10 && bytes.readUnsignedByte() == 26 && bytes.readUnsignedByte() == 10;
};
lime_graphics_Image.__isGIF = function(bytes) {
	bytes.position = 0;
	if(bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 73 && bytes.readUnsignedByte() == 70 && bytes.readUnsignedByte() == 56) {
		var b = bytes.readUnsignedByte();
		return (b == 55 || b == 57) && bytes.readUnsignedByte() == 97;
	}
	return false;
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		return image;
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(this.width <= 0 || this.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
		if(destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x = -destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y = -destPoint.y;
			destPoint.y = 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			if(format == null || format == 0) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),color);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			if(format == null || format == 0) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) findColor = true;
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null || format == 0) return (color & 255) << 24 | color >> 8; else return color;
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null || format == 0) return (color & 255) << 24 | color >> 8; else return color;
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var byteArray = this.buffer.__srcBitmapData.getPixels(rect.__toFlashRectangle());
			if(format == null || format == 0) {
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					color = byteArray.readUnsignedInt();
					byteArray.position -= 4;
					byteArray.writeUnsignedInt((color & 255) << 24 | color >> 8);
				}
				byteArray.position = 0;
			}
			return byteArray;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return null;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			if(format == null || format == 0) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,color);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			if(format == null || format == 0) color = (color & 255) << 24 | color >> 8;
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,setPixels: function(rect,byteArray,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,byteArray,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,byteArray,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			if(format == null || format == 0) {
				var srcData = byteArray;
				byteArray = new lime_utils_ByteArray();
				var color;
				var length = byteArray.length / 4 | 0;
				var _g1 = 0;
				while(_g1 < length) {
					var i = _g1++;
					color = srcData.readUnsignedInt();
					byteArray.writeUnsignedInt((color & 255) << 24 | color >> 8);
				}
				srcData.position = 0;
				byteArray.position = 0;
			}
			this.buffer.__srcBitmapData.setPixels(rect.__toFlashRectangle(),byteArray);
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) type = "image/png"; else if(lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime_graphics_Image.__isGIF(bytes)) type = "image/gif"; else throw new js__$Boot_HaxeError("Image tried to read a PNG/JPG ByteArray, but found an invalid header.");
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.onload = function(_) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.sync(this);
			lime_graphics_utils_ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
				break;
			default:
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) return false;
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) return false;
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) bitsPerPixel = 4;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	if(format == null) this.format = 0; else this.format = format;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			buffer.data = new Uint8Array(this.data.byteLength);
			var copy = new Uint8Array(this.data);
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app_Event();
	this.onRenderContextRestored = new lime_app_Event();
	this.onRenderContextLost = new lime_app_Event();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.currentRenderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	context: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onRender: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_cairo_Cairo = function(surface) {
	if(surface != null) {
	}
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime_graphics_cairo_Cairo.version = null;
lime_graphics_cairo_Cairo.versionString = null;
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,recreate: function(surface) {
	}
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,destroy: function() {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,reference: function() {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontFace: function(face) {
	}
	,setFontSize: function(size) {
	}
	,getFontOptions: function() {
		return 0;
	}
	,setFontOptions: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_referenceCount: function() {
		return 0;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",get_referenceCount:"get_referenceCount",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo_CairoFont = function(font) {
};
$hxClasses["lime.graphics.cairo.CairoFont"] = lime_graphics_cairo_CairoFont;
lime_graphics_cairo_CairoFont.__name__ = ["lime","graphics","cairo","CairoFont"];
lime_graphics_cairo_CairoFont.prototype = {
	handle: null
	,font: null
	,destroy: function() {
	}
	,__class__: lime_graphics_cairo_CairoFont
};
var lime_graphics_cairo_CairoFontOptions = function(handle) {
	this.handle = handle;
};
$hxClasses["lime.graphics.cairo.CairoFontOptions"] = lime_graphics_cairo_CairoFontOptions;
lime_graphics_cairo_CairoFontOptions.__name__ = ["lime","graphics","cairo","CairoFontOptions"];
lime_graphics_cairo_CairoFontOptions.prototype = {
	handle: null
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_subpixelOrder: function() {
		return 0;
	}
	,set_subpixelOrder: function(value) {
		return value;
	}
	,get_hintStyle: function() {
		return 0;
	}
	,set_hintStyle: function(value) {
		return value;
	}
	,get_hintMetrics: function() {
		return 0;
	}
	,set_hintMetrics: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_CairoFontOptions
	,__properties__: {set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy = function(this1) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__properties__ = {get_width:"get_width",get_height:"get_height"}
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$._new = function(format,width,height) {
	return 0;
};
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.createForData = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.destroy = function(this1) {
};
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(type == null) type = lime_graphics_format_BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	case 0:
		pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
		break;
	default:
	} else {
	}
	var data = new lime_utils_ByteArray(fileHeaderLength + infoHeaderLength + pixelValuesLength);
	if(fileHeaderLength > 0) {
		data.writeByte(66);
		data.writeByte(77);
		data.writeInt(data.length);
		data.writeShort(0);
		data.writeShort(0);
		data.writeInt(fileHeaderLength + infoHeaderLength);
	}
	data.writeInt(infoHeaderLength);
	data.writeInt(image.width);
	data.writeInt(type == lime_graphics_format_BMPType.ICO?image.height * 2:image.height);
	data.writeShort(1);
	data.writeShort(type == lime_graphics_format_BMPType.RGB?24:32);
	data.writeInt(type == lime_graphics_format_BMPType.BITFIELD?3:0);
	data.writeInt(pixelValuesLength);
	data.writeInt(11824);
	data.writeInt(11824);
	data.writeInt(0);
	data.writeInt(0);
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.writeInt(16711680);
		data.writeInt(65280);
		data.writeInt(255);
		data.writeInt(-16777216);
		data.writeByte(32);
		data.writeByte(110);
		data.writeByte(105);
		data.writeByte(87);
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.writeByte(0);
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var a;
	var r;
	var g;
	var b;
	if(type != null) switch(type[1]) {
	case 1:
		var _g1 = 0;
		var _g2 = image.height;
		while(_g1 < _g2) {
			var y = _g1++;
			pixels.position = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g21 = image.width;
			while(_g3 < _g21) {
				var x = _g3++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
			}
		}
		break;
	case 2:
		var andMask = new lime_utils_ByteArray(image.width * image.height);
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			pixels.position = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g22 = image.width;
			while(_g31 < _g22) {
				var x1 = _g31++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
				andMask.writeByte(0);
			}
		}
		data.writeBytes(andMask);
		break;
	case 0:
		var _g12 = 0;
		var _g5 = image.height;
		while(_g12 < _g5) {
			var y2 = _g12++;
			pixels.position = (image.height - 1 - y2) * 4 * image.width;
			var _g32 = 0;
			var _g23 = image.width;
			while(_g32 < _g23) {
				var x2 = _g32++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
			}
			var _g33 = 0;
			var _g24 = image.width * 3 % 4;
			while(_g33 < _g24) {
				var i1 = _g33++;
				data.writeByte(0);
			}
		}
		break;
	default:
	} else {
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.encode = function(image,quality) {
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.encode = function(image) {
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version"}
lime_graphics_opengl_GL.version = null;
lime_graphics_opengl_GL.context = null;
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,data,usage) {
	lime_graphics_opengl_GL.context.bufferData(target,data,usage);
};
lime_graphics_opengl_GL.bufferSubData = function(target,offset,data) {
	lime_graphics_opengl_GL.context.bufferSubData(target,offset,data);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime_graphics_opengl_GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname);
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime_graphics_opengl_GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.uniform1f = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1f(location,x);
};
lime_graphics_opengl_GL.uniform1fv = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1fv(location,x);
};
lime_graphics_opengl_GL.uniform1i = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1i(location,x);
};
lime_graphics_opengl_GL.uniform1iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform1iv(location,v);
};
lime_graphics_opengl_GL.uniform2f = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2f(location,x,y);
};
lime_graphics_opengl_GL.uniform2fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2fv(location,v);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2iv(location,v);
};
lime_graphics_opengl_GL.uniform3f = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3f(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3fv(location,v);
};
lime_graphics_opengl_GL.uniform3i = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3i(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3iv(location,v);
};
lime_graphics_opengl_GL.uniform4f = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4f(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4fv(location,v);
};
lime_graphics_opengl_GL.uniform4i = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4i(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4iv(location,v);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix2fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix3fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix4fv(location,transpose,v);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(indx,x) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(indx,x,y) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(indx,x,y,z) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.get_version = function() {
	return 2;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(sourceImage);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.webkitImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.data == null) {
		buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		buffer.data = new Uint8Array(buffer.__srcImageData.data.buffer);
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.sync(image);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,byteArray,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,byteArray,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image) {
	if(image.dirty && image.type != lime_graphics_ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.__alpha16 = null;
lime_graphics_utils_ImageDataUtil.__clamp = null;
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) return;
	var stride = image.buffer.width * 4;
	var offset;
	var rowStart = Std["int"](rect.get_top() + image.offsetY);
	var rowEnd = Std["int"](rect.get_bottom() + image.offsetY);
	var columnStart = Std["int"](rect.get_left() + image.offsetX);
	var columnEnd = Std["int"](rect.get_right() + image.offsetX);
	var r;
	var g;
	var b;
	var a;
	var ex = 0;
	var _g = rowStart;
	while(_g < rowEnd) {
		var row = _g++;
		var _g1 = columnStart;
		while(_g1 < columnEnd) {
			var column = _g1++;
			offset = row * stride + column * 4;
			a = data[offset + 3] * colorMatrix[18] + colorMatrix[19] * 255 | 0;
			if(a > 255) ex = a - 255; else ex = 0;
			b = data[offset + 2] * colorMatrix[12] + colorMatrix[14] * 255 + ex | 0;
			if(b > 255) ex = b - 255; else ex = 0;
			g = data[offset + 1] * colorMatrix[6] + colorMatrix[9] * 255 + ex | 0;
			if(g > 255) ex = g - 255; else ex = 0;
			r = data[offset] * colorMatrix[0] + colorMatrix[4] * 255 + ex | 0;
			if(r > 255) data[offset] = 255; else data[offset] = r;
			if(g > 255) data[offset + 1] = 255; else data[offset + 1] = g;
			if(b > 255) data[offset + 2] = 255; else data[offset + 2] = b;
			if(a > 255) data[offset + 3] = 255; else data[offset + 3] = a;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return;
	var srcStride = sourceImage.buffer.width * 4 | 0;
	var srcPosition = (sourceRect.x + sourceImage.offsetX) * 4 + srcStride * (sourceRect.y + sourceImage.offsetY) + srcIdx | 0;
	var srcRowOffset = srcStride - (4 * (sourceRect.width + sourceImage.offsetX) | 0);
	var srcRowEnd = 4 * (sourceRect.x + sourceImage.offsetX + sourceRect.width) | 0;
	var srcData1 = sourceImage.buffer.data;
	var destStride = image.buffer.width * 4 | 0;
	var destPosition = (destPoint.x + image.offsetX) * 4 + destStride * (destPoint.y + image.offsetY) + destIdx | 0;
	var destRowOffset = destStride - (4 * (sourceRect.width + image.offsetX) | 0);
	var destRowEnd = 4 * (destPoint.x + image.offsetX + sourceRect.width) | 0;
	var destData1 = image.buffer.data;
	var length = sourceRect.width * sourceRect.height | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		destData1[destPosition] = srcData1[srcPosition];
		srcPosition += 4;
		destPosition += 4;
		if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
		if(destPosition % destStride > destRowEnd) destPosition += destRowOffset;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	var rowOffset = destPoint.y + image.offsetY - sourceRect.y - sourceImage.offsetY | 0;
	var columnOffset = destPoint.x + image.offsetX - sourceRect.x - sourceImage.offsetY | 0;
	var sourceData = sourceImage.buffer.data;
	var sourceStride = sourceImage.buffer.width * 4;
	var sourceOffset = 0;
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset = 0;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g2 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				offset = (row + rowOffset) * stride + (column + columnOffset) * 4;
				data[offset] = sourceData[sourceOffset];
				data[offset + 1] = sourceData[sourceOffset + 1];
				data[offset + 2] = sourceData[sourceOffset + 2];
				data[offset + 3] = sourceData[sourceOffset + 3];
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var outA;
		var oneMinusSourceAlpha;
		var _g11 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g4 = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g11 < _g4) {
			var row1 = _g11++;
			var _g31 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g21 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g31 < _g21) {
				var column1 = _g31++;
				sourceOffset = row1 * sourceStride + column1 * 4;
				offset = (row1 + rowOffset) * stride + (column1 + columnOffset) * 4;
				sourceAlpha = sourceData[sourceOffset + 3] / 255.0;
				destAlpha = data[offset + 3] / 255.0;
				oneMinusSourceAlpha = 1 - sourceAlpha;
				outA = sourceAlpha + destAlpha * oneMinusSourceAlpha;
				var index = Math.round((sourceData[sourceOffset] * sourceAlpha + data[offset] * destAlpha * oneMinusSourceAlpha) / outA);
				data[offset] = lime_graphics_utils_ImageDataUtil.__clamp[index];
				var index1 = Math.round((sourceData[sourceOffset + 1] * sourceAlpha + data[offset + 1] * destAlpha * oneMinusSourceAlpha) / outA);
				data[offset + 1] = lime_graphics_utils_ImageDataUtil.__clamp[index1];
				var index2 = Math.round((sourceData[sourceOffset + 2] * sourceAlpha + data[offset + 2] * destAlpha * oneMinusSourceAlpha) / outA);
				data[offset + 2] = lime_graphics_utils_ImageDataUtil.__clamp[index2];
				var index3 = Math.round(outA * 255.0);
				data[offset + 3] = lime_graphics_utils_ImageDataUtil.__clamp[index3];
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	var rgba = r | g << 8 | b << 16 | a << 24;
	var data = image.buffer.data;
	if(data == null) return;
	if(rect.width == image.buffer.width && rect.height == image.buffer.height && rect.x == 0 && rect.y == 0 && image.offsetX == 0 && image.offsetY == 0) {
		var length = image.buffer.width * image.buffer.height;
		var j = 0;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			j = i * 4;
			data[j] = r;
			data[j + 1] = g;
			data[j + 2] = b;
			data[j + 3] = a;
		}
	} else {
		var stride = image.buffer.width * 4;
		var offset;
		var rowStart = rect.y + image.offsetY | 0;
		var rowEnd = Std["int"](rect.get_bottom() + image.offsetY);
		var columnStart = rect.x + image.offsetX | 0;
		var columnEnd = Std["int"](rect.get_right() + image.offsetX);
		var _g1 = rowStart;
		while(_g1 < rowEnd) {
			var row = _g1++;
			var _g11 = columnStart;
			while(_g11 < columnEnd) {
				var column = _g11++;
				offset = row * stride + column * 4;
				data[offset] = r;
				data[offset + 1] = g;
				data[offset + 2] = b;
				data[offset + 3] = a;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) return;
	if(format == 1) color = (color & 16777215) << 8 | color >> 24 & 255;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	var hitColorR = data[offset];
	var hitColorG = data[offset + 1];
	var hitColorB = data[offset + 2];
	var hitColorA;
	if(image.get_transparent()) hitColorA = data[offset + 3]; else hitColorA = 255;
	var r = color >> 24 & 255;
	var g = color >> 16 & 255;
	var b = color >> 8 & 255;
	var a;
	if(image.get_transparent()) a = color & 255; else a = 255;
	if(hitColorR == r && hitColorG == g && hitColorB == b && hitColorA == a) return;
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	while(queue.length > 0) {
		var curPointY = queue.pop();
		var curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var nextPointX = curPointX + dx[i];
			var nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			var nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			if(data[nextPointOffset] == hitColorR && data[nextPointOffset + 1] == hitColorG && data[nextPointOffset + 2] == hitColorB && data[nextPointOffset + 3] == hitColorA) {
				data[nextPointOffset] = r;
				data[nextPointOffset + 1] = g;
				data[nextPointOffset + 2] = b;
				data[nextPointOffset + 3] = a;
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) findColor = true;
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var r;
	var g;
	var b;
	var a;
	var mr;
	var mg;
	var mb;
	var ma;
	if(format == 1) {
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) ma = mask >> 24 & 255; else ma = 255;
		mr = mask >> 16 & 255;
		mg = mask >> 8 & 255;
		mb = mask & 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
		mr = mask >> 24 & 255;
		mg = mask >> 16 & 255;
		mb = mask >> 8 & 255;
		if(image.get_transparent()) ma = mask & 255; else ma = 255;
	}
	color = r | g << 8 | b << 16 | a << 24;
	mask = mr | mg << 8 | mb << 16 | mask << 24;
	var pix;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var ix = _g1++;
		var hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			var iy = _g3++;
			pix = image.getPixel32(ix,iy);
			if(findColor) hit = (pix & mask) == color; else hit = (pix & mask) != color;
			if(hit) {
				if(ix < left) left = ix;
				break;
			}
		}
		if(hit) break;
	}
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		var _ix = _g11++;
		var ix1 = image.width - 1 - _ix;
		var hit1 = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			var iy1 = _g31++;
			pix = image.getPixel32(ix1,iy1);
			if(findColor) hit1 = (pix & mask) == color; else hit1 = (pix & mask) != color;
			if(hit1) {
				if(ix1 > right) right = ix1;
				break;
			}
		}
		if(hit1) break;
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var iy2 = _g12++;
		var hit2 = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			var ix2 = _g32++;
			pix = image.getPixel32(ix2,iy2);
			if(findColor) hit2 = (pix & mask) == color; else hit2 = (pix & mask) != color;
			if(hit2) {
				if(iy2 < top) top = iy2;
				break;
			}
		}
		if(hit2) break;
	}
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		var _iy = _g13++;
		var iy3 = image.height - 1 - _iy;
		var hit3 = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			var ix3 = _g33++;
			pix = image.getPixel32(ix3,iy3);
			if(findColor) hit3 = (pix & mask) == color; else hit3 = (pix & mask) != color;
			if(hit3) {
				if(iy3 > bottom) bottom = iy3;
				break;
			}
		}
		if(hit3) break;
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) w++;
	if(h > 0) h++;
	if(w < 0) w = 0;
	if(h < 0) h = 0;
	if(left == right) w = 1;
	if(top == bottom) h = 1;
	if(left > image.width) left = 0;
	if(top > image.height) top = 0;
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var pixel;
	if(image.get_premultiplied()) {
		var unmultiply = 255.0 / data[offset + 3];
		pixel = lime_graphics_utils_ImageDataUtil.__clamp[data[offset] * unmultiply | 0] << 24 | lime_graphics_utils_ImageDataUtil.__clamp[data[offset + 1] * unmultiply | 0] << 16 | lime_graphics_utils_ImageDataUtil.__clamp[data[offset + 2] * unmultiply | 0] << 8;
	} else pixel = data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8;
	if(format == 1) return pixel >> 8 & 16777215; else return pixel;
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var a;
	if(image.get_transparent()) a = data[offset + 3]; else a = 255;
	var r;
	var g;
	var b;
	if(image.get_premultiplied() && a != 0) {
		var unmultiply = 255.0 / a;
		var index = Math.round(data[offset] * unmultiply);
		r = lime_graphics_utils_ImageDataUtil.__clamp[index];
		var index1 = Math.round(data[offset + 1] * unmultiply);
		g = lime_graphics_utils_ImageDataUtil.__clamp[index1];
		var index2 = Math.round(data[offset + 2] * unmultiply);
		b = lime_graphics_utils_ImageDataUtil.__clamp[index2];
	} else {
		r = data[offset];
		g = data[offset + 1];
		b = data[offset + 2];
	}
	if(format == 1) return a << 24 | r << 16 | g << 8 | b; else return r << 24 | g << 16 | b << 8 | a;
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) return null;
	var length = rect.width * rect.height | 0;
	var byteArray = new lime_utils_ByteArray(length * 4);
	byteArray.position = 0;
	var srcData = image.buffer.data;
	var srcStride = image.buffer.width * 4 | 0;
	var srcPosition = rect.x * 4 + srcStride * rect.y | 0;
	var srcRowOffset = srcStride - (4 * rect.width | 0);
	var srcRowEnd = 4 * (rect.x + rect.width) | 0;
	byteArray.set_length(length * 4);
	if(format == 1) {
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			byteArray.__set(i * 4 + 1,srcData[srcPosition++]);
			byteArray.__set(i * 4 + 2,srcData[srcPosition++]);
			byteArray.__set(i * 4 + 3,srcData[srcPosition++]);
			byteArray.__set(i * 4,srcData[srcPosition++]);
			if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
		}
	} else {
		var _g1 = 0;
		while(_g1 < length) {
			var i1 = _g1++;
			byteArray.__set(i1 * 4,srcData[srcPosition++]);
			byteArray.__set(i1 * 4 + 1,srcData[srcPosition++]);
			byteArray.__set(i1 * 4 + 2,srcData[srcPosition++]);
			byteArray.__set(i1 * 4 + 3,srcData[srcPosition++]);
			if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
		}
	}
	byteArray.position = 0;
	return byteArray;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) return;
	var rowOffset = destPoint.y + image.offsetY - sourceRect.y - sourceImage.offsetY | 0;
	var columnOffset = destPoint.x + image.offsetX - sourceRect.x - sourceImage.offsetY | 0;
	var sourceData = sourceImage.buffer.data;
	var sourceStride = sourceImage.buffer.width * 4;
	var sourceOffset = 0;
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset = 0;
	var _g1 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
	var _g = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
		var _g2 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
		while(_g3 < _g2) {
			var column = _g3++;
			sourceOffset = row * sourceStride + column * 4;
			offset = (row + rowOffset) * stride + (column + columnOffset) * 4;
			data[offset] = (sourceData[offset] * redMultiplier + data[offset] * (256 - redMultiplier)) / 256 | 0;
			data[offset + 1] = (sourceData[offset + 1] * greenMultiplier + data[offset + 1] * (256 - greenMultiplier)) / 256 | 0;
			data[offset + 2] = (sourceData[offset + 2] * blueMultiplier + data[offset + 2] * (256 - blueMultiplier)) / 256 | 0;
			data[offset + 3] = (sourceData[offset + 3] * alphaMultiplier + data[offset + 3] * (256 - alphaMultiplier)) / 256 | 0;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		a16 = lime_graphics_utils_ImageDataUtil.__alpha16[data[index + 3]];
		data[index] = data[index] * a16 >> 16;
		data[index + 1] = data[index + 1] * a16 >> 16;
		data[index + 2] = data[index + 2] * a16 >> 16;
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime_graphics_ImageBuffer(new Uint8Array(newWidth * newHeight * 4),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (data[sourceIndex] * uOpposite + data[sourceIndexX] * uRatio) * vOpposite + (data[sourceIndexY] * uOpposite + data[sourceIndexXY] * uRatio) * vRatio | 0;
			newData[index + 1] = (data[sourceIndex + 1] * uOpposite + data[sourceIndexX + 1] * uRatio) * vOpposite + (data[sourceIndexY + 1] * uOpposite + data[sourceIndexXY + 1] * uRatio) * vRatio | 0;
			newData[index + 2] = (data[sourceIndex + 2] * uOpposite + data[sourceIndexX + 2] * uRatio) * vOpposite + (data[sourceIndexY + 2] * uOpposite + data[sourceIndexXY + 2] * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData = new Uint8Array(newWidth * newHeight * 4);
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(format == 0) color = color >> 8;
	data[offset] = (color & 16711680) >>> 16;
	data[offset + 1] = (color & 65280) >>> 8;
	data[offset + 2] = color & 255;
	if(image.get_transparent()) data[offset + 3] = 255;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var a;
	var r;
	var g;
	var b;
	if(format == 1) {
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	if(image.get_transparent() && image.get_premultiplied()) {
		var a16 = lime_graphics_utils_ImageDataUtil.__alpha16[a];
		data[offset] = r * a16 >> 16;
		data[offset + 1] = g * a16 >> 16;
		data[offset + 2] = b * a16 >> 16;
		data[offset + 3] = a;
	} else {
		data[offset] = r;
		data[offset + 1] = g;
		data[offset + 2] = b;
		data[offset + 3] = a;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,byteArray,format) {
	if(image.buffer.data == null) return;
	var len = Math.round(rect.width * rect.height);
	var data = image.buffer.data;
	var offset = Math.round(image.buffer.width * (rect.y + image.offsetX) + (rect.x + image.offsetY));
	var pos = offset * 4;
	var boundR = Math.round(rect.x + rect.width + image.offsetX);
	var width = image.buffer.width;
	var color;
	if(format == 1) {
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			if(pos % (width * 4) >= boundR * 4) pos += (width - boundR) * 4;
			color = byteArray.readUnsignedInt();
			data[pos++] = (color & 16711680) >>> 16;
			data[pos++] = (color & 65280) >>> 8;
			data[pos++] = color & 255;
			data[pos++] = (color & -16777216) >>> 24;
		}
	} else {
		var _g1 = 0;
		while(_g1 < len) {
			var i1 = _g1++;
			if(pos % (width * 4) >= boundR * 4) pos += (width - boundR) * 4;
			color = byteArray.readUnsignedInt();
			data[pos++] = (color & -16777216) >>> 24;
			data[pos++] = (color & 16711680) >>> 16;
			data[pos++] = (color & 65280) >>> 8;
			data[pos++] = color & 255;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a;
	var unmultiply;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		a = data[index + 3];
		if(a != 0) {
			unmultiply = 255.0 / a;
			data[index] = lime_graphics_utils_ImageDataUtil.__clamp[data[index] * unmultiply | 0];
			data[index + 1] = lime_graphics_utils_ImageDataUtil.__clamp[data[index + 1] * unmultiply | 0];
			data[index + 2] = lime_graphics_utils_ImageDataUtil.__clamp[data[index + 2] * unmultiply | 0];
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else this1 = new Float32Array(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity);
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new(new Float32Array(this1));
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	var value = _g[0] + second[0];
	_g[0] = value;
	value;
	var _g1 = this1;
	var value1 = _g1[6] + second[6];
	_g1[6] = value1;
	value1;
	var _g2 = this1;
	var value2 = _g2[12] + second[12];
	_g2[12] = value2;
	value2;
	var _g3 = this1;
	var value3 = _g3[18] + second[18];
	_g3[18] = value3;
	value3;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	this1[18] = value;
	return value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	this1[19] = value / 255;
	return value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	this1[12] = value;
	return value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	this1[14] = value / 255;
	return value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	var value1 = value >> 16 & 255;
	this1[4] = value1 / 255;
	value1;
	var value2 = value >> 8 & 255;
	this1[9] = value2 / 255;
	value2;
	var value3 = value & 255;
	this1[14] = value3 / 255;
	value3;
	this1[0] = 0;
	0;
	this1[6] = 0;
	0;
	this1[12] = 0;
	0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	this1[6] = value;
	return value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	this1[9] = value / 255;
	return value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	this1[0] = value;
	return value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	this1[4] = value / 255;
	return value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else this1 = new Float32Array(lime_math__$Matrix4_Matrix4_$Impl_$.__identity);
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(new Float32Array([xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(new Float32Array(this1));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(new Float32Array([c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1]));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(new Float32Array([a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1]));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(new Float32Array([2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1]));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime_math_Vector4(0,0,-1);
	if(up == null) up = new lime_math_Vector4(0,-1,0);
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime_math_Vector4(-dir.y,dir.x,0); else vup = new lime_math_Vector4(1,0,0);
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(new Float32Array([xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var othis = new Float32Array(this1);
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function(x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime_math_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime_math_Rectangle();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime_math_Vector4.X_AXIS = null;
lime_math_Vector4.Y_AXIS = null;
lime_math_Vector4.Z_AXIS = null;
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_net_URLLoader = function(request) {
	this.onSecurityError = new lime_app_Event();
	this.onProgress = new lime_app_Event();
	this.onOpen = new lime_app_Event();
	this.onIOError = new lime_app_Event();
	this.onHTTPStatus = new lime_app_Event();
	this.onComplete = new lime_app_Event();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(lime_net_URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["lime.net.URLLoader"] = lime_net_URLLoader;
lime_net_URLLoader.__name__ = ["lime","net","URLLoader"];
lime_net_URLLoader.prototype = {
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,onComplete: null
	,onHTTPStatus: null
	,onIOError: null
	,onOpen: null
	,onProgress: null
	,onSecurityError: null
	,close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var _g = this;
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.__onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) {
				var listeners = self.onHTTPStatus.listeners;
				var repeat = self.onHTTPStatus.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](_g,s);
					if(!repeat[i]) {
						self.onHTTPStatus.remove(listeners[i]);
						length--;
					} else i++;
				}
			}
			if(s != null && s >= 200 && s < 400) self.__onData(subject.response); else if(s == null) {
				var listeners1 = self.onIOError.listeners;
				var repeat1 = self.onIOError.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](_g,"Failed to connect or resolve host");
					if(!repeat1[i1]) {
						self.onIOError.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
			} else if(s == 12029) {
				var listeners2 = self.onIOError.listeners;
				var repeat2 = self.onIOError.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](_g,"Failed to connect to host");
					if(!repeat2[i2]) {
						self.onIOError.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
			} else if(s == 12007) {
				var listeners3 = self.onIOError.listeners;
				var repeat3 = self.onIOError.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3](_g,"Unknown host");
					if(!repeat3[i3]) {
						self.onIOError.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
			} else if(s == 0) {
				var listeners4 = self.onIOError.listeners;
				var repeat4 = self.onIOError.repeat;
				var length4 = listeners4.length;
				var i4 = 0;
				while(i4 < length4) {
					listeners4[i4](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat4[i4]) {
						self.onIOError.remove(listeners4[i4]);
						length4--;
					} else i4++;
				}
				var listeners5 = self.onSecurityError.listeners;
				var repeat5 = self.onSecurityError.repeat;
				var length5 = listeners5.length;
				var i5 = 0;
				while(i5 < length5) {
					listeners5[i5](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat5[i5]) {
						self.onSecurityError.remove(listeners5[i5]);
						length5--;
					} else i5++;
				}
			} else {
				var listeners6 = self.onIOError.listeners;
				var repeat6 = self.onIOError.repeat;
				var length6 = listeners6.length;
				var i6 = 0;
				while(i6 < length6) {
					listeners6[i6](_g,"Http Error #" + subject.status);
					if(!repeat6[i6]) {
						self.onIOError.remove(listeners6[i6]);
						length6--;
					} else i6++;
				}
			}
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,lime_utils_ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,lime_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open("GET",url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(js_Boot.__cast(method , String),url,true);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			var listeners = this.onIOError.listeners;
			var repeat = this.onIOError.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](this,e.toString());
				if(!repeat[i]) {
					this.onIOError.remove(listeners[i]);
					length--;
				} else i++;
			}
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		var listeners1 = this.onOpen.listeners;
		var repeat1 = this.onOpen.repeat;
		var length1 = listeners1.length;
		var i1 = 0;
		while(i1 < length1) {
			listeners1[i1](this);
			if(!repeat1[i1]) {
				this.onOpen.remove(listeners1[i1]);
				length1--;
			} else i1++;
		}
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,__onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime_utils_ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var listeners = this.onComplete.listeners;
		var repeat = this.onComplete.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this);
			if(!repeat[i]) {
				this.onComplete.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,__onProgress: function(event) {
		this.bytesLoaded = event.loaded;
		this.bytesTotal = event.total;
		var listeners = this.onProgress.listeners;
		var repeat = this.onProgress.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this,this.bytesLoaded,this.bytesTotal);
			if(!repeat[i]) {
				this.onProgress.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == lime_net_URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = lime_net_URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: lime_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
};
var lime_net_URLLoaderDataFormat = $hxClasses["lime.net.URLLoaderDataFormat"] = { __ename__ : ["lime","net","URLLoaderDataFormat"], __constructs__ : ["BINARY","TEXT","VARIABLES"] };
lime_net_URLLoaderDataFormat.BINARY = ["BINARY",0];
lime_net_URLLoaderDataFormat.BINARY.toString = $estr;
lime_net_URLLoaderDataFormat.BINARY.__enum__ = lime_net_URLLoaderDataFormat;
lime_net_URLLoaderDataFormat.TEXT = ["TEXT",1];
lime_net_URLLoaderDataFormat.TEXT.toString = $estr;
lime_net_URLLoaderDataFormat.TEXT.__enum__ = lime_net_URLLoaderDataFormat;
lime_net_URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
lime_net_URLLoaderDataFormat.VARIABLES.toString = $estr;
lime_net_URLLoaderDataFormat.VARIABLES.__enum__ = lime_net_URLLoaderDataFormat;
var lime_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["lime.net.URLRequest"] = lime_net_URLRequest;
lime_net_URLRequest.__name__ = ["lime","net","URLRequest"];
lime_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,lime_utils_ByteArray)) {
			res = res.slice();
			res.push(new lime_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: lime_net_URLRequest
};
var lime_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.URLRequestHeader"] = lime_net_URLRequestHeader;
lime_net_URLRequestHeader.__name__ = ["lime","net","URLRequestHeader"];
lime_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_URLRequestHeader
};
var lime_net_URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["lime.net.URLVariables"] = lime_net_URLVariables;
lime_net_URLVariables.__name__ = ["lime","net","URLVariables"];
lime_net_URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: lime_net_URLVariables
};
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_fontsDirectory:"get_fontsDirectory",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory"}
lime_system_System.applicationDirectory = null;
lime_system_System.applicationStorageDirectory = null;
lime_system_System.desktopDirectory = null;
lime_system_System.disableCFFI = null;
lime_system_System.documentsDirectory = null;
lime_system_System.fontsDirectory = null;
lime_system_System.userDirectory = null;
lime_system_System.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js_Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.background = color;
	ApplicationMain.config.element = htmlElement;
	ApplicationMain.config.width = width;
	ApplicationMain.config.height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime_system_System.exit = function(code) {
};
lime_system_System.findHaxeLib = function(library) {
	return "";
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(lime_system_System.disableCFFI) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	var result = null;
	return result;
};
lime_system_System.sysName = function() {
	return null;
};
lime_system_System.tryLoad = function(name,library,func,args) {
	return null;
};
lime_system_System.loaderTrace = function(message) {
};
lime_system_System.get_applicationDirectory = function() {
	return null;
};
lime_system_System.get_applicationStorageDirectory = function() {
	var company = "MyCompany";
	var file = "MyApplication";
	if(lime_app_Application.current != null && lime_app_Application.current.config != null) {
		if(lime_app_Application.current.config.company != null) company = lime_app_Application.current.config.company;
		if(lime_app_Application.current.config.file != null) file = lime_app_Application.current.config.file;
	}
	return null;
};
lime_system_System.get_desktopDirectory = function() {
	return null;
};
lime_system_System.get_documentsDirectory = function() {
	return null;
};
lime_system_System.get_fontsDirectory = function() {
	return null;
};
lime_system_System.get_userDirectory = function() {
	return null;
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) this.offset = offset; else this.offset = new lime_math_Vector2();
};
$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
lime_text_GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime_text_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: lime_text_GlyphPosition
};
var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
	this1 = this1 ^ 1;
};
lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var lime_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) language = "en";
	if(script == null) script = "Zyyy";
	if(direction == null) direction = 4;
	if(size == null) size = 12;
	if(text == null) text = "";
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
};
$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
lime_text_TextLayout.__name__ = ["lime","text","TextLayout"];
lime_text_TextLayout.prototype = {
	font: null
	,glyphs: null
	,positions: null
	,size: null
	,text: null
	,__dirty: null
	,__buffer: null
	,__direction: null
	,__handle: null
	,__language: null
	,__script: null
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) return value;
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) return value;
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) return value;
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) return value;
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) return value;
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) return value;
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: lime_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var lime_text__$TextScript_TextScript_$Impl_$ = {};
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Hebr":case "Arab":case "Syrc":case "Thaa":case "Nkoo":case "Samr":case "Mand":case "Armi":case "Phnx":case "Lydi":case "Cprt":case "Khar":case "Sarb":case "Avst":case "Phli":case "Phlp":case "Orkh":
		return true;
	default:
		return false;
	}
};
var lime_ui_Gamepad = function(id) {
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,get_guid: function() {
		return null;
	}
	,get_name: function() {
		return null;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.warp = function(x,y,window) {
	lime__$backend_html5_HTML5Mouse.warp(x,y,window);
};
lime_ui_Mouse.get_cursor = function() {
	return lime__$backend_html5_HTML5Mouse.get_cursor();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
lime_ui_Mouse.get_lock = function() {
	return lime__$backend_html5_HTML5Mouse.get_lock();
};
lime_ui_Mouse.set_lock = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_lock(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Window = function(config) {
	this.onWindowRestore = new lime_app_Event();
	this.onWindowResize = new lime_app_Event();
	this.onWindowMove = new lime_app_Event();
	this.onWindowMinimize = new lime_app_Event();
	this.onWindowLeave = new lime_app_Event();
	this.onWindowFullscreen = new lime_app_Event();
	this.onWindowFocusOut = new lime_app_Event();
	this.onWindowFocusIn = new lime_app_Event();
	this.onWindowEnter = new lime_app_Event();
	this.onWindowDeactivate = new lime_app_Event();
	this.onWindowClose = new lime_app_Event();
	this.onWindowActivate = new lime_app_Event();
	this.onTouchStart = new lime_app_Event();
	this.onTouchMove = new lime_app_Event();
	this.onTouchEnd = new lime_app_Event();
	this.onTextInput = new lime_app_Event();
	this.onTextEdit = new lime_app_Event();
	this.onMouseWheel = new lime_app_Event();
	this.onMouseUp = new lime_app_Event();
	this.onMouseMoveRelative = new lime_app_Event();
	this.onMouseMove = new lime_app_Event();
	this.onMouseDown = new lime_app_Event();
	this.onKeyUp = new lime_app_Event();
	this.onKeyDown = new lime_app_Event();
	this.onGamepadDisconnect = new lime_app_Event();
	this.onGamepadConnect = new lime_app_Event();
	this.onGamepadButtonUp = new lime_app_Event();
	this.onGamepadButtonDown = new lime_app_Event();
	this.onGamepadAxisMove = new lime_app_Event();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__x = 0;
	this.__y = 0;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	currentRenderer: null
	,config: null
	,onGamepadAxisMove: null
	,onGamepadButtonDown: null
	,onGamepadButtonUp: null
	,onGamepadConnect: null
	,onGamepadDisconnect: null
	,onKeyDown: null
	,onKeyUp: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onTextEdit: null
	,onTextInput: null
	,onTouchEnd: null
	,onTouchMove: null
	,onTouchStart: null
	,onWindowActivate: null
	,onWindowClose: null
	,onWindowDeactivate: null
	,onWindowEnter: null
	,onWindowFocusIn: null
	,onWindowFocusOut: null
	,onWindowFullscreen: null
	,onWindowLeave: null
	,onWindowMinimize: null
	,onWindowMove: null
	,onWindowResize: null
	,onWindowRestore: null
	,backend: null
	,__fullscreen: null
	,__height: null
	,__minimized: null
	,__width: null
	,__x: null
	,__y: null
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.backend.create(application);
		if(this.currentRenderer != null) this.currentRenderer.create();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_minimized:"set_minimized",get_minimized:"get_minimized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents"}
};
var lime_utils_ByteArray = function(size) {
	if(size == null) size = 0;
	this.littleEndian = false;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	if(size > 0) this.allocated = size;
	this.___resizeBuffer(this.allocated);
	this.set_length(this.allocated);
};
$hxClasses["lime.utils.ByteArray"] = lime_utils_ByteArray;
lime_utils_ByteArray.__name__ = ["lime","utils","ByteArray"];
lime_utils_ByteArray.fromBytes = function(bytes) {
	var result = new lime_utils_ByteArray();
	result.byteView = new Uint8Array(bytes.b.bufferValue);
	result.set_length(result.byteView.length);
	result.allocated = result.length;
	return result;
};
lime_utils_ByteArray.readFile = function(path) {
	return null;
};
lime_utils_ByteArray.__ofBuffer = function(buffer) {
	var bytes = new lime_utils_ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
};
lime_utils_ByteArray.prototype = {
	bytesAvailable: null
	,length: null
	,objectEncoding: null
	,position: null
	,allocated: null
	,littleEndian: null
	,byteView: null
	,data: null
	,clear: function() {
		if(this.allocated < 0) this.___resizeBuffer(this.allocated = Std["int"](Math.max(0,this.allocated * 2))); else if(this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
		this.length = 0;
		0;
		this.position = 0;
	}
	,compress: function(algorithm) {
	}
	,deflate: function() {
		this.compress(lime_utils_CompressionAlgorithm.DEFLATE);
	}
	,inflate: function() {
		this.uncompress(lime_utils_CompressionAlgorithm.DEFLATE);
	}
	,readBoolean: function() {
		return this.readByte() != 0;
	}
	,readByte: function() {
		var data = this.data;
		return data.getInt8(this.position++);
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw new js__$Boot_HaxeError("Read error - Out of bounds");
		if(length == 0) length = this.length - this.position;
		var lengthToEnsure = offset + length;
		if(bytes.length < lengthToEnsure) {
			if(bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Std["int"](Math.max(lengthToEnsure,bytes.allocated * 2))); else if(bytes.allocated > lengthToEnsure * 2) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
			bytes.length = lengthToEnsure;
			lengthToEnsure;
		}
		bytes.byteView.set(this.byteView.subarray(this.position,this.position + length),offset);
		bytes.position = offset;
		this.position += length;
		if(bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
	}
	,readDouble: function() {
		var $double = this.data.getFloat64(this.position,this.littleEndian);
		this.position += 8;
		return $double;
	}
	,readFloat: function() {
		var $float = this.data.getFloat32(this.position,this.littleEndian);
		this.position += 4;
		return $float;
	}
	,readInt: function() {
		var $int = this.data.getInt32(this.position,this.littleEndian);
		this.position += 4;
		return $int;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var $short = this.data.getInt16(this.position,this.littleEndian);
		this.position += 2;
		return $short;
	}
	,readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readUnsignedInt: function() {
		var uInt = this.data.getUint32(this.position,this.littleEndian);
		this.position += 4;
		return uInt;
	}
	,readUnsignedShort: function() {
		var uShort = this.data.getUint16(this.position,this.littleEndian);
		this.position += 2;
		return uShort;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c21 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,toString: function() {
		var cachePosition = this.position;
		this.position = 0;
		var value = this.readUTFBytes(this.length);
		this.position = cachePosition;
		return value;
	}
	,uncompress: function(algorithm) {
		haxe_Log.trace("Warning: ByteArray.uncompress on JS target requires the 'format' haxelib",{ fileName : "ByteArray.hx", lineNumber : 667, className : "lime.utils.ByteArray", methodName : "uncompress"});
	}
	,write_uncheck: function($byte) {
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(bytes.length == 0) return;
		if(_$UInt_UInt_$Impl_$.gt(0,offset) || _$UInt_UInt_$Impl_$.gt(0,length)) throw new js__$Boot_HaxeError("Write error - Out of bounds");
		if(length == 0) length = bytes.length;
		var lengthToEnsure = this.position + length;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.byteView.set(bytes.byteView.subarray(offset,offset + length),this.position);
		this.position = this.position + length;
	}
	,writeDouble: function(x) {
		var lengthToEnsure = this.position + 8;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat64(this.position,x,this.littleEndian);
		this.position += 8;
	}
	,writeFile: function(path) {
	}
	,writeFloat: function(x) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat32(this.position,x,this.littleEndian);
		this.position += 4;
	}
	,writeInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUnsignedInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeUnsignedShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure * 2) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUTF: function(value) {
		this.writeUnsignedShort(this.__getUTFBytesCount(value));
		this.writeUTFBytes(value);
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,__fromBytes: function(bytes) {
		this.byteView = new Uint8Array(bytes.b.bufferValue);
		this.set_length(this.byteView.length);
		this.allocated = this.length;
	}
	,__get: function(pos) {
		return this.data.getInt8(pos);
	}
	,__getBuffer: function() {
		return this.data.buffer;
	}
	,__getUTFBytesCount: function(value) {
		var count = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) count += 1; else if(c <= 2047) count += 2; else if(c <= 65535) count += 3; else count += 4;
		}
		return count;
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		if(this.littleEndian) return "littleEndian"; else return "bigEndian";
	}
	,set_endian: function(endian) {
		this.littleEndian = endian == "littleEndian";
		return endian;
	}
	,set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value,this.allocated * 2))); else if(this.allocated > value * 2) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,__class__: lime_utils_ByteArray
	,__properties__: {set_length:"set_length",set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var lime_utils_CompressionAlgorithm = $hxClasses["lime.utils.CompressionAlgorithm"] = { __ename__ : ["lime","utils","CompressionAlgorithm"], __constructs__ : ["DEFLATE","ZLIB","LZMA","GZIP"] };
lime_utils_CompressionAlgorithm.DEFLATE = ["DEFLATE",0];
lime_utils_CompressionAlgorithm.DEFLATE.toString = $estr;
lime_utils_CompressionAlgorithm.DEFLATE.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.ZLIB = ["ZLIB",1];
lime_utils_CompressionAlgorithm.ZLIB.toString = $estr;
lime_utils_CompressionAlgorithm.ZLIB.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.LZMA = ["LZMA",2];
lime_utils_CompressionAlgorithm.LZMA.toString = $estr;
lime_utils_CompressionAlgorithm.LZMA.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.GZIP = ["GZIP",3];
lime_utils_CompressionAlgorithm.GZIP.toString = $estr;
lime_utils_CompressionAlgorithm.GZIP.__enum__ = lime_utils_CompressionAlgorithm;
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.createShader(type);
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) switch(type) {
	case 35633:
		throw new js__$Boot_HaxeError("Error compiling vertex shader");
		break;
	case 35632:
		throw new js__$Boot_HaxeError("Error compiling fragment shader");
		break;
	default:
		throw new js__$Boot_HaxeError("Error compiling unknown shader type");
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.createProgram();
	lime_graphics_opengl_GL.context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.getProgramParameter(program,35714) == 0) throw new js__$Boot_HaxeError("Unable to initialize the shader program.");
	return program;
};
var lime_utils_IDataInput = function() { };
$hxClasses["lime.utils.IDataInput"] = lime_utils_IDataInput;
lime_utils_IDataInput.__name__ = ["lime","utils","IDataInput"];
lime_utils_IDataInput.prototype = {
	bytesAvailable: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,__class__: lime_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var lime_utils_IMemoryRange = function() { };
$hxClasses["lime.utils.IMemoryRange"] = lime_utils_IMemoryRange;
lime_utils_IMemoryRange.__name__ = ["lime","utils","IMemoryRange"];
lime_utils_IMemoryRange.prototype = {
	getByteBuffer: null
	,getStart: null
	,getLength: null
	,__class__: lime_utils_IMemoryRange
};
var nape_Config = function() {
};
$hxClasses["nape.Config"] = nape_Config;
nape_Config.__name__ = ["nape","Config"];
nape_Config.prototype = {
	__class__: nape_Config
};
var nape_callbacks_Callback = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.Callback"] = nape_callbacks_Callback;
nape_callbacks_Callback.__name__ = ["nape","callbacks","Callback"];
nape_callbacks_Callback.prototype = {
	zpp_inner: null
	,get_event: function() {
		return zpp_$nape_callbacks_ZPP_$Listener.events[this.zpp_inner.event];
	}
	,get_listener: function() {
		return this.zpp_inner.listener.outer;
	}
	,toString: function() {
		return "";
	}
	,__class__: nape_callbacks_Callback
	,__properties__: {get_listener:"get_listener",get_event:"get_event"}
};
var nape_callbacks_BodyCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.BodyCallback"] = nape_callbacks_BodyCallback;
nape_callbacks_BodyCallback.__name__ = ["nape","callbacks","BodyCallback"];
nape_callbacks_BodyCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_BodyCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	get_body: function() {
		return this.zpp_inner.body.outer;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP"][this.zpp_inner.event - zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE];
		ret += ":" + this.zpp_inner.body.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_BodyCallback
	,__properties__: $extend(nape_callbacks_Callback.prototype.__properties__,{get_body:"get_body"})
});
var nape_callbacks_Listener = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.Listener"] = nape_callbacks_Listener;
nape_callbacks_Listener.__name__ = ["nape","callbacks","Listener"];
nape_callbacks_Listener.prototype = {
	zpp_inner: null
	,get_type: function() {
		return zpp_$nape_callbacks_ZPP_$Listener.types[this.zpp_inner.type];
	}
	,get_event: function() {
		return zpp_$nape_callbacks_ZPP_$Listener.events[this.zpp_inner.event];
	}
	,set_event: function(event) {
		if(zpp_$nape_callbacks_ZPP_$Listener.events[this.zpp_inner.event] != event) {
			var xevent;
			if(event == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
				return $r;
			}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_BEGIN; else if(event == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING;
				return $r;
			}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_ONGOING; else if(event == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.CbEvent_END;
				return $r;
			}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_END; else if(event == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP;
				return $r;
			}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP; else if(event == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE;
				return $r;
			}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE; else if(event == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_PRE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.CbEvent_PRE;
				return $r;
			}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_PRE; else xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_BREAK;
			this.zpp_inner.swapEvent(xevent);
		}
		return zpp_$nape_callbacks_ZPP_$Listener.events[this.zpp_inner.event];
	}
	,get_precedence: function() {
		return this.zpp_inner.precedence;
	}
	,set_precedence: function(precedence) {
		if(this.zpp_inner.precedence != precedence) {
			this.zpp_inner.precedence = precedence;
			this.zpp_inner.invalidate_precedence();
		}
		return this.zpp_inner.precedence;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if(this.zpp_inner.space != null) this.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(this);
			if(space != null) space.zpp_inner.wrap_listeners.add(this); else this.zpp_inner.space = null;
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,toString: function() {
		var event = ["BEGIN","END","WAKE","SLEEP","BREAK","PRE","ONGOING"][this.zpp_inner.event];
		if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_BODY) {
			var body = this.zpp_inner.body;
			return "BodyListener{" + event + "::" + Std.string(body.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_CONSTRAINT) {
			var con = this.zpp_inner.constraint;
			return "ConstraintListener{" + event + "::" + Std.string(con.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else {
			var con1 = this.zpp_inner.interaction;
			var itype;
			var _g = con1.itype;
			switch(_g) {
			case 1:
				itype = "COLLISION";
				break;
			case 2:
				itype = "SENSOR";
				break;
			case 4:
				itype = "FLUID";
				break;
			default:
				itype = "ALL";
			}
			return (this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_INTERACTION?"InteractionListener{" + event + "#" + itype + "::" + Std.string(con1.outer_zni.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_zni.zpp_inner_zn.options2.outer) + "}":"PreListener{" + itype + "::" + Std.string(con1.outer_znp.zpp_inner_zn.options1.outer) + ":" + Std.string(con1.outer_znp.zpp_inner_zn.options2.outer) + "}") + " precedence=" + this.zpp_inner.precedence;
		}
	}
	,__class__: nape_callbacks_Listener
	,__properties__: {set_space:"set_space",get_space:"get_space",set_precedence:"set_precedence",get_precedence:"get_precedence",set_event:"set_event",get_event:"get_event",get_type:"get_type"}
};
var nape_callbacks_BodyListener = function(event,options,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	nape_callbacks_Listener.call(this);
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE; else if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP; else {
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$BodyListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
$hxClasses["nape.callbacks.BodyListener"] = nape_callbacks_BodyListener;
nape_callbacks_BodyListener.__name__ = ["nape","callbacks","BodyListener"];
nape_callbacks_BodyListener.__super__ = nape_callbacks_Listener;
nape_callbacks_BodyListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	zpp_inner_zn: null
	,get_options: function() {
		return this.zpp_inner_zn.options.outer;
	}
	,set_options: function(options) {
		this.zpp_inner_zn.options.set(options.zpp_inner);
		return this.zpp_inner_zn.options.outer;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handler;
	}
	,set_handler: function(handler) {
		this.zpp_inner_zn.handler = handler;
		return this.zpp_inner_zn.handler;
	}
	,__class__: nape_callbacks_BodyListener
	,__properties__: $extend(nape_callbacks_Listener.prototype.__properties__,{set_handler:"set_handler",get_handler:"get_handler",set_options:"set_options",get_options:"get_options"})
});
var nape_callbacks_CbEvent = function() {
};
$hxClasses["nape.callbacks.CbEvent"] = nape_callbacks_CbEvent;
nape_callbacks_CbEvent.__name__ = ["nape","callbacks","CbEvent"];
nape_callbacks_CbEvent.__properties__ = {get_PRE:"get_PRE",get_BREAK:"get_BREAK",get_SLEEP:"get_SLEEP",get_WAKE:"get_WAKE",get_END:"get_END",get_ONGOING:"get_ONGOING",get_BEGIN:"get_BEGIN"}
nape_callbacks_CbEvent.get_BEGIN = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
};
nape_callbacks_CbEvent.get_ONGOING = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING;
};
nape_callbacks_CbEvent.get_END = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_END;
};
nape_callbacks_CbEvent.get_WAKE = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE;
};
nape_callbacks_CbEvent.get_SLEEP = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP;
};
nape_callbacks_CbEvent.get_BREAK = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK;
};
nape_callbacks_CbEvent.get_PRE = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_PRE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_PRE;
};
nape_callbacks_CbEvent.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_PRE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_PRE;
			return $r;
		}(this))) return "PRE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
			return $r;
		}(this))) return "BEGIN"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING;
			return $r;
		}(this))) return "ONGOING"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_END;
			return $r;
		}(this))) return "END"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE;
			return $r;
		}(this))) return "WAKE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP;
			return $r;
		}(this))) return "SLEEP"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK;
			return $r;
		}(this))) return "BREAK"; else return "";
	}
	,__class__: nape_callbacks_CbEvent
};
var nape_callbacks_CbType = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_callbacks_ZPP_$CbType();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.CbType"] = nape_callbacks_CbType;
nape_callbacks_CbType.__name__ = ["nape","callbacks","CbType"];
nape_callbacks_CbType.__properties__ = {get_ANY_COMPOUND:"get_ANY_COMPOUND",get_ANY_SHAPE:"get_ANY_SHAPE",get_ANY_CONSTRAINT:"get_ANY_CONSTRAINT",get_ANY_BODY:"get_ANY_BODY"}
nape_callbacks_CbType.get_ANY_BODY = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY;
};
nape_callbacks_CbType.get_ANY_CONSTRAINT = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT;
};
nape_callbacks_CbType.get_ANY_SHAPE = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE;
};
nape_callbacks_CbType.get_ANY_COMPOUND = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND;
};
nape_callbacks_CbType.prototype = {
	zpp_inner: null
	,get_id: function() {
		return this.zpp_inner.id;
	}
	,including: function(includes) {
		return new nape_callbacks_OptionType(this).including(includes);
	}
	,excluding: function(excludes) {
		return new nape_callbacks_OptionType(this).excluding(excludes);
	}
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_interactors: function() {
		if(this.zpp_inner.wrap_interactors == null) this.zpp_inner.wrap_interactors = zpp_$nape_util_ZPP_$InteractorList.get(this.zpp_inner.interactors,true);
		return this.zpp_inner.wrap_interactors;
	}
	,get_constraints: function() {
		if(this.zpp_inner.wrap_constraints == null) this.zpp_inner.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.zpp_inner.constraints,true);
		return this.zpp_inner.wrap_constraints;
	}
	,toString: function() {
		if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY) return "ANY_BODY"; else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE) return "ANY_SHAPE"; else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND) return "ANY_COMPOUND"; else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT) return "ANY_CONSTRAINT"; else return "CbType#" + this.zpp_inner.id;
	}
	,__class__: nape_callbacks_CbType
	,__properties__: {get_constraints:"get_constraints",get_interactors:"get_interactors",get_userData:"get_userData",get_id:"get_id"}
};
var nape_callbacks_CbTypeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.CbTypeIterator"] = nape_callbacks_CbTypeIterator;
nape_callbacks_CbTypeIterator.__name__ = ["nape","callbacks","CbTypeIterator"];
nape_callbacks_CbTypeIterator.get = function(list) {
	var ret;
	if(nape_callbacks_CbTypeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CbTypeList.internal = true;
		var ret1 = new nape_callbacks_CbTypeIterator();
		zpp_$nape_util_ZPP_$CbTypeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_CbTypeIterator.zpp_pool;
		nape_callbacks_CbTypeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_CbTypeIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
			nape_callbacks_CbTypeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_callbacks_CbTypeIterator
};
var nape_callbacks_CbTypeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$CbTypeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.CbTypeList"] = nape_callbacks_CbTypeList;
nape_callbacks_CbTypeList.__name__ = ["nape","callbacks","CbTypeList"];
nape_callbacks_CbTypeList.fromArray = function(array) {
	var ret = new nape_callbacks_CbTypeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_callbacks_CbTypeList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_callbacks_CbTypeIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_callbacks_CbTypeList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_callbacks_CbTypeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_callbacks_CbTypeIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_callbacks_CbTypeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape_callbacks_CbTypeIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
			nape_callbacks_CbTypeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_callbacks_CbTypeList
	,__properties__: {get_length:"get_length"}
};
var nape_callbacks_ConstraintCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.ConstraintCallback"] = nape_callbacks_ConstraintCallback;
nape_callbacks_ConstraintCallback.__name__ = ["nape","callbacks","ConstraintCallback"];
nape_callbacks_ConstraintCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_ConstraintCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	get_constraint: function() {
		return this.zpp_inner.constraint.outer;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP","BREAK"][this.zpp_inner.event - zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE];
		ret += ":" + this.zpp_inner.constraint.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_ConstraintCallback
	,__properties__: $extend(nape_callbacks_Callback.prototype.__properties__,{get_constraint:"get_constraint"})
});
var nape_callbacks_ConstraintListener = function(event,options,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	nape_callbacks_Listener.call(this);
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE; else if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP; else if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_BREAK; else {
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$ConstraintListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
$hxClasses["nape.callbacks.ConstraintListener"] = nape_callbacks_ConstraintListener;
nape_callbacks_ConstraintListener.__name__ = ["nape","callbacks","ConstraintListener"];
nape_callbacks_ConstraintListener.__super__ = nape_callbacks_Listener;
nape_callbacks_ConstraintListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	zpp_inner_zn: null
	,get_options: function() {
		return this.zpp_inner_zn.options.outer;
	}
	,set_options: function(options) {
		this.zpp_inner_zn.options.set(options.zpp_inner);
		return this.zpp_inner_zn.options.outer;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handler;
	}
	,set_handler: function(handler) {
		this.zpp_inner_zn.handler = handler;
		return this.zpp_inner_zn.handler;
	}
	,__class__: nape_callbacks_ConstraintListener
	,__properties__: $extend(nape_callbacks_Listener.prototype.__properties__,{set_handler:"set_handler",get_handler:"get_handler",set_options:"set_options",get_options:"get_options"})
});
var nape_callbacks_InteractionCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.InteractionCallback"] = nape_callbacks_InteractionCallback;
nape_callbacks_InteractionCallback.__name__ = ["nape","callbacks","InteractionCallback"];
nape_callbacks_InteractionCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_InteractionCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	get_int1: function() {
		return this.zpp_inner.int1.outer_i;
	}
	,get_int2: function() {
		return this.zpp_inner.int2.outer_i;
	}
	,get_arbiters: function() {
		return this.zpp_inner.wrap_arbiters;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["BEGIN","END","","","","","ONGOING"][this.zpp_inner.event];
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.wrap_arbiters.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_InteractionCallback
	,__properties__: $extend(nape_callbacks_Callback.prototype.__properties__,{get_arbiters:"get_arbiters",get_int2:"get_int2",get_int1:"get_int1"})
});
var nape_callbacks_InteractionListener = function(event,interactionType,options1,options2,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	nape_callbacks_Listener.call(this);
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_BEGIN; else if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_END;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_END; else if(event == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING;
		return $r;
	}(this))) xevent = zpp_$nape_util_ZPP_$Flags.id_CbEvent_ONGOING; else {
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$InteractionListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options1),zpp_$nape_callbacks_ZPP_$OptionType.argument(options2),xevent,zpp_$nape_util_ZPP_$Flags.id_ListenerType_INTERACTION);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zni = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.handleri = handler;
	this.set_interactionType(interactionType);
};
$hxClasses["nape.callbacks.InteractionListener"] = nape_callbacks_InteractionListener;
nape_callbacks_InteractionListener.__name__ = ["nape","callbacks","InteractionListener"];
nape_callbacks_InteractionListener.__super__ = nape_callbacks_Listener;
nape_callbacks_InteractionListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	zpp_inner_zn: null
	,get_options1: function() {
		return this.zpp_inner_zn.options1.outer;
	}
	,set_options1: function(options1) {
		this.zpp_inner_zn.options1.set(options1.zpp_inner);
		return this.zpp_inner_zn.options1.outer;
	}
	,get_options2: function() {
		return this.zpp_inner_zn.options2.outer;
	}
	,set_options2: function(options2) {
		this.zpp_inner_zn.options2.set(options2.zpp_inner);
		return this.zpp_inner_zn.options2.outer;
	}
	,get_interactionType: function() {
		var ret = this.zpp_inner_zn.itype;
		if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_COLLISION) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
		} else if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_SENSOR) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
		} else if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_FLUID) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
		} else if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
		} else return null;
	}
	,set_interactionType: function(interactionType) {
		if(this.get_interactionType() != interactionType) {
			var xtype;
			if(interactionType == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
				return $r;
			}(this))) xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_COLLISION; else if(interactionType == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
				return $r;
			}(this))) xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_SENSOR; else if(interactionType == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
				return $r;
			}(this))) xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_FLUID; else xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY;
			this.zpp_inner_zn.itype = xtype;
		}
		return this.get_interactionType();
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handleri;
	}
	,set_handler: function(handler) {
		this.zpp_inner_zn.handleri = handler;
		return this.zpp_inner_zn.handleri;
	}
	,get_allowSleepingCallbacks: function() {
		return this.zpp_inner_zn.allowSleepingCallbacks;
	}
	,set_allowSleepingCallbacks: function(allowSleepingCallbacks) {
		this.zpp_inner_zn.allowSleepingCallbacks = allowSleepingCallbacks;
		return this.zpp_inner_zn.allowSleepingCallbacks;
	}
	,__class__: nape_callbacks_InteractionListener
	,__properties__: $extend(nape_callbacks_Listener.prototype.__properties__,{set_allowSleepingCallbacks:"set_allowSleepingCallbacks",get_allowSleepingCallbacks:"get_allowSleepingCallbacks",set_handler:"set_handler",get_handler:"get_handler",set_interactionType:"set_interactionType",get_interactionType:"get_interactionType",set_options2:"set_options2",get_options2:"get_options2",set_options1:"set_options1",get_options1:"get_options1"})
});
var nape_callbacks_InteractionType = function() {
};
$hxClasses["nape.callbacks.InteractionType"] = nape_callbacks_InteractionType;
nape_callbacks_InteractionType.__name__ = ["nape","callbacks","InteractionType"];
nape_callbacks_InteractionType.__properties__ = {get_ANY:"get_ANY",get_FLUID:"get_FLUID",get_SENSOR:"get_SENSOR",get_COLLISION:"get_COLLISION"}
nape_callbacks_InteractionType.get_COLLISION = function() {
	if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
};
nape_callbacks_InteractionType.get_SENSOR = function() {
	if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
};
nape_callbacks_InteractionType.get_FLUID = function() {
	if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
};
nape_callbacks_InteractionType.get_ANY = function() {
	if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
};
nape_callbacks_InteractionType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
			return $r;
		}(this))) return "COLLISION"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
			return $r;
		}(this))) return "SENSOR"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
			return $r;
		}(this))) return "FLUID"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
			return $r;
		}(this))) return "ANY"; else return "";
	}
	,__class__: nape_callbacks_InteractionType
};
var nape_callbacks_ListenerIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.ListenerIterator"] = nape_callbacks_ListenerIterator;
nape_callbacks_ListenerIterator.__name__ = ["nape","callbacks","ListenerIterator"];
nape_callbacks_ListenerIterator.get = function(list) {
	var ret;
	if(nape_callbacks_ListenerIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ListenerList.internal = true;
		var ret1 = new nape_callbacks_ListenerIterator();
		zpp_$nape_util_ZPP_$ListenerList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_ListenerIterator.zpp_pool;
		nape_callbacks_ListenerIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_ListenerIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_callbacks_ListenerIterator.zpp_pool;
			nape_callbacks_ListenerIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_callbacks_ListenerIterator
};
var nape_callbacks_ListenerList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ListenerList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.ListenerList"] = nape_callbacks_ListenerList;
nape_callbacks_ListenerList.__name__ = ["nape","callbacks","ListenerList"];
nape_callbacks_ListenerList.fromArray = function(array) {
	var ret = new nape_callbacks_ListenerList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_callbacks_ListenerList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_callbacks_ListenerIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_callbacks_ListenerList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_callbacks_ListenerIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_callbacks_ListenerIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_callbacks_ListenerIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape_callbacks_ListenerIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_callbacks_ListenerIterator.zpp_pool;
			nape_callbacks_ListenerIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_callbacks_ListenerList
	,__properties__: {get_length:"get_length"}
};
var nape_callbacks_ListenerType = function() {
};
$hxClasses["nape.callbacks.ListenerType"] = nape_callbacks_ListenerType;
nape_callbacks_ListenerType.__name__ = ["nape","callbacks","ListenerType"];
nape_callbacks_ListenerType.__properties__ = {get_PRE:"get_PRE",get_INTERACTION:"get_INTERACTION",get_CONSTRAINT:"get_CONSTRAINT",get_BODY:"get_BODY"}
nape_callbacks_ListenerType.get_BODY = function() {
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_BODY == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_BODY = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ListenerType_BODY;
};
nape_callbacks_ListenerType.get_CONSTRAINT = function() {
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT;
};
nape_callbacks_ListenerType.get_INTERACTION = function() {
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION;
};
nape_callbacks_ListenerType.get_PRE = function() {
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_PRE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_PRE = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ListenerType_PRE;
};
nape_callbacks_ListenerType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ListenerType_BODY == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ListenerType_BODY = new nape_callbacks_ListenerType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ListenerType_BODY;
			return $r;
		}(this))) return "BODY"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT = new nape_callbacks_ListenerType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT;
			return $r;
		}(this))) return "CONSTRAINT"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION = new nape_callbacks_ListenerType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION;
			return $r;
		}(this))) return "INTERACTION"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ListenerType_PRE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ListenerType_PRE = new nape_callbacks_ListenerType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ListenerType_PRE;
			return $r;
		}(this))) return "PRE"; else return "";
	}
	,__class__: nape_callbacks_ListenerType
};
var nape_callbacks_OptionType = function(includes,excludes) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_callbacks_ZPP_$OptionType();
	this.zpp_inner.outer = this;
	if(includes != null) this.including(includes);
	if(excludes != null) this.excluding(excludes);
};
$hxClasses["nape.callbacks.OptionType"] = nape_callbacks_OptionType;
nape_callbacks_OptionType.__name__ = ["nape","callbacks","OptionType"];
nape_callbacks_OptionType.prototype = {
	zpp_inner: null
	,get_includes: function() {
		if(this.zpp_inner.wrap_includes == null) this.zpp_inner.setup_includes();
		return this.zpp_inner.wrap_includes;
	}
	,get_excludes: function() {
		if(this.zpp_inner.wrap_excludes == null) this.zpp_inner.setup_excludes();
		return this.zpp_inner.wrap_excludes;
	}
	,including: function(includes) {
		this.zpp_inner.append(this.zpp_inner.includes,includes);
		return this;
	}
	,excluding: function(excludes) {
		this.zpp_inner.append(this.zpp_inner.excludes,excludes);
		return this;
	}
	,toString: function() {
		var inc = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_includes == null) $this.zpp_inner.setup_includes();
			$r = $this.zpp_inner.wrap_includes;
			return $r;
		}(this))).toString();
		var exc = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_excludes == null) $this.zpp_inner.setup_excludes();
			$r = $this.zpp_inner.wrap_excludes;
			return $r;
		}(this))).toString();
		return "@{" + inc + " excluding " + exc + "}";
	}
	,__class__: nape_callbacks_OptionType
	,__properties__: {get_excludes:"get_excludes",get_includes:"get_includes"}
};
var nape_callbacks_PreCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.PreCallback"] = nape_callbacks_PreCallback;
nape_callbacks_PreCallback.__name__ = ["nape","callbacks","PreCallback"];
nape_callbacks_PreCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_PreCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	get_arbiter: function() {
		return this.zpp_inner.pre_arbiter.wrapper();
	}
	,get_int1: function() {
		return this.zpp_inner.int1.outer_i;
	}
	,get_int2: function() {
		return this.zpp_inner.int2.outer_i;
	}
	,get_swapped: function() {
		return this.zpp_inner.pre_swapped;
	}
	,toString: function() {
		var ret = "Cb:PRE:";
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.pre_arbiter.wrapper().toString();
		ret += " : listnener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,__class__: nape_callbacks_PreCallback
	,__properties__: $extend(nape_callbacks_Callback.prototype.__properties__,{get_swapped:"get_swapped",get_int2:"get_int2",get_int1:"get_int1",get_arbiter:"get_arbiter"})
});
var nape_callbacks_PreFlag = function() {
};
$hxClasses["nape.callbacks.PreFlag"] = nape_callbacks_PreFlag;
nape_callbacks_PreFlag.__name__ = ["nape","callbacks","PreFlag"];
nape_callbacks_PreFlag.__properties__ = {get_IGNORE_ONCE:"get_IGNORE_ONCE",get_ACCEPT_ONCE:"get_ACCEPT_ONCE",get_IGNORE:"get_IGNORE",get_ACCEPT:"get_ACCEPT"}
nape_callbacks_PreFlag.get_ACCEPT = function() {
	if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
};
nape_callbacks_PreFlag.get_IGNORE = function() {
	if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
};
nape_callbacks_PreFlag.get_ACCEPT_ONCE = function() {
	if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
};
nape_callbacks_PreFlag.get_IGNORE_ONCE = function() {
	if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE;
};
nape_callbacks_PreFlag.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
			return $r;
		}(this))) return "ACCEPT"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
			return $r;
		}(this))) return "IGNORE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
			return $r;
		}(this))) return "ACCEPT_ONCE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE;
			return $r;
		}(this))) return "IGNORE_ONCE"; else return "";
	}
	,__class__: nape_callbacks_PreFlag
};
var nape_callbacks_PreListener = function(interactionType,options1,options2,handler,precedence,pure) {
	if(pure == null) pure = false;
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	nape_callbacks_Listener.call(this);
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$InteractionListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options1),zpp_$nape_callbacks_ZPP_$OptionType.argument(options2),zpp_$nape_util_ZPP_$Flags.id_CbEvent_PRE,zpp_$nape_util_ZPP_$Flags.id_ListenerType_PRE);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_znp = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.pure = pure;
	this.zpp_inner_zn.handlerp = handler;
	this.set_interactionType(interactionType);
};
$hxClasses["nape.callbacks.PreListener"] = nape_callbacks_PreListener;
nape_callbacks_PreListener.__name__ = ["nape","callbacks","PreListener"];
nape_callbacks_PreListener.__super__ = nape_callbacks_Listener;
nape_callbacks_PreListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	zpp_inner_zn: null
	,get_options1: function() {
		return this.zpp_inner_zn.options1.outer;
	}
	,set_options1: function(options1) {
		this.zpp_inner_zn.options1.set(options1.zpp_inner);
		return this.zpp_inner_zn.options1.outer;
	}
	,get_options2: function() {
		return this.zpp_inner_zn.options2.outer;
	}
	,set_options2: function(options2) {
		this.zpp_inner_zn.options2.set(options2.zpp_inner);
		return this.zpp_inner_zn.options2.outer;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handlerp;
	}
	,set_handler: function(handler) {
		this.zpp_inner_zn.handlerp = handler;
		this.zpp_inner_zn.wake();
		return this.zpp_inner_zn.handlerp;
	}
	,get_pure: function() {
		return this.zpp_inner_zn.pure;
	}
	,set_pure: function(pure) {
		if(!pure) this.zpp_inner_zn.wake();
		this.zpp_inner_zn.pure = pure;
		return this.zpp_inner_zn.pure;
	}
	,get_interactionType: function() {
		var ret = this.zpp_inner_zn.itype;
		if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_COLLISION) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
		} else if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_SENSOR) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
		} else if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_FLUID) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
		} else if(ret == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
		} else return null;
	}
	,set_interactionType: function(interactionType) {
		if(this.get_interactionType() != interactionType) {
			var xtype;
			if(interactionType == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
				return $r;
			}(this))) xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_COLLISION; else if(interactionType == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
				return $r;
			}(this))) xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_SENSOR; else if(interactionType == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
				return $r;
			}(this))) xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_FLUID; else xtype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY;
			this.zpp_inner_zn.itype = xtype;
		}
		return this.get_interactionType();
	}
	,__class__: nape_callbacks_PreListener
	,__properties__: $extend(nape_callbacks_Listener.prototype.__properties__,{set_interactionType:"set_interactionType",get_interactionType:"get_interactionType",set_pure:"set_pure",get_pure:"get_pure",set_handler:"set_handler",get_handler:"get_handler",set_options2:"set_options2",get_options2:"get_options2",set_options1:"set_options1",get_options1:"get_options1"})
});
var nape_constraint_Constraint = function() {
	this.debugDraw = true;
	this.zpp_inner.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT.zpp_inner);
};
$hxClasses["nape.constraint.Constraint"] = nape_constraint_Constraint;
nape_constraint_Constraint.__name__ = ["nape","constraint","Constraint"];
nape_constraint_Constraint.prototype = {
	zpp_inner: null
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,debugDraw: null
	,get_compound: function() {
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,set_compound: function(compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(this);
			if(compound != null) compound.zpp_inner.wrap_constraints.add(this);
		}
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
			this.zpp_inner.clearcache();
			if(this.zpp_inner.space != null) this.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(this);
			if(space != null) space.zpp_inner.wrap_constraints.add(this); else this.zpp_inner.space = null;
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,get_isSleeping: function() {
		return this.zpp_inner.component.sleeping;
	}
	,get_active: function() {
		return this.zpp_inner.active;
	}
	,set_active: function(active) {
		if(this.zpp_inner.active != active) {
			if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
			this.zpp_inner.clearcache();
			if(active) {
				this.zpp_inner.active = active;
				this.zpp_inner.activate();
				if(this.zpp_inner.space != null) {
					if(this.zpp_inner.component != null) this.zpp_inner.component.sleeping = true;
					this.zpp_inner.space.wake_constraint(this.zpp_inner,true);
				}
			} else {
				if(this.zpp_inner.space != null) {
					this.zpp_inner.wake();
					this.zpp_inner.space.live_constraints.remove(this.zpp_inner);
				}
				this.zpp_inner.active = active;
				this.zpp_inner.deactivate();
			}
		}
		return this.zpp_inner.active;
	}
	,get_ignore: function() {
		return this.zpp_inner.ignore;
	}
	,set_ignore: function(ignore) {
		if(this.zpp_inner.ignore != ignore) {
			this.zpp_inner.ignore = ignore;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.ignore;
	}
	,get_stiff: function() {
		return this.zpp_inner.stiff;
	}
	,set_stiff: function(stiff) {
		if(this.zpp_inner.stiff != stiff) {
			this.zpp_inner.stiff = stiff;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.stiff;
	}
	,get_frequency: function() {
		return this.zpp_inner.frequency;
	}
	,set_frequency: function(frequency) {
		if(this.zpp_inner.frequency != frequency) {
			this.zpp_inner.frequency = frequency;
			if(!this.zpp_inner.stiff) this.zpp_inner.wake();
		}
		return this.zpp_inner.frequency;
	}
	,get_damping: function() {
		return this.zpp_inner.damping;
	}
	,set_damping: function(damping) {
		if(this.zpp_inner.damping != damping) {
			this.zpp_inner.damping = damping;
			if(!this.zpp_inner.stiff) this.zpp_inner.wake();
		}
		return this.zpp_inner.damping;
	}
	,get_maxForce: function() {
		return this.zpp_inner.maxForce;
	}
	,set_maxForce: function(maxForce) {
		if(this.zpp_inner.maxForce != maxForce) {
			this.zpp_inner.maxForce = maxForce;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.maxForce;
	}
	,get_maxError: function() {
		return this.zpp_inner.maxError;
	}
	,set_maxError: function(maxError) {
		if(this.zpp_inner.maxError != maxError) {
			this.zpp_inner.maxError = maxError;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.maxError;
	}
	,get_breakUnderForce: function() {
		return this.zpp_inner.breakUnderForce;
	}
	,set_breakUnderForce: function(breakUnderForce) {
		if(this.zpp_inner.breakUnderForce != breakUnderForce) {
			this.zpp_inner.breakUnderForce = breakUnderForce;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.breakUnderForce;
	}
	,get_breakUnderError: function() {
		return this.zpp_inner.breakUnderError;
	}
	,set_breakUnderError: function(breakUnderError) {
		if(this.zpp_inner.breakUnderError != breakUnderError) {
			this.zpp_inner.breakUnderError = breakUnderError;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.breakUnderError;
	}
	,get_removeOnBreak: function() {
		return this.zpp_inner.removeOnBreak;
	}
	,set_removeOnBreak: function(removeOnBreak) {
		this.zpp_inner.removeOnBreak = removeOnBreak;
		return this.zpp_inner.removeOnBreak;
	}
	,impulse: function() {
		return null;
	}
	,bodyImpulse: function(body) {
		return null;
	}
	,visitBodies: function(lambda) {
	}
	,get_cbTypes: function() {
		if(this.zpp_inner.wrap_cbTypes == null) this.zpp_inner.setupcbTypes();
		return this.zpp_inner.wrap_cbTypes;
	}
	,toString: function() {
		return "{Constraint}";
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,__class__: nape_constraint_Constraint
	,__properties__: {get_cbTypes:"get_cbTypes",set_removeOnBreak:"set_removeOnBreak",get_removeOnBreak:"get_removeOnBreak",set_breakUnderError:"set_breakUnderError",get_breakUnderError:"get_breakUnderError",set_breakUnderForce:"set_breakUnderForce",get_breakUnderForce:"get_breakUnderForce",set_maxError:"set_maxError",get_maxError:"get_maxError",set_maxForce:"set_maxForce",get_maxForce:"get_maxForce",set_damping:"set_damping",get_damping:"get_damping",set_frequency:"set_frequency",get_frequency:"get_frequency",set_stiff:"set_stiff",get_stiff:"get_stiff",set_ignore:"set_ignore",get_ignore:"get_ignore",set_active:"set_active",get_active:"get_active",get_isSleeping:"get_isSleeping",set_space:"set_space",get_space:"get_space",set_compound:"set_compound",get_compound:"get_compound",get_userData:"get_userData"}
};
var nape_constraint_AngleJoint = function(body1,body2,jointMin,jointMax,ratio) {
	if(ratio == null) ratio = 1.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$AngleJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
	this.zpp_inner.immutable_midstep("AngleJoint::ratio");
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
};
$hxClasses["nape.constraint.AngleJoint"] = nape_constraint_AngleJoint;
nape_constraint_AngleJoint.__name__ = ["nape","constraint","AngleJoint"];
nape_constraint_AngleJoint.__super__ = nape_constraint_Constraint;
nape_constraint_AngleJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("AngleJoint::ratio");
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,isSlack: function() {
		return this.zpp_inner_zn.is_slack();
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(1,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(0,0,0); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape_constraint_AngleJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_ratio:"set_ratio",get_ratio:"get_ratio",set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_constraint_ConstraintIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.constraint.ConstraintIterator"] = nape_constraint_ConstraintIterator;
nape_constraint_ConstraintIterator.__name__ = ["nape","constraint","ConstraintIterator"];
nape_constraint_ConstraintIterator.get = function(list) {
	var ret;
	if(nape_constraint_ConstraintIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConstraintList.internal = true;
		var ret1 = new nape_constraint_ConstraintIterator();
		zpp_$nape_util_ZPP_$ConstraintList.internal = false;
		ret = ret1;
	} else {
		var r = nape_constraint_ConstraintIterator.zpp_pool;
		nape_constraint_ConstraintIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_constraint_ConstraintIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
			nape_constraint_ConstraintIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_constraint_ConstraintIterator
};
var nape_constraint_ConstraintList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ConstraintList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.constraint.ConstraintList"] = nape_constraint_ConstraintList;
nape_constraint_ConstraintList.__name__ = ["nape","constraint","ConstraintList"];
nape_constraint_ConstraintList.fromArray = function(array) {
	var ret = new nape_constraint_ConstraintList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_constraint_ConstraintList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_constraint_ConstraintIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_constraint_ConstraintList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_constraint_ConstraintIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_constraint_ConstraintIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_constraint_ConstraintIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape_constraint_ConstraintIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
			nape_constraint_ConstraintIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_constraint_ConstraintList
	,__properties__: {get_length:"get_length"}
};
var nape_constraint_DistanceJoint = function(body1,body2,anchor1,anchor2,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$DistanceJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
$hxClasses["nape.constraint.DistanceJoint"] = nape_constraint_DistanceJoint;
nape_constraint_DistanceJoint.__name__ = ["nape","constraint","DistanceJoint"];
nape_constraint_DistanceJoint.__super__ = nape_constraint_Constraint;
nape_constraint_DistanceJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,isSlack: function() {
		return this.zpp_inner_zn.slack;
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(1,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape_constraint_DistanceJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_constraint_LineJoint = function(body1,body2,anchor1,anchor2,direction,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$LineJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
		$r = $this.zpp_inner_zn.wrap_n;
		return $r;
	}(this))).set(direction);
	if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
	this.zpp_inner_zn.wrap_n;
	this.zpp_inner.immutable_midstep("LineJoint::jointMin");
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("LineJoint::jointMax");
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
$hxClasses["nape.constraint.LineJoint"] = nape_constraint_LineJoint;
nape_constraint_LineJoint.__name__ = ["nape","constraint","LineJoint"];
nape_constraint_LineJoint.__super__ = nape_constraint_Constraint;
nape_constraint_LineJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_direction: function() {
		if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
		return this.zpp_inner_zn.wrap_n;
	}
	,set_direction: function(direction) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
			$r = $this.zpp_inner_zn.wrap_n;
			return $r;
		}(this))).set(direction);
		if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
		return this.zpp_inner_zn.wrap_n;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("LineJoint::jointMin");
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("LineJoint::jointMax");
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(2,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape_constraint_LineJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_direction:"set_direction",get_direction:"get_direction",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_constraint_MotorJoint = function(body1,body2,rate,ratio) {
	if(ratio == null) ratio = 1.0;
	if(rate == null) rate = 0.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$MotorJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	this.zpp_inner.immutable_midstep("MotorJoint::rate");
	if(this.zpp_inner_zn.rate != rate) {
		this.zpp_inner_zn.rate = rate;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.rate;
	this.zpp_inner.immutable_midstep("MotorJoint::ratio");
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
};
$hxClasses["nape.constraint.MotorJoint"] = nape_constraint_MotorJoint;
nape_constraint_MotorJoint.__name__ = ["nape","constraint","MotorJoint"];
nape_constraint_MotorJoint.__super__ = nape_constraint_Constraint;
nape_constraint_MotorJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("MotorJoint::ratio");
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,get_rate: function() {
		return this.zpp_inner_zn.rate;
	}
	,set_rate: function(rate) {
		this.zpp_inner.immutable_midstep("MotorJoint::rate");
		if(this.zpp_inner_zn.rate != rate) {
			this.zpp_inner_zn.rate = rate;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.rate;
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(1,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape_constraint_MotorJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_rate:"set_rate",get_rate:"get_rate",set_ratio:"set_ratio",get_ratio:"get_ratio",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_constraint_PivotJoint = function(body1,body2,anchor1,anchor2) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$PivotJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
};
$hxClasses["nape.constraint.PivotJoint"] = nape_constraint_PivotJoint;
nape_constraint_PivotJoint.__name__ = ["nape","constraint","PivotJoint"];
nape_constraint_PivotJoint.__super__ = nape_constraint_Constraint;
nape_constraint_PivotJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(2,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape_constraint_PivotJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_constraint_PulleyJoint = function(body1,body2,body3,body4,anchor1,anchor2,anchor3,anchor4,jointMin,jointMax,ratio) {
	if(ratio == null) ratio = 1.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$PulleyJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	this.set_body3(body3);
	this.set_body4(body4);
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a3 == null) $this.zpp_inner_zn.setup_a3();
		$r = $this.zpp_inner_zn.wrap_a3;
		return $r;
	}(this))).set(anchor3);
	if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
	this.zpp_inner_zn.wrap_a3;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a4 == null) $this.zpp_inner_zn.setup_a4();
		$r = $this.zpp_inner_zn.wrap_a4;
		return $r;
	}(this))).set(anchor4);
	if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
	this.zpp_inner_zn.wrap_a4;
	this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
$hxClasses["nape.constraint.PulleyJoint"] = nape_constraint_PulleyJoint;
nape_constraint_PulleyJoint.__name__ = ["nape","constraint","PulleyJoint"];
nape_constraint_PulleyJoint.__super__ = nape_constraint_Constraint;
nape_constraint_PulleyJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1 && this.zpp_inner_zn.b3 != inbody1 && this.zpp_inner_zn.b4 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2 && this.zpp_inner_zn.b3 != inbody2 && this.zpp_inner_zn.b4 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_body3: function() {
		if(this.zpp_inner_zn.b3 == null) return null; else return this.zpp_inner_zn.b3.outer;
	}
	,set_body3: function(body3) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body3");
		var inbody3;
		if(body3 == null) inbody3 = null; else inbody3 = body3.zpp_inner;
		if(inbody3 != this.zpp_inner_zn.b3) {
			if(this.zpp_inner_zn.b3 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b3) {
					if(this.zpp_inner_zn.b3 != null) this.zpp_inner_zn.b3.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b3.wake();
			}
			this.zpp_inner_zn.b3 = inbody3;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody3 != null && this.zpp_inner_zn.b1 != inbody3 && this.zpp_inner_zn.b2 != inbody3 && this.zpp_inner_zn.b4 != inbody3) {
				if(inbody3 != null) inbody3.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody3 != null) inbody3.wake();
			}
		}
		if(this.zpp_inner_zn.b3 == null) return null; else return this.zpp_inner_zn.b3.outer;
	}
	,get_body4: function() {
		if(this.zpp_inner_zn.b4 == null) return null; else return this.zpp_inner_zn.b4.outer;
	}
	,set_body4: function(body4) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body4");
		var inbody4;
		if(body4 == null) inbody4 = null; else inbody4 = body4.zpp_inner;
		if(inbody4 != this.zpp_inner_zn.b4) {
			if(this.zpp_inner_zn.b4 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b4) {
					if(this.zpp_inner_zn.b4 != null) this.zpp_inner_zn.b4.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b4.wake();
			}
			this.zpp_inner_zn.b4 = inbody4;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody4 != null && this.zpp_inner_zn.b1 != inbody4 && this.zpp_inner_zn.b2 != inbody4 && this.zpp_inner_zn.b3 != inbody4) {
				if(inbody4 != null) inbody4.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody4 != null) inbody4.wake();
			}
		}
		if(this.zpp_inner_zn.b4 == null) return null; else return this.zpp_inner_zn.b4.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_anchor3: function() {
		if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
		return this.zpp_inner_zn.wrap_a3;
	}
	,set_anchor3: function(anchor3) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a3 == null) $this.zpp_inner_zn.setup_a3();
			$r = $this.zpp_inner_zn.wrap_a3;
			return $r;
		}(this))).set(anchor3);
		if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
		return this.zpp_inner_zn.wrap_a3;
	}
	,get_anchor4: function() {
		if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
		return this.zpp_inner_zn.wrap_a4;
	}
	,set_anchor4: function(anchor4) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a4 == null) $this.zpp_inner_zn.setup_a4();
			$r = $this.zpp_inner_zn.wrap_a4;
			return $r;
		}(this))).set(anchor4);
		if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
		return this.zpp_inner_zn.wrap_a4;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,isSlack: function() {
		return this.zpp_inner_zn.slack;
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(1,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
		if((this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != null && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) lambda(this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer);
		if((this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != null && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer)) lambda(this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer);
	}
	,__class__: nape_constraint_PulleyJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_ratio:"set_ratio",get_ratio:"get_ratio",set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_anchor4:"set_anchor4",get_anchor4:"get_anchor4",set_anchor3:"set_anchor3",get_anchor3:"get_anchor3",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body4:"set_body4",get_body4:"get_body4",set_body3:"set_body3",get_body3:"get_body3",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_constraint_UserConstraint = function(dimensions,velocityOnly) {
	if(velocityOnly == null) velocityOnly = false;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$UserConstraint(dimensions,velocityOnly);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
};
$hxClasses["nape.constraint.UserConstraint"] = nape_constraint_UserConstraint;
nape_constraint_UserConstraint.__name__ = ["nape","constraint","UserConstraint"];
nape_constraint_UserConstraint.__super__ = nape_constraint_Constraint;
nape_constraint_UserConstraint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,__bindVec2: function() {
		var ret = new nape_geom_Vec2();
		ret.zpp_inner._inuse = true;
		ret.zpp_inner._invalidate = ($_=this.zpp_inner_zn,$bind($_,$_.bindVec2_invalidate));
		return ret;
	}
	,__copy: function() {
		return null;
	}
	,__broken: function() {
	}
	,__validate: function() {
	}
	,__draw: function(debug) {
	}
	,__prepare: function() {
	}
	,__position: function(err) {
	}
	,__velocity: function(err) {
	}
	,__eff_mass: function(eff) {
	}
	,__clamp: function(jAcc) {
	}
	,__impulse: function(imp,body,out) {
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(this.zpp_inner_zn.dim,1);
		var _g1 = 0;
		var _g = this.zpp_inner_zn.dim;
		while(_g1 < _g) {
			var i = _g1++;
			ret.zpp_inner.x[i * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc[i];
		}
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		var i = 0;
		var nbodies = this.zpp_inner_zn.bodies.length;
		while(i < nbodies) {
			var b = this.zpp_inner_zn.bodies[i];
			if(b.body != null) {
				var found = false;
				var _g = i + 1;
				while(_g < nbodies) {
					var j = _g++;
					var c = this.zpp_inner_zn.bodies[j];
					if(c.body == b.body) {
						found = true;
						break;
					}
				}
				if(!found) lambda(b.body.outer);
			}
			i++;
		}
	}
	,__invalidate: function() {
		this.zpp_inner.immutable_midstep("UserConstraint::invalidate()");
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner.wake();
	}
	,__registerBody: function(oldBody,newBody) {
		this.zpp_inner.immutable_midstep("UserConstraint::registerBody(..)");
		if(oldBody != newBody) {
			if(oldBody != null) {
				if(!this.zpp_inner_zn.remBody(oldBody.zpp_inner)) {
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) oldBody.zpp_inner.wake();
			}
			if(newBody != null) this.zpp_inner_zn.addBody(newBody.zpp_inner);
			this.zpp_inner.wake();
			if(newBody != null) newBody.zpp_inner.wake();
		}
		return newBody;
	}
	,__class__: nape_constraint_UserConstraint
});
var nape_constraint_WeldJoint = function(body1,body2,anchor1,anchor2,phase) {
	if(phase == null) phase = 0.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$WeldJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	this.zpp_inner.immutable_midstep("WeldJoint::phase");
	if(this.zpp_inner_zn.phase != phase) {
		this.zpp_inner_zn.phase = phase;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.phase;
};
$hxClasses["nape.constraint.WeldJoint"] = nape_constraint_WeldJoint;
nape_constraint_WeldJoint.__name__ = ["nape","constraint","WeldJoint"];
nape_constraint_WeldJoint.__super__ = nape_constraint_Constraint;
nape_constraint_WeldJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1;
		if(body1 == null) inbody1 = null; else inbody1 = body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		if(this.zpp_inner_zn.b1 == null) return null; else return this.zpp_inner_zn.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2;
		if(body2 == null) inbody2 = null; else inbody2 = body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		if(this.zpp_inner_zn.b2 == null) return null; else return this.zpp_inner_zn.b2.outer;
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,get_phase: function() {
		return this.zpp_inner_zn.phase;
	}
	,set_phase: function(phase) {
		this.zpp_inner.immutable_midstep("WeldJoint::phase");
		if(this.zpp_inner_zn.phase != phase) {
			this.zpp_inner_zn.phase = phase;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.phase;
	}
	,impulse: function() {
		var ret = new nape_geom_MatMN(3,1);
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccz;
		return ret;
	}
	,bodyImpulse: function(body) {
		if(!this.zpp_inner.active) return nape_geom_Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,__class__: nape_constraint_WeldJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_phase:"set_phase",get_phase:"get_phase",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_dynamics_Arbiter = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_dynamics_ZPP_$Arbiter.internal) {
	}
};
$hxClasses["nape.dynamics.Arbiter"] = nape_dynamics_Arbiter;
nape_dynamics_Arbiter.__name__ = ["nape","dynamics","Arbiter"];
nape_dynamics_Arbiter.prototype = {
	zpp_inner: null
	,get_isSleeping: function() {
		return this.zpp_inner.sleeping;
	}
	,get_type: function() {
		return zpp_$nape_dynamics_ZPP_$Arbiter.types[this.zpp_inner.type];
	}
	,isCollisionArbiter: function() {
		return this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL;
	}
	,isFluidArbiter: function() {
		return this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID;
	}
	,isSensorArbiter: function() {
		return this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR;
	}
	,get_collisionArbiter: function() {
		if(this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) return this.zpp_inner.colarb.outer_zn; else return null;
	}
	,get_fluidArbiter: function() {
		if(this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) return this.zpp_inner.fluidarb.outer_zn; else return null;
	}
	,get_shape1: function() {
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.ws2.outer; else return this.zpp_inner.ws1.outer;
	}
	,get_shape2: function() {
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.ws1.outer; else return this.zpp_inner.ws2.outer;
	}
	,get_body1: function() {
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.b2.outer; else return this.zpp_inner.b1.outer;
	}
	,get_body2: function() {
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) return this.zpp_inner.b1.outer; else return this.zpp_inner.b2.outer;
	}
	,get_state: function() {
		var _g = this.zpp_inner.immState;
		var x = _g;
		if(x == (zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS)) {
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
		} else {
			var x1 = _g;
			switch(_g) {
			case 1:
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				return zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
			default:
				if(x1 == (zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS)) {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					return zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
				} else {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					return zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE;
				}
			}
		}
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		return nape_geom_Vec3.get(0,0,0);
	}
	,toString: function() {
		var ret;
		if(this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) ret = "CollisionArbiter"; else if(this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) ret = "FluidArbiter"; else ret = "SensorArbiter";
		if(this.zpp_inner.cleared) return ret + "(object-pooled)"; else return ret + "(" + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws2.outer:this.zpp_inner.ws1.outer).toString() + "|" + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws1.outer:this.zpp_inner.ws2.outer).toString() + ")" + (this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL?"[" + ["SD","DD"][this.zpp_inner.colarb.stat?0:1] + "]":"") + "<-" + this.get_state().toString();
	}
	,__class__: nape_dynamics_Arbiter
	,__properties__: {get_state:"get_state",get_body2:"get_body2",get_body1:"get_body1",get_shape2:"get_shape2",get_shape1:"get_shape1",get_fluidArbiter:"get_fluidArbiter",get_collisionArbiter:"get_collisionArbiter",get_type:"get_type",get_isSleeping:"get_isSleeping"}
};
var nape_dynamics_ArbiterIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.ArbiterIterator"] = nape_dynamics_ArbiterIterator;
nape_dynamics_ArbiterIterator.__name__ = ["nape","dynamics","ArbiterIterator"];
nape_dynamics_ArbiterIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ArbiterIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ArbiterList.internal = true;
		var ret1 = new nape_dynamics_ArbiterIterator();
		zpp_$nape_util_ZPP_$ArbiterList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ArbiterIterator.zpp_pool;
		nape_dynamics_ArbiterIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ArbiterIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
			nape_dynamics_ArbiterIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_ArbiterIterator
};
var nape_dynamics_ArbiterList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ArbiterList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.dynamics.ArbiterList"] = nape_dynamics_ArbiterList;
nape_dynamics_ArbiterList.__name__ = ["nape","dynamics","ArbiterList"];
nape_dynamics_ArbiterList.fromArray = function(array) {
	var ret = new nape_dynamics_ArbiterList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_dynamics_ArbiterList.prototype = {
	zpp_inner: null
	,get_length: function() {
		return this.zpp_gl();
	}
	,zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) this.zpp_inner.user_length++;
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,has: function(obj) {
		this.zpp_vm();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_vm();
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.head;
			while(true) {
				var x = this.zpp_inner.at_ite.elt;
				if(x.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite.elt;
				if(x1.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_dynamics_ArbiterIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_dynamics_ArbiterList();
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g = xs.iterator();
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) this.add(x);
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it = this.iterator();
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
			nape_dynamics_ArbiterIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.zpp_gl()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_dynamics_ArbiterList
	,__properties__: {get_length:"get_length"}
};
var nape_dynamics_ArbiterType = function() {
};
$hxClasses["nape.dynamics.ArbiterType"] = nape_dynamics_ArbiterType;
nape_dynamics_ArbiterType.__name__ = ["nape","dynamics","ArbiterType"];
nape_dynamics_ArbiterType.__properties__ = {get_FLUID:"get_FLUID",get_SENSOR:"get_SENSOR",get_COLLISION:"get_COLLISION"}
nape_dynamics_ArbiterType.get_COLLISION = function() {
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION;
};
nape_dynamics_ArbiterType.get_SENSOR = function() {
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR;
};
nape_dynamics_ArbiterType.get_FLUID = function() {
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID;
};
nape_dynamics_ArbiterType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION = new nape_dynamics_ArbiterType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION;
			return $r;
		}(this))) return "COLLISION"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR = new nape_dynamics_ArbiterType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR;
			return $r;
		}(this))) return "SENSOR"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID = new nape_dynamics_ArbiterType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID;
			return $r;
		}(this))) return "FLUID"; else return "";
	}
	,__class__: nape_dynamics_ArbiterType
};
var nape_dynamics_CollisionArbiter = function() {
	nape_dynamics_Arbiter.call(this);
};
$hxClasses["nape.dynamics.CollisionArbiter"] = nape_dynamics_CollisionArbiter;
nape_dynamics_CollisionArbiter.__name__ = ["nape","dynamics","CollisionArbiter"];
nape_dynamics_CollisionArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_CollisionArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
	get_contacts: function() {
		if(this.zpp_inner.colarb.wrap_contacts == null) this.zpp_inner.colarb.setupcontacts();
		return this.zpp_inner.colarb.wrap_contacts;
	}
	,get_normal: function() {
		if(this.zpp_inner.colarb.wrap_normal == null) this.zpp_inner.colarb.getnormal();
		return this.zpp_inner.colarb.wrap_normal;
	}
	,get_radius: function() {
		return this.zpp_inner.colarb.radius;
	}
	,get_referenceEdge1: function() {
		var edge = this.zpp_inner.colarb.__ref_edge1;
		if(edge != null && (!((this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws2.outer:this.zpp_inner.ws1.outer).zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) || (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws2.outer:this.zpp_inner.ws1.outer).zpp_inner != edge.polygon)) edge = this.zpp_inner.colarb.__ref_edge2;
		if(edge == null) return null; else return edge.wrapper();
	}
	,get_referenceEdge2: function() {
		var edge = this.zpp_inner.colarb.__ref_edge1;
		if(edge != null && (!((this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws1.outer:this.zpp_inner.ws2.outer).zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) || (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws1.outer:this.zpp_inner.ws2.outer).zpp_inner != edge.polygon)) edge = this.zpp_inner.colarb.__ref_edge2;
		if(edge == null) return null; else return edge.wrapper();
	}
	,firstVertex: function() {
		var poly2circle = this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null);
		if(poly2circle) return this.zpp_inner.colarb.__ref_vertex == -1; else return false;
	}
	,secondVertex: function() {
		var poly2circle = this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null);
		if(poly2circle) return this.zpp_inner.colarb.__ref_vertex == 1; else return false;
	}
	,normalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().normalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().normalImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,tangentImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().tangentImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().tangentImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().totalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().totalImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,rollingImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) return colarb.oc1.wrapper().rollingImpulse(body); else return 0.0;
	}
	,get_elasticity: function() {
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= -Infinity || colarb.s2.material.elasticity <= -Infinity) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Infinity || colarb.s2.material.elasticity >= Infinity) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.restitution;
	}
	,set_elasticity: function(elasticity) {
		var colarb = this.zpp_inner.colarb;
		colarb.restitution = elasticity;
		colarb.userdef_restitution = true;
		return this.get_elasticity();
	}
	,get_dynamicFriction: function() {
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= -Infinity || colarb.s2.material.elasticity <= -Infinity) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Infinity || colarb.s2.material.elasticity >= Infinity) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.dyn_fric;
	}
	,set_dynamicFriction: function(dynamicFriction) {
		var colarb = this.zpp_inner.colarb;
		colarb.dyn_fric = dynamicFriction;
		colarb.userdef_dyn_fric = true;
		return this.get_dynamicFriction();
	}
	,get_staticFriction: function() {
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= -Infinity || colarb.s2.material.elasticity <= -Infinity) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Infinity || colarb.s2.material.elasticity >= Infinity) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.stat_fric;
	}
	,set_staticFriction: function(staticFriction) {
		var colarb = this.zpp_inner.colarb;
		colarb.stat_fric = staticFriction;
		colarb.userdef_stat_fric = true;
		return this.get_staticFriction();
	}
	,get_rollingFriction: function() {
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= -Infinity || colarb.s2.material.elasticity <= -Infinity) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Infinity || colarb.s2.material.elasticity >= Infinity) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.rfric;
	}
	,set_rollingFriction: function(rollingFriction) {
		var colarb = this.zpp_inner.colarb;
		colarb.rfric = rollingFriction;
		colarb.userdef_rfric = true;
		return this.get_rollingFriction();
	}
	,__class__: nape_dynamics_CollisionArbiter
	,__properties__: $extend(nape_dynamics_Arbiter.prototype.__properties__,{set_rollingFriction:"set_rollingFriction",get_rollingFriction:"get_rollingFriction",set_staticFriction:"set_staticFriction",get_staticFriction:"get_staticFriction",set_dynamicFriction:"set_dynamicFriction",get_dynamicFriction:"get_dynamicFriction",set_elasticity:"set_elasticity",get_elasticity:"get_elasticity",get_referenceEdge2:"get_referenceEdge2",get_referenceEdge1:"get_referenceEdge1",get_radius:"get_radius",get_normal:"get_normal",get_contacts:"get_contacts"})
});
var nape_dynamics_Contact = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.Contact"] = nape_dynamics_Contact;
nape_dynamics_Contact.__name__ = ["nape","dynamics","Contact"];
nape_dynamics_Contact.prototype = {
	zpp_inner: null
	,get_arbiter: function() {
		if(this.zpp_inner.arbiter == null) return null; else return this.zpp_inner.arbiter.outer.get_collisionArbiter();
	}
	,get_penetration: function() {
		return -this.zpp_inner.dist;
	}
	,get_position: function() {
		if(this.zpp_inner.wrap_position == null) this.zpp_inner.getposition();
		return this.zpp_inner.wrap_position;
	}
	,get_fresh: function() {
		return this.zpp_inner.fresh;
	}
	,normalImpulse: function(body) {
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jnAcc = cin.jnAcc;
		if(body == null) return nape_geom_Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc); else if(body == colarb.b1.outer) return nape_geom_Vec3.get(colarb.nx * -jnAcc,colarb.ny * -jnAcc,-(colarb.ny * cin.r1x - colarb.nx * cin.r1y) * jnAcc); else return nape_geom_Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc,(colarb.ny * cin.r2x - colarb.nx * cin.r2y) * jnAcc);
	}
	,tangentImpulse: function(body) {
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jtAcc = cin.jtAcc;
		if(body == null) return nape_geom_Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc); else if(body == colarb.b1.outer) return nape_geom_Vec3.get(colarb.ny * jtAcc,-colarb.nx * jtAcc,-(cin.r1x * colarb.nx + cin.r1y * colarb.ny) * jtAcc); else return nape_geom_Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc,(cin.r2x * colarb.nx + cin.r2y * colarb.ny) * jtAcc);
	}
	,rollingImpulse: function(body) {
		var colarb = this.zpp_inner.arbiter.colarb;
		var jrAcc = this.zpp_inner.arbiter.colarb.jrAcc;
		if(body == null) return jrAcc; else if(body == colarb.b1.outer) return -jrAcc; else return jrAcc;
	}
	,totalImpulse: function(body) {
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jnAcc = cin.jnAcc;
		var jtAcc = cin.jtAcc;
		var jrAcc = colarb.jrAcc;
		if(body == null) return nape_geom_Vec3.get(colarb.nx * jnAcc - colarb.ny * jtAcc,colarb.ny * jnAcc + colarb.nx * jtAcc,jrAcc); else {
			var jx = colarb.nx * jnAcc - colarb.ny * jtAcc;
			var jy = colarb.ny * jnAcc + colarb.nx * jtAcc;
			if(body == colarb.b1.outer) return nape_geom_Vec3.get(-jx,-jy,-(jy * cin.r1x - jx * cin.r1y) - jrAcc); else return nape_geom_Vec3.get(jx,jy,jy * cin.r2x - jx * cin.r2y + jrAcc);
		}
	}
	,get_friction: function() {
		return this.zpp_inner.inner.friction;
	}
	,toString: function() {
		if(this.zpp_inner.arbiter == null || this.zpp_inner.arbiter.cleared) return "{object-pooled}"; else return "{Contact}";
	}
	,__class__: nape_dynamics_Contact
	,__properties__: {get_friction:"get_friction",get_fresh:"get_fresh",get_position:"get_position",get_penetration:"get_penetration",get_arbiter:"get_arbiter"}
};
var nape_dynamics_ContactIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.ContactIterator"] = nape_dynamics_ContactIterator;
nape_dynamics_ContactIterator.__name__ = ["nape","dynamics","ContactIterator"];
nape_dynamics_ContactIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ContactIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ContactList.internal = true;
		var ret1 = new nape_dynamics_ContactIterator();
		zpp_$nape_util_ZPP_$ContactList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ContactIterator.zpp_pool;
		nape_dynamics_ContactIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ContactIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_dynamics_ContactIterator.zpp_pool;
			nape_dynamics_ContactIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_ContactIterator
};
var nape_dynamics_ContactList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ContactList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.dynamics.ContactList"] = nape_dynamics_ContactList;
nape_dynamics_ContactList.__name__ = ["nape","dynamics","ContactList"];
nape_dynamics_ContactList.fromArray = function(array) {
	var ret = new nape_dynamics_ContactList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_dynamics_ContactList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) this.zpp_inner.user_length++;
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.next;
			while(true) {
				var x = this.zpp_inner.at_ite;
				if(x.active && x.arbiter.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite;
				if(x1.active && x1.arbiter.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.wrapper();
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.get_length() == 0) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.get_length() == 0) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.next; else ret = ite.next;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.next; else ret = ite.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.next;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.next;
		while(cx_ite != null) {
			var x = cx_ite;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.get_length() == 0)) this.pop(); else while(!(this.get_length() == 0)) this.shift();
	}
	,empty: function() {
		return this.get_length() == 0;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_dynamics_ContactIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_dynamics_ContactList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_dynamics_ContactIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_dynamics_ContactIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_dynamics_ContactIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape_dynamics_ContactIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_dynamics_ContactIterator.zpp_pool;
			nape_dynamics_ContactIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_dynamics_ContactList
	,__properties__: {get_length:"get_length"}
};
var nape_dynamics_FluidArbiter = function() {
	nape_dynamics_Arbiter.call(this);
};
$hxClasses["nape.dynamics.FluidArbiter"] = nape_dynamics_FluidArbiter;
nape_dynamics_FluidArbiter.__name__ = ["nape","dynamics","FluidArbiter"];
nape_dynamics_FluidArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_FluidArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
	get_position: function() {
		if(this.zpp_inner.fluidarb.wrap_position == null) this.zpp_inner.fluidarb.getposition();
		return this.zpp_inner.fluidarb.wrap_position;
	}
	,set_position: function(position) {
		((function($this) {
			var $r;
			if($this.zpp_inner.fluidarb.wrap_position == null) $this.zpp_inner.fluidarb.getposition();
			$r = $this.zpp_inner.fluidarb.wrap_position;
			return $r;
		}(this))).set(position);
		if(this.zpp_inner.fluidarb.wrap_position == null) this.zpp_inner.fluidarb.getposition();
		return this.zpp_inner.fluidarb.wrap_position;
	}
	,get_overlap: function() {
		return this.zpp_inner.fluidarb.overlap;
	}
	,set_overlap: function(overlap) {
		this.zpp_inner.fluidarb.overlap = overlap;
		return this.zpp_inner.fluidarb.overlap;
	}
	,buoyancyImpulse: function(body) {
		var farb = this.zpp_inner.fluidarb;
		if(body == null) return nape_geom_Vec3.get(farb.buoyx,farb.buoyy,0); else if(body.zpp_inner == this.zpp_inner.b2) return nape_geom_Vec3.get(farb.buoyx,farb.buoyy,farb.buoyy * farb.r2x - farb.buoyx * farb.r2y); else return nape_geom_Vec3.get(-farb.buoyx,-farb.buoyy,-(farb.buoyy * farb.r1x - farb.buoyx * farb.r1y));
	}
	,dragImpulse: function(body) {
		var farb = this.zpp_inner.fluidarb;
		var scale;
		if(body == null || body.zpp_inner == this.zpp_inner.b2) scale = 1; else scale = -1;
		return nape_geom_Vec3.get(farb.dampx * scale,farb.dampy * scale,farb.adamp * scale);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var tmp = this.buoyancyImpulse(body);
		var ret = this.dragImpulse(body);
		var _g = ret;
		_g.set_x((function($this) {
			var $r;
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.x;
			return $r;
		}(this)));
		var _g1 = ret;
		_g1.set_y((function($this) {
			var $r;
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.y;
			return $r;
		}(this)));
		var _g2 = ret;
		_g2.set_z((function($this) {
			var $r;
			_g2.zpp_inner.validate();
			$r = _g2.zpp_inner.z;
			return $r;
		}(this)) + (function($this) {
			var $r;
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.z;
			return $r;
		}(this)));
		tmp.dispose();
		return ret;
	}
	,__class__: nape_dynamics_FluidArbiter
	,__properties__: $extend(nape_dynamics_Arbiter.prototype.__properties__,{set_overlap:"set_overlap",get_overlap:"get_overlap",set_position:"set_position",get_position:"get_position"})
});
var nape_dynamics_InteractionFilter = function(collisionGroup,collisionMask,sensorGroup,sensorMask,fluidGroup,fluidMask) {
	if(fluidMask == null) fluidMask = -1;
	if(fluidGroup == null) fluidGroup = 1;
	if(sensorMask == null) sensorMask = -1;
	if(sensorGroup == null) sensorGroup = 1;
	if(collisionMask == null) collisionMask = -1;
	if(collisionGroup == null) collisionGroup = 1;
	this.zpp_inner = null;
	if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) this.zpp_inner = new zpp_$nape_dynamics_ZPP_$InteractionFilter(); else {
		this.zpp_inner = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionGroup;
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionMask;
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorGroup;
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorMask;
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidGroup;
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidMask;
};
$hxClasses["nape.dynamics.InteractionFilter"] = nape_dynamics_InteractionFilter;
nape_dynamics_InteractionFilter.__name__ = ["nape","dynamics","InteractionFilter"];
nape_dynamics_InteractionFilter.prototype = {
	zpp_inner: null
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_$nape_util_ZPP_$ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,get_collisionGroup: function() {
		return this.zpp_inner.collisionGroup;
	}
	,set_collisionGroup: function(collisionGroup) {
		if(this.zpp_inner.collisionGroup != collisionGroup) {
			this.zpp_inner.collisionGroup = collisionGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.collisionGroup;
	}
	,get_collisionMask: function() {
		return this.zpp_inner.collisionMask;
	}
	,set_collisionMask: function(collisionMask) {
		if(this.zpp_inner.collisionMask != collisionMask) {
			this.zpp_inner.collisionMask = collisionMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.collisionMask;
	}
	,get_sensorGroup: function() {
		return this.zpp_inner.sensorGroup;
	}
	,set_sensorGroup: function(sensorGroup) {
		if(this.zpp_inner.sensorGroup != sensorGroup) {
			this.zpp_inner.sensorGroup = sensorGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.sensorGroup;
	}
	,get_sensorMask: function() {
		return this.zpp_inner.sensorMask;
	}
	,set_sensorMask: function(sensorMask) {
		if(this.zpp_inner.sensorMask != sensorMask) {
			this.zpp_inner.sensorMask = sensorMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.sensorMask;
	}
	,get_fluidGroup: function() {
		return this.zpp_inner.fluidGroup;
	}
	,set_fluidGroup: function(fluidGroup) {
		if(this.zpp_inner.fluidGroup != fluidGroup) {
			this.zpp_inner.fluidGroup = fluidGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.fluidGroup;
	}
	,get_fluidMask: function() {
		return this.zpp_inner.fluidMask;
	}
	,set_fluidMask: function(fluidMask) {
		if(this.zpp_inner.fluidMask != fluidMask) {
			this.zpp_inner.fluidMask = fluidMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.fluidMask;
	}
	,shouldCollide: function(filter) {
		return this.zpp_inner.shouldCollide(filter.zpp_inner);
	}
	,shouldSense: function(filter) {
		return this.zpp_inner.shouldSense(filter.zpp_inner);
	}
	,shouldFlow: function(filter) {
		return this.zpp_inner.shouldFlow(filter.zpp_inner);
	}
	,copy: function() {
		return new nape_dynamics_InteractionFilter(this.zpp_inner.collisionGroup,this.zpp_inner.collisionMask,this.zpp_inner.sensorGroup,this.zpp_inner.sensorMask,this.zpp_inner.fluidGroup,this.zpp_inner.fluidMask);
	}
	,toString: function() {
		return "{ collision: " + StringTools.hex(this.zpp_inner.collisionGroup,8) + "~" + StringTools.hex(this.zpp_inner.collisionMask,8) + " sensor: " + StringTools.hex(this.zpp_inner.sensorGroup,8) + "~" + StringTools.hex(this.zpp_inner.sensorMask,8) + " fluid: " + StringTools.hex(this.zpp_inner.fluidGroup,8) + "~" + StringTools.hex(this.zpp_inner.fluidMask,8) + " }";
	}
	,__class__: nape_dynamics_InteractionFilter
	,__properties__: {set_fluidMask:"set_fluidMask",get_fluidMask:"get_fluidMask",set_fluidGroup:"set_fluidGroup",get_fluidGroup:"get_fluidGroup",set_sensorMask:"set_sensorMask",get_sensorMask:"get_sensorMask",set_sensorGroup:"set_sensorGroup",get_sensorGroup:"get_sensorGroup",set_collisionMask:"set_collisionMask",get_collisionMask:"get_collisionMask",set_collisionGroup:"set_collisionGroup",get_collisionGroup:"get_collisionGroup",get_shapes:"get_shapes",get_userData:"get_userData"}
};
var nape_dynamics_InteractionGroup = function(ignore) {
	if(ignore == null) ignore = false;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_dynamics_ZPP_$InteractionGroup();
	this.zpp_inner.outer = this;
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.invalidate(true);
		this.zpp_inner.ignore = ignore;
	}
	this.zpp_inner.ignore;
};
$hxClasses["nape.dynamics.InteractionGroup"] = nape_dynamics_InteractionGroup;
nape_dynamics_InteractionGroup.__name__ = ["nape","dynamics","InteractionGroup"];
nape_dynamics_InteractionGroup.prototype = {
	zpp_inner: null
	,get_group: function() {
		if(this.zpp_inner.group == null) return null; else return this.zpp_inner.group.outer;
	}
	,set_group: function(group) {
		this.zpp_inner.setGroup(group == null?null:group.zpp_inner);
		if(this.zpp_inner.group == null) return null; else return this.zpp_inner.group.outer;
	}
	,get_ignore: function() {
		return this.zpp_inner.ignore;
	}
	,set_ignore: function(ignore) {
		if(this.zpp_inner.ignore != ignore) {
			this.zpp_inner.invalidate(true);
			this.zpp_inner.ignore = ignore;
		}
		return this.zpp_inner.ignore;
	}
	,get_interactors: function() {
		if(this.zpp_inner.wrap_interactors == null) this.zpp_inner.wrap_interactors = zpp_$nape_util_ZPP_$InteractorList.get(this.zpp_inner.interactors,true);
		return this.zpp_inner.wrap_interactors;
	}
	,get_groups: function() {
		if(this.zpp_inner.wrap_groups == null) this.zpp_inner.wrap_groups = zpp_$nape_util_ZPP_$InteractionGroupList.get(this.zpp_inner.groups,true);
		return this.zpp_inner.wrap_groups;
	}
	,toString: function() {
		var ret = "InteractionGroup";
		if(this.zpp_inner.ignore) ret += ":ignore";
		return ret;
	}
	,__class__: nape_dynamics_InteractionGroup
	,__properties__: {get_groups:"get_groups",get_interactors:"get_interactors",set_ignore:"set_ignore",get_ignore:"get_ignore",set_group:"set_group",get_group:"get_group"}
};
var nape_dynamics_InteractionGroupIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.InteractionGroupIterator"] = nape_dynamics_InteractionGroupIterator;
nape_dynamics_InteractionGroupIterator.__name__ = ["nape","dynamics","InteractionGroupIterator"];
nape_dynamics_InteractionGroupIterator.get = function(list) {
	var ret;
	if(nape_dynamics_InteractionGroupIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = true;
		var ret1 = new nape_dynamics_InteractionGroupIterator();
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_InteractionGroupIterator.zpp_pool;
		nape_dynamics_InteractionGroupIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_InteractionGroupIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_dynamics_InteractionGroupIterator.zpp_pool;
			nape_dynamics_InteractionGroupIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_InteractionGroupIterator
};
var nape_dynamics_InteractionGroupList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$InteractionGroupList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.dynamics.InteractionGroupList"] = nape_dynamics_InteractionGroupList;
nape_dynamics_InteractionGroupList.__name__ = ["nape","dynamics","InteractionGroupList"];
nape_dynamics_InteractionGroupList.fromArray = function(array) {
	var ret = new nape_dynamics_InteractionGroupList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_dynamics_InteractionGroupList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_dynamics_InteractionGroupIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_dynamics_InteractionGroupList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_dynamics_InteractionGroupIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_dynamics_InteractionGroupIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_dynamics_InteractionGroupIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape_dynamics_InteractionGroupIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_dynamics_InteractionGroupIterator.zpp_pool;
			nape_dynamics_InteractionGroupIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_dynamics_InteractionGroupList
	,__properties__: {get_length:"get_length"}
};
var nape_geom_AABB = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_inner = null;
	this.zpp_inner = zpp_$nape_geom_ZPP_$AABB.get(x,y,x + width,y + height);
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.AABB"] = nape_geom_AABB;
nape_geom_AABB.__name__ = ["nape","geom","AABB"];
nape_geom_AABB.fromRect = function(rect) {
	return new nape_geom_AABB(rect.x,rect.y,rect.width,rect.height);
};
nape_geom_AABB.prototype = {
	zpp_inner: null
	,copy: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.copy().wrapper();
	}
	,toRect: function() {
		return new openfl_geom_Rectangle((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.width();
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.height();
			return $r;
		}(this)));
	}
	,get_min: function() {
		return this.zpp_inner.getmin();
	}
	,set_min: function(min) {
		this.zpp_inner.getmin().set(min);
		return this.zpp_inner.getmin();
	}
	,get_max: function() {
		return this.zpp_inner.getmax();
	}
	,set_max: function(max) {
		this.zpp_inner.getmax().set(max);
		return this.zpp_inner.getmax();
	}
	,get_x: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.minx;
	}
	,set_x: function(x) {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) != x) {
			this.zpp_inner.maxx += x - this.zpp_inner.minx;
			this.zpp_inner.minx = x;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.minx;
	}
	,get_y: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.miny;
	}
	,set_y: function(y) {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)) != y) {
			this.zpp_inner.maxy += y - this.zpp_inner.miny;
			this.zpp_inner.miny = y;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.miny;
	}
	,get_width: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.width();
	}
	,set_width: function(width) {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.width();
			return $r;
		}(this)) != width) {
			this.zpp_inner.maxx = (function($this) {
				var $r;
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.minx;
				return $r;
			}(this)) + width;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.width();
	}
	,get_height: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.height();
	}
	,set_height: function(height) {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.height();
			return $r;
		}(this)) != height) {
			this.zpp_inner.maxy = (function($this) {
				var $r;
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.miny;
				return $r;
			}(this)) + height;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.height();
	}
	,toString: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.toString();
	}
	,__class__: nape_geom_AABB
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min"}
};
var nape_geom_ConvexResult = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.ConvexResult"] = nape_geom_ConvexResult;
nape_geom_ConvexResult.__name__ = ["nape","geom","ConvexResult"];
nape_geom_ConvexResult.prototype = {
	zpp_inner: null
	,get_normal: function() {
		return this.zpp_inner.normal;
	}
	,get_position: function() {
		return this.zpp_inner.position;
	}
	,get_toi: function() {
		return this.zpp_inner.toiDistance;
	}
	,get_shape: function() {
		return this.zpp_inner.shape;
	}
	,dispose: function() {
		this.zpp_inner.free();
	}
	,toString: function() {
		return "{ shape: " + Std.string(this.zpp_inner.shape) + " toi: " + this.zpp_inner.toiDistance + " }";
	}
	,__class__: nape_geom_ConvexResult
	,__properties__: {get_shape:"get_shape",get_toi:"get_toi",get_position:"get_position",get_normal:"get_normal"}
};
var nape_geom_ConvexResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.ConvexResultIterator"] = nape_geom_ConvexResultIterator;
nape_geom_ConvexResultIterator.__name__ = ["nape","geom","ConvexResultIterator"];
nape_geom_ConvexResultIterator.get = function(list) {
	var ret;
	if(nape_geom_ConvexResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConvexResultList.internal = true;
		var ret1 = new nape_geom_ConvexResultIterator();
		zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_ConvexResultIterator.zpp_pool;
		nape_geom_ConvexResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_ConvexResultIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_geom_ConvexResultIterator.zpp_pool;
			nape_geom_ConvexResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_ConvexResultIterator
};
var nape_geom_ConvexResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ConvexResultList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.ConvexResultList"] = nape_geom_ConvexResultList;
nape_geom_ConvexResultList.__name__ = ["nape","geom","ConvexResultList"];
nape_geom_ConvexResultList.fromArray = function(array) {
	var ret = new nape_geom_ConvexResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_geom_ConvexResultList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			} else this.zpp_inner.inner.add(obj);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret;
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_geom_ConvexResultIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_geom_ConvexResultList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_geom_ConvexResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_geom_ConvexResultIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_geom_ConvexResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape_geom_ConvexResultIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_geom_ConvexResultIterator.zpp_pool;
			nape_geom_ConvexResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_geom_ConvexResultList
	,__properties__: {get_length:"get_length"}
};
var nape_geom_Geom = function() { };
$hxClasses["nape.geom.Geom"] = nape_geom_Geom;
nape_geom_Geom.__name__ = ["nape","geom","Geom"];
nape_geom_Geom.distanceBody = function(body1,body2,out1,out2) {
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_$nape_geom_ZPP_$Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = body2.zpp_inner.shapes.head;
	while(cx_ite1 != null) {
		var i1 = cx_ite1.elt;
		zpp_$nape_geom_ZPP_$Geom.validateShape(i1);
		cx_ite1 = cx_ite1.next;
	}
	return zpp_$nape_geom_ZPP_$SweepDistance.distanceBody(body1.zpp_inner,body2.zpp_inner,out1.zpp_inner,out2.zpp_inner);
};
nape_geom_Geom.distance = function(shape1,shape2,out1,out2) {
	zpp_$nape_geom_ZPP_$Geom.validateShape(shape1.zpp_inner);
	zpp_$nape_geom_ZPP_$Geom.validateShape(shape2.zpp_inner);
	var tmp;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) tmp = new zpp_$nape_geom_ZPP_$Vec2(); else {
		tmp = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = tmp.next;
		tmp.next = null;
	}
	tmp.weak = false;
	var ret = zpp_$nape_geom_ZPP_$SweepDistance.distance(shape1.zpp_inner,shape2.zpp_inner,out1.zpp_inner,out2.zpp_inner,tmp,1e100);
	var o = tmp;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
	zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	return ret;
};
nape_geom_Geom.intersectsBody = function(body1,body2) {
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_$nape_geom_ZPP_$Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = body2.zpp_inner.shapes.head;
	while(cx_ite1 != null) {
		var i1 = cx_ite1.elt;
		zpp_$nape_geom_ZPP_$Geom.validateShape(i1);
		cx_ite1 = cx_ite1.next;
	}
	if(!body1.zpp_inner.aabb.intersect(body2.zpp_inner.aabb)) return false; else {
		var cx_ite2 = body1.zpp_inner.shapes.head;
		while(cx_ite2 != null) {
			var s1 = cx_ite2.elt;
			var cx_ite3 = body2.zpp_inner.shapes.head;
			while(cx_ite3 != null) {
				var s2 = cx_ite3.elt;
				if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(s1,s2)) return true;
				cx_ite3 = cx_ite3.next;
			}
			cx_ite2 = cx_ite2.next;
		}
		return false;
	}
};
nape_geom_Geom.intersects = function(shape1,shape2) {
	zpp_$nape_geom_ZPP_$Geom.validateShape(shape1.zpp_inner);
	zpp_$nape_geom_ZPP_$Geom.validateShape(shape2.zpp_inner);
	return shape1.zpp_inner.aabb.intersect(shape2.zpp_inner.aabb) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape1.zpp_inner,shape2.zpp_inner);
};
nape_geom_Geom.contains = function(shape1,shape2) {
	zpp_$nape_geom_ZPP_$Geom.validateShape(shape1.zpp_inner);
	zpp_$nape_geom_ZPP_$Geom.validateShape(shape2.zpp_inner);
	return zpp_$nape_geom_ZPP_$Collide.containTest(shape1.zpp_inner,shape2.zpp_inner);
};
var nape_geom_GeomPoly = function(vertices) {
	this.zpp_inner = null;
	this.zpp_pool = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$GeomPoly(this);
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				var v = vite;
				var obj = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
					var $r;
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = this.zpp_inner.vertices;
					obj.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj;
					this.zpp_inner.vertices.next = obj;
				}
				this.zpp_inner.vertices = obj;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(_g1.hasNext()) {
				var v1;
				_g1.zpp_critical = false;
				v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				var obj1 = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
					var $r;
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.y;
					return $r;
				}(this)));
				if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.prev = this.zpp_inner.vertices;
					obj1.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj1;
					this.zpp_inner.vertices.next = obj1;
				}
				this.zpp_inner.vertices = obj1;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_GeomPoly)) {
			var lv2 = vertices;
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				do {
					var v2 = nape_geom_Vec2.get(vite1.x,vite1.y,null);
					vite1 = vite1.next;
					var obj2 = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
						var $r;
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.y;
						return $r;
					}(this)));
					if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj2.prev = obj2.next = obj2; else {
						obj2.prev = this.zpp_inner.vertices;
						obj2.next = this.zpp_inner.vertices.next;
						this.zpp_inner.vertices.next.prev = obj2;
						this.zpp_inner.vertices.next = obj2;
					}
					this.zpp_inner.vertices = obj2;
					v2.dispose();
				} while(vite1 != verts);
			}
		} else {
		}
		this.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv3.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
};
$hxClasses["nape.geom.GeomPoly"] = nape_geom_GeomPoly;
nape_geom_GeomPoly.__name__ = ["nape","geom","GeomPoly"];
nape_geom_GeomPoly.get = function(vertices) {
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolGeomPoly == null) ret = new nape_geom_GeomPoly(); else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolGeomPoly;
		zpp_$nape_util_ZPP_$PubPool.poolGeomPoly = ret.zpp_pool;
		ret.zpp_pool = null;
	}
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				var v = vite;
				var obj = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
					var $r;
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(_g1.hasNext()) {
				var v1;
				_g1.zpp_critical = false;
				v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				var obj1 = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
					var $r;
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					v1.zpp_inner.validate();
					$r = v1.zpp_inner.y;
					return $r;
				}(this)));
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.prev = ret.zpp_inner.vertices;
					obj1.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj1;
					ret.zpp_inner.vertices.next = obj1;
				}
				ret.zpp_inner.vertices = obj1;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_GeomPoly)) {
			var lv2 = vertices;
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				do {
					var v2 = nape_geom_Vec2.get(vite1.x,vite1.y,null);
					vite1 = vite1.next;
					var obj2 = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
						var $r;
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						v2.zpp_inner.validate();
						$r = v2.zpp_inner.y;
						return $r;
					}(this)));
					if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj2.prev = obj2.next = obj2; else {
						obj2.prev = ret.zpp_inner.vertices;
						obj2.next = ret.zpp_inner.vertices.next;
						ret.zpp_inner.vertices.next.prev = obj2;
						ret.zpp_inner.vertices.next = obj2;
					}
					ret.zpp_inner.vertices = obj2;
					v2.dispose();
				} while(vite1 != verts);
			}
		} else {
		}
		ret.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv3.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js_Boot.__instanceof(vertices,nape_geom_Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	return ret;
};
nape_geom_GeomPoly.prototype = {
	zpp_pool: null
	,zpp_inner: null
	,empty: function() {
		return this.zpp_inner.vertices == null;
	}
	,size: function() {
		var ret = 0;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var i = nite;
				ret++;
				nite = nite.next;
			} while(nite != L);
		}
		return ret;
	}
	,iterator: function() {
		return zpp_$nape_geom_ZPP_$GeomVertexIterator.get(this.zpp_inner.vertices,true);
	}
	,forwardIterator: function() {
		return zpp_$nape_geom_ZPP_$GeomVertexIterator.get(this.zpp_inner.vertices,true);
	}
	,backwardsIterator: function() {
		return zpp_$nape_geom_ZPP_$GeomVertexIterator.get(this.zpp_inner.vertices,false);
	}
	,current: function() {
		return this.zpp_inner.vertices.wrapper();
	}
	,push: function(vertex) {
		var obj = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
			var $r;
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.y;
			return $r;
		}(this)));
		if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
			obj.prev = this.zpp_inner.vertices;
			obj.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = obj;
			this.zpp_inner.vertices.next = obj;
		}
		this.zpp_inner.vertices = obj;
		if(vertex.zpp_inner.weak) {
			vertex.dispose();
			true;
		} else false;
		return this;
	}
	,pop: function() {
		var retv = this.zpp_inner.vertices;
		if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
		} else {
			var retnodes = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
			this.zpp_inner.vertices = retnodes;
		}
		var o = retv;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
		return this;
	}
	,unshift: function(vertex) {
		var obj = zpp_$nape_geom_ZPP_$GeomVert.get((function($this) {
			var $r;
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			vertex.zpp_inner.validate();
			$r = vertex.zpp_inner.y;
			return $r;
		}(this)));
		if(this.zpp_inner.vertices == null) this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
			obj.next = this.zpp_inner.vertices;
			obj.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.prev.next = obj;
			this.zpp_inner.vertices.prev = obj;
		}
		this.zpp_inner.vertices = obj;
		if(vertex.zpp_inner.weak) {
			vertex.dispose();
			true;
		} else false;
		return this;
	}
	,shift: function() {
		var retv = this.zpp_inner.vertices;
		if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = this.zpp_inner.vertices = null;
		} else {
			var retnodes = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
			this.zpp_inner.vertices = retnodes;
		}
		var o = retv;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
		return this;
	}
	,skipForward: function(times) {
		if(!(this.zpp_inner.vertices == null)) {
			if(times > 0) while(times-- > 0) this.zpp_inner.vertices = this.zpp_inner.vertices.next; else if(times < 0) while(times++ < 0) this.zpp_inner.vertices = this.zpp_inner.vertices.prev;
		}
		return this;
	}
	,skipBackwards: function(times) {
		return this.skipForward(-times);
	}
	,erase: function(count) {
		while(count != 0 && !(this.zpp_inner.vertices == null)) {
			var retv = this.zpp_inner.vertices;
			if(count > 0) {
				if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = this.zpp_inner.vertices = null;
				} else {
					var retnodes = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = null;
					this.zpp_inner.vertices = retnodes;
				}
				count--;
			} else if(count < 0) {
				if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = null;
				} else {
					var retnodes1 = this.zpp_inner.vertices.prev;
					this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
					this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
					this.zpp_inner.vertices = null;
					this.zpp_inner.vertices = retnodes1;
				}
				count++;
			}
			var o = retv;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
			zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
		}
		return this;
	}
	,clear: function() {
		while(!(this.zpp_inner.vertices == null)) {
			var tmp = this.zpp_inner.vertices;
			if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = this.zpp_inner.vertices = null;
			} else {
				var retnodes = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = null;
				this.zpp_inner.vertices = retnodes;
			}
			var o = tmp;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
			zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
		}
		return this;
	}
	,copy: function() {
		var ret = nape_geom_GeomPoly.get();
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				var obj = zpp_$nape_geom_ZPP_$GeomVert.get(v.x,v.y);
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
				nite = nite.next;
			} while(nite != L);
		}
		return ret.skipForward(1);
	}
	,dispose: function() {
		this.clear();
		var o = this;
		o.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolGeomPoly;
		zpp_$nape_util_ZPP_$PubPool.poolGeomPoly = o;
	}
	,toString: function() {
		var ret = "GeomPoly[";
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v != this.zpp_inner.vertices) ret += ",";
				ret += "{" + v.x + "," + v.y + "}";
				nite = nite.next;
			} while(nite != L);
		}
		return ret + "]";
	}
	,area: function() {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return 0.0; else {
			var ret;
			var area = 0.0;
			var F = this.zpp_inner.vertices;
			var L = this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					area += v.x * (v.next.y - v.prev.y);
					nite = nite.next;
				} while(nite != L);
			}
			ret = area * 0.5;
			if(ret < 0) return -ret; else return ret;
		}
	}
	,winding: function() {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
			if(zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED;
		} else {
			var area;
			var area1 = 0.0;
			var F = this.zpp_inner.vertices;
			var L = this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					area1 += v.x * (v.next.y - v.prev.y);
					nite = nite.next;
				} while(nite != L);
			}
			area = area1 * 0.5;
			if(area > 0) {
				if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				return zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE;
			} else if(area == 0) {
				if(zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = new nape_geom_Winding();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				return zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED;
			} else {
				if(zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE = new nape_geom_Winding();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				return zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE;
			}
		}
	}
	,contains: function(point) {
		var ret;
		var x;
		point.zpp_inner.validate();
		x = point.zpp_inner.x;
		var y;
		point.zpp_inner.validate();
		y = point.zpp_inner.y;
		var ret1 = false;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var p = nite;
				var q = p.prev;
				if((p.y < y && q.y >= y || q.y < y && p.y >= y) && (p.x <= x || q.x <= x)) {
					if(p.x + (y - p.y) / (q.y - p.y) * (q.x - p.x) < x) ret1 = !ret1;
				}
				nite = nite.next;
			} while(nite != L);
		}
		ret = ret1;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,isClockwise: function() {
		return this.winding() == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE;
			return $r;
		}(this));
	}
	,isConvex: function() {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else {
			var neg = false;
			var pos = false;
			var ret = true;
			var F = this.zpp_inner.vertices;
			var L = this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					var u = v.prev;
					var w = v.next;
					var ax = 0.0;
					var ay = 0.0;
					ax = w.x - v.x;
					ay = w.y - v.y;
					var bx = 0.0;
					var by = 0.0;
					bx = v.x - u.x;
					by = v.y - u.y;
					var dot = by * ax - bx * ay;
					if(dot > 0.0) pos = true; else if(dot < 0.0) neg = true;
					if(pos && neg) {
						ret = false;
						break;
					}
					nite = nite.next;
				} while(nite != L);
			}
			return ret;
		}
	}
	,isSimple: function() {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return zpp_$nape_geom_ZPP_$Simple.isSimple(this.zpp_inner.vertices);
	}
	,isMonotone: function() {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return zpp_$nape_geom_ZPP_$Monotone.isMonotone(this.zpp_inner.vertices);
	}
	,isDegenerate: function() {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return true; else return this.area() < nape_Config.epsilon;
	}
	,simplify: function(epsilon) {
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return this.copy(); else {
			var x = zpp_$nape_geom_ZPP_$Simplify.simplify(this.zpp_inner.vertices,epsilon);
			var ret = nape_geom_GeomPoly.get();
			ret.zpp_inner.vertices = x;
			return ret;
		}
	}
	,simpleDecomposition: function(output) {
		var MPs = zpp_$nape_geom_ZPP_$Simple.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
			$r = zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape_geom_GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			var x = nape_geom_GeomPoly.get();
			x.zpp_inner.vertices = MP;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
		}
		return ret;
	}
	,monotoneDecomposition: function(output) {
		var poly = zpp_$nape_geom_ZPP_$Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$Monotone.sharedPPoly == null) zpp_$nape_geom_ZPP_$Monotone.sharedPPoly = new zpp_$nape_geom_ZPP_$PartitionedPoly();
			$r = zpp_$nape_geom_ZPP_$Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract((function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
			$r = zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape_geom_GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			var x = nape_geom_GeomPoly.get();
			x.zpp_inner.vertices = MP;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
		}
		return ret;
	}
	,convexDecomposition: function(delaunay,output) {
		if(delaunay == null) delaunay = false;
		var poly = zpp_$nape_geom_ZPP_$Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$Monotone.sharedPPoly == null) zpp_$nape_geom_ZPP_$Monotone.sharedPPoly = new zpp_$nape_geom_ZPP_$PartitionedPoly();
			$r = zpp_$nape_geom_ZPP_$Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract_partitions((function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList = new zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly();
			$r = zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape_geom_GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			zpp_$nape_geom_ZPP_$Triangular.triangulate(MP);
			if(delaunay) zpp_$nape_geom_ZPP_$Triangular.optimise(MP);
			zpp_$nape_geom_ZPP_$Convex.optimise(MP);
			var MQs = MP.extract((function($this) {
				var $r;
				if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
				$r = zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList;
				return $r;
			}(this)));
			var o = MP;
			o.next = zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool;
			zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool = o;
			while(!(MQs.head == null)) {
				var MQ = MQs.pop_unsafe();
				var x = nape_geom_GeomPoly.get();
				x.zpp_inner.vertices = MQ;
				if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
			}
		}
		return ret;
	}
	,triangularDecomposition: function(delaunay,output) {
		if(delaunay == null) delaunay = false;
		var poly = zpp_$nape_geom_ZPP_$Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$Monotone.sharedPPoly == null) zpp_$nape_geom_ZPP_$Monotone.sharedPPoly = new zpp_$nape_geom_ZPP_$PartitionedPoly();
			$r = zpp_$nape_geom_ZPP_$Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract_partitions((function($this) {
			var $r;
			if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList = new zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly();
			$r = zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList;
			return $r;
		}(this)));
		var ret;
		if(output == null) ret = new nape_geom_GeomPolyList(); else ret = output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			zpp_$nape_geom_ZPP_$Triangular.triangulate(MP);
			if(delaunay) zpp_$nape_geom_ZPP_$Triangular.optimise(MP);
			var MQs = MP.extract((function($this) {
				var $r;
				if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
				$r = zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList;
				return $r;
			}(this)));
			var o = MP;
			o.next = zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool;
			zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool = o;
			while(!(MQs.head == null)) {
				var MQ = MQs.pop_unsafe();
				var x = nape_geom_GeomPoly.get();
				x.zpp_inner.vertices = MQ;
				if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
			}
		}
		return ret;
	}
	,inflate: function(inflation) {
		var ret = nape_geom_GeomPoly.get();
		if(this.winding() == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE;
			return $r;
		}(this))) inflation = -inflation;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var p = nite;
				var prev = p.prev;
				var next = p.next;
				var ax = 0.0;
				var ay = 0.0;
				var bx = 0.0;
				var by = 0.0;
				ax = p.x - prev.x;
				ay = p.y - prev.y;
				bx = next.x - p.x;
				by = next.y - p.y;
				var apx = 0.0;
				var apy = 0.0;
				var bpx = 0.0;
				var bpy = 0.0;
				apx = ax;
				apy = ay;
				var d = apx * apx + apy * apy;
				var imag = 1.0 / Math.sqrt(d);
				var t1 = imag;
				apx *= t1;
				apy *= t1;
				var t2 = apx;
				apx = -apy;
				apy = t2;
				var t3 = inflation;
				apx *= t3;
				apy *= t3;
				bpx = bx;
				bpy = by;
				var d1 = bpx * bpx + bpy * bpy;
				var imag1 = 1.0 / Math.sqrt(d1);
				var t4 = imag1;
				bpx *= t4;
				bpy *= t4;
				var t5 = bpx;
				bpx = -bpy;
				bpy = t5;
				var t6 = inflation;
				bpx *= t6;
				bpy *= t6;
				var bapx = 0.0;
				var bapy = 0.0;
				bapx = bpx - apx;
				bapy = bpy - apy;
				var num = by * bapx - bx * bapy;
				var t;
				if(num == 0) t = 0; else t = num / (by * ax - bx * ay);
				var px = 0.0;
				var py = 0.0;
				px = p.x + apx;
				py = p.y + apy;
				var t7 = t;
				px += ax * t7;
				py += ay * t7;
				ret.push(nape_geom_Vec2.get(px,py,null));
				nite = nite.next;
			} while(nite != L);
		}
		return ret.skipForward(1);
	}
	,cut: function(start,end,boundedStart,boundedEnd,output) {
		if(boundedEnd == null) boundedEnd = false;
		if(boundedStart == null) boundedStart = false;
		var ret = zpp_$nape_geom_ZPP_$Cutter.run(this.zpp_inner.vertices,start,end,boundedStart,boundedEnd,output);
		if(start.zpp_inner.weak) {
			start.dispose();
			true;
		} else false;
		if(end.zpp_inner.weak) {
			end.dispose();
			true;
		} else false;
		return ret;
	}
	,transform: function(matrix) {
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				var t = matrix.zpp_inner.a * v.x + matrix.zpp_inner.b * v.y + matrix.zpp_inner.tx;
				v.y = matrix.zpp_inner.c * v.x + matrix.zpp_inner.d * v.y + matrix.zpp_inner.ty;
				v.x = t;
				nite = nite.next;
			} while(nite != L);
		}
		return this;
	}
	,bounds: function() {
		var minx = 1e100;
		var miny = 1e100;
		var maxx = -1e+100;
		var maxy = -1e+100;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x < minx) minx = v.x;
				if(v.y < miny) miny = v.y;
				if(v.x > maxx) maxx = v.x;
				if(v.y > maxy) maxy = v.y;
				nite = nite.next;
			} while(nite != L);
		}
		return new nape_geom_AABB(minx,miny,maxx - minx,maxy - miny);
	}
	,top: function() {
		var min = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.y < min.y) min = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(min.wrap == null) {
			min.wrap = nape_geom_Vec2.get(min.x,min.y,null);
			min.wrap.zpp_inner._inuse = true;
			min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
			min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
		}
		return min.wrap;
	}
	,bottom: function() {
		var max = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.y > max.y) max = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(max.wrap == null) {
			max.wrap = nape_geom_Vec2.get(max.x,max.y,null);
			max.wrap.zpp_inner._inuse = true;
			max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
			max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
		}
		return max.wrap;
	}
	,left: function() {
		var min = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x < min.x) min = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(min.wrap == null) {
			min.wrap = nape_geom_Vec2.get(min.x,min.y,null);
			min.wrap.zpp_inner._inuse = true;
			min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
			min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
		}
		return min.wrap;
	}
	,right: function() {
		var max = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x > max.x) max = v;
				nite = nite.next;
			} while(nite != L);
		}
		if(max.wrap == null) {
			max.wrap = nape_geom_Vec2.get(max.x,max.y,null);
			max.wrap.zpp_inner._inuse = true;
			max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
			max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
		}
		return max.wrap;
	}
	,__class__: nape_geom_GeomPoly
};
var nape_geom_GeomPolyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.GeomPolyIterator"] = nape_geom_GeomPolyIterator;
nape_geom_GeomPolyIterator.__name__ = ["nape","geom","GeomPolyIterator"];
nape_geom_GeomPolyIterator.get = function(list) {
	var ret;
	if(nape_geom_GeomPolyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$GeomPolyList.internal = true;
		var ret1 = new nape_geom_GeomPolyIterator();
		zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_GeomPolyIterator.zpp_pool;
		nape_geom_GeomPolyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_GeomPolyIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_geom_GeomPolyIterator.zpp_pool;
			nape_geom_GeomPolyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_GeomPolyIterator
};
var nape_geom_GeomPolyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$GeomPolyList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.GeomPolyList"] = nape_geom_GeomPolyList;
nape_geom_GeomPolyList.__name__ = ["nape","geom","GeomPolyList"];
nape_geom_GeomPolyList.fromArray = function(array) {
	var ret = new nape_geom_GeomPolyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_geom_GeomPolyList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_geom_GeomPolyIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_geom_GeomPolyList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_geom_GeomPolyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_geom_GeomPolyIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_geom_GeomPolyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape_geom_GeomPolyIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_geom_GeomPolyIterator.zpp_pool;
			nape_geom_GeomPolyIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_geom_GeomPolyList
	,__properties__: {get_length:"get_length"}
};
var nape_geom_GeomVertexIterator = function() {
};
$hxClasses["nape.geom.GeomVertexIterator"] = nape_geom_GeomVertexIterator;
nape_geom_GeomVertexIterator.__name__ = ["nape","geom","GeomVertexIterator"];
nape_geom_GeomVertexIterator.prototype = {
	zpp_inner: null
	,hasNext: function() {
		var ret = this.zpp_inner.ptr != this.zpp_inner.start || this.zpp_inner.first;
		this.zpp_inner.first = false;
		if(!ret) {
			var o = this.zpp_inner;
			o.outer.zpp_inner = null;
			o.ptr = o.start = null;
			o.next = zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool;
			zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool = o;
		}
		return ret;
	}
	,next: function() {
		var ret = this.zpp_inner.ptr.wrapper();
		if(this.zpp_inner.forward) this.zpp_inner.ptr = this.zpp_inner.ptr.next; else this.zpp_inner.ptr = this.zpp_inner.ptr.prev;
		return ret;
	}
	,__class__: nape_geom_GeomVertexIterator
};
var nape_geom_MarchingSquares = function() { };
$hxClasses["nape.geom.MarchingSquares"] = nape_geom_MarchingSquares;
nape_geom_MarchingSquares.__name__ = ["nape","geom","MarchingSquares"];
nape_geom_MarchingSquares.run = function(iso,bounds,cellsize,quality,subgrid,combine,output) {
	if(combine == null) combine = true;
	if(quality == null) quality = 2;
	var ret;
	if(output != null) ret = output; else ret = new nape_geom_GeomPolyList();
	if(subgrid == null) zpp_$nape_geom_ZPP_$MarchingSquares.run(iso,(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.minx;
		return $r;
	}(this)),(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.miny;
		return $r;
	}(this)),bounds.zpp_inner.getmax().get_x(),bounds.zpp_inner.getmax().get_y(),cellsize,quality,combine,ret); else {
		var xp;
		xp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.width();
			return $r;
		}(this)) / (function($this) {
			var $r;
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.x;
			return $r;
		}(this));
		var yp;
		yp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.height();
			return $r;
		}(this)) / (function($this) {
			var $r;
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.y;
			return $r;
		}(this));
		var xn = xp | 0;
		var yn = yp | 0;
		if(xn != xp) xn++;
		if(yn != yp) yn++;
		var _g = 0;
		while(_g < xn) {
			var x = _g++;
			var x0;
			x0 = (function($this) {
				var $r;
				bounds.zpp_inner.validate();
				$r = bounds.zpp_inner.minx;
				return $r;
			}(this)) + (function($this) {
				var $r;
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this)) * x;
			var x1;
			if(x == xn - 1) x1 = bounds.zpp_inner.getmax().get_x(); else x1 = x0 + (function($this) {
				var $r;
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this));
			var _g1 = 0;
			while(_g1 < yn) {
				var y = _g1++;
				var y0;
				y0 = (function($this) {
					var $r;
					bounds.zpp_inner.validate();
					$r = bounds.zpp_inner.miny;
					return $r;
				}(this)) + (function($this) {
					var $r;
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this)) * y;
				var y1;
				if(y == yn - 1) y1 = bounds.zpp_inner.getmax().get_y(); else y1 = y0 + (function($this) {
					var $r;
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this));
				zpp_$nape_geom_ZPP_$MarchingSquares.run(iso,x0,y0,x1,y1,cellsize,quality,combine,ret);
			}
		}
	}
	if(cellsize.zpp_inner.weak) {
		cellsize.dispose();
		true;
	} else false;
	if(subgrid != null) {
		if(subgrid.zpp_inner.weak) {
			subgrid.dispose();
			true;
		} else false;
	}
	return ret;
};
var nape_geom_Mat23 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0.0;
	if(tx == null) tx = 0.0;
	if(d == null) d = 1.0;
	if(c == null) c = 0.0;
	if(b == null) b = 0.0;
	if(a == null) a = 1.0;
	this.zpp_inner = null;
	this.zpp_inner = zpp_$nape_geom_ZPP_$Mat23.get();
	this.zpp_inner.outer = this;
	this.zpp_inner.a = a;
	this.zpp_inner.invalidate();
	this.zpp_inner.a;
	this.zpp_inner.b = b;
	this.zpp_inner.invalidate();
	this.zpp_inner.b;
	this.zpp_inner.tx = tx;
	this.zpp_inner.invalidate();
	this.zpp_inner.tx;
	this.zpp_inner.c = c;
	this.zpp_inner.invalidate();
	this.zpp_inner.c;
	this.zpp_inner.d = d;
	this.zpp_inner.invalidate();
	this.zpp_inner.d;
	this.zpp_inner.ty = ty;
	this.zpp_inner.invalidate();
	this.zpp_inner.ty;
};
$hxClasses["nape.geom.Mat23"] = nape_geom_Mat23;
nape_geom_Mat23.__name__ = ["nape","geom","Mat23"];
nape_geom_Mat23.fromMatrix = function(matrix) {
	var m = matrix;
	return new nape_geom_Mat23(m.a,m.c,m.b,m.d,m.tx,m.ty);
};
nape_geom_Mat23.rotation = function(angle) {
	var cos = Math.cos(angle);
	var sin = Math.sin(angle);
	return new nape_geom_Mat23(cos,-sin,sin,cos,0,0);
};
nape_geom_Mat23.translation = function(tx,ty) {
	return new nape_geom_Mat23(1,0,0,1,tx,ty);
};
nape_geom_Mat23.scale = function(sx,sy) {
	return new nape_geom_Mat23(sx,0,0,sy,0,0);
};
nape_geom_Mat23.prototype = {
	zpp_inner: null
	,get_a: function() {
		return this.zpp_inner.a;
	}
	,set_a: function(a) {
		this.zpp_inner.a = a;
		this.zpp_inner.invalidate();
		return this.zpp_inner.a;
	}
	,get_b: function() {
		return this.zpp_inner.b;
	}
	,set_b: function(b) {
		this.zpp_inner.b = b;
		this.zpp_inner.invalidate();
		return this.zpp_inner.b;
	}
	,get_c: function() {
		return this.zpp_inner.c;
	}
	,set_c: function(c) {
		this.zpp_inner.c = c;
		this.zpp_inner.invalidate();
		return this.zpp_inner.c;
	}
	,get_d: function() {
		return this.zpp_inner.d;
	}
	,set_d: function(d) {
		this.zpp_inner.d = d;
		this.zpp_inner.invalidate();
		return this.zpp_inner.d;
	}
	,get_tx: function() {
		return this.zpp_inner.tx;
	}
	,set_tx: function(tx) {
		this.zpp_inner.tx = tx;
		this.zpp_inner.invalidate();
		return this.zpp_inner.tx;
	}
	,get_ty: function() {
		return this.zpp_inner.ty;
	}
	,set_ty: function(ty) {
		this.zpp_inner.ty = ty;
		this.zpp_inner.invalidate();
		return this.zpp_inner.ty;
	}
	,copy: function() {
		return new nape_geom_Mat23(this.zpp_inner.a,this.zpp_inner.b,this.zpp_inner.c,this.zpp_inner.d,this.zpp_inner.tx,this.zpp_inner.ty);
	}
	,set: function(matrix) {
		this.zpp_inner.set(matrix.zpp_inner);
		this.zpp_inner.invalidate();
		return this;
	}
	,setAs: function(a,b,c,d,tx,ty) {
		if(ty == null) ty = 0.0;
		if(tx == null) tx = 0.0;
		if(d == null) d = 1.0;
		if(c == null) c = 0.0;
		if(b == null) b = 0.0;
		if(a == null) a = 1.0;
		this.zpp_inner.setas(a,b,c,d,tx,ty);
		this.zpp_inner.invalidate();
		return this;
	}
	,reset: function() {
		return this.setAs();
	}
	,toMatrix: function(output) {
		if(output == null) output = new openfl_geom_Matrix();
		output.a = this.zpp_inner.a;
		output.b = this.zpp_inner.c;
		output.c = this.zpp_inner.b;
		output.d = this.zpp_inner.d;
		output.tx = this.zpp_inner.tx;
		output.ty = this.zpp_inner.ty;
		return output;
	}
	,get_determinant: function() {
		return this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
	}
	,singular: function() {
		var norm = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d;
		var limit = this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
		if(limit < 0) limit = -limit;
		return norm > nape_Config.illConditionedThreshold * limit;
	}
	,inverse: function() {
		var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
		return new nape_geom_Mat23(this.zpp_inner.d * idet,-this.zpp_inner.b * idet,-this.zpp_inner.c * idet,this.zpp_inner.a * idet,(this.zpp_inner.b * this.zpp_inner.ty - this.zpp_inner.d * this.zpp_inner.tx) * idet,(this.zpp_inner.c * this.zpp_inner.tx - this.zpp_inner.a * this.zpp_inner.ty) * idet);
	}
	,transpose: function() {
		return new nape_geom_Mat23(this.zpp_inner.a,this.zpp_inner.c,this.zpp_inner.b,this.zpp_inner.d,-this.zpp_inner.a * this.zpp_inner.tx - this.zpp_inner.c * this.zpp_inner.ty,-this.zpp_inner.b * this.zpp_inner.tx - this.zpp_inner.d * this.zpp_inner.ty);
	}
	,concat: function(matrix) {
		var m = matrix;
		return new nape_geom_Mat23(m.zpp_inner.a * this.zpp_inner.a + m.zpp_inner.b * this.zpp_inner.c,m.zpp_inner.a * this.zpp_inner.b + m.zpp_inner.b * this.zpp_inner.d,m.zpp_inner.c * this.zpp_inner.a + m.zpp_inner.d * this.zpp_inner.c,m.zpp_inner.c * this.zpp_inner.b + m.zpp_inner.d * this.zpp_inner.d,m.zpp_inner.a * this.zpp_inner.tx + m.zpp_inner.b * this.zpp_inner.ty + m.zpp_inner.tx,m.zpp_inner.c * this.zpp_inner.tx + m.zpp_inner.d * this.zpp_inner.ty + m.zpp_inner.ty);
	}
	,transform: function(point,noTranslation,weak) {
		if(weak == null) weak = false;
		if(noTranslation == null) noTranslation = false;
		var ret;
		if(noTranslation) ret = nape_geom_Vec2.get((function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.a + (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b,(function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c + (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.d,weak); else ret = nape_geom_Vec2.get((function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.a + (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b + this.zpp_inner.tx,(function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c + (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.d + this.zpp_inner.ty,weak);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,inverseTransform: function(point,noTranslation,weak) {
		if(weak == null) weak = false;
		if(noTranslation == null) noTranslation = false;
		var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
		var ret;
		if(noTranslation) ret = nape_geom_Vec2.get(((function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.d - (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b) * idet,((function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.a - (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c) * idet,weak); else {
			var dx;
			dx = (function($this) {
				var $r;
				point.zpp_inner.validate();
				$r = point.zpp_inner.x;
				return $r;
			}(this)) - this.zpp_inner.tx;
			var dy;
			dy = (function($this) {
				var $r;
				point.zpp_inner.validate();
				$r = point.zpp_inner.y;
				return $r;
			}(this)) - this.zpp_inner.ty;
			ret = nape_geom_Vec2.get((dx * this.zpp_inner.d - dy * this.zpp_inner.b) * idet,(dy * this.zpp_inner.a - dx * this.zpp_inner.c) * idet,weak);
		}
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,toString: function() {
		return "{ a: " + this.zpp_inner.a + " b: " + this.zpp_inner.b + " c: " + this.zpp_inner.c + " d: " + this.zpp_inner.d + " tx: " + this.zpp_inner.tx + " ty: " + this.zpp_inner.ty + " }";
	}
	,equiorthogonal: function() {
		if(this.singular()) return false; else {
			var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			if(x * x < nape_Config.epsilon) {
				var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - this.zpp_inner.c * this.zpp_inner.c - this.zpp_inner.d * this.zpp_inner.d;
				return y * y < nape_Config.epsilon;
			} else return false;
		}
	}
	,orthogonal: function() {
		var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
		if(x * x < nape_Config.epsilon) {
			var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - 1;
			var z = this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d - 1;
			return y * y < nape_Config.epsilon && z * z < nape_Config.epsilon;
		} else return false;
	}
	,equiorthogonalise: function() {
		if(!this.equiorthogonal()) {
			var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
			var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
			var k = (k1 + k2) / 2;
			k1 = k / k1;
			k2 = k / k2;
			var _g = this;
			_g.zpp_inner.a = _g.zpp_inner.a * k1;
			_g.zpp_inner.invalidate();
			_g.zpp_inner.a;
			var _g1 = this;
			_g1.zpp_inner.c = _g1.zpp_inner.c * k1;
			_g1.zpp_inner.invalidate();
			_g1.zpp_inner.c;
			var _g2 = this;
			_g2.zpp_inner.b = _g2.zpp_inner.b * k2;
			_g2.zpp_inner.invalidate();
			_g2.zpp_inner.b;
			var _g3 = this;
			_g3.zpp_inner.d = _g3.zpp_inner.d * k2;
			_g3.zpp_inner.invalidate();
			_g3.zpp_inner.d;
			var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
			if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
			var sin = Math.sin(ang);
			var cos = Math.cos(ang);
			var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
			var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
			this.zpp_inner.c = this.zpp_inner.c * cos + this.zpp_inner.a * sin;
			this.zpp_inner.invalidate();
			this.zpp_inner.c;
			this.zpp_inner.a = a2;
			this.zpp_inner.invalidate();
			this.zpp_inner.a;
			this.zpp_inner.d = this.zpp_inner.d * cos - this.zpp_inner.b * sin;
			this.zpp_inner.invalidate();
			this.zpp_inner.d;
			this.zpp_inner.b = b2;
			this.zpp_inner.invalidate();
			this.zpp_inner.b;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,orthogonalise: function() {
		if(!this.orthogonal()) {
			var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
			var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
			var k = 1;
			k1 = k / k1;
			k2 = k / k2;
			var _g = this;
			_g.zpp_inner.a = _g.zpp_inner.a * k1;
			_g.zpp_inner.invalidate();
			_g.zpp_inner.a;
			var _g1 = this;
			_g1.zpp_inner.c = _g1.zpp_inner.c * k1;
			_g1.zpp_inner.invalidate();
			_g1.zpp_inner.c;
			var _g2 = this;
			_g2.zpp_inner.b = _g2.zpp_inner.b * k2;
			_g2.zpp_inner.invalidate();
			_g2.zpp_inner.b;
			var _g3 = this;
			_g3.zpp_inner.d = _g3.zpp_inner.d * k2;
			_g3.zpp_inner.invalidate();
			_g3.zpp_inner.d;
			var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
			if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
			var sin = Math.sin(ang);
			var cos = Math.cos(ang);
			var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
			var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
			this.zpp_inner.c = this.zpp_inner.c * cos + this.zpp_inner.a * sin;
			this.zpp_inner.invalidate();
			this.zpp_inner.c;
			this.zpp_inner.a = a2;
			this.zpp_inner.invalidate();
			this.zpp_inner.a;
			this.zpp_inner.d = this.zpp_inner.d * cos - this.zpp_inner.b * sin;
			this.zpp_inner.invalidate();
			this.zpp_inner.d;
			this.zpp_inner.b = b2;
			this.zpp_inner.invalidate();
			this.zpp_inner.b;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,__class__: nape_geom_Mat23
	,__properties__: {get_determinant:"get_determinant",set_ty:"set_ty",get_ty:"get_ty",set_tx:"set_tx",get_tx:"get_tx",set_d:"set_d",get_d:"get_d",set_c:"set_c",get_c:"get_c",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
};
var nape_geom_MatMN = function(rows,cols) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$MatMN(rows,cols);
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.MatMN"] = nape_geom_MatMN;
nape_geom_MatMN.__name__ = ["nape","geom","MatMN"];
nape_geom_MatMN.prototype = {
	zpp_inner: null
	,get_rows: function() {
		return this.zpp_inner.m;
	}
	,get_cols: function() {
		return this.zpp_inner.n;
	}
	,x: function(row,col) {
		return this.zpp_inner.x[row * this.zpp_inner.n + col];
	}
	,setx: function(row,col,x) {
		return this.zpp_inner.x[row * this.zpp_inner.n + col] = x;
	}
	,toString: function() {
		var ret = "{ ";
		var fst = true;
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			if(!fst) ret += "; ";
			fst = false;
			var _g3 = 0;
			var _g2 = this.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				ret += this.zpp_inner.x[i * this.zpp_inner.n + j] + " ";
			}
		}
		ret += "}";
		return ret;
	}
	,transpose: function() {
		var ret = new nape_geom_MatMN(this.zpp_inner.n,this.zpp_inner.m);
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = this.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				ret.zpp_inner.x[j * ret.zpp_inner.n + i] = this.zpp_inner.x[i * this.zpp_inner.n + j];
			}
		}
		return ret;
	}
	,mul: function(matrix) {
		var y = matrix;
		var ret = new nape_geom_MatMN(this.zpp_inner.m,y.zpp_inner.n);
		var _g1 = 0;
		var _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = y.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				var v = 0.0;
				var _g5 = 0;
				var _g4 = this.zpp_inner.n;
				while(_g5 < _g4) {
					var k = _g5++;
					v += this.zpp_inner.x[i * this.zpp_inner.n + k] * y.zpp_inner.x[k * y.zpp_inner.n + j];
				}
				ret.zpp_inner.x[i * ret.zpp_inner.n + j] = v;
			}
		}
		return ret;
	}
	,__class__: nape_geom_MatMN
	,__properties__: {get_cols:"get_cols",get_rows:"get_rows"}
};
var nape_geom_Ray = function(origin,direction) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$Ray();
	this.zpp_inner.origin.set(origin);
	this.zpp_inner.origin;
	this.zpp_inner.direction.set(direction);
	this.zpp_inner.zip_dir = true;
	this.zpp_inner.direction;
	this.zpp_inner.maxdist = Infinity;
};
$hxClasses["nape.geom.Ray"] = nape_geom_Ray;
nape_geom_Ray.__name__ = ["nape","geom","Ray"];
nape_geom_Ray.fromSegment = function(start,end) {
	var dir = end.sub(start,true);
	var ret = new nape_geom_Ray(start,dir);
	ret.set_maxDistance(Math.sqrt(zpp_$nape_geom_ZPP_$VecMath.vec_dsq((function($this) {
		var $r;
		start.zpp_inner.validate();
		$r = start.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		start.zpp_inner.validate();
		$r = start.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		end.zpp_inner.validate();
		$r = end.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		end.zpp_inner.validate();
		$r = end.zpp_inner.y;
		return $r;
	}(this)))));
	if(start.zpp_inner.weak) {
		start.dispose();
		true;
	} else false;
	if(end.zpp_inner.weak) {
		end.dispose();
		true;
	} else false;
	return ret;
};
nape_geom_Ray.prototype = {
	zpp_inner: null
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_origin: function() {
		return this.zpp_inner.origin;
	}
	,set_origin: function(origin) {
		this.zpp_inner.origin.set(origin);
		return this.zpp_inner.origin;
	}
	,get_direction: function() {
		return this.zpp_inner.direction;
	}
	,set_direction: function(direction) {
		this.zpp_inner.direction.set(direction);
		this.zpp_inner.zip_dir = true;
		return this.zpp_inner.direction;
	}
	,get_maxDistance: function() {
		return this.zpp_inner.maxdist;
	}
	,set_maxDistance: function(maxDistance) {
		this.zpp_inner.maxdist = maxDistance;
		return this.zpp_inner.maxdist;
	}
	,aabb: function() {
		return this.zpp_inner.rayAABB().wrapper();
	}
	,at: function(distance,weak) {
		if(weak == null) weak = false;
		this.zpp_inner.validate_dir();
		return nape_geom_Vec2.get(this.zpp_inner.origin.get_x() + distance * this.zpp_inner.dirx,this.zpp_inner.origin.get_y() + distance * this.zpp_inner.diry,weak);
	}
	,copy: function() {
		var ret = new nape_geom_Ray(this.zpp_inner.origin,this.zpp_inner.direction);
		ret.zpp_inner.maxdist = this.zpp_inner.maxdist;
		ret.zpp_inner.maxdist;
		return ret;
	}
	,__class__: nape_geom_Ray
	,__properties__: {set_maxDistance:"set_maxDistance",get_maxDistance:"get_maxDistance",set_direction:"set_direction",get_direction:"get_direction",set_origin:"set_origin",get_origin:"get_origin",get_userData:"get_userData"}
};
var nape_geom_RayResult = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.RayResult"] = nape_geom_RayResult;
nape_geom_RayResult.__name__ = ["nape","geom","RayResult"];
nape_geom_RayResult.prototype = {
	zpp_inner: null
	,get_normal: function() {
		return this.zpp_inner.normal;
	}
	,get_distance: function() {
		return this.zpp_inner.toiDistance;
	}
	,get_inner: function() {
		return this.zpp_inner.inner;
	}
	,get_shape: function() {
		return this.zpp_inner.shape;
	}
	,dispose: function() {
		this.zpp_inner.free();
	}
	,toString: function() {
		return "{ shape: " + Std.string(this.zpp_inner.shape) + " distance: " + this.zpp_inner.toiDistance + " ?inner: " + Std.string(this.zpp_inner.inner) + " }";
	}
	,__class__: nape_geom_RayResult
	,__properties__: {get_shape:"get_shape",get_inner:"get_inner",get_distance:"get_distance",get_normal:"get_normal"}
};
var nape_geom_RayResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.RayResultIterator"] = nape_geom_RayResultIterator;
nape_geom_RayResultIterator.__name__ = ["nape","geom","RayResultIterator"];
nape_geom_RayResultIterator.get = function(list) {
	var ret;
	if(nape_geom_RayResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$RayResultList.internal = true;
		var ret1 = new nape_geom_RayResultIterator();
		zpp_$nape_util_ZPP_$RayResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_RayResultIterator.zpp_pool;
		nape_geom_RayResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_RayResultIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_geom_RayResultIterator.zpp_pool;
			nape_geom_RayResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_RayResultIterator
};
var nape_geom_RayResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$RayResultList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.RayResultList"] = nape_geom_RayResultList;
nape_geom_RayResultList.__name__ = ["nape","geom","RayResultList"];
nape_geom_RayResultList.fromArray = function(array) {
	var ret = new nape_geom_RayResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_geom_RayResultList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			} else this.zpp_inner.inner.add(obj);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret;
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_geom_RayResultIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_geom_RayResultList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_geom_RayResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_geom_RayResultIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_geom_RayResultIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape_geom_RayResultIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_geom_RayResultIterator.zpp_pool;
			nape_geom_RayResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_geom_RayResultList
	,__properties__: {get_length:"get_length"}
};
var nape_geom_Vec2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_pool = null;
	this.zpp_inner = null;
	this.zpp_inner = zpp_$nape_geom_ZPP_$Vec2.get(x,y,null);
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.Vec2"] = nape_geom_Vec2;
nape_geom_Vec2.__name__ = ["nape","geom","Vec2"];
nape_geom_Vec2.weak = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	return nape_geom_Vec2.get(x,y,true);
};
nape_geom_Vec2.get = function(x,y,weak) {
	if(weak == null) weak = false;
	if(y == null) y = 0;
	if(x == null) x = 0;
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) ret = new nape_geom_Vec2(); else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
	}
	if(ret.zpp_inner == null) {
		ret.zpp_inner = zpp_$nape_geom_ZPP_$Vec2.get(x,y,null);
		ret.zpp_inner.outer = ret;
	} else {
		if(!((function($this) {
			var $r;
			ret.zpp_inner.validate();
			$r = ret.zpp_inner.x;
			return $r;
		}(this)) == x && (function($this) {
			var $r;
			ret.zpp_inner.validate();
			$r = ret.zpp_inner.y;
			return $r;
		}(this)) == y)) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			ret.zpp_inner.invalidate();
		}
		ret;
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
nape_geom_Vec2.fromPoint = function(point,weak) {
	if(weak == null) weak = false;
	return nape_geom_Vec2.get(point.x,point.y,weak);
};
nape_geom_Vec2.fromPolar = function(length,angle,weak) {
	if(weak == null) weak = false;
	return nape_geom_Vec2.get(length * Math.cos(angle),length * Math.sin(angle),weak);
};
nape_geom_Vec2.dsq = function(a,b) {
	var ret = zpp_$nape_geom_ZPP_$VecMath.vec_dsq((function($this) {
		var $r;
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		b.zpp_inner.validate();
		$r = b.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		b.zpp_inner.validate();
		$r = b.zpp_inner.y;
		return $r;
	}(this)));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	if(b.zpp_inner.weak) {
		b.dispose();
		true;
	} else false;
	return ret;
};
nape_geom_Vec2.distance = function(a,b) {
	var ret = Math.sqrt(zpp_$nape_geom_ZPP_$VecMath.vec_dsq((function($this) {
		var $r;
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		b.zpp_inner.validate();
		$r = b.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		b.zpp_inner.validate();
		$r = b.zpp_inner.y;
		return $r;
	}(this))));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	if(b.zpp_inner.weak) {
		b.dispose();
		true;
	} else false;
	return ret;
};
nape_geom_Vec2.prototype = {
	zpp_inner: null
	,zpp_pool: null
	,dispose: function() {
		var inner = this.zpp_inner;
		this.zpp_inner.outer = null;
		this.zpp_inner = null;
		var o = this;
		o.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		var o1 = inner;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	}
	,copy: function(weak) {
		if(weak == null) weak = false;
		return nape_geom_Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),weak);
	}
	,toPoint: function(output) {
		if(output == null) output = new openfl_geom_Point();
		this.zpp_inner.validate();
		output.x = this.zpp_inner.x;
		this.zpp_inner.validate();
		output.y = this.zpp_inner.y;
		return output;
	}
	,get_x: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,set_x: function(x) {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) != x) {
			this.zpp_inner.x = x;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,get_y: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,set_y: function(y) {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) != y) {
			this.zpp_inner.y = y;
			this.zpp_inner.invalidate();
		}
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,get_length: function() {
		return Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
	}
	,set_length: function(length) {
		var t = length / Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t);
		var _g1 = this;
		_g1.set_y((function($this) {
			var $r;
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * t);
		this.zpp_inner.invalidate();
		return Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
	}
	,lsq: function() {
		return (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
	}
	,set: function(vector) {
		var ret = this.setxy((function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,setxy: function(x,y) {
		if(!((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == x && (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) == y)) {
			this.zpp_inner.x = x;
			this.zpp_inner.y = y;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,get_angle: function() {
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) && (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == 0) return 0.0; else return Math.atan2((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)));
	}
	,set_angle: function(angle) {
		var l = Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		this.setxy(l * Math.cos(angle),l * Math.sin(angle));
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) && (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == 0) return 0.0; else return Math.atan2((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)));
	}
	,rotate: function(angle) {
		if(angle % (Math.PI * 2) != 0) {
			var ax = Math.sin(angle);
			var ay = Math.cos(angle);
			var t = ay * this.zpp_inner.x - ax * this.zpp_inner.y;
			this.zpp_inner.y = this.zpp_inner.x * ax + this.zpp_inner.y * ay;
			this.zpp_inner.x = t;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,reflect: function(vec,weak) {
		if(weak == null) weak = false;
		var normal = nape_geom_Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),true).normalise();
		var ret = vec.sub(normal.muleq(2 * normal.dot(vec)),weak);
		if(vec.zpp_inner.weak) {
			vec.dispose();
			true;
		} else false;
		return ret;
	}
	,normalise: function() {
		var d;
		d = (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t);
		var _g1 = this;
		_g1.set_y((function($this) {
			var $r;
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * t);
		this.zpp_inner.invalidate();
		return this;
	}
	,unit: function(weak) {
		if(weak == null) weak = false;
		var scale = 1 / zpp_$nape_util_ZPP_$Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		return nape_geom_Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scale,(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scale,weak);
	}
	,add: function(vector,weak) {
		if(weak == null) weak = false;
		var ret = nape_geom_Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,addMul: function(vector,scalar,weak) {
		if(weak == null) weak = false;
		var ret = nape_geom_Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * scalar,weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,sub: function(vector,weak) {
		if(weak == null) weak = false;
		var ret = nape_geom_Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) - (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,mul: function(scalar,weak) {
		if(weak == null) weak = false;
		return nape_geom_Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scalar,weak);
	}
	,addeq: function(vector) {
		this.setxy((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return this;
	}
	,subeq: function(vector) {
		this.setxy((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) - (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return this;
	}
	,muleq: function(scalar) {
		return this.setxy((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scalar);
	}
	,dot: function(vector) {
		var ret;
		ret = (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,cross: function(vector) {
		var ret;
		ret = (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,perp: function(weak) {
		if(weak == null) weak = false;
		return nape_geom_Vec2.get(-(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),weak);
	}
	,toString: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.toString();
	}
	,__class__: nape_geom_Vec2
	,__properties__: {set_angle:"set_angle",get_angle:"get_angle",set_length:"set_length",get_length:"get_length",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var nape_geom_Vec2Iterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.Vec2Iterator"] = nape_geom_Vec2Iterator;
nape_geom_Vec2Iterator.__name__ = ["nape","geom","Vec2Iterator"];
nape_geom_Vec2Iterator.get = function(list) {
	var ret;
	if(nape_geom_Vec2Iterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$Vec2List.internal = true;
		var ret1 = new nape_geom_Vec2Iterator();
		zpp_$nape_util_ZPP_$Vec2List.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_Vec2Iterator.zpp_pool;
		nape_geom_Vec2Iterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_Vec2Iterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
			nape_geom_Vec2Iterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_Vec2Iterator
};
var nape_geom_Vec2List = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$Vec2List();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.Vec2List"] = nape_geom_Vec2List;
nape_geom_Vec2List.__name__ = ["nape","geom","Vec2List"];
nape_geom_Vec2List.fromArray = function(array) {
	var ret = new nape_geom_Vec2List();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_geom_Vec2List.prototype = {
	zpp_inner: null
	,get_length: function() {
		return this.zpp_gl();
	}
	,zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,has: function(obj) {
		this.zpp_vm();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_vm();
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.empty()) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_geom_Vec2Iterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_geom_Vec2List();
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?nape_geom_Vec2.get((function($this) {
				var $r;
				i.zpp_inner.validate();
				$r = i.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				i.zpp_inner.validate();
				$r = i.zpp_inner.y;
				return $r;
			}(this)),false):i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g = xs.iterator();
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) this.add(x);
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it = this.iterator();
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
			nape_geom_Vec2Iterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.zpp_gl()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_geom_Vec2List
	,__properties__: {get_length:"get_length"}
};
var nape_geom_Vec3 = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_pool = null;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$Vec3();
	this.zpp_inner.outer = this;
	this.zpp_inner.x = x;
	this.zpp_inner.validate();
	this.zpp_inner.x;
	this.zpp_inner.y = y;
	this.zpp_inner.validate();
	this.zpp_inner.y;
	this.zpp_inner.z = z;
	this.zpp_inner.validate();
	this.zpp_inner.z;
};
$hxClasses["nape.geom.Vec3"] = nape_geom_Vec3;
nape_geom_Vec3.__name__ = ["nape","geom","Vec3"];
nape_geom_Vec3.get = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec3 == null) ret = new nape_geom_Vec3(); else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec3;
		zpp_$nape_util_ZPP_$PubPool.poolVec3 = ret.zpp_pool;
		ret.zpp_pool = null;
	}
	ret.setxyz(x,y,z);
	ret.zpp_inner.immutable = false;
	ret.zpp_inner._validate = null;
	return ret;
};
nape_geom_Vec3.prototype = {
	zpp_inner: null
	,zpp_pool: null
	,get_x: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,set_x: function(x) {
		this.zpp_inner.x = x;
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,get_y: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,set_y: function(y) {
		this.zpp_inner.y = y;
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,get_z: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.z;
	}
	,set_z: function(z) {
		this.zpp_inner.z = z;
		this.zpp_inner.validate();
		return this.zpp_inner.z;
	}
	,dispose: function() {
		var o = this;
		o.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec3;
		zpp_$nape_util_ZPP_$PubPool.poolVec3 = o;
	}
	,get_length: function() {
		return Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)));
	}
	,set_length: function(length) {
		var t = length / Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)));
		var t1 = t;
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t1);
		var _g1 = this;
		_g1.set_y((function($this) {
			var $r;
			_g1.zpp_inner.validate();
			$r = _g1.zpp_inner.y;
			return $r;
		}(this)) * t1);
		var _g2 = this;
		_g2.set_z((function($this) {
			var $r;
			_g2.zpp_inner.validate();
			$r = _g2.zpp_inner.z;
			return $r;
		}(this)) * t);
		return Math.sqrt((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)));
	}
	,lsq: function() {
		return (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this));
	}
	,set: function(vector) {
		return this.setxyz((function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.z;
			return $r;
		}(this)));
	}
	,setxyz: function(x,y,z) {
		this.zpp_inner.x = x;
		this.zpp_inner.validate();
		this.zpp_inner.x;
		this.zpp_inner.y = y;
		this.zpp_inner.validate();
		this.zpp_inner.y;
		this.zpp_inner.z = z;
		this.zpp_inner.validate();
		this.zpp_inner.z;
		return this;
	}
	,xy: function(weak) {
		if(weak == null) weak = false;
		return nape_geom_Vec2.get((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),weak);
	}
	,toString: function() {
		return "{ x: " + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + " y: " + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + " z: " + (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) + " }";
	}
	,__class__: nape_geom_Vec3
	,__properties__: {set_length:"set_length",get_length:"get_length",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var nape_geom_Winding = function() {
};
$hxClasses["nape.geom.Winding"] = nape_geom_Winding;
nape_geom_Winding.__name__ = ["nape","geom","Winding"];
nape_geom_Winding.__properties__ = {get_ANTICLOCKWISE:"get_ANTICLOCKWISE",get_CLOCKWISE:"get_CLOCKWISE",get_UNDEFINED:"get_UNDEFINED"}
nape_geom_Winding.get_UNDEFINED = function() {
	if(zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = new nape_geom_Winding();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED;
};
nape_geom_Winding.get_CLOCKWISE = function() {
	if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE;
};
nape_geom_Winding.get_ANTICLOCKWISE = function() {
	if(zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE = new nape_geom_Winding();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE;
};
nape_geom_Winding.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED;
			return $r;
		}(this))) return "UNDEFINED"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE;
			return $r;
		}(this))) return "CLOCKWISE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE;
			return $r;
		}(this))) return "ANTICLOCKWISE"; else return "";
	}
	,__class__: nape_geom_Winding
};
var nape_phys_Interactor = function() {
	this.zpp_inner_i = null;
};
$hxClasses["nape.phys.Interactor"] = nape_phys_Interactor;
nape_phys_Interactor.__name__ = ["nape","phys","Interactor"];
nape_phys_Interactor.prototype = {
	zpp_inner_i: null
	,get_id: function() {
		return this.zpp_inner_i.id;
	}
	,get_userData: function() {
		if(this.zpp_inner_i.userData == null) this.zpp_inner_i.userData = { };
		return this.zpp_inner_i.userData;
	}
	,isShape: function() {
		return this.zpp_inner_i.ishape != null;
	}
	,isBody: function() {
		return this.zpp_inner_i.ibody != null;
	}
	,isCompound: function() {
		return this.zpp_inner_i.icompound != null;
	}
	,get_castShape: function() {
		if(this.zpp_inner_i.ishape != null) return this.zpp_inner_i.ishape.outer; else return null;
	}
	,get_castBody: function() {
		if(this.zpp_inner_i.ibody != null) return this.zpp_inner_i.ibody.outer; else return null;
	}
	,get_castCompound: function() {
		if(this.zpp_inner_i.icompound != null) return this.zpp_inner_i.icompound.outer; else return null;
	}
	,get_group: function() {
		if(this.zpp_inner_i.group == null) return null; else return this.zpp_inner_i.group.outer;
	}
	,set_group: function(group) {
		this.zpp_inner_i.immutable_midstep("Interactor::group");
		this.zpp_inner_i.setGroup(group == null?null:group.zpp_inner);
		if(this.zpp_inner_i.group == null) return null; else return this.zpp_inner_i.group.outer;
	}
	,get_cbTypes: function() {
		if(this.zpp_inner_i.wrap_cbTypes == null) this.zpp_inner_i.setupcbTypes();
		return this.zpp_inner_i.wrap_cbTypes;
	}
	,toString: function() {
		return "";
	}
	,__class__: nape_phys_Interactor
	,__properties__: {get_cbTypes:"get_cbTypes",set_group:"set_group",get_group:"get_group",get_castCompound:"get_castCompound",get_castBody:"get_castBody",get_castShape:"get_castShape",get_userData:"get_userData",get_id:"get_id"}
};
var nape_phys_Body = function(type,position) {
	this.debugDraw = true;
	this.zpp_inner = null;
	nape_phys_Interactor.call(this);
	this.zpp_inner = new zpp_$nape_phys_ZPP_$Body();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	if(position != null) {
		position.zpp_inner.validate();
		this.zpp_inner.posx = position.zpp_inner.x;
		position.zpp_inner.validate();
		this.zpp_inner.posy = position.zpp_inner.y;
	} else {
		this.zpp_inner.posx = 0;
		this.zpp_inner.posy = 0;
	}
	this.set_type(type == null?(function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
		return $r;
	}(this)):type);
	if(position != null) {
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY.zpp_inner);
};
$hxClasses["nape.phys.Body"] = nape_phys_Body;
nape_phys_Body.__name__ = ["nape","phys","Body"];
nape_phys_Body.__super__ = nape_phys_Interactor;
nape_phys_Body.prototype = $extend(nape_phys_Interactor.prototype,{
	zpp_inner: null
	,debugDraw: null
	,get_type: function() {
		return zpp_$nape_phys_ZPP_$Body.types[this.zpp_inner.type];
	}
	,set_type: function(type) {
		this.zpp_inner.immutable_midstep("Body::type");
		if(zpp_$nape_phys_ZPP_$Body.types[this.zpp_inner.type] != type) {
			var ntype;
			if(type == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
				return $r;
			}(this))) ntype = zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC; else if(type == (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC;
				return $r;
			}(this))) ntype = zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC; else ntype = zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC;
			if(ntype == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && this.zpp_inner.space != null) {
				this.zpp_inner.velx = 0;
				this.zpp_inner.vely = 0;
				this.zpp_inner.angvel = 0;
			}
			this.zpp_inner.invalidate_type();
			if(this.zpp_inner.space != null) this.zpp_inner.space.transmitType(this.zpp_inner,ntype); else this.zpp_inner.type = ntype;
		}
		return zpp_$nape_phys_ZPP_$Body.types[this.zpp_inner.type];
	}
	,get_isBullet: function() {
		return this.zpp_inner.bulletEnabled;
	}
	,set_isBullet: function(isBullet) {
		this.zpp_inner.bulletEnabled = isBullet;
		return this.zpp_inner.bulletEnabled;
	}
	,get_disableCCD: function() {
		return this.zpp_inner.disableCCD;
	}
	,set_disableCCD: function(disableCCD) {
		this.zpp_inner.disableCCD = disableCCD;
		return this.zpp_inner.disableCCD;
	}
	,integrate: function(deltaTime) {
		this.zpp_inner.immutable_midstep("Body::space");
		if(deltaTime == 0) return this;
		var cur = this.zpp_inner;
		cur.sweepTime = 0;
		cur.sweep_angvel = cur.angvel;
		cur.sweepIntegrate(deltaTime);
		cur.invalidate_pos();
		cur.invalidate_rot();
		cur.sweepTime = 0;
		return this;
	}
	,isStatic: function() {
		return this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC;
	}
	,isDynamic: function() {
		return this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC;
	}
	,isKinematic: function() {
		return this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC;
	}
	,get_shapes: function() {
		return this.zpp_inner.wrap_shapes;
	}
	,get_compound: function() {
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,set_compound: function(compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(this);
			if(compound != null) compound.zpp_inner.wrap_bodies.add(this);
		}
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		this.zpp_inner.immutable_midstep("Body::space");
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner.component.woken = false;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(this);
			if(space != null) space.zpp_inner.wrap_bodies.add(this);
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,get_arbiters: function() {
		if(this.zpp_inner.wrap_arbiters == null) this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get(this.zpp_inner.arbiters,true);
		return this.zpp_inner.wrap_arbiters;
	}
	,get_isSleeping: function() {
		return this.zpp_inner.component.sleeping;
	}
	,get_constraints: function() {
		if(this.zpp_inner.wrap_constraints == null) this.zpp_inner.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.zpp_inner.constraints,true);
		return this.zpp_inner.wrap_constraints;
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,get_position: function() {
		if(this.zpp_inner.wrap_pos == null) this.zpp_inner.setupPosition();
		return this.zpp_inner.wrap_pos;
	}
	,set_position: function(position) {
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).set(position);
		if(this.zpp_inner.wrap_pos == null) this.zpp_inner.setupPosition();
		return this.zpp_inner.wrap_pos;
	}
	,get_velocity: function() {
		if(this.zpp_inner.wrap_vel == null) this.zpp_inner.setupVelocity();
		return this.zpp_inner.wrap_vel;
	}
	,set_velocity: function(velocity) {
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
			$r = $this.zpp_inner.wrap_vel;
			return $r;
		}(this))).set(velocity);
		if(this.zpp_inner.wrap_vel == null) this.zpp_inner.setupVelocity();
		return this.zpp_inner.wrap_vel;
	}
	,setVelocityFromTarget: function(targetPosition,targetRotation,deltaTime) {
		var idt = 1 / deltaTime;
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
			$r = $this.zpp_inner.wrap_vel;
			return $r;
		}(this))).set(targetPosition.sub((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this)),true).muleq(idt));
		this.set_angularVel((targetRotation - this.zpp_inner.rot) * idt);
		if(targetPosition.zpp_inner.weak) {
			targetPosition.dispose();
			true;
		} else false;
		return this;
	}
	,get_kinematicVel: function() {
		if(this.zpp_inner.wrap_kinvel == null) this.zpp_inner.setupkinvel();
		return this.zpp_inner.wrap_kinvel;
	}
	,set_kinematicVel: function(kinematicVel) {
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_kinvel == null) $this.zpp_inner.setupkinvel();
			$r = $this.zpp_inner.wrap_kinvel;
			return $r;
		}(this))).set(kinematicVel);
		if(this.zpp_inner.wrap_kinvel == null) this.zpp_inner.setupkinvel();
		return this.zpp_inner.wrap_kinvel;
	}
	,get_surfaceVel: function() {
		if(this.zpp_inner.wrap_svel == null) this.zpp_inner.setupsvel();
		return this.zpp_inner.wrap_svel;
	}
	,set_surfaceVel: function(surfaceVel) {
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_svel == null) $this.zpp_inner.setupsvel();
			$r = $this.zpp_inner.wrap_svel;
			return $r;
		}(this))).set(surfaceVel);
		if(this.zpp_inner.wrap_svel == null) this.zpp_inner.setupsvel();
		return this.zpp_inner.wrap_svel;
	}
	,get_force: function() {
		if(this.zpp_inner.wrap_force == null) this.zpp_inner.setupForce();
		return this.zpp_inner.wrap_force;
	}
	,set_force: function(force) {
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_force == null) $this.zpp_inner.setupForce();
			$r = $this.zpp_inner.wrap_force;
			return $r;
		}(this))).set(force);
		if(this.zpp_inner.wrap_force == null) this.zpp_inner.setupForce();
		return this.zpp_inner.wrap_force;
	}
	,get_constraintVelocity: function() {
		if(this.zpp_inner.wrapcvel == null) this.zpp_inner.setup_cvel();
		return this.zpp_inner.wrapcvel;
	}
	,get_rotation: function() {
		return this.zpp_inner.rot;
	}
	,set_rotation: function(rotation) {
		this.zpp_inner.immutable_midstep("Body::rotation");
		if(this.zpp_inner.rot != rotation) {
			this.zpp_inner.rot = rotation;
			this.zpp_inner.invalidate_rot();
			this.zpp_inner.wake();
		}
		return this.zpp_inner.rot;
	}
	,get_angularVel: function() {
		return this.zpp_inner.angvel;
	}
	,set_angularVel: function(angularVel) {
		if(this.zpp_inner.angvel != angularVel) {
			this.zpp_inner.angvel = angularVel;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.angvel;
	}
	,get_kinAngVel: function() {
		return this.zpp_inner.kinangvel;
	}
	,set_kinAngVel: function(kinAngVel) {
		if(this.zpp_inner.kinangvel != kinAngVel) {
			this.zpp_inner.kinangvel = kinAngVel;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.kinangvel;
	}
	,get_torque: function() {
		return this.zpp_inner.torque;
	}
	,set_torque: function(torque) {
		if(this.zpp_inner.torque != torque) {
			this.zpp_inner.torque = torque;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.torque;
	}
	,get_bounds: function() {
		return this.zpp_inner.aabb.wrapper();
	}
	,get_allowMovement: function() {
		return !this.zpp_inner.nomove;
	}
	,set_allowMovement: function(allowMovement) {
		this.zpp_inner.immutable_midstep("Body::" + (allowMovement == null?"null":"" + allowMovement));
		if(!this.zpp_inner.nomove != allowMovement) {
			this.zpp_inner.nomove = !allowMovement;
			this.zpp_inner.invalidate_mass();
		}
		return !this.zpp_inner.nomove;
	}
	,get_allowRotation: function() {
		return !this.zpp_inner.norotate;
	}
	,set_allowRotation: function(allowRotation) {
		this.zpp_inner.immutable_midstep("Body::" + (allowRotation == null?"null":"" + allowRotation));
		if(!this.zpp_inner.norotate != allowRotation) {
			this.zpp_inner.norotate = !allowRotation;
			this.zpp_inner.invalidate_inertia();
		}
		return !this.zpp_inner.norotate;
	}
	,get_massMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,set_massMode: function(massMode) {
		this.zpp_inner.immutable_midstep("Body::massMode");
		if(massMode == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT;
			return $r;
		}(this))) this.zpp_inner.massMode = zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT; else this.zpp_inner.massMode = zpp_$nape_util_ZPP_$Flags.id_MassMode_FIXED;
		this.zpp_inner.invalidate_mass();
		return [(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,get_constraintMass: function() {
		if(!this.zpp_inner.world) this.zpp_inner.validate_mass();
		return this.zpp_inner.smass;
	}
	,get_mass: function() {
		this.zpp_inner.validate_mass();
		return this.zpp_inner.cmass;
	}
	,set_mass: function(mass) {
		this.zpp_inner.immutable_midstep("Body::mass");
		this.zpp_inner.massMode = zpp_$nape_util_ZPP_$Flags.id_MassMode_FIXED;
		this.zpp_inner.cmass = mass;
		this.zpp_inner.invalidate_mass();
		this.zpp_inner.validate_mass();
		return this.zpp_inner.cmass;
	}
	,get_gravMassMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,set_gravMassMode: function(gravMassMode) {
		this.zpp_inner.immutable_midstep("Body::gravMassMode");
		if(gravMassMode == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED;
			return $r;
		}(this))) this.zpp_inner.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED; else if(gravMassMode == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT;
			return $r;
		}(this))) this.zpp_inner.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_DEFAULT; else this.zpp_inner.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_FIXED;
		this.zpp_inner.invalidate_gravMass();
		return [(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,get_gravMass: function() {
		this.zpp_inner.validate_gravMass();
		return this.zpp_inner.gravMass;
	}
	,set_gravMass: function(gravMass) {
		this.zpp_inner.immutable_midstep("Body::gravMass");
		this.zpp_inner.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_FIXED;
		this.zpp_inner.gravMass = gravMass;
		this.zpp_inner.invalidate_gravMass();
		this.zpp_inner.validate_gravMass();
		return this.zpp_inner.gravMass;
	}
	,get_gravMassScale: function() {
		this.zpp_inner.validate_gravMassScale();
		return this.zpp_inner.gravMassScale;
	}
	,set_gravMassScale: function(gravMassScale) {
		this.zpp_inner.immutable_midstep("Body::gravMassScale");
		this.zpp_inner.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED;
		this.zpp_inner.gravMassScale = gravMassScale;
		this.zpp_inner.invalidate_gravMassScale();
		this.zpp_inner.validate_gravMassScale();
		return this.zpp_inner.gravMassScale;
	}
	,get_inertiaMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.inertiaMode];
	}
	,set_inertiaMode: function(inertiaMode) {
		this.zpp_inner.immutable_midstep("Body::inertiaMode");
		if(inertiaMode == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED;
			return $r;
		}(this))) this.zpp_inner.inertiaMode = zpp_$nape_util_ZPP_$Flags.id_InertiaMode_FIXED; else this.zpp_inner.inertiaMode = zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT;
		this.zpp_inner.invalidate_inertia();
		return [(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.inertiaMode];
	}
	,get_constraintInertia: function() {
		if(!this.zpp_inner.world) this.zpp_inner.validate_inertia();
		return this.zpp_inner.sinertia;
	}
	,get_inertia: function() {
		this.zpp_inner.validate_inertia();
		return this.zpp_inner.cinertia;
	}
	,set_inertia: function(inertia) {
		this.zpp_inner.immutable_midstep("Body::inertia");
		this.zpp_inner.inertiaMode = zpp_$nape_util_ZPP_$Flags.id_InertiaMode_FIXED;
		this.zpp_inner.cinertia = inertia;
		this.zpp_inner.invalidate_inertia();
		this.zpp_inner.validate_inertia();
		return this.zpp_inner.cinertia;
	}
	,connectedBodies: function(depth,output) {
		if(depth == null) depth = -1;
		return this.zpp_inner.connectedBodies(depth,output);
	}
	,interactingBodies: function(type,depth,output) {
		if(depth == null) depth = -1;
		var arbiter_type;
		if(type == null) arbiter_type = zpp_$nape_dynamics_ZPP_$Arbiter.COL | zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR | zpp_$nape_dynamics_ZPP_$Arbiter.FLUID; else if(type == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
			return $r;
		}(this))) arbiter_type = zpp_$nape_dynamics_ZPP_$Arbiter.COL; else if(type == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
			return $r;
		}(this))) arbiter_type = zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR; else arbiter_type = zpp_$nape_dynamics_ZPP_$Arbiter.FLUID;
		return this.zpp_inner.interactingBodies(arbiter_type,depth,output);
	}
	,crushFactor: function() {
		var msum = 0.0;
		var jsum = nape_geom_Vec2.get(null,null,null);
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var arb;
			_g.zpp_critical = false;
			arb = _g.zpp_inner.at(_g.zpp_i++);
			var imp3 = arb.totalImpulse(this);
			var imp = imp3.xy();
			jsum.addeq(imp);
			msum += Math.sqrt((function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)));
			imp.dispose();
			imp3.dispose();
		}
		var _g1 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_constraints == null) $this.zpp_inner.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get($this.zpp_inner.constraints,true);
			$r = $this.zpp_inner.wrap_constraints;
			return $r;
		}(this))).iterator();
		while(_g1.hasNext()) {
			var con;
			_g1.zpp_critical = false;
			con = _g1.zpp_inner.at(_g1.zpp_i++);
			var imp31 = con.bodyImpulse(this);
			var imp1 = imp31.xy();
			jsum.addeq(imp1);
			msum += Math.sqrt((function($this) {
				var $r;
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				imp1.zpp_inner.validate();
				$r = imp1.zpp_inner.y;
				return $r;
			}(this)));
			imp1.dispose();
			imp31.dispose();
		}
		var ret;
		ret = (msum - Math.sqrt((function($this) {
			var $r;
			jsum.zpp_inner.validate();
			$r = jsum.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			jsum.zpp_inner.validate();
			$r = jsum.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			jsum.zpp_inner.validate();
			$r = jsum.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			jsum.zpp_inner.validate();
			$r = jsum.zpp_inner.y;
			return $r;
		}(this)))) / ((function($this) {
			var $r;
			$this.zpp_inner.validate_mass();
			$r = $this.zpp_inner.cmass;
			return $r;
		}(this)) * (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.pre_dt);
		jsum.dispose();
		return ret;
	}
	,localPointToWorld: function(point,weak) {
		if(weak == null) weak = false;
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = this.zpp_inner.axisy * (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.axisx * (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this));
		tempy = (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx + (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return nape_geom_Vec2.get(tempx + this.zpp_inner.posx,tempy + this.zpp_inner.posy,weak);
	}
	,worldPointToLocal: function(point,weak) {
		if(weak == null) weak = false;
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		var pointx = 0.0;
		var pointy = 0.0;
		pointx = (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.posx;
		pointy = (function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) - this.zpp_inner.posy;
		tempx = pointx * this.zpp_inner.axisy + pointy * this.zpp_inner.axisx;
		tempy = pointy * this.zpp_inner.axisy - pointx * this.zpp_inner.axisx;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return nape_geom_Vec2.get(tempx,tempy,weak);
	}
	,localVectorToWorld: function(vector,weak) {
		if(weak == null) weak = false;
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = this.zpp_inner.axisy * (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.axisx * (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this));
		tempy = (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy;
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return nape_geom_Vec2.get(tempx,tempy,weak);
	}
	,worldVectorToLocal: function(vector,weak) {
		if(weak == null) weak = false;
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisy + (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisx;
		tempy = (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy - (function($this) {
			var $r;
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx;
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return nape_geom_Vec2.get(tempx,tempy,weak);
	}
	,applyImpulse: function(impulse,pos,sleepable) {
		if(sleepable == null) sleepable = false;
		if(sleepable && this.zpp_inner.component.sleeping) {
			if(impulse.zpp_inner.weak) {
				impulse.dispose();
				true;
			} else false;
			if(pos != null) {
				if(pos.zpp_inner.weak) {
					pos.dispose();
					true;
				} else false;
			}
			return this;
		}
		this.zpp_inner.validate_mass();
		var t = this.zpp_inner.imass;
		this.zpp_inner.velx += (function($this) {
			var $r;
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.x;
			return $r;
		}(this)) * t;
		this.zpp_inner.vely += (function($this) {
			var $r;
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.y;
			return $r;
		}(this)) * t;
		if(pos != null) {
			var rx = 0.0;
			var ry = 0.0;
			rx = (function($this) {
				var $r;
				pos.zpp_inner.validate();
				$r = pos.zpp_inner.x;
				return $r;
			}(this)) - this.zpp_inner.posx;
			ry = (function($this) {
				var $r;
				pos.zpp_inner.validate();
				$r = pos.zpp_inner.y;
				return $r;
			}(this)) - this.zpp_inner.posy;
			this.zpp_inner.validate_inertia();
			this.zpp_inner.angvel += ((function($this) {
				var $r;
				impulse.zpp_inner.validate();
				$r = impulse.zpp_inner.y;
				return $r;
			}(this)) * rx - (function($this) {
				var $r;
				impulse.zpp_inner.validate();
				$r = impulse.zpp_inner.x;
				return $r;
			}(this)) * ry) * this.zpp_inner.iinertia;
			if(pos.zpp_inner.weak) {
				pos.dispose();
				true;
			} else false;
		}
		if(!sleepable) {
			if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.zpp_inner.wake();
		}
		if(impulse.zpp_inner.weak) {
			impulse.dispose();
			true;
		} else false;
		return this;
	}
	,applyAngularImpulse: function(impulse,sleepable) {
		if(sleepable == null) sleepable = false;
		if(sleepable && this.zpp_inner.component.sleeping) return this;
		this.zpp_inner.validate_inertia();
		this.zpp_inner.angvel += impulse * this.zpp_inner.iinertia;
		if(!sleepable) {
			if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.zpp_inner.wake();
		}
		return this;
	}
	,translateShapes: function(translation) {
		this.zpp_inner.immutable_midstep("Body::translateShapes()");
		var weak = translation.zpp_inner.weak;
		translation.zpp_inner.weak = false;
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.translate(translation);
			cx_ite = cx_ite.next;
		}
		translation.zpp_inner.weak = weak;
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,rotateShapes: function(angle) {
		this.zpp_inner.immutable_midstep("Body::rotateShapes()");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.rotate(angle);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,scaleShapes: function(scaleX,scaleY) {
		this.zpp_inner.immutable_midstep("Body::scaleShapes()");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.scale(scaleX,scaleY);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,transformShapes: function(matrix) {
		this.zpp_inner.immutable_midstep("Body::transformShapes()");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.transform(matrix);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,align: function() {
		this.zpp_inner.immutable_midstep("Body::align()");
		this.zpp_inner.validate_localCOM();
		var dx = nape_geom_Vec2.get(-this.zpp_inner.localCOMx,-this.zpp_inner.localCOMy,null);
		this.translateShapes(dx);
		var dx2 = this.localVectorToWorld(dx);
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).subeq(dx2);
		if(this.zpp_inner.pre_posx < Infinity) {
			var t = 1.0;
			this.zpp_inner.pre_posx -= (function($this) {
				var $r;
				dx2.zpp_inner.validate();
				$r = dx2.zpp_inner.x;
				return $r;
			}(this)) * t;
			this.zpp_inner.pre_posy -= (function($this) {
				var $r;
				dx2.zpp_inner.validate();
				$r = dx2.zpp_inner.y;
				return $r;
			}(this)) * t;
		}
		dx.dispose();
		dx2.dispose();
		return this;
	}
	,rotate: function(centre,angle) {
		var weak = centre.zpp_inner.weak;
		centre.zpp_inner.weak = false;
		var del = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).sub(centre);
		del.rotate(angle);
		this.set_position(centre.add(del,true));
		del.dispose();
		var _g = this;
		_g.set_rotation(_g.zpp_inner.rot + angle);
		centre.zpp_inner.weak = weak;
		if(centre.zpp_inner.weak) {
			centre.dispose();
			true;
		} else false;
		return this;
	}
	,setShapeMaterials: function(material) {
		this.zpp_inner.immutable_midstep("Body::setShapeMaterials()");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_material(material);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,setShapeFilters: function(filter) {
		this.zpp_inner.immutable_midstep("Body::setShapeFilters()");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_filter(filter);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,setShapeFluidProperties: function(fluidProperties) {
		this.zpp_inner.immutable_midstep("Body::setShapeFluidProperties()");
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_fluidProperties(fluidProperties);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,get_localCOM: function() {
		if(this.zpp_inner.wrap_localCOM == null) {
			this.zpp_inner.wrap_localCOM = nape_geom_Vec2.get(this.zpp_inner.localCOMx,this.zpp_inner.localCOMy,null);
			this.zpp_inner.wrap_localCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_localCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_localCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getlocalCOM));
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,get_worldCOM: function() {
		if(this.zpp_inner.wrap_worldCOM == null) {
			this.zpp_inner.wrap_worldCOM = nape_geom_Vec2.get(this.zpp_inner.worldCOMx,this.zpp_inner.worldCOMy,null);
			this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
		}
		return this.zpp_inner.wrap_worldCOM;
	}
	,normalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().normalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,tangentImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().tangentImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,totalContactsImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().totalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,rollingImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var ret = 0.0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			ret += arb.wrapper().get_collisionArbiter().rollingImpulse(this,freshOnly);
		}
		return ret;
	}
	,buoyancyImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().buoyancyImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,dragImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().dragImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,totalFluidImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().totalImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,constraintsImpulse: function() {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var cx_ite = this.zpp_inner.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			var imp = con.outer.bodyImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
			cx_ite = cx_ite.next;
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var _g = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var oarb;
			_g.zpp_critical = false;
			oarb = _g.zpp_inner.at(_g.zpp_i++);
			var arb = oarb.zpp_inner;
			if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().totalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		var cx_ite = this.zpp_inner.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.active) {
				var imp1 = con.outer.bodyImpulse(this);
				var t2 = 1;
				var t3 = t2;
				retx += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.x;
					return $r;
				}(this)) * t3;
				rety += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.y;
					return $r;
				}(this)) * t3;
				retz += (function($this) {
					var $r;
					imp1.zpp_inner.validate();
					$r = imp1.zpp_inner.z;
					return $r;
				}(this)) * t2;
				imp1.dispose();
			}
			cx_ite = cx_ite.next;
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,contains: function(point) {
		var wasWeak = point.zpp_inner.weak;
		point.zpp_inner.weak = false;
		var retvar;
		retvar = false;
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.outer.contains(point)) {
				retvar = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		point.zpp_inner.weak = wasWeak;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return retvar;
	}
	,toString: function() {
		return (this.zpp_inner.world?"(space::world":"(" + (this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC?"dynamic":this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC?"static":"kinematic")) + ")#" + this.zpp_inner_i.id;
	}
	,__class__: nape_phys_Body
	,__properties__: $extend(nape_phys_Interactor.prototype.__properties__,{get_worldCOM:"get_worldCOM",get_localCOM:"get_localCOM",set_inertia:"set_inertia",get_inertia:"get_inertia",get_constraintInertia:"get_constraintInertia",set_inertiaMode:"set_inertiaMode",get_inertiaMode:"get_inertiaMode",set_gravMassScale:"set_gravMassScale",get_gravMassScale:"get_gravMassScale",set_gravMass:"set_gravMass",get_gravMass:"get_gravMass",set_gravMassMode:"set_gravMassMode",get_gravMassMode:"get_gravMassMode",set_mass:"set_mass",get_mass:"get_mass",get_constraintMass:"get_constraintMass",set_massMode:"set_massMode",get_massMode:"get_massMode",set_allowRotation:"set_allowRotation",get_allowRotation:"get_allowRotation",set_allowMovement:"set_allowMovement",get_allowMovement:"get_allowMovement",get_bounds:"get_bounds",set_torque:"set_torque",get_torque:"get_torque",set_kinAngVel:"set_kinAngVel",get_kinAngVel:"get_kinAngVel",set_angularVel:"set_angularVel",get_angularVel:"get_angularVel",set_rotation:"set_rotation",get_rotation:"get_rotation",get_constraintVelocity:"get_constraintVelocity",set_force:"set_force",get_force:"get_force",set_surfaceVel:"set_surfaceVel",get_surfaceVel:"get_surfaceVel",set_kinematicVel:"set_kinematicVel",get_kinematicVel:"get_kinematicVel",set_velocity:"set_velocity",get_velocity:"get_velocity",set_position:"set_position",get_position:"get_position",get_constraints:"get_constraints",get_isSleeping:"get_isSleeping",get_arbiters:"get_arbiters",set_space:"set_space",get_space:"get_space",set_compound:"set_compound",get_compound:"get_compound",get_shapes:"get_shapes",set_disableCCD:"set_disableCCD",get_disableCCD:"get_disableCCD",set_isBullet:"set_isBullet",get_isBullet:"get_isBullet",set_type:"set_type",get_type:"get_type"})
});
var nape_phys_BodyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.phys.BodyIterator"] = nape_phys_BodyIterator;
nape_phys_BodyIterator.__name__ = ["nape","phys","BodyIterator"];
nape_phys_BodyIterator.get = function(list) {
	var ret;
	if(nape_phys_BodyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$BodyList.internal = true;
		var ret1 = new nape_phys_BodyIterator();
		zpp_$nape_util_ZPP_$BodyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_BodyIterator.zpp_pool;
		nape_phys_BodyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_BodyIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_phys_BodyIterator.zpp_pool;
			nape_phys_BodyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_BodyIterator
};
var nape_phys_BodyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$BodyList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.BodyList"] = nape_phys_BodyList;
nape_phys_BodyList.__name__ = ["nape","phys","BodyList"];
nape_phys_BodyList.fromArray = function(array) {
	var ret = new nape_phys_BodyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_phys_BodyList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_phys_BodyIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_phys_BodyList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_phys_BodyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_phys_BodyIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_phys_BodyIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape_phys_BodyIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_phys_BodyIterator.zpp_pool;
			nape_phys_BodyIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_phys_BodyList
	,__properties__: {get_length:"get_length"}
};
var nape_phys_BodyType = function() {
};
$hxClasses["nape.phys.BodyType"] = nape_phys_BodyType;
nape_phys_BodyType.__name__ = ["nape","phys","BodyType"];
nape_phys_BodyType.__properties__ = {get_KINEMATIC:"get_KINEMATIC",get_DYNAMIC:"get_DYNAMIC",get_STATIC:"get_STATIC"}
nape_phys_BodyType.get_STATIC = function() {
	if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
};
nape_phys_BodyType.get_DYNAMIC = function() {
	if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
};
nape_phys_BodyType.get_KINEMATIC = function() {
	if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC;
};
nape_phys_BodyType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
			return $r;
		}(this))) return "STATIC"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
			return $r;
		}(this))) return "DYNAMIC"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC;
			return $r;
		}(this))) return "KINEMATIC"; else return "";
	}
	,__class__: nape_phys_BodyType
};
var nape_phys_Compound = function() {
	this.zpp_inner = null;
	nape_phys_Interactor.call(this);
	this.zpp_inner = new zpp_$nape_phys_ZPP_$Compound();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND.zpp_inner);
};
$hxClasses["nape.phys.Compound"] = nape_phys_Compound;
nape_phys_Compound.__name__ = ["nape","phys","Compound"];
nape_phys_Compound.__super__ = nape_phys_Interactor;
nape_phys_Compound.prototype = $extend(nape_phys_Interactor.prototype,{
	zpp_inner: null
	,get_bodies: function() {
		return this.zpp_inner.wrap_bodies;
	}
	,get_constraints: function() {
		return this.zpp_inner.wrap_constraints;
	}
	,get_compounds: function() {
		return this.zpp_inner.wrap_compounds;
	}
	,get_compound: function() {
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,set_compound: function(compound) {
		this.zpp_inner.immutable_midstep("Compound::compound");
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(this);
			if(compound != null) compound.zpp_inner.wrap_compounds.add(this);
		}
		if(this.zpp_inner.compound == null) return null; else return this.zpp_inner.compound.outer;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,set_space: function(space) {
		this.zpp_inner.immutable_midstep("Compound::space");
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_compounds.remove(this);
			if(space != null) space.zpp_inner.wrap_compounds.add(this);
		}
		if(this.zpp_inner.space == null) return null; else return this.zpp_inner.space.outer;
	}
	,toString: function() {
		return "Compound" + this.zpp_inner_i.id;
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,breakApart: function() {
		this.zpp_inner.breakApart();
	}
	,visitBodies: function(lambda) {
		var _g = this.zpp_inner.wrap_bodies.iterator();
		while(_g.hasNext()) {
			var b;
			_g.zpp_critical = false;
			b = _g.zpp_inner.at(_g.zpp_i++);
			lambda(b);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c;
			_g1.zpp_critical = false;
			c = _g1.zpp_inner.at(_g1.zpp_i++);
			c.visitBodies(lambda);
		}
	}
	,visitConstraints: function(lambda) {
		var _g = this.zpp_inner.wrap_constraints.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c1;
			_g1.zpp_critical = false;
			c1 = _g1.zpp_inner.at(_g1.zpp_i++);
			c1.visitConstraints(lambda);
		}
	}
	,visitCompounds: function(lambda) {
		var _g = this.zpp_inner.wrap_compounds.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
			c.visitCompounds(lambda);
		}
	}
	,COM: function(weak) {
		if(weak == null) weak = false;
		var ret = nape_geom_Vec2.get(0,0,weak);
		var total = 0.0;
		this.visitBodies(function(b) {
			if(!b.zpp_inner.wrap_shapes.empty()) {
				ret.addeq(((function($this) {
					var $r;
					if(b.zpp_inner.wrap_worldCOM == null) {
						b.zpp_inner.wrap_worldCOM = nape_geom_Vec2.get(b.zpp_inner.worldCOMx,b.zpp_inner.worldCOMy,null);
						b.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
						b.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
						b.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=b.zpp_inner,$bind($_,$_.getworldCOM));
					}
					$r = b.zpp_inner.wrap_worldCOM;
					return $r;
				}(this))).mul((function($this) {
					var $r;
					b.zpp_inner.validate_mass();
					$r = b.zpp_inner.cmass;
					return $r;
				}(this)),true));
				b.zpp_inner.validate_mass();
				total += b.zpp_inner.cmass;
			}
		});
		ret.muleq(1 / total);
		return ret;
	}
	,translate: function(translation) {
		var weak = translation.zpp_inner.weak;
		translation.zpp_inner.weak = false;
		this.visitBodies(function(b) {
			((function($this) {
				var $r;
				if(b.zpp_inner.wrap_pos == null) b.zpp_inner.setupPosition();
				$r = b.zpp_inner.wrap_pos;
				return $r;
			}(this))).addeq(translation);
		});
		translation.zpp_inner.weak = weak;
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,rotate: function(centre,angle) {
		var weak = centre.zpp_inner.weak;
		centre.zpp_inner.weak = false;
		this.visitBodies(function(b) {
			b.rotate(centre,angle);
		});
		centre.zpp_inner.weak = weak;
		if(centre.zpp_inner.weak) {
			centre.dispose();
			true;
		} else false;
		return this;
	}
	,__class__: nape_phys_Compound
	,__properties__: $extend(nape_phys_Interactor.prototype.__properties__,{set_space:"set_space",get_space:"get_space",set_compound:"set_compound",get_compound:"get_compound",get_compounds:"get_compounds",get_constraints:"get_constraints",get_bodies:"get_bodies"})
});
var nape_phys_CompoundIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.phys.CompoundIterator"] = nape_phys_CompoundIterator;
nape_phys_CompoundIterator.__name__ = ["nape","phys","CompoundIterator"];
nape_phys_CompoundIterator.get = function(list) {
	var ret;
	if(nape_phys_CompoundIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CompoundList.internal = true;
		var ret1 = new nape_phys_CompoundIterator();
		zpp_$nape_util_ZPP_$CompoundList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_CompoundIterator.zpp_pool;
		nape_phys_CompoundIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_CompoundIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_phys_CompoundIterator.zpp_pool;
			nape_phys_CompoundIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_CompoundIterator
};
var nape_phys_CompoundList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$CompoundList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.CompoundList"] = nape_phys_CompoundList;
nape_phys_CompoundList.__name__ = ["nape","phys","CompoundList"];
nape_phys_CompoundList.fromArray = function(array) {
	var ret = new nape_phys_CompoundList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_phys_CompoundList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_phys_CompoundIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_phys_CompoundList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_phys_CompoundIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_phys_CompoundIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_phys_CompoundIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape_phys_CompoundIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_phys_CompoundIterator.zpp_pool;
			nape_phys_CompoundIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_phys_CompoundList
	,__properties__: {get_length:"get_length"}
};
var nape_phys_FluidProperties = function(density,viscosity) {
	if(viscosity == null) viscosity = 1;
	if(density == null) density = 1;
	this.zpp_inner = null;
	if(zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool == null) this.zpp_inner = new zpp_$nape_phys_ZPP_$FluidProperties(); else {
		this.zpp_inner = zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool;
		zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(density != this.zpp_inner.density * 1000) {
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.density * 1000;
	if(viscosity != this.zpp_inner.viscosity) {
		this.zpp_inner.viscosity = viscosity / 1;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.viscosity;
};
$hxClasses["nape.phys.FluidProperties"] = nape_phys_FluidProperties;
nape_phys_FluidProperties.__name__ = ["nape","phys","FluidProperties"];
nape_phys_FluidProperties.prototype = {
	zpp_inner: null
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_$nape_util_ZPP_$ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,copy: function() {
		var ret = new nape_phys_FluidProperties(this.zpp_inner.density * 1000,this.zpp_inner.viscosity);
		if(this.zpp_inner.userData != null) ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
		ret.set_gravity(this.zpp_inner.wrap_gravity);
		return ret;
	}
	,get_density: function() {
		return this.zpp_inner.density * 1000;
	}
	,set_density: function(density) {
		if(density != this.zpp_inner.density * 1000) {
			this.zpp_inner.density = density / 1000;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.density * 1000;
	}
	,get_viscosity: function() {
		return this.zpp_inner.viscosity;
	}
	,set_viscosity: function(viscosity) {
		if(viscosity != this.zpp_inner.viscosity) {
			this.zpp_inner.viscosity = viscosity / 1;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.viscosity;
	}
	,get_gravity: function() {
		return this.zpp_inner.wrap_gravity;
	}
	,set_gravity: function(gravity) {
		if(gravity == null) {
			if(this.zpp_inner.wrap_gravity != null) {
				this.zpp_inner.wrap_gravity.zpp_inner._inuse = false;
				this.zpp_inner.wrap_gravity.dispose();
				this.zpp_inner.wrap_gravity = null;
			}
		} else {
			if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
			this.zpp_inner.wrap_gravity.set(gravity);
		}
		return this.zpp_inner.wrap_gravity;
	}
	,toString: function() {
		return "{ density: " + this.zpp_inner.density * 1000 + " viscosity: " + this.zpp_inner.viscosity + " gravity: " + Std.string(this.zpp_inner.wrap_gravity) + " }";
	}
	,__class__: nape_phys_FluidProperties
	,__properties__: {set_gravity:"set_gravity",get_gravity:"get_gravity",set_viscosity:"set_viscosity",get_viscosity:"get_viscosity",set_density:"set_density",get_density:"get_density",get_shapes:"get_shapes",get_userData:"get_userData"}
};
var nape_phys_GravMassMode = function() {
};
$hxClasses["nape.phys.GravMassMode"] = nape_phys_GravMassMode;
nape_phys_GravMassMode.__name__ = ["nape","phys","GravMassMode"];
nape_phys_GravMassMode.__properties__ = {get_SCALED:"get_SCALED",get_FIXED:"get_FIXED",get_DEFAULT:"get_DEFAULT"}
nape_phys_GravMassMode.get_DEFAULT = function() {
	if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT;
};
nape_phys_GravMassMode.get_FIXED = function() {
	if(zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = new nape_phys_GravMassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED;
};
nape_phys_GravMassMode.get_SCALED = function() {
	if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED;
};
nape_phys_GravMassMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED;
			return $r;
		}(this))) return "SCALED"; else return "";
	}
	,__class__: nape_phys_GravMassMode
};
var nape_phys_InertiaMode = function() {
};
$hxClasses["nape.phys.InertiaMode"] = nape_phys_InertiaMode;
nape_phys_InertiaMode.__name__ = ["nape","phys","InertiaMode"];
nape_phys_InertiaMode.__properties__ = {get_FIXED:"get_FIXED",get_DEFAULT:"get_DEFAULT"}
nape_phys_InertiaMode.get_DEFAULT = function() {
	if(zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = new nape_phys_InertiaMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT;
};
nape_phys_InertiaMode.get_FIXED = function() {
	if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED;
};
nape_phys_InertiaMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else return "";
	}
	,__class__: nape_phys_InertiaMode
};
var nape_phys_InteractorIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.phys.InteractorIterator"] = nape_phys_InteractorIterator;
nape_phys_InteractorIterator.__name__ = ["nape","phys","InteractorIterator"];
nape_phys_InteractorIterator.get = function(list) {
	var ret;
	if(nape_phys_InteractorIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractorList.internal = true;
		var ret1 = new nape_phys_InteractorIterator();
		zpp_$nape_util_ZPP_$InteractorList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_InteractorIterator.zpp_pool;
		nape_phys_InteractorIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_InteractorIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_phys_InteractorIterator.zpp_pool;
			nape_phys_InteractorIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_InteractorIterator
};
var nape_phys_InteractorList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$InteractorList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.InteractorList"] = nape_phys_InteractorList;
nape_phys_InteractorList.__name__ = ["nape","phys","InteractorList"];
nape_phys_InteractorList.fromArray = function(array) {
	var ret = new nape_phys_InteractorList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_phys_InteractorList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner_i);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer_i;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner_i); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
			} else this.zpp_inner.inner.add(obj.zpp_inner_i);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer_i;
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer_i;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner_i) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner_i);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_phys_InteractorIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_phys_InteractorList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_phys_InteractorIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_phys_InteractorIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_phys_InteractorIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape_phys_InteractorIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_phys_InteractorIterator.zpp_pool;
			nape_phys_InteractorIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_phys_InteractorList
	,__properties__: {get_length:"get_length"}
};
var nape_phys_MassMode = function() {
};
$hxClasses["nape.phys.MassMode"] = nape_phys_MassMode;
nape_phys_MassMode.__name__ = ["nape","phys","MassMode"];
nape_phys_MassMode.__properties__ = {get_FIXED:"get_FIXED",get_DEFAULT:"get_DEFAULT"}
nape_phys_MassMode.get_DEFAULT = function() {
	if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT;
};
nape_phys_MassMode.get_FIXED = function() {
	if(zpp_$nape_util_ZPP_$Flags.MassMode_FIXED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = new nape_phys_MassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.MassMode_FIXED;
};
nape_phys_MassMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.MassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.MassMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else return "";
	}
	,__class__: nape_phys_MassMode
};
var nape_phys_Material = function(elasticity,dynamicFriction,staticFriction,density,rollingFriction) {
	if(rollingFriction == null) rollingFriction = 0.001;
	if(density == null) density = 1;
	if(staticFriction == null) staticFriction = 2.0;
	if(dynamicFriction == null) dynamicFriction = 1.0;
	if(elasticity == null) elasticity = 0.0;
	this.zpp_inner = null;
	if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) this.zpp_inner = new zpp_$nape_phys_ZPP_$Material(); else {
		this.zpp_inner = zpp_$nape_phys_ZPP_$Material.zpp_pool;
		zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(elasticity != this.zpp_inner.elasticity) {
		this.zpp_inner.elasticity = elasticity / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	this.zpp_inner.elasticity;
	if(dynamicFriction != this.zpp_inner.dynamicFriction) {
		this.zpp_inner.dynamicFriction = dynamicFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ANGDRAG | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	this.zpp_inner.dynamicFriction;
	if(staticFriction != this.zpp_inner.staticFriction) {
		this.zpp_inner.staticFriction = staticFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	this.zpp_inner.staticFriction;
	if(density != this.zpp_inner.density * 1000) {
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.PROPS);
	}
	this.zpp_inner.density * 1000;
	if(rollingFriction != this.zpp_inner.rollingFriction) {
		this.zpp_inner.rollingFriction = rollingFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	this.zpp_inner.rollingFriction;
};
$hxClasses["nape.phys.Material"] = nape_phys_Material;
nape_phys_Material.__name__ = ["nape","phys","Material"];
nape_phys_Material.wood = function() {
	return new nape_phys_Material(0.4,0.2,0.38,0.7,0.005);
};
nape_phys_Material.steel = function() {
	return new nape_phys_Material(0.2,0.57,0.74,7.8,0.001);
};
nape_phys_Material.ice = function() {
	return new nape_phys_Material(0.3,0.03,0.1,0.9,0.0001);
};
nape_phys_Material.rubber = function() {
	return new nape_phys_Material(0.8,1.0,1.4,1.5,0.01);
};
nape_phys_Material.glass = function() {
	return new nape_phys_Material(0.4,0.4,0.94,2.6,0.002);
};
nape_phys_Material.sand = function() {
	return new nape_phys_Material(-1.0,0.45,0.6,1.6,16.0);
};
nape_phys_Material.prototype = {
	zpp_inner: null
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_$nape_util_ZPP_$ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,copy: function() {
		var ret = new nape_phys_Material(this.zpp_inner.elasticity,this.zpp_inner.dynamicFriction,this.zpp_inner.staticFriction,this.zpp_inner.density * 1000,this.zpp_inner.rollingFriction);
		if(this.zpp_inner.userData != null) ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
		return ret;
	}
	,get_elasticity: function() {
		return this.zpp_inner.elasticity;
	}
	,set_elasticity: function(elasticity) {
		if(elasticity != this.zpp_inner.elasticity) {
			this.zpp_inner.elasticity = elasticity / 1;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
		}
		return this.zpp_inner.elasticity;
	}
	,get_dynamicFriction: function() {
		return this.zpp_inner.dynamicFriction;
	}
	,set_dynamicFriction: function(dynamicFriction) {
		if(dynamicFriction != this.zpp_inner.dynamicFriction) {
			this.zpp_inner.dynamicFriction = dynamicFriction / 1;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ANGDRAG | zpp_$nape_phys_ZPP_$Material.ARBITERS);
		}
		return this.zpp_inner.dynamicFriction;
	}
	,get_staticFriction: function() {
		return this.zpp_inner.staticFriction;
	}
	,set_staticFriction: function(staticFriction) {
		if(staticFriction != this.zpp_inner.staticFriction) {
			this.zpp_inner.staticFriction = staticFriction / 1;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
		}
		return this.zpp_inner.staticFriction;
	}
	,get_density: function() {
		return this.zpp_inner.density * 1000;
	}
	,set_density: function(density) {
		if(density != this.zpp_inner.density * 1000) {
			this.zpp_inner.density = density / 1000;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.PROPS);
		}
		return this.zpp_inner.density * 1000;
	}
	,get_rollingFriction: function() {
		return this.zpp_inner.rollingFriction;
	}
	,set_rollingFriction: function(rollingFriction) {
		if(rollingFriction != this.zpp_inner.rollingFriction) {
			this.zpp_inner.rollingFriction = rollingFriction / 1;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
		}
		return this.zpp_inner.rollingFriction;
	}
	,toString: function() {
		return "{ elasticity: " + this.zpp_inner.elasticity + " dynamicFriction: " + this.zpp_inner.dynamicFriction + " staticFriction: " + this.zpp_inner.staticFriction + " density: " + this.zpp_inner.density * 1000 + " rollingFriction: " + this.zpp_inner.rollingFriction + " }";
	}
	,__class__: nape_phys_Material
	,__properties__: {set_rollingFriction:"set_rollingFriction",get_rollingFriction:"get_rollingFriction",set_density:"set_density",get_density:"get_density",set_staticFriction:"set_staticFriction",get_staticFriction:"get_staticFriction",set_dynamicFriction:"set_dynamicFriction",get_dynamicFriction:"get_dynamicFriction",set_elasticity:"set_elasticity",get_elasticity:"get_elasticity",get_shapes:"get_shapes",get_userData:"get_userData"}
};
var nape_shape_Shape = function() {
	this.zpp_inner = null;
	nape_phys_Interactor.call(this);
};
$hxClasses["nape.shape.Shape"] = nape_shape_Shape;
nape_shape_Shape.__name__ = ["nape","shape","Shape"];
nape_shape_Shape.__super__ = nape_phys_Interactor;
nape_shape_Shape.prototype = $extend(nape_phys_Interactor.prototype,{
	zpp_inner: null
	,get_type: function() {
		return zpp_$nape_shape_ZPP_$Shape.types[this.zpp_inner.type];
	}
	,isCircle: function() {
		return this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE;
	}
	,isPolygon: function() {
		return this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON;
	}
	,get_body: function() {
		if(this.zpp_inner.body != null) return this.zpp_inner.body.outer; else return null;
	}
	,set_body: function(body) {
		this.zpp_inner.immutable_midstep("Shape::body");
		if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) != body) {
			if(this.zpp_inner.body != null) (this.zpp_inner.body != null?this.zpp_inner.body.outer:null).zpp_inner.wrap_shapes.remove(this);
			if(body != null) body.zpp_inner.wrap_shapes.add(this);
		}
		if(this.zpp_inner.body != null) return this.zpp_inner.body.outer; else return null;
	}
	,get_castCircle: function() {
		if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) return this.zpp_inner.circle.outer_zn; else return null;
	}
	,get_castPolygon: function() {
		if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) return this.zpp_inner.polygon.outer_zn; else return null;
	}
	,get_worldCOM: function() {
		if(this.zpp_inner.wrap_worldCOM == null) {
			this.zpp_inner.wrap_worldCOM = nape_geom_Vec2.get(this.zpp_inner.worldCOMx,this.zpp_inner.worldCOMy,null);
			this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
		}
		return this.zpp_inner.wrap_worldCOM;
	}
	,get_localCOM: function() {
		if(this.zpp_inner.wrap_localCOM == null) {
			if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.setupLocalCOM(); else this.zpp_inner.polygon.setupLocalCOM();
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,set_localCOM: function(localCOM) {
		this.zpp_inner.immutable_midstep("Body::localCOM");
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_localCOM == null) {
				if($this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) $this.zpp_inner.circle.setupLocalCOM(); else $this.zpp_inner.polygon.setupLocalCOM();
			}
			$r = $this.zpp_inner.wrap_localCOM;
			return $r;
		}(this))).set(localCOM);
		if(this.zpp_inner.wrap_localCOM == null) {
			if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.setupLocalCOM(); else this.zpp_inner.polygon.setupLocalCOM();
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,get_area: function() {
		this.zpp_inner.validate_area_inertia();
		return this.zpp_inner.area;
	}
	,get_inertia: function() {
		this.zpp_inner.validate_area_inertia();
		return this.zpp_inner.inertia;
	}
	,get_angDrag: function() {
		this.zpp_inner.validate_angDrag();
		return this.zpp_inner.angDrag;
	}
	,get_material: function() {
		return this.zpp_inner.material.wrapper();
	}
	,set_material: function(material) {
		this.zpp_inner.immutable_midstep("Shape::material");
		this.zpp_inner.setMaterial(material.zpp_inner);
		return this.zpp_inner.material.wrapper();
	}
	,get_filter: function() {
		return this.zpp_inner.filter.wrapper();
	}
	,set_filter: function(filter) {
		this.zpp_inner.immutable_midstep("Shape::filter");
		this.zpp_inner.setFilter(filter.zpp_inner);
		return this.zpp_inner.filter.wrapper();
	}
	,get_fluidProperties: function() {
		this.zpp_inner.immutable_midstep("Shape::fluidProperties");
		if(this.zpp_inner.fluidProperties == null) this.zpp_inner.setFluid(new nape_phys_FluidProperties().zpp_inner);
		return this.zpp_inner.fluidProperties.wrapper();
	}
	,set_fluidProperties: function(fluidProperties) {
		this.zpp_inner.setFluid(fluidProperties.zpp_inner);
		this.zpp_inner.immutable_midstep("Shape::fluidProperties");
		if(this.zpp_inner.fluidProperties == null) this.zpp_inner.setFluid(new nape_phys_FluidProperties().zpp_inner);
		return this.zpp_inner.fluidProperties.wrapper();
	}
	,get_fluidEnabled: function() {
		return this.zpp_inner.fluidEnabled;
	}
	,set_fluidEnabled: function(fluidEnabled) {
		this.zpp_inner.immutable_midstep("Shape::fluidEnabled");
		this.zpp_inner.fluidEnabled = fluidEnabled;
		if(fluidEnabled && this.zpp_inner.fluidProperties == null) this.set_fluidProperties(new nape_phys_FluidProperties());
		this.zpp_inner.wake();
		return this.zpp_inner.fluidEnabled;
	}
	,get_sensorEnabled: function() {
		return this.zpp_inner.sensorEnabled;
	}
	,set_sensorEnabled: function(sensorEnabled) {
		this.zpp_inner.immutable_midstep("Shape::sensorEnabled");
		this.zpp_inner.sensorEnabled = sensorEnabled;
		this.zpp_inner.wake();
		return this.zpp_inner.sensorEnabled;
	}
	,get_bounds: function() {
		return this.zpp_inner.aabb.wrapper();
	}
	,translate: function(translation) {
		this.zpp_inner.immutable_midstep("Shape::translate()");
		if(translation.lsq() > 0) {
			if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.__translate((function($this) {
				var $r;
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.y;
				return $r;
			}(this))); else this.zpp_inner.polygon.__translate((function($this) {
				var $r;
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.y;
				return $r;
			}(this)));
		}
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,scale: function(scalex,scaley) {
		this.zpp_inner.immutable_midstep("Shape::scale()");
		if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
			var d = scalex * scalex - scaley * scaley;
			if(d * d < nape_Config.epsilon * nape_Config.epsilon) this.zpp_inner.circle.__scale(scalex,scaley); else {
			}
		} else this.zpp_inner.polygon.__scale(scalex,scaley);
		return this;
	}
	,rotate: function(angle) {
		this.zpp_inner.immutable_midstep("Shape::rotate()");
		var dr = angle % (2 * Math.PI);
		if(dr != 0.0) {
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.__rotate(sin,cos); else this.zpp_inner.polygon.__rotate(sin,cos);
		}
		return this;
	}
	,transform: function(matrix) {
		this.zpp_inner.immutable_midstep("Shape::transform()");
		if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
			if(matrix.equiorthogonal()) this.zpp_inner.circle.__transform(matrix); else {
			}
		} else this.zpp_inner.polygon.__transform(matrix);
		return this;
	}
	,contains: function(point) {
		zpp_$nape_geom_ZPP_$Geom.validateShape(this.zpp_inner);
		point.zpp_inner.validate();
		var ret = zpp_$nape_geom_ZPP_$Collide.shapeContains(this.zpp_inner,point.zpp_inner);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,toString: function() {
		var ret;
		if(this.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) ret = "Circle"; else ret = "Polygon";
		return ret + "#" + this.zpp_inner_i.id;
	}
	,__class__: nape_shape_Shape
	,__properties__: $extend(nape_phys_Interactor.prototype.__properties__,{get_bounds:"get_bounds",set_sensorEnabled:"set_sensorEnabled",get_sensorEnabled:"get_sensorEnabled",set_fluidEnabled:"set_fluidEnabled",get_fluidEnabled:"get_fluidEnabled",set_fluidProperties:"set_fluidProperties",get_fluidProperties:"get_fluidProperties",set_filter:"set_filter",get_filter:"get_filter",set_material:"set_material",get_material:"get_material",get_angDrag:"get_angDrag",get_inertia:"get_inertia",get_area:"get_area",set_localCOM:"set_localCOM",get_localCOM:"get_localCOM",get_worldCOM:"get_worldCOM",get_castPolygon:"get_castPolygon",get_castCircle:"get_castCircle",set_body:"set_body",get_body:"get_body",get_type:"get_type"})
});
var nape_shape_Circle = function(radius,localCOM,material,filter) {
	this.zpp_inner_zn = null;
	nape_shape_Shape.call(this);
	this.zpp_inner_zn = new zpp_$nape_shape_ZPP_$Circle();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	this.zpp_inner.immutable_midstep("Circle::radius");
	if(radius != this.zpp_inner_zn.radius) {
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	this.zpp_inner_zn.radius;
	if(localCOM == null) {
		this.zpp_inner.localCOMx = 0;
		this.zpp_inner.localCOMy = 0;
	} else {
		localCOM.zpp_inner.validate();
		this.zpp_inner.localCOMx = localCOM.zpp_inner.x;
		localCOM.zpp_inner.validate();
		this.zpp_inner.localCOMy = localCOM.zpp_inner.y;
		if(localCOM.zpp_inner.weak) {
			localCOM.dispose();
			true;
		} else false;
	}
	if(material == null) {
		if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) this.zpp_inner.material = new zpp_$nape_phys_ZPP_$Material(); else {
			this.zpp_inner.material = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) this.zpp_inner.filter = new zpp_$nape_dynamics_ZPP_$InteractionFilter(); else {
			this.zpp_inner.filter = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE.zpp_inner);
};
$hxClasses["nape.shape.Circle"] = nape_shape_Circle;
nape_shape_Circle.__name__ = ["nape","shape","Circle"];
nape_shape_Circle.__super__ = nape_shape_Shape;
nape_shape_Circle.prototype = $extend(nape_shape_Shape.prototype,{
	zpp_inner_zn: null
	,get_radius: function() {
		return this.zpp_inner_zn.radius;
	}
	,set_radius: function(radius) {
		this.zpp_inner.immutable_midstep("Circle::radius");
		if(radius != this.zpp_inner_zn.radius) {
			this.zpp_inner_zn.radius = radius;
			this.zpp_inner_zn.invalidate_radius();
		}
		return this.zpp_inner_zn.radius;
	}
	,__class__: nape_shape_Circle
	,__properties__: $extend(nape_shape_Shape.prototype.__properties__,{set_radius:"set_radius",get_radius:"get_radius"})
});
var nape_shape_Edge = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.shape.Edge"] = nape_shape_Edge;
nape_shape_Edge.__name__ = ["nape","shape","Edge"];
nape_shape_Edge.prototype = {
	zpp_inner: null
	,get_polygon: function() {
		return this.zpp_inner.polygon.outer_zn;
	}
	,get_localNormal: function() {
		if(this.zpp_inner.wrap_lnorm == null) this.zpp_inner.getlnorm();
		return this.zpp_inner.wrap_lnorm;
	}
	,get_worldNormal: function() {
		if(this.zpp_inner.wrap_gnorm == null) this.zpp_inner.getgnorm();
		return this.zpp_inner.wrap_gnorm;
	}
	,get_length: function() {
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.length;
	}
	,get_localProjection: function() {
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lprojection;
	}
	,get_worldProjection: function() {
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gprojection;
	}
	,get_localVertex1: function() {
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lp0.wrapper();
	}
	,get_localVertex2: function() {
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lp1.wrapper();
	}
	,get_worldVertex1: function() {
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gp0.wrapper();
	}
	,get_worldVertex2: function() {
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gp1.wrapper();
	}
	,toString: function() {
		if(this.zpp_inner.polygon == null) return "Edge(object-pooled)"; else if(this.zpp_inner.polygon.body == null) {
			this.zpp_inner.polygon.validate_laxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " }";
		} else {
			this.zpp_inner.polygon.validate_gaxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + this.zpp_inner.gnormx + " y: " + this.zpp_inner.gnormy + " }") + " }";
		}
	}
	,__class__: nape_shape_Edge
	,__properties__: {get_worldVertex2:"get_worldVertex2",get_worldVertex1:"get_worldVertex1",get_localVertex2:"get_localVertex2",get_localVertex1:"get_localVertex1",get_worldProjection:"get_worldProjection",get_localProjection:"get_localProjection",get_length:"get_length",get_worldNormal:"get_worldNormal",get_localNormal:"get_localNormal",get_polygon:"get_polygon"}
};
var nape_shape_EdgeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.shape.EdgeIterator"] = nape_shape_EdgeIterator;
nape_shape_EdgeIterator.__name__ = ["nape","shape","EdgeIterator"];
nape_shape_EdgeIterator.get = function(list) {
	var ret;
	if(nape_shape_EdgeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$EdgeList.internal = true;
		var ret1 = new nape_shape_EdgeIterator();
		zpp_$nape_util_ZPP_$EdgeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_EdgeIterator.zpp_pool;
		nape_shape_EdgeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_EdgeIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_shape_EdgeIterator.zpp_pool;
			nape_shape_EdgeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_shape_EdgeIterator
};
var nape_shape_EdgeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$EdgeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.shape.EdgeList"] = nape_shape_EdgeList;
nape_shape_EdgeList.__name__ = ["nape","shape","EdgeList"];
nape_shape_EdgeList.fromArray = function(array) {
	var ret = new nape_shape_EdgeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_shape_EdgeList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) if(index == this.get_length() - 1) index = index; else index = this.get_length() - 2 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_shape_EdgeIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_shape_EdgeList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_shape_EdgeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_shape_EdgeIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_shape_EdgeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape_shape_EdgeIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_shape_EdgeIterator.zpp_pool;
			nape_shape_EdgeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_shape_EdgeList
	,__properties__: {get_length:"get_length"}
};
var nape_shape_Polygon = function(localVerts,material,filter) {
	this.zpp_inner_zn = null;
	nape_shape_Shape.call(this);
	this.zpp_inner_zn = new zpp_$nape_shape_ZPP_$Polygon();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv = localVerts;
		var _g = 0;
		while(_g < lv.length) {
			var vite = lv[_g];
			++_g;
			var x = vite;
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push(nape_geom_Vec2.get((function($this) {
				var $r;
				x.zpp_inner.validate();
				$r = x.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				x.zpp_inner.validate();
				$r = x.zpp_inner.y;
				return $r;
			}(this)),false));
		}
	} else if(js_Boot.__instanceof(localVerts,nape_geom_Vec2List)) {
		var lv1 = localVerts;
		var _g1 = lv1.iterator();
		while(_g1.hasNext()) {
			var x1;
			_g1.zpp_critical = false;
			x1 = _g1.zpp_inner.at(_g1.zpp_i++);
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push(nape_geom_Vec2.get((function($this) {
				var $r;
				x1.zpp_inner.validate();
				$r = x1.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				x1.zpp_inner.validate();
				$r = x1.zpp_inner.y;
				return $r;
			}(this)),false));
		}
	} else if(js_Boot.__instanceof(localVerts,nape_geom_GeomPoly)) {
		var lv2 = localVerts;
		var verts = lv2.zpp_inner.vertices;
		if(verts != null) {
			var vite1 = verts;
			do {
				var x2 = nape_geom_Vec2.get(vite1.x,vite1.y,null);
				vite1 = vite1.next;
				((function($this) {
					var $r;
					if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
					$r = $this.zpp_inner_zn.wrap_lverts;
					return $r;
				}(this))).push(nape_geom_Vec2.get((function($this) {
					var $r;
					x2.zpp_inner.validate();
					$r = x2.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					x2.zpp_inner.validate();
					$r = x2.zpp_inner.y;
					return $r;
				}(this)),false));
				x2.dispose();
			} while(vite1 != verts);
		}
	} else {
	}
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv3 = localVerts;
		var i = 0;
		while(i < lv3.length) {
			var cur = lv3[i];
			if(cur.zpp_inner.weak?(function($this) {
				var $r;
				cur.dispose();
				$r = true;
				return $r;
			}(this)):false) {
				lv3.splice(i,1);
				continue;
			}
			i++;
		}
	} else if(js_Boot.__instanceof(localVerts,nape_geom_Vec2List)) {
		var lv4 = localVerts;
		if(lv4.zpp_inner._validate != null) lv4.zpp_inner._validate();
		var ins = lv4.zpp_inner.inner;
		var pre = null;
		var cur1 = ins.head;
		while(cur1 != null) {
			var x3 = cur1.elt;
			if(x3.outer.zpp_inner.weak) {
				cur1 = ins.erase(pre);
				if(x3.outer.zpp_inner.weak) {
					x3.outer.dispose();
					true;
				} else false;
			} else {
				pre = cur1;
				cur1 = cur1.next;
			}
		}
	}
	if(material == null) {
		if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) this.zpp_inner.material = new zpp_$nape_phys_ZPP_$Material(); else {
			this.zpp_inner.material = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) this.zpp_inner.filter = new zpp_$nape_dynamics_ZPP_$InteractionFilter(); else {
			this.zpp_inner.filter = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE.zpp_inner);
};
$hxClasses["nape.shape.Polygon"] = nape_shape_Polygon;
nape_shape_Polygon.__name__ = ["nape","shape","Polygon"];
nape_shape_Polygon.rect = function(x,y,width,height,weak) {
	if(weak == null) weak = false;
	return [nape_geom_Vec2.get(x,y,weak),nape_geom_Vec2.get(x + width,y,weak),nape_geom_Vec2.get(x + width,y + height,weak),nape_geom_Vec2.get(x,y + height,weak)];
};
nape_shape_Polygon.box = function(width,height,weak) {
	if(weak == null) weak = false;
	return nape_shape_Polygon.rect(-width / 2,-height / 2,width,height,weak);
};
nape_shape_Polygon.regular = function(xRadius,yRadius,edgeCount,angleOffset,weak) {
	if(weak == null) weak = false;
	if(angleOffset == null) angleOffset = 0.0;
	var ret = [];
	var dangle = Math.PI * 2 / edgeCount;
	var _g = 0;
	while(_g < edgeCount) {
		var i = _g++;
		var ang = i * dangle + angleOffset;
		var x = nape_geom_Vec2.get(Math.cos(ang) * xRadius,Math.sin(ang) * yRadius,weak);
		ret.push(x);
	}
	return ret;
};
nape_shape_Polygon.__super__ = nape_shape_Shape;
nape_shape_Polygon.prototype = $extend(nape_shape_Shape.prototype,{
	zpp_inner_zn: null
	,get_localVerts: function() {
		if(this.zpp_inner_zn.wrap_lverts == null) this.zpp_inner_zn.getlverts();
		return this.zpp_inner_zn.wrap_lverts;
	}
	,get_worldVerts: function() {
		if(this.zpp_inner_zn.wrap_gverts == null) this.zpp_inner_zn.getgverts();
		return this.zpp_inner_zn.wrap_gverts;
	}
	,get_edges: function() {
		if(this.zpp_inner_zn.wrap_edges == null) this.zpp_inner_zn.getedges();
		return this.zpp_inner_zn.wrap_edges;
	}
	,validity: function() {
		return this.zpp_inner_zn.valid();
	}
	,__class__: nape_shape_Polygon
	,__properties__: $extend(nape_shape_Shape.prototype.__properties__,{get_edges:"get_edges",get_worldVerts:"get_worldVerts",get_localVerts:"get_localVerts"})
});
var nape_shape_ShapeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.shape.ShapeIterator"] = nape_shape_ShapeIterator;
nape_shape_ShapeIterator.__name__ = ["nape","shape","ShapeIterator"];
nape_shape_ShapeIterator.get = function(list) {
	var ret;
	if(nape_shape_ShapeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ShapeList.internal = true;
		var ret1 = new nape_shape_ShapeIterator();
		zpp_$nape_util_ZPP_$ShapeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_ShapeIterator.zpp_pool;
		nape_shape_ShapeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_ShapeIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape_shape_ShapeIterator.zpp_pool;
			nape_shape_ShapeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_shape_ShapeIterator
};
var nape_shape_ShapeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ShapeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.shape.ShapeList"] = nape_shape_ShapeList;
nape_shape_ShapeList.__name__ = ["nape","shape","ShapeList"];
nape_shape_ShapeList.fromArray = function(array) {
	var ret = new nape_shape_ShapeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_shape_ShapeList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) if(this.zpp_inner.inner.head == null) this.zpp_inner.push_ite = null; else this.zpp_inner.push_ite = this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite;
			if(this.get_length() == 1) ite = null; else ite = this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) ret = this.zpp_inner.inner.head.elt; else ret = ite.next.elt;
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx2 = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) return this.push(obj); else return this.unshift(obj);
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_shape_ShapeIterator.get(this);
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape_shape_ShapeList();
		var _g;
		this.zpp_inner.valmod();
		_g = nape_shape_ShapeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			ret.push(deep?null:i);
		}
		return ret;
	}
	,merge: function(xs) {
		var _g;
		xs.zpp_inner.valmod();
		_g = nape_shape_ShapeIterator.get(xs);
		while(_g.hasNext()) {
			var x;
			_g.zpp_critical = false;
			x = _g.zpp_inner.at(_g.zpp_i++);
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g;
		this.zpp_inner.valmod();
		_g = nape_shape_ShapeIterator.get(this);
		while(_g.hasNext()) {
			var i;
			_g.zpp_critical = false;
			i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) ret += ",";
			if(i == null) ret += "NULL"; else ret += i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it;
		this.zpp_inner.valmod();
		it = nape_shape_ShapeIterator.get(this);
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			it.zpp_next = nape_shape_ShapeIterator.zpp_pool;
			nape_shape_ShapeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,filter: function(lambda) {
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				break;
			}
		}
		return this;
	}
	,__class__: nape_shape_ShapeList
	,__properties__: {get_length:"get_length"}
};
var nape_shape_ShapeType = function() {
};
$hxClasses["nape.shape.ShapeType"] = nape_shape_ShapeType;
nape_shape_ShapeType.__name__ = ["nape","shape","ShapeType"];
nape_shape_ShapeType.__properties__ = {get_POLYGON:"get_POLYGON",get_CIRCLE:"get_CIRCLE"}
nape_shape_ShapeType.get_CIRCLE = function() {
	if(zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE = new nape_shape_ShapeType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE;
};
nape_shape_ShapeType.get_POLYGON = function() {
	if(zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON = new nape_shape_ShapeType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON;
};
nape_shape_ShapeType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE = new nape_shape_ShapeType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE;
			return $r;
		}(this))) return "CIRCLE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON = new nape_shape_ShapeType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON;
			return $r;
		}(this))) return "POLYGON"; else return "";
	}
	,__class__: nape_shape_ShapeType
};
var nape_shape_ValidationResult = function() {
};
$hxClasses["nape.shape.ValidationResult"] = nape_shape_ValidationResult;
nape_shape_ValidationResult.__name__ = ["nape","shape","ValidationResult"];
nape_shape_ValidationResult.__properties__ = {get_SELF_INTERSECTING:"get_SELF_INTERSECTING",get_CONCAVE:"get_CONCAVE",get_DEGENERATE:"get_DEGENERATE",get_VALID:"get_VALID"}
nape_shape_ValidationResult.get_VALID = function() {
	if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
};
nape_shape_ValidationResult.get_DEGENERATE = function() {
	if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE;
};
nape_shape_ValidationResult.get_CONCAVE = function() {
	if(zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = new nape_shape_ValidationResult();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE;
};
nape_shape_ValidationResult.get_SELF_INTERSECTING = function() {
	if(zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = new nape_shape_ValidationResult();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING;
};
nape_shape_ValidationResult.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
			return $r;
		}(this))) return "VALID"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE;
			return $r;
		}(this))) return "DEGENERATE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = new nape_shape_ValidationResult();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE;
			return $r;
		}(this))) return "CONCAVE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = new nape_shape_ValidationResult();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING;
			return $r;
		}(this))) return "SELF_INTERSECTING"; else return "";
	}
	,__class__: nape_shape_ValidationResult
};
var nape_space_Broadphase = function() {
};
$hxClasses["nape.space.Broadphase"] = nape_space_Broadphase;
nape_space_Broadphase.__name__ = ["nape","space","Broadphase"];
nape_space_Broadphase.__properties__ = {get_SWEEP_AND_PRUNE:"get_SWEEP_AND_PRUNE",get_DYNAMIC_AABB_TREE:"get_DYNAMIC_AABB_TREE"}
nape_space_Broadphase.get_DYNAMIC_AABB_TREE = function() {
	if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE;
};
nape_space_Broadphase.get_SWEEP_AND_PRUNE = function() {
	if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE;
};
nape_space_Broadphase.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE;
			return $r;
		}(this))) return "DYNAMIC_AABB_TREE"; else if(this == (function($this) {
			var $r;
			if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			$r = zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE;
			return $r;
		}(this))) return "SWEEP_AND_PRUNE"; else return "";
	}
	,__class__: nape_space_Broadphase
};
var nape_space_Space = function(gravity,broadphase) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_space_ZPP_$Space(gravity == null?null:gravity.zpp_inner,broadphase);
	this.zpp_inner.outer = this;
	if(gravity != null) {
		if(gravity.zpp_inner.weak) {
			gravity.dispose();
			true;
		} else false;
	}
};
$hxClasses["nape.space.Space"] = nape_space_Space;
nape_space_Space.__name__ = ["nape","space","Space"];
nape_space_Space.prototype = {
	zpp_inner: null
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,get_gravity: function() {
		if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
		return this.zpp_inner.wrap_gravity;
	}
	,set_gravity: function(gravity) {
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_gravity == null) $this.zpp_inner.getgravity();
			$r = $this.zpp_inner.wrap_gravity;
			return $r;
		}(this))).set(gravity);
		if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
		return this.zpp_inner.wrap_gravity;
	}
	,get_broadphase: function() {
		if(this.zpp_inner.bphase.is_sweep) {
			if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE;
		}
	}
	,get_sortContacts: function() {
		return this.zpp_inner.sortcontacts;
	}
	,set_sortContacts: function(sortContacts) {
		this.zpp_inner.sortcontacts = sortContacts;
		return this.zpp_inner.sortcontacts;
	}
	,get_worldAngularDrag: function() {
		return this.zpp_inner.global_ang_drag;
	}
	,set_worldAngularDrag: function(worldAngularDrag) {
		var d = worldAngularDrag;
		this.zpp_inner.global_ang_drag = d;
		return this.zpp_inner.global_ang_drag;
	}
	,get_worldLinearDrag: function() {
		return this.zpp_inner.global_lin_drag;
	}
	,set_worldLinearDrag: function(worldLinearDrag) {
		var d = worldLinearDrag;
		this.zpp_inner.global_lin_drag = d;
		return this.zpp_inner.global_lin_drag;
	}
	,get_compounds: function() {
		return this.zpp_inner.wrap_compounds;
	}
	,get_bodies: function() {
		return this.zpp_inner.wrap_bodies;
	}
	,get_liveBodies: function() {
		return this.zpp_inner.wrap_live;
	}
	,get_constraints: function() {
		return this.zpp_inner.wrap_constraints;
	}
	,get_liveConstraints: function() {
		return this.zpp_inner.wrap_livecon;
	}
	,visitBodies: function(lambda) {
		var _g = this.zpp_inner.wrap_bodies.iterator();
		while(_g.hasNext()) {
			var b;
			_g.zpp_critical = false;
			b = _g.zpp_inner.at(_g.zpp_i++);
			lambda(b);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c;
			_g1.zpp_critical = false;
			c = _g1.zpp_inner.at(_g1.zpp_i++);
			c.visitBodies(lambda);
		}
	}
	,visitConstraints: function(lambda) {
		var _g = this.zpp_inner.wrap_constraints.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
		}
		var _g1 = this.zpp_inner.wrap_compounds.iterator();
		while(_g1.hasNext()) {
			var c1;
			_g1.zpp_critical = false;
			c1 = _g1.zpp_inner.at(_g1.zpp_i++);
			c1.visitConstraints(lambda);
		}
	}
	,visitCompounds: function(lambda) {
		var _g = this.zpp_inner.wrap_compounds.iterator();
		while(_g.hasNext()) {
			var c;
			_g.zpp_critical = false;
			c = _g.zpp_inner.at(_g.zpp_i++);
			lambda(c);
			c.visitCompounds(lambda);
		}
	}
	,get_world: function() {
		return this.zpp_inner.__static;
	}
	,get_arbiters: function() {
		if(this.zpp_inner.wrap_arbiters == null) {
			var ret = new zpp_$nape_dynamics_ZPP_$SpaceArbiterList();
			ret.space = this.zpp_inner;
			this.zpp_inner.wrap_arbiters = ret;
		}
		return this.zpp_inner.wrap_arbiters;
	}
	,get_listeners: function() {
		return this.zpp_inner.wrap_listeners;
	}
	,clear: function() {
		this.zpp_inner.clear();
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		if(positionIterations == null) positionIterations = 10;
		if(velocityIterations == null) velocityIterations = 10;
		this.zpp_inner.step(deltaTime,velocityIterations,positionIterations);
	}
	,get_timeStamp: function() {
		return this.zpp_inner.stamp;
	}
	,get_elapsedTime: function() {
		return this.zpp_inner.time;
	}
	,interactionType: function(shape1,shape2) {
		if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null).zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null).zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) return null;
		if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null)) return null;
		var s1 = shape1.zpp_inner;
		var s2 = shape2.zpp_inner;
		var _g = this.zpp_inner.interactionType(s1,s2,s1.body,s2.body);
		switch(_g) {
		case 0:
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
		case 1:
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
		case 2:
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			return zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
		default:
			return null;
		}
	}
	,shapesUnderPoint: function(point,filter,output) {
		var ret = this.zpp_inner.shapesUnderPoint((function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)),filter == null?null:filter.zpp_inner,output);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,bodiesUnderPoint: function(point,filter,output) {
		var ret = this.zpp_inner.bodiesUnderPoint((function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)),filter == null?null:filter.zpp_inner,output);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,shapesInAABB: function(aabb,containment,strict,filter,output) {
		if(strict == null) strict = true;
		if(containment == null) containment = false;
		return this.zpp_inner.shapesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
	}
	,bodiesInAABB: function(aabb,containment,strict,filter,output) {
		if(strict == null) strict = true;
		if(containment == null) containment = false;
		return this.zpp_inner.bodiesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
	}
	,shapesInCircle: function(position,radius,containment,filter,output) {
		if(containment == null) containment = false;
		var ret = this.zpp_inner.shapesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
		return ret;
	}
	,bodiesInCircle: function(position,radius,containment,filter,output) {
		if(containment == null) containment = false;
		var ret = this.zpp_inner.bodiesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
		return ret;
	}
	,shapesInShape: function(shape,containment,filter,output) {
		if(containment == null) containment = false;
		return this.zpp_inner.shapesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		if(containment == null) containment = false;
		return this.zpp_inner.bodiesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
	}
	,shapesInBody: function(body,filter,output) {
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		var _g = body.zpp_inner.wrap_shapes.iterator();
		while(_g.hasNext()) {
			var shape;
			_g.zpp_critical = false;
			shape = _g.zpp_inner.at(_g.zpp_i++);
			var cur = this.shapesInShape(shape,false,filter,ret);
		}
		return ret;
	}
	,bodiesInBody: function(body,filter,output) {
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		var _g = body.zpp_inner.wrap_shapes.iterator();
		while(_g.hasNext()) {
			var shape;
			_g.zpp_critical = false;
			shape = _g.zpp_inner.at(_g.zpp_i++);
			var cur = this.bodiesInShape(shape,false,filter,ret);
		}
		return ret;
	}
	,convexCast: function(shape,deltaTime,liveSweep,filter) {
		if(liveSweep == null) liveSweep = false;
		return this.zpp_inner.convexCast(shape.zpp_inner,deltaTime,filter,liveSweep);
	}
	,convexMultiCast: function(shape,deltaTime,liveSweep,filter,output) {
		if(liveSweep == null) liveSweep = false;
		return this.zpp_inner.convexMultiCast(shape.zpp_inner,deltaTime,filter,liveSweep,output);
	}
	,rayCast: function(ray,inner,filter) {
		if(inner == null) inner = false;
		return this.zpp_inner.rayCast(ray,inner,filter);
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		if(inner == null) inner = false;
		return this.zpp_inner.rayMultiCast(ray,inner,filter,output);
	}
	,__class__: nape_space_Space
	,__properties__: {get_elapsedTime:"get_elapsedTime",get_timeStamp:"get_timeStamp",get_listeners:"get_listeners",get_arbiters:"get_arbiters",get_world:"get_world",get_liveConstraints:"get_liveConstraints",get_constraints:"get_constraints",get_liveBodies:"get_liveBodies",get_bodies:"get_bodies",get_compounds:"get_compounds",set_worldLinearDrag:"set_worldLinearDrag",get_worldLinearDrag:"get_worldLinearDrag",set_worldAngularDrag:"set_worldAngularDrag",get_worldAngularDrag:"get_worldAngularDrag",set_sortContacts:"set_sortContacts",get_sortContacts:"get_sortContacts",get_broadphase:"get_broadphase",set_gravity:"set_gravity",get_gravity:"get_gravity",get_userData:"get_userData"}
};
var nape_util_Debug = function() {
	this.cullingEnabled = false;
	this.colour = null;
	this.drawConstraints = false;
	this.drawShapeAngleIndicators = false;
	this.drawShapeDetail = false;
	this.drawBodyDetail = false;
	this.drawBodies = false;
	this.drawSensorArbiters = false;
	this.drawFluidArbiters = false;
	this.drawCollisionArbiters = false;
	this.zpp_inner = null;
	this.drawCollisionArbiters = false;
	this.drawFluidArbiters = false;
	this.drawSensorArbiters = false;
	this.drawBodies = true;
	this.drawShapeAngleIndicators = true;
	this.drawBodyDetail = false;
	this.drawShapeDetail = false;
	this.drawConstraints = false;
	this.cullingEnabled = false;
	this.colour = null;
};
$hxClasses["nape.util.Debug"] = nape_util_Debug;
nape_util_Debug.__name__ = ["nape","util","Debug"];
nape_util_Debug.version = function() {
	return "Nape 2.0.19";
};
nape_util_Debug.clearObjectPools = function() {
	while(nape_constraint_ConstraintIterator.zpp_pool != null) {
		var nxt = nape_constraint_ConstraintIterator.zpp_pool.zpp_next;
		nape_constraint_ConstraintIterator.zpp_pool.zpp_next = null;
		nape_constraint_ConstraintIterator.zpp_pool = nxt;
	}
	while(nape_phys_InteractorIterator.zpp_pool != null) {
		var nxt1 = nape_phys_InteractorIterator.zpp_pool.zpp_next;
		nape_phys_InteractorIterator.zpp_pool.zpp_next = null;
		nape_phys_InteractorIterator.zpp_pool = nxt1;
	}
	while(nape_phys_BodyIterator.zpp_pool != null) {
		var nxt2 = nape_phys_BodyIterator.zpp_pool.zpp_next;
		nape_phys_BodyIterator.zpp_pool.zpp_next = null;
		nape_phys_BodyIterator.zpp_pool = nxt2;
	}
	while(nape_phys_CompoundIterator.zpp_pool != null) {
		var nxt3 = nape_phys_CompoundIterator.zpp_pool.zpp_next;
		nape_phys_CompoundIterator.zpp_pool.zpp_next = null;
		nape_phys_CompoundIterator.zpp_pool = nxt3;
	}
	while(nape_callbacks_ListenerIterator.zpp_pool != null) {
		var nxt4 = nape_callbacks_ListenerIterator.zpp_pool.zpp_next;
		nape_callbacks_ListenerIterator.zpp_pool.zpp_next = null;
		nape_callbacks_ListenerIterator.zpp_pool = nxt4;
	}
	while(nape_callbacks_CbTypeIterator.zpp_pool != null) {
		var nxt5 = nape_callbacks_CbTypeIterator.zpp_pool.zpp_next;
		nape_callbacks_CbTypeIterator.zpp_pool.zpp_next = null;
		nape_callbacks_CbTypeIterator.zpp_pool = nxt5;
	}
	while(nape_geom_ConvexResultIterator.zpp_pool != null) {
		var nxt6 = nape_geom_ConvexResultIterator.zpp_pool.zpp_next;
		nape_geom_ConvexResultIterator.zpp_pool.zpp_next = null;
		nape_geom_ConvexResultIterator.zpp_pool = nxt6;
	}
	while(nape_geom_GeomPolyIterator.zpp_pool != null) {
		var nxt7 = nape_geom_GeomPolyIterator.zpp_pool.zpp_next;
		nape_geom_GeomPolyIterator.zpp_pool.zpp_next = null;
		nape_geom_GeomPolyIterator.zpp_pool = nxt7;
	}
	while(nape_geom_Vec2Iterator.zpp_pool != null) {
		var nxt8 = nape_geom_Vec2Iterator.zpp_pool.zpp_next;
		nape_geom_Vec2Iterator.zpp_pool.zpp_next = null;
		nape_geom_Vec2Iterator.zpp_pool = nxt8;
	}
	while(nape_geom_RayResultIterator.zpp_pool != null) {
		var nxt9 = nape_geom_RayResultIterator.zpp_pool.zpp_next;
		nape_geom_RayResultIterator.zpp_pool.zpp_next = null;
		nape_geom_RayResultIterator.zpp_pool = nxt9;
	}
	while(nape_shape_ShapeIterator.zpp_pool != null) {
		var nxt10 = nape_shape_ShapeIterator.zpp_pool.zpp_next;
		nape_shape_ShapeIterator.zpp_pool.zpp_next = null;
		nape_shape_ShapeIterator.zpp_pool = nxt10;
	}
	while(nape_shape_EdgeIterator.zpp_pool != null) {
		var nxt11 = nape_shape_EdgeIterator.zpp_pool.zpp_next;
		nape_shape_EdgeIterator.zpp_pool.zpp_next = null;
		nape_shape_EdgeIterator.zpp_pool = nxt11;
	}
	while(nape_dynamics_ContactIterator.zpp_pool != null) {
		var nxt12 = nape_dynamics_ContactIterator.zpp_pool.zpp_next;
		nape_dynamics_ContactIterator.zpp_pool.zpp_next = null;
		nape_dynamics_ContactIterator.zpp_pool = nxt12;
	}
	while(nape_dynamics_ArbiterIterator.zpp_pool != null) {
		var nxt13 = nape_dynamics_ArbiterIterator.zpp_pool.zpp_next;
		nape_dynamics_ArbiterIterator.zpp_pool.zpp_next = null;
		nape_dynamics_ArbiterIterator.zpp_pool = nxt13;
	}
	while(nape_dynamics_InteractionGroupIterator.zpp_pool != null) {
		var nxt14 = nape_dynamics_InteractionGroupIterator.zpp_pool.zpp_next;
		nape_dynamics_InteractionGroupIterator.zpp_pool.zpp_next = null;
		nape_dynamics_InteractionGroupIterator.zpp_pool = nxt14;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool != null) {
		var nxt15 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = nxt15;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool != null) {
		var nxt16 = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = nxt16;
	}
	while(zpp_$nape_phys_ZPP_$Material.zpp_pool != null) {
		var nxt17 = zpp_$nape_phys_ZPP_$Material.zpp_pool.next;
		zpp_$nape_phys_ZPP_$Material.zpp_pool.next = null;
		zpp_$nape_phys_ZPP_$Material.zpp_pool = nxt17;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool != null) {
		var nxt18 = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = nxt18;
	}
	while(zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool != null) {
		var nxt19 = zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool.next;
		zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool.next = null;
		zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool = nxt19;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool != null) {
		var nxt20 = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = nxt20;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool != null) {
		var nxt21 = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = nxt21;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool != null) {
		var nxt22 = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = nxt22;
	}
	while(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool != null) {
		var nxt23 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool.next;
		zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool.next = null;
		zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = nxt23;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool != null) {
		var nxt24 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = nxt24;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool != null) {
		var nxt25 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = nxt25;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool != null) {
		var nxt26 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = nxt26;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool != null) {
		var nxt27 = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = nxt27;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool != null) {
		var nxt28 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = nxt28;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool != null) {
		var nxt29 = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = nxt29;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool != null) {
		var nxt30 = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = nxt30;
	}
	while(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool != null) {
		var nxt31 = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool.next;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool.next = null;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = nxt31;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool != null) {
		var nxt32 = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = nxt32;
	}
	while(zpp_$nape_callbacks_ZPP_$Callback.zpp_pool != null) {
		var nxt33 = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool.next;
		zpp_$nape_callbacks_ZPP_$Callback.zpp_pool.next = null;
		zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = nxt33;
	}
	while(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool != null) {
		var nxt34 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool.next;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = nxt34;
	}
	while(zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool != null) {
		var nxt35 = zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool.next;
		zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool = nxt35;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool != null) {
		var nxt36 = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = nxt36;
	}
	while(zpp_$nape_geom_ZPP_$Mat23.zpp_pool != null) {
		var nxt37 = zpp_$nape_geom_ZPP_$Mat23.zpp_pool.next;
		zpp_$nape_geom_ZPP_$Mat23.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$Mat23.zpp_pool = nxt37;
	}
	while(zpp_$nape_geom_ZPP_$CutVert.zpp_pool != null) {
		var nxt38 = zpp_$nape_geom_ZPP_$CutVert.zpp_pool.next;
		zpp_$nape_geom_ZPP_$CutVert.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$CutVert.zpp_pool = nxt38;
	}
	while(zpp_$nape_geom_ZPP_$CutInt.zpp_pool != null) {
		var nxt39 = zpp_$nape_geom_ZPP_$CutInt.zpp_pool.next;
		zpp_$nape_geom_ZPP_$CutInt.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$CutInt.zpp_pool = nxt39;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool != null) {
		var nxt40 = zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool = nxt40;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool != null) {
		var nxt41 = zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool = nxt41;
	}
	while(zpp_$nape_geom_ZPP_$Vec2.zpp_pool != null) {
		var nxt42 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool.next;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = nxt42;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool != null) {
		var nxt43 = zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool = nxt43;
	}
	while(zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool != null) {
		var nxt44 = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool.next;
		zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = nxt44;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool != null) {
		var nxt45 = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = nxt45;
	}
	while(zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool != null) {
		var nxt46 = zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool.next;
		zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool = nxt46;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool != null) {
		var nxt47 = zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool = nxt47;
	}
	while(zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool != null) {
		var nxt48 = zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool.next;
		zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool = nxt48;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool != null) {
		var nxt49 = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = nxt49;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool != null) {
		var nxt50 = zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool = nxt50;
	}
	while(zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool != null) {
		var nxt51 = zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool.next;
		zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool = nxt51;
	}
	while(zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool != null) {
		var nxt52 = zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool.next;
		zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool = nxt52;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool != null) {
		var nxt53 = zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool = nxt53;
	}
	while(zpp_$nape_geom_ZPP_$AABB.zpp_pool != null) {
		var nxt54 = zpp_$nape_geom_ZPP_$AABB.zpp_pool.next;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = nxt54;
	}
	while(zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool != null) {
		var nxt55 = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool.next;
		zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = nxt55;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool != null) {
		var nxt56 = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = nxt56;
	}
	while(zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool != null) {
		var nxt57 = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool.next;
		zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = nxt57;
	}
	while(zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool != null) {
		var nxt58 = zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool.next;
		zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool = nxt58;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool != null) {
		var nxt59 = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = nxt59;
	}
	while(zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool != null) {
		var nxt60 = zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool.next;
		zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool = nxt60;
	}
	while(zpp_$nape_geom_ZPP_$MarchPair.zpp_pool != null) {
		var nxt61 = zpp_$nape_geom_ZPP_$MarchPair.zpp_pool.next;
		zpp_$nape_geom_ZPP_$MarchPair.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$MarchPair.zpp_pool = nxt61;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool != null) {
		var nxt62 = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = nxt62;
	}
	while(zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool != null) {
		var nxt63 = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool.next;
		zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool.next = null;
		zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = nxt63;
	}
	while(zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool != null) {
		var nxt64 = zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool.next;
		zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool.next = null;
		zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool = nxt64;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool != null) {
		var nxt65 = zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool = nxt65;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool != null) {
		var nxt66 = zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool = nxt66;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool != null) {
		var nxt67 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = nxt67;
	}
	while(zpp_$nape_shape_ZPP_$Edge.zpp_pool != null) {
		var nxt68 = zpp_$nape_shape_ZPP_$Edge.zpp_pool.next;
		zpp_$nape_shape_ZPP_$Edge.zpp_pool.next = null;
		zpp_$nape_shape_ZPP_$Edge.zpp_pool = nxt68;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool != null) {
		var nxt69 = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = nxt69;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool != null) {
		var nxt70 = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = nxt70;
	}
	while(zpp_$nape_space_ZPP_$SweepData.zpp_pool != null) {
		var nxt71 = zpp_$nape_space_ZPP_$SweepData.zpp_pool.next;
		zpp_$nape_space_ZPP_$SweepData.zpp_pool.next = null;
		zpp_$nape_space_ZPP_$SweepData.zpp_pool = nxt71;
	}
	while(zpp_$nape_space_ZPP_$AABBNode.zpp_pool != null) {
		var nxt72 = zpp_$nape_space_ZPP_$AABBNode.zpp_pool.next;
		zpp_$nape_space_ZPP_$AABBNode.zpp_pool.next = null;
		zpp_$nape_space_ZPP_$AABBNode.zpp_pool = nxt72;
	}
	while(zpp_$nape_space_ZPP_$AABBPair.zpp_pool != null) {
		var nxt73 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool.next;
		zpp_$nape_space_ZPP_$AABBPair.zpp_pool.next = null;
		zpp_$nape_space_ZPP_$AABBPair.zpp_pool = nxt73;
	}
	while(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool != null) {
		var nxt74 = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool.next;
		zpp_$nape_dynamics_ZPP_$Contact.zpp_pool.next = null;
		zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = nxt74;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool != null) {
		var nxt75 = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = nxt75;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool != null) {
		var nxt76 = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool = nxt76;
	}
	while(zpp_$nape_space_ZPP_$Island.zpp_pool != null) {
		var nxt77 = zpp_$nape_space_ZPP_$Island.zpp_pool.next;
		zpp_$nape_space_ZPP_$Island.zpp_pool.next = null;
		zpp_$nape_space_ZPP_$Island.zpp_pool = nxt77;
	}
	while(zpp_$nape_space_ZPP_$Component.zpp_pool != null) {
		var nxt78 = zpp_$nape_space_ZPP_$Component.zpp_pool.next;
		zpp_$nape_space_ZPP_$Component.zpp_pool.next = null;
		zpp_$nape_space_ZPP_$Component.zpp_pool = nxt78;
	}
	while(zpp_$nape_space_ZPP_$CallbackSet.zpp_pool != null) {
		var nxt79 = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool.next;
		zpp_$nape_space_ZPP_$CallbackSet.zpp_pool.next = null;
		zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = nxt79;
	}
	while(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool != null) {
		var nxt80 = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool.next;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool.next = null;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = nxt80;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool != null) {
		var nxt81 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool = nxt81;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool != null) {
		var nxt82 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = nxt82;
	}
	while(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool != null) {
		var nxt83 = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool.next;
		zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool.next = null;
		zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = nxt83;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool != null) {
		var nxt84 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = nxt84;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool != null) {
		var nxt85 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = nxt85;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool != null) {
		var nxt86 = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = nxt86;
	}
	while(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool != null) {
		var nxt87 = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool.next;
		zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool.next = null;
		zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = nxt87;
	}
	while(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool != null) {
		var nxt88 = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool.next;
		zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool.next = null;
		zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = nxt88;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool != null) {
		var nxt89 = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = nxt89;
	}
	while(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool != null) {
		var nxt90 = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool.next;
		zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool.next = null;
		zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = nxt90;
	}
	while(zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool != null) {
		var nxt91 = zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool = nxt91;
	}
	while(zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool != null) {
		var nxt92 = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool = nxt92;
	}
	while(zpp_$nape_util_ZNPNode_$RayResult.zpp_pool != null) {
		var nxt93 = zpp_$nape_util_ZNPNode_$RayResult.zpp_pool.next;
		zpp_$nape_util_ZNPNode_$RayResult.zpp_pool.next = null;
		zpp_$nape_util_ZNPNode_$RayResult.zpp_pool = nxt93;
	}
	while(zpp_$nape_util_ZPP_$PubPool.poolGeomPoly != null) {
		var nxt94 = zpp_$nape_util_ZPP_$PubPool.poolGeomPoly.zpp_pool;
		zpp_$nape_util_ZPP_$PubPool.poolGeomPoly.zpp_pool = null;
		zpp_$nape_util_ZPP_$PubPool.poolGeomPoly = nxt94;
	}
	while(zpp_$nape_util_ZPP_$PubPool.poolVec2 != null) {
		var nxt95 = zpp_$nape_util_ZPP_$PubPool.poolVec2.zpp_pool;
		zpp_$nape_util_ZPP_$PubPool.poolVec2.zpp_pool = null;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = nxt95;
	}
	while(zpp_$nape_util_ZPP_$PubPool.poolVec3 != null) {
		var nxt96 = zpp_$nape_util_ZPP_$PubPool.poolVec3.zpp_pool;
		zpp_$nape_util_ZPP_$PubPool.poolVec3.zpp_pool = null;
		zpp_$nape_util_ZPP_$PubPool.poolVec3 = nxt96;
	}
};
nape_util_Debug.createGraphic = function(body) {
	var ret = new openfl_display_Shape();
	var graphics = ret.get_graphics();
	var idc = Std["int"](16777215 * Math.exp(-body.zpp_inner_i.id / 1500));
	var _r = ((idc & 16711680) >> 16) * 0.7;
	var _g = ((idc & 65280) >> 8) * 0.7;
	var _b = (idc & 255) * 0.7;
	var col = (_r | 0) << 16 | (_g | 0) << 8 | (_b | 0);
	graphics.lineStyle(0.1,col,1);
	var _g1 = body.zpp_inner.wrap_shapes.iterator();
	while(_g1.hasNext()) {
		var s;
		_g1.zpp_critical = false;
		s = _g1.zpp_inner.at(_g1.zpp_i++);
		if(s.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
			var c;
			if(s.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) c = s.zpp_inner.circle.outer_zn; else c = null;
			graphics.drawCircle(((function($this) {
				var $r;
				if(c.zpp_inner.wrap_localCOM == null) {
					if(c.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) c.zpp_inner.circle.setupLocalCOM(); else c.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_x(),((function($this) {
				var $r;
				if(c.zpp_inner.wrap_localCOM == null) {
					if(c.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) c.zpp_inner.circle.setupLocalCOM(); else c.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_y(),c.zpp_inner_zn.radius);
		} else {
			var p;
			if(s.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) p = s.zpp_inner.polygon.outer_zn; else p = null;
			graphics.moveTo(((function($this) {
				var $r;
				if(s.zpp_inner.wrap_localCOM == null) {
					if(s.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.zpp_inner.circle.setupLocalCOM(); else s.zpp_inner.polygon.setupLocalCOM();
				}
				$r = s.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_x(),((function($this) {
				var $r;
				if(s.zpp_inner.wrap_localCOM == null) {
					if(s.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.zpp_inner.circle.setupLocalCOM(); else s.zpp_inner.polygon.setupLocalCOM();
				}
				$r = s.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_y());
			var _g11 = 0;
			var _g2 = ((function($this) {
				var $r;
				if(p.zpp_inner_zn.wrap_gverts == null) p.zpp_inner_zn.getgverts();
				$r = p.zpp_inner_zn.wrap_gverts;
				return $r;
			}(this))).get_length();
			while(_g11 < _g2) {
				var i = _g11++;
				var px1 = ((function($this) {
					var $r;
					if(p.zpp_inner_zn.wrap_lverts == null) p.zpp_inner_zn.getlverts();
					$r = p.zpp_inner_zn.wrap_lverts;
					return $r;
				}(this))).at(i);
				graphics.lineTo((function($this) {
					var $r;
					px1.zpp_inner.validate();
					$r = px1.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					px1.zpp_inner.validate();
					$r = px1.zpp_inner.y;
					return $r;
				}(this)));
			}
			var px = ((function($this) {
				var $r;
				if(p.zpp_inner_zn.wrap_lverts == null) p.zpp_inner_zn.getlverts();
				$r = p.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).at(0);
			graphics.lineTo((function($this) {
				var $r;
				px.zpp_inner.validate();
				$r = px.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				px.zpp_inner.validate();
				$r = px.zpp_inner.y;
				return $r;
			}(this)));
		}
		if(s.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
			var c1;
			if(s.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) c1 = s.zpp_inner.circle.outer_zn; else c1 = null;
			graphics.moveTo(((function($this) {
				var $r;
				if(c1.zpp_inner.wrap_localCOM == null) {
					if(c1.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) c1.zpp_inner.circle.setupLocalCOM(); else c1.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c1.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_x() + c1.zpp_inner_zn.radius * 0.3,((function($this) {
				var $r;
				if(c1.zpp_inner.wrap_localCOM == null) {
					if(c1.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) c1.zpp_inner.circle.setupLocalCOM(); else c1.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c1.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_y());
			graphics.lineTo(((function($this) {
				var $r;
				if(c1.zpp_inner.wrap_localCOM == null) {
					if(c1.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) c1.zpp_inner.circle.setupLocalCOM(); else c1.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c1.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_x() + c1.zpp_inner_zn.radius,((function($this) {
				var $r;
				if(c1.zpp_inner.wrap_localCOM == null) {
					if(c1.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) c1.zpp_inner.circle.setupLocalCOM(); else c1.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c1.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).get_y());
		}
	}
	return ret;
};
nape_util_Debug.prototype = {
	zpp_inner: null
	,drawCollisionArbiters: null
	,drawFluidArbiters: null
	,drawSensorArbiters: null
	,drawBodies: null
	,drawBodyDetail: null
	,drawShapeDetail: null
	,drawShapeAngleIndicators: null
	,drawConstraints: null
	,get_bgColour: function() {
		return this.zpp_inner.bg_col;
	}
	,set_bgColour: function(bgColour) {
		this.zpp_inner.d_shape.setbg(bgColour);
		return this.zpp_inner.bg_col;
	}
	,colour: null
	,get_display: function() {
		return this.zpp_inner.d_shape.shape;
	}
	,cullingEnabled: null
	,get_transform: function() {
		if(this.zpp_inner.xform == null) this.zpp_inner.setform();
		return this.zpp_inner.xform.outer;
	}
	,set_transform: function(transform) {
		((function($this) {
			var $r;
			if($this.zpp_inner.xform == null) $this.zpp_inner.setform();
			$r = $this.zpp_inner.xform.outer;
			return $r;
		}(this))).set(transform);
		if(this.zpp_inner.xform == null) this.zpp_inner.setform();
		return this.zpp_inner.xform.outer;
	}
	,clear: function() {
	}
	,flush: function() {
	}
	,draw: function(object) {
	}
	,drawLine: function(start,end,colour) {
	}
	,drawCurve: function(start,control,end,colour) {
	}
	,drawCircle: function(position,radius,colour) {
	}
	,drawAABB: function(aabb,colour) {
	}
	,drawFilledTriangle: function(p0,p1,p2,colour) {
	}
	,drawFilledCircle: function(position,radius,colour) {
	}
	,drawPolygon: function(polygon,colour) {
	}
	,drawFilledPolygon: function(polygon,colour) {
	}
	,drawSpring: function(start,end,colour,coils,radius) {
		if(radius == null) radius = 3.0;
		if(coils == null) coils = 3;
	}
	,__class__: nape_util_Debug
	,__properties__: {set_transform:"set_transform",get_transform:"get_transform",get_display:"get_display",set_bgColour:"set_bgColour",get_bgColour:"get_bgColour"}
};
var nape_util_ShapeDebug = function(width,height,bgColour) {
	if(bgColour == null) bgColour = 3355443;
	this.thickness = 0.0;
	this.zpp_inner_zn = null;
	nape_util_Debug.call(this);
	this.zpp_inner_zn = new zpp_$nape_util_ZPP_$ShapeDebug(width,height);
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner.d_shape.setbg(bgColour);
	this.zpp_inner.bg_col;
	this.thickness = 0.1;
};
$hxClasses["nape.util.ShapeDebug"] = nape_util_ShapeDebug;
nape_util_ShapeDebug.__name__ = ["nape","util","ShapeDebug"];
nape_util_ShapeDebug.__super__ = nape_util_Debug;
nape_util_ShapeDebug.prototype = $extend(nape_util_Debug.prototype,{
	zpp_inner_zn: null
	,thickness: null
	,clear: function() {
		this.zpp_inner_zn.graphics.clear();
	}
	,drawLine: function(start,end,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(this.thickness,colour & 16777215,1);
		if(this.zpp_inner.xnull) {
			g.moveTo((function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				end.zpp_inner.validate();
				$r = end.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				end.zpp_inner.validate();
				$r = end.zpp_inner.y;
				return $r;
			}(this)));
			if(start.zpp_inner.weak) {
				start.dispose();
				true;
			} else false;
			if(end.zpp_inner.weak) {
				end.dispose();
				true;
			} else false;
		} else {
			var v = this.zpp_inner.xform.outer.transform(start);
			g.moveTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			v.dispose();
			v = this.zpp_inner.xform.outer.transform(end);
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			v.dispose();
		}
	}
	,drawCurve: function(start,control,end,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(this.thickness,colour & 16777215,1);
		if(this.zpp_inner.xnull) {
			g.moveTo((function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.y;
				return $r;
			}(this)));
			g.curveTo((function($this) {
				var $r;
				control.zpp_inner.validate();
				$r = control.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				control.zpp_inner.validate();
				$r = control.zpp_inner.y;
				return $r;
			}(this)),(function($this) {
				var $r;
				end.zpp_inner.validate();
				$r = end.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				end.zpp_inner.validate();
				$r = end.zpp_inner.y;
				return $r;
			}(this)));
			if(start.zpp_inner.weak) {
				start.dispose();
				true;
			} else false;
			if(control.zpp_inner.weak) {
				control.dispose();
				true;
			} else false;
			if(end.zpp_inner.weak) {
				end.dispose();
				true;
			} else false;
		} else {
			var u = this.zpp_inner.xform.outer.transform(start);
			var v = this.zpp_inner.xform.outer.transform(control);
			var q = this.zpp_inner.xform.outer.transform(end);
			g.moveTo((function($this) {
				var $r;
				u.zpp_inner.validate();
				$r = u.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				u.zpp_inner.validate();
				$r = u.zpp_inner.y;
				return $r;
			}(this)));
			g.curveTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)),(function($this) {
				var $r;
				q.zpp_inner.validate();
				$r = q.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				q.zpp_inner.validate();
				$r = q.zpp_inner.y;
				return $r;
			}(this)));
			u.dispose();
			v.dispose();
			q.dispose();
		}
	}
	,drawCircle: function(position,radius,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(this.thickness,colour & 16777215,1);
		if(this.zpp_inner.xnull) {
			g.drawCircle((function($this) {
				var $r;
				position.zpp_inner.validate();
				$r = position.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				position.zpp_inner.validate();
				$r = position.zpp_inner.y;
				return $r;
			}(this)),radius);
			if(position.zpp_inner.weak) {
				position.dispose();
				true;
			} else false;
		} else {
			var v = this.zpp_inner.xform.outer.transform(position);
			g.drawCircle((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)),radius * this.zpp_inner.xdet);
			v.dispose();
		}
	}
	,drawAABB: function(aabb,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(this.thickness,colour & 16777215,1);
		if(this.zpp_inner.xnull) g.drawRect((function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.minx;
			return $r;
		}(this)),(function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.miny;
			return $r;
		}(this)),(function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.width();
			return $r;
		}(this)),(function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.height();
			return $r;
		}(this))); else {
			var v = this.zpp_inner.xform.outer.transform(aabb.zpp_inner.getmin());
			var w = nape_geom_Vec2.get((function($this) {
				var $r;
				aabb.zpp_inner.validate();
				$r = aabb.zpp_inner.width();
				return $r;
			}(this)),0,null);
			var w2 = this.zpp_inner.xform.outer.transform(w,true);
			var h = nape_geom_Vec2.get(0,(function($this) {
				var $r;
				aabb.zpp_inner.validate();
				$r = aabb.zpp_inner.height();
				return $r;
			}(this)),null);
			var h2 = this.zpp_inner.xform.outer.transform(h,true);
			g.moveTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				w2.zpp_inner.validate();
				$r = w2.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)) + (function($this) {
				var $r;
				w2.zpp_inner.validate();
				$r = w2.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				w2.zpp_inner.validate();
				$r = w2.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				h2.zpp_inner.validate();
				$r = h2.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)) + (function($this) {
				var $r;
				w2.zpp_inner.validate();
				$r = w2.zpp_inner.y;
				return $r;
			}(this)) + (function($this) {
				var $r;
				h2.zpp_inner.validate();
				$r = h2.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				h2.zpp_inner.validate();
				$r = h2.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)) + (function($this) {
				var $r;
				h2.zpp_inner.validate();
				$r = h2.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			v.dispose();
			w.dispose();
			w2.dispose();
			h.dispose();
			h2.dispose();
		}
	}
	,drawFilledTriangle: function(p0,p1,p2,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(0,0,0);
		g.beginFill(colour & 16777215,1);
		if(this.zpp_inner.xnull) {
			g.moveTo((function($this) {
				var $r;
				p0.zpp_inner.validate();
				$r = p0.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				p0.zpp_inner.validate();
				$r = p0.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				p1.zpp_inner.validate();
				$r = p1.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				p1.zpp_inner.validate();
				$r = p1.zpp_inner.y;
				return $r;
			}(this)));
			g.lineTo((function($this) {
				var $r;
				p2.zpp_inner.validate();
				$r = p2.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				p2.zpp_inner.validate();
				$r = p2.zpp_inner.y;
				return $r;
			}(this)));
			if(p0.zpp_inner.weak) {
				p0.dispose();
				true;
			} else false;
			if(p1.zpp_inner.weak) {
				p1.dispose();
				true;
			} else false;
			if(p2.zpp_inner.weak) {
				p2.dispose();
				true;
			} else false;
		} else {
			var v = this.zpp_inner.xform.outer.transform(p0);
			g.moveTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			v.dispose();
			v = this.zpp_inner.xform.outer.transform(p1);
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			v.dispose();
			v = this.zpp_inner.xform.outer.transform(p2);
			g.lineTo((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)));
			v.dispose();
		}
		g.endFill();
	}
	,drawFilledCircle: function(position,radius,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(0,0,0);
		g.beginFill(colour & 16777215,1);
		if(this.zpp_inner.xnull) {
			g.drawCircle((function($this) {
				var $r;
				position.zpp_inner.validate();
				$r = position.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				position.zpp_inner.validate();
				$r = position.zpp_inner.y;
				return $r;
			}(this)),radius);
			if(position.zpp_inner.weak) {
				position.dispose();
				true;
			} else false;
		} else {
			var v = this.zpp_inner.xform.outer.transform(position);
			g.drawCircle((function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}(this)),radius * this.zpp_inner.xdet);
			v.dispose();
		}
		g.endFill();
	}
	,drawPolygon: function(polygon,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.lineStyle(this.thickness,colour & 16777215,1.0);
		var fst = null;
		var fsttime = true;
		if(this.zpp_inner.xnull) {
			if((polygon instanceof Array) && polygon.__enum__ == null) {
				var lv = polygon;
				var _g = 0;
				while(_g < lv.length) {
					var vite = lv[_g];
					++_g;
					var p = vite;
					if(fsttime) {
						fst = nape_geom_Vec2.get((function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.y;
							return $r;
						}(this)),false);
						g.moveTo((function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						p.zpp_inner.validate();
						$r = p.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						p.zpp_inner.validate();
						$r = p.zpp_inner.y;
						return $r;
					}(this)));
					fsttime = false;
				}
			} else if(js_Boot.__instanceof(polygon,nape_geom_Vec2List)) {
				var lv1 = polygon;
				var _g1 = lv1.iterator();
				while(_g1.hasNext()) {
					var p1;
					_g1.zpp_critical = false;
					p1 = _g1.zpp_inner.at(_g1.zpp_i++);
					if(fsttime) {
						fst = nape_geom_Vec2.get((function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.y;
							return $r;
						}(this)),false);
						g.moveTo((function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						p1.zpp_inner.validate();
						$r = p1.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						p1.zpp_inner.validate();
						$r = p1.zpp_inner.y;
						return $r;
					}(this)));
					fsttime = false;
				}
			} else if(js_Boot.__instanceof(polygon,nape_geom_GeomPoly)) {
				var lv2 = polygon;
				var verts = lv2.zpp_inner.vertices;
				if(verts != null) {
					var vite1 = verts;
					do {
						var p2 = nape_geom_Vec2.get(vite1.x,vite1.y,null);
						vite1 = vite1.next;
						if(fsttime) {
							fst = nape_geom_Vec2.get((function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.x;
								return $r;
							}(this)),(function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.y;
								return $r;
							}(this)),false);
							g.moveTo((function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.x;
								return $r;
							}(this)),(function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.y;
								return $r;
							}(this)));
						} else g.lineTo((function($this) {
							var $r;
							p2.zpp_inner.validate();
							$r = p2.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p2.zpp_inner.validate();
							$r = p2.zpp_inner.y;
							return $r;
						}(this)));
						fsttime = false;
						p2.dispose();
					} while(vite1 != verts);
				}
			} else {
			}
			g.lineTo((function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.y;
				return $r;
			}(this)));
			fst.dispose();
		} else {
			if((polygon instanceof Array) && polygon.__enum__ == null) {
				var lv3 = polygon;
				var _g2 = 0;
				while(_g2 < lv3.length) {
					var vite2 = lv3[_g2];
					++_g2;
					var p3 = vite2;
					var v = this.zpp_inner.xform.outer.transform(p3);
					if(fsttime) {
						fst = v;
						g.moveTo((function($this) {
							var $r;
							v.zpp_inner.validate();
							$r = v.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							v.zpp_inner.validate();
							$r = v.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}(this)));
					if(!fsttime) v.dispose();
					fsttime = false;
				}
			} else if(js_Boot.__instanceof(polygon,nape_geom_Vec2List)) {
				var lv4 = polygon;
				var _g3 = lv4.iterator();
				while(_g3.hasNext()) {
					var p4;
					_g3.zpp_critical = false;
					p4 = _g3.zpp_inner.at(_g3.zpp_i++);
					var v1 = this.zpp_inner.xform.outer.transform(p4);
					if(fsttime) {
						fst = v1;
						g.moveTo((function($this) {
							var $r;
							v1.zpp_inner.validate();
							$r = v1.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							v1.zpp_inner.validate();
							$r = v1.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						v1.zpp_inner.validate();
						$r = v1.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						v1.zpp_inner.validate();
						$r = v1.zpp_inner.y;
						return $r;
					}(this)));
					if(!fsttime) v1.dispose();
					fsttime = false;
				}
			} else if(js_Boot.__instanceof(polygon,nape_geom_GeomPoly)) {
				var lv5 = polygon;
				var verts1 = lv5.zpp_inner.vertices;
				if(verts1 != null) {
					var vite3 = verts1;
					do {
						var p5 = nape_geom_Vec2.get(vite3.x,vite3.y,null);
						vite3 = vite3.next;
						var v2 = this.zpp_inner.xform.outer.transform(p5);
						if(fsttime) {
							fst = v2;
							g.moveTo((function($this) {
								var $r;
								v2.zpp_inner.validate();
								$r = v2.zpp_inner.x;
								return $r;
							}(this)),(function($this) {
								var $r;
								v2.zpp_inner.validate();
								$r = v2.zpp_inner.y;
								return $r;
							}(this)));
						} else g.lineTo((function($this) {
							var $r;
							v2.zpp_inner.validate();
							$r = v2.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							v2.zpp_inner.validate();
							$r = v2.zpp_inner.y;
							return $r;
						}(this)));
						if(!fsttime) v2.dispose();
						fsttime = false;
						p5.dispose();
					} while(vite3 != verts1);
				}
			} else {
			}
			g.lineTo((function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.y;
				return $r;
			}(this)));
			fst.dispose();
		}
		if((polygon instanceof Array) && polygon.__enum__ == null) {
			var lv6 = polygon;
			var i = 0;
			while(i < lv6.length) {
				var cur = lv6[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv6.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js_Boot.__instanceof(polygon,nape_geom_Vec2List)) {
			var lv7 = polygon;
			if(lv7.zpp_inner._validate != null) lv7.zpp_inner._validate();
			var ins = lv7.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	,drawFilledPolygon: function(polygon,colour) {
		var g = this.zpp_inner_zn.graphics;
		g.beginFill(colour & 16777215,1.0);
		g.lineStyle(0,0,0);
		var fst = null;
		var fsttime = true;
		if(this.zpp_inner.xnull) {
			if((polygon instanceof Array) && polygon.__enum__ == null) {
				var lv = polygon;
				var _g = 0;
				while(_g < lv.length) {
					var vite = lv[_g];
					++_g;
					var p = vite;
					if(fsttime) {
						fst = nape_geom_Vec2.get((function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.y;
							return $r;
						}(this)),false);
						g.moveTo((function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p.zpp_inner.validate();
							$r = p.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						p.zpp_inner.validate();
						$r = p.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						p.zpp_inner.validate();
						$r = p.zpp_inner.y;
						return $r;
					}(this)));
					fsttime = false;
				}
			} else if(js_Boot.__instanceof(polygon,nape_geom_Vec2List)) {
				var lv1 = polygon;
				var _g1 = lv1.iterator();
				while(_g1.hasNext()) {
					var p1;
					_g1.zpp_critical = false;
					p1 = _g1.zpp_inner.at(_g1.zpp_i++);
					if(fsttime) {
						fst = nape_geom_Vec2.get((function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.y;
							return $r;
						}(this)),false);
						g.moveTo((function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p1.zpp_inner.validate();
							$r = p1.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						p1.zpp_inner.validate();
						$r = p1.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						p1.zpp_inner.validate();
						$r = p1.zpp_inner.y;
						return $r;
					}(this)));
					fsttime = false;
				}
			} else if(js_Boot.__instanceof(polygon,nape_geom_GeomPoly)) {
				var lv2 = polygon;
				var verts = lv2.zpp_inner.vertices;
				if(verts != null) {
					var vite1 = verts;
					do {
						var p2 = nape_geom_Vec2.get(vite1.x,vite1.y,null);
						vite1 = vite1.next;
						if(fsttime) {
							fst = nape_geom_Vec2.get((function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.x;
								return $r;
							}(this)),(function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.y;
								return $r;
							}(this)),false);
							g.moveTo((function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.x;
								return $r;
							}(this)),(function($this) {
								var $r;
								p2.zpp_inner.validate();
								$r = p2.zpp_inner.y;
								return $r;
							}(this)));
						} else g.lineTo((function($this) {
							var $r;
							p2.zpp_inner.validate();
							$r = p2.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							p2.zpp_inner.validate();
							$r = p2.zpp_inner.y;
							return $r;
						}(this)));
						fsttime = false;
						p2.dispose();
					} while(vite1 != verts);
				}
			} else {
			}
			g.lineTo((function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.y;
				return $r;
			}(this)));
			fst.dispose();
		} else {
			if((polygon instanceof Array) && polygon.__enum__ == null) {
				var lv3 = polygon;
				var _g2 = 0;
				while(_g2 < lv3.length) {
					var vite2 = lv3[_g2];
					++_g2;
					var p3 = vite2;
					var v = this.zpp_inner.xform.outer.transform(p3);
					if(fsttime) {
						fst = v;
						g.moveTo((function($this) {
							var $r;
							v.zpp_inner.validate();
							$r = v.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							v.zpp_inner.validate();
							$r = v.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}(this)));
					if(!fsttime) v.dispose();
					fsttime = false;
				}
			} else if(js_Boot.__instanceof(polygon,nape_geom_Vec2List)) {
				var lv4 = polygon;
				var _g3 = lv4.iterator();
				while(_g3.hasNext()) {
					var p4;
					_g3.zpp_critical = false;
					p4 = _g3.zpp_inner.at(_g3.zpp_i++);
					var v1 = this.zpp_inner.xform.outer.transform(p4);
					if(fsttime) {
						fst = v1;
						g.moveTo((function($this) {
							var $r;
							v1.zpp_inner.validate();
							$r = v1.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							v1.zpp_inner.validate();
							$r = v1.zpp_inner.y;
							return $r;
						}(this)));
					} else g.lineTo((function($this) {
						var $r;
						v1.zpp_inner.validate();
						$r = v1.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						v1.zpp_inner.validate();
						$r = v1.zpp_inner.y;
						return $r;
					}(this)));
					if(!fsttime) v1.dispose();
					fsttime = false;
				}
			} else if(js_Boot.__instanceof(polygon,nape_geom_GeomPoly)) {
				var lv5 = polygon;
				var verts1 = lv5.zpp_inner.vertices;
				if(verts1 != null) {
					var vite3 = verts1;
					do {
						var p5 = nape_geom_Vec2.get(vite3.x,vite3.y,null);
						vite3 = vite3.next;
						var v2 = this.zpp_inner.xform.outer.transform(p5);
						if(fsttime) {
							fst = v2;
							g.moveTo((function($this) {
								var $r;
								v2.zpp_inner.validate();
								$r = v2.zpp_inner.x;
								return $r;
							}(this)),(function($this) {
								var $r;
								v2.zpp_inner.validate();
								$r = v2.zpp_inner.y;
								return $r;
							}(this)));
						} else g.lineTo((function($this) {
							var $r;
							v2.zpp_inner.validate();
							$r = v2.zpp_inner.x;
							return $r;
						}(this)),(function($this) {
							var $r;
							v2.zpp_inner.validate();
							$r = v2.zpp_inner.y;
							return $r;
						}(this)));
						if(!fsttime) v2.dispose();
						fsttime = false;
						p5.dispose();
					} while(vite3 != verts1);
				}
			} else {
			}
			g.lineTo((function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				fst.zpp_inner.validate();
				$r = fst.zpp_inner.y;
				return $r;
			}(this)));
			fst.dispose();
		}
		g.endFill();
		if((polygon instanceof Array) && polygon.__enum__ == null) {
			var lv6 = polygon;
			var i = 0;
			while(i < lv6.length) {
				var cur = lv6[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv6.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js_Boot.__instanceof(polygon,nape_geom_Vec2List)) {
			var lv7 = polygon;
			if(lv7.zpp_inner._validate != null) lv7.zpp_inner._validate();
			var ins = lv7.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x = cur1.elt;
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	,draw: function(object) {
		if(this.zpp_inner.xnull) {
			if(js_Boot.__instanceof(object,nape_space_Space)) this.zpp_inner_zn.draw_space((js_Boot.__cast(object , nape_space_Space)).zpp_inner,null,1.0,true); else if(js_Boot.__instanceof(object,nape_phys_Compound)) this.zpp_inner_zn.draw_compound((js_Boot.__cast(object , nape_phys_Compound)).zpp_inner,null,1.0,true); else if(js_Boot.__instanceof(object,nape_phys_Body)) this.zpp_inner_zn.draw_body((js_Boot.__cast(object , nape_phys_Body)).zpp_inner,null,1.0,true); else if(js_Boot.__instanceof(object,nape_shape_Shape)) this.zpp_inner_zn.draw_shape((js_Boot.__cast(object , nape_shape_Shape)).zpp_inner,null,1.0,true); else if(js_Boot.__instanceof(object,nape_constraint_Constraint)) (js_Boot.__cast(object , nape_constraint_Constraint)).zpp_inner.draw(this); else {
			}
		} else if(js_Boot.__instanceof(object,nape_space_Space)) this.zpp_inner_zn.draw_space((js_Boot.__cast(object , nape_space_Space)).zpp_inner,this.zpp_inner.xform,this.zpp_inner.xdet,false); else if(js_Boot.__instanceof(object,nape_phys_Body)) this.zpp_inner_zn.draw_body((js_Boot.__cast(object , nape_phys_Body)).zpp_inner,this.zpp_inner.xform,this.zpp_inner.xdet,false); else if(js_Boot.__instanceof(object,nape_shape_Shape)) this.zpp_inner_zn.draw_shape((js_Boot.__cast(object , nape_shape_Shape)).zpp_inner,this.zpp_inner.xform,this.zpp_inner.xdet,false); else if(js_Boot.__instanceof(object,nape_constraint_Constraint)) (js_Boot.__cast(object , nape_constraint_Constraint)).zpp_inner.draw(this); else {
		}
	}
	,drawSpring: function(start,end,colour,coils,radius) {
		if(radius == null) radius = 3.0;
		if(coils == null) coils = 3;
		if(coils == 0) this.drawLine(start,end,colour); else {
			var dx;
			dx = (function($this) {
				var $r;
				end.zpp_inner.validate();
				$r = end.zpp_inner.x;
				return $r;
			}(this)) - (function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.x;
				return $r;
			}(this));
			var dy;
			dy = (function($this) {
				var $r;
				end.zpp_inner.validate();
				$r = end.zpp_inner.y;
				return $r;
			}(this)) - (function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.y;
				return $r;
			}(this));
			var t = 1.0 / (coils * 4);
			dx *= t;
			dy *= t;
			var nx = 0.0;
			var ny = 0.0;
			nx = dx;
			ny = dy;
			if(nx * nx + ny * ny < 0.1) return;
			var d = nx * nx + ny * ny;
			var imag = 1.0 / Math.sqrt(d);
			var t1 = imag;
			nx *= t1;
			ny *= t1;
			var t2 = nx;
			nx = -ny;
			ny = t2;
			var t3 = radius * 2;
			nx *= t3;
			ny *= t3;
			var u = nape_geom_Vec2.get((function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				start.zpp_inner.validate();
				$r = start.zpp_inner.y;
				return $r;
			}(this)),false);
			var v = nape_geom_Vec2.get(null,null,null);
			var q = nape_geom_Vec2.get(null,null,null);
			var _g = 0;
			while(_g < coils) {
				var i = _g++;
				v.set_x((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.x;
					return $r;
				}(this)) + dx + nx);
				v.set_y((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.y;
					return $r;
				}(this)) + dy + ny);
				q.set_x((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.x;
					return $r;
				}(this)) + dx * 2);
				q.set_y((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.y;
					return $r;
				}(this)) + dy * 2);
				this.drawCurve(u,v,q,colour);
				u.set_x((function($this) {
					var $r;
					q.zpp_inner.validate();
					$r = q.zpp_inner.x;
					return $r;
				}(this)));
				u.set_y((function($this) {
					var $r;
					q.zpp_inner.validate();
					$r = q.zpp_inner.y;
					return $r;
				}(this)));
				v.set_x((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.x;
					return $r;
				}(this)) + dx - nx);
				v.set_y((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.y;
					return $r;
				}(this)) + dy - ny);
				q.set_x((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.x;
					return $r;
				}(this)) + dx * 2);
				q.set_y((function($this) {
					var $r;
					u.zpp_inner.validate();
					$r = u.zpp_inner.y;
					return $r;
				}(this)) + dy * 2);
				this.drawCurve(u,v,q,colour);
				u.set_x((function($this) {
					var $r;
					q.zpp_inner.validate();
					$r = q.zpp_inner.x;
					return $r;
				}(this)));
				u.set_y((function($this) {
					var $r;
					q.zpp_inner.validate();
					$r = q.zpp_inner.y;
					return $r;
				}(this)));
			}
			u.dispose();
			v.dispose();
			q.dispose();
		}
		if(start.zpp_inner.weak) {
			start.dispose();
			true;
		} else false;
		if(end.zpp_inner.weak) {
			end.dispose();
			true;
		} else false;
	}
	,__class__: nape_util_ShapeDebug
});
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl_IAssetCache.prototype = {
	get_enabled: null
	,set_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = ["openfl","AssetCache"];
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.bitmapData.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.sound.remove(key2);
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = ["openfl","Assets"];
openfl_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	openfl_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_Assets.dispatchEvent = function(event) {
	return openfl_Assets.dispatcher.dispatchEvent(event);
};
openfl_Assets.exists = function(id,type) {
	return lime_Assets.exists(id,type);
};
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getBytes = function(id) {
	return lime_Assets.getBytes(id);
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) return openfl_Assets.cache.getFont(id);
	var limeFont = lime_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_Assets.libraries.get(name);
};
openfl_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) return library.getMovieClip(symbolName); else haxe_Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 221, className : "openfl.Assets", methodName : "getMovieClip"});
		} else haxe_Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 227, className : "openfl.Assets", methodName : "getMovieClip"});
	} else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 233, className : "openfl.Assets", methodName : "getMovieClip"});
	return null;
};
openfl_Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getPath = function(id) {
	return lime_Assets.getPath(id);
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) return sound;
	}
	var path = lime_Assets.getPath(id);
	if(path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_Assets.getText(id);
};
openfl_Assets.hasEventListener = function(type) {
	return openfl_Assets.dispatcher.hasEventListener(type);
};
openfl_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_Assets.cache.hasBitmapData(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(openfl_Assets.cache.hasFont(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_Assets.cache.hasSound(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.__image != null;
	return true;
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
openfl_Assets.list = function(type) {
	return lime_Assets.list(type);
};
openfl_Assets.loadBitmapData = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			handler(bitmapData);
			return;
		}
	}
	lime_Assets.loadImage(id,function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
			handler(bitmapData1);
		}
	},false);
};
openfl_Assets.loadBytes = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe_Log.trace("[openfl.Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 546, className : "openfl.Assets", methodName : "loadBytes"});
	} else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 552, className : "openfl.Assets", methodName : "loadBytes"});
	handler(null);
};
openfl_Assets.loadFont = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		handler(openfl_Assets.cache.getFont(id));
		return;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			library.loadFont(symbolName,function(limeFont) {
				var font = openfl_text_Font.__fromLimeFont(limeFont);
				if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
				handler(font);
			});
			return;
		} else haxe_Log.trace("[openfl.Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 611, className : "openfl.Assets", methodName : "loadFont"});
	} else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 617, className : "openfl.Assets", methodName : "loadFont"});
	handler(null);
};
openfl_Assets.loadLibrary = function(name,handler) {
	lime_Assets.loadLibrary(name,handler);
};
openfl_Assets.loadMusic = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl_Assets.getMusic(id,useCache));
};
openfl_Assets.loadMovieClip = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			library.loadMovieClip(symbolName,handler);
			return;
		} else haxe_Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 695, className : "openfl.Assets", methodName : "loadMovieClip"});
	} else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 701, className : "openfl.Assets", methodName : "loadMovieClip"});
	handler(null);
};
openfl_Assets.loadSound = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl_Assets.getSound(id,useCache));
};
openfl_Assets.loadText = function(id,handler) {
	lime_Assets.loadText(id,handler);
};
openfl_Assets.registerLibrary = function(name,library) {
	lime_Assets.registerLibrary(name,library);
};
openfl_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl_Assets.unloadLibrary = function(name) {
	lime_Assets.unloadLibrary(name);
};
openfl_Assets.library_onEvent = function(library,type) {
	if(type == "change") {
		openfl_Assets.cache.clear();
		openfl_Assets.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
var openfl_AssetLibrary = function() {
	lime_AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl_AssetLibrary;
openfl_AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl_AssetLibrary.__super__ = lime_AssetLibrary;
openfl_AssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,getMusic: function(id) {
		return this.getSound(id);
	}
	,getSound: function(id) {
		return null;
	}
	,loadMovieClip: function(id,handler) {
		handler(this.getMovieClip(id));
	}
	,loadMusic: function(id,handler) {
		handler(this.getMusic(id));
	}
	,loadSound: function(id,handler) {
		handler(this.getSound(id));
	}
	,__class__: openfl_AssetLibrary
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	currentFrame: null
	,currentFrameLabel: null
	,currentLabel: null
	,currentLabels: null
	,enabled: null
	,framesLoaded: null
	,totalFrames: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__totalFrames: null
	,gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.application = null;
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) return v; else return null;
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.embed = $hx_exports.openfl.embed = function(elementName,width,height,background,assetsPrefix) {
	lime_system_System.embed(elementName,width,height,background,assetsPrefix);
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
};
openfl_Lib.notImplemented = function(api) {
	if(!openfl_Lib.__sentWarnings.exists(api)) {
		openfl_Lib.__sentWarnings.set(api,true);
		haxe_Log.trace("Warning: " + api + " is not implemented",{ fileName : "Lib.hx", lineNumber : 114, className : "openfl.Lib", methodName : "notImplemented"});
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 145, className : "openfl.Lib", methodName : "trace"});
};
var openfl_Memory = function() { };
$hxClasses["openfl.Memory"] = openfl_Memory;
openfl_Memory.__name__ = ["openfl","Memory"];
openfl_Memory.gcRef = null;
openfl_Memory.len = null;
openfl_Memory._setPositionTemporarily = function(position,action) {
	var oldPosition = openfl_Memory.gcRef.position;
	openfl_Memory.gcRef.position = position;
	var value = action();
	openfl_Memory.gcRef.position = oldPosition;
	return value;
};
openfl_Memory.getByte = function(addr) {
	return openfl_Memory.gcRef.data.getInt8(addr);
};
openfl_Memory.getDouble = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readDouble();
	});
};
openfl_Memory.getFloat = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readFloat();
	});
};
openfl_Memory.getI32 = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readInt();
	});
};
openfl_Memory.getUI16 = function(addr) {
	return openfl_Memory._setPositionTemporarily(addr,function() {
		return openfl_Memory.gcRef.readUnsignedShort();
	});
};
openfl_Memory.select = function(inBytes) {
	openfl_Memory.gcRef = inBytes;
	if(inBytes != null) openfl_Memory.len = inBytes.length; else openfl_Memory.len = 0;
};
openfl_Memory.setByte = function(addr,v) {
	openfl_Memory.gcRef.data.setUint8(addr,v);
};
openfl_Memory.setDouble = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeDouble(v);
	});
};
openfl_Memory.setFloat = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeFloat(v);
	});
};
openfl_Memory.setI16 = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeUnsignedShort(v);
	});
};
openfl_Memory.setI32 = function(addr,v) {
	openfl_Memory._setPositionTemporarily(addr,function() {
		openfl_Memory.gcRef.writeInt(v);
	});
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl__$Vector_Vector_$Impl_$._new = function(length,fixed) {
	if(fixed == null) fixed = false;
	if(length == null) length = 0;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = fixed;
	return this1;
};
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	var vectorData = new openfl_VectorData();
	if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(vectorData.length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	if(a != null) haxe_ds__$Vector_Vector_$Impl_$.blit(a.data,0,vectorData.data,this1.length,a.length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	var vectorData = new openfl_VectorData();
	vectorData.length = this1.length;
	vectorData.fixed = this1.fixed;
	var this2;
	this2 = new Array(this1.length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return new openfl_VectorDataIterator(this1);
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	var output = "";
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i > 0) output += sep;
		output += Std.string(this1.data[i]);
	}
	return output;
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	var value = null;
	if(!this1.fixed) {
		if(this1.length > 0) {
			this1.length--;
			value = this1.data[this1.length];
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = x;
	}
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	var data;
	var this2;
	this2 = new Array(this1.length);
	data = this2;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		data[this1.length - 1 - i] = this1.data[i];
	}
	this1.data = data;
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	if(!this1.fixed && this1.length > 0) {
		this1.length--;
		var value = this1.data[0];
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,1,this1.data,0,this1.length);
		return value;
	}
	return null;
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,1,this1.data.length);
			this1.data = data;
		} else haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,this1.data,1,this1.length - 1);
		this1.data[0] = x;
	}
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	if(end == null) end = 0;
	if(pos == null) pos = 0;
	if(pos < 0) pos += this1.length;
	if(end <= 0) end += this1.length;
	if(end > this1.length) end = this1.length;
	var length = end - pos;
	if(length <= 0 || length > this1.length) length = this1.length;
	var vectorData = new openfl_VectorData();
	vectorData.length = end - pos;
	vectorData.fixed = true;
	var this2;
	this2 = new Array(length);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	var array = haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data);
	array.sort(f);
	var vec;
	var this2;
	this2 = new Array(array.length);
	vec = this2;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this1.data = vec;
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	if(pos < 0) pos += this1.length;
	if(pos + len > this1.length) len = this1.length - pos;
	if(len < 0) len = 0;
	var vectorData = new openfl_VectorData();
	vectorData.length = len;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(len);
	vectorData.data = this2;
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,len);
	if(len > 0) {
		this1.length -= len;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
	}
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	return haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data).toString();
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.data[i] == x) {
			value = i;
			break;
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1.data[i] == x) {
			value = i;
			break;
		}
		i--;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vectorData = new openfl_VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(a.length);
	vec = this1;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = a[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.data[index];
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,key,value) {
	if(!this1.fixed) {
		if(key >= this1.length) this1.length = key + 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	return this1.data[key] = value;
};
openfl__$Vector_Vector_$Impl_$.fromArray = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var value = [];
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.fromHaxeVector = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	vectorData.data = value;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toHaxeVector = function(this1) {
	return this1.data;
};
openfl__$Vector_Vector_$Impl_$.fromVectorData = function(value) {
	return value;
};
openfl__$Vector_Vector_$Impl_$.toVectorData = function(this1) {
	return this1;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	if(!this1.fixed) {
		if(value > this1.length) {
			var data;
			var this2;
			this2 = new Array(value);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
			this1.data = data;
		}
		this1.length = value;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
var openfl_VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl_VectorData;
openfl_VectorData.__name__ = ["openfl","VectorData"];
openfl_VectorData.prototype = {
	data: null
	,fixed: null
	,length: null
	,__class__: openfl_VectorData
};
var openfl_VectorDataIterator = function(data) {
	this.index = 0;
	this.vectorData = data;
};
$hxClasses["openfl.VectorDataIterator"] = openfl_VectorDataIterator;
openfl_VectorDataIterator.__name__ = ["openfl","VectorDataIterator"];
openfl_VectorDataIterator.prototype = {
	index: null
	,vectorData: null
	,hasNext: function() {
		return this.index < this.vectorData.length;
	}
	,next: function() {
		var index = this.index++;
		return this.vectorData.data[index];
	}
	,__class__: openfl_VectorDataIterator
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,transparent: null
	,renderSession: null
	,render: function(stage) {
	}
	,renderShape: function(shape) {
	}
	,setViewport: function(x,y,width,height) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_RenderSession = function() {
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	cairo: null
	,context: null
	,element: null
	,gl: null
	,renderer: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,vendorPrefix: null
	,z: null
	,projectionMatrix: null
	,drawCount: null
	,currentBlendMode: null
	,shaderManager: null
	,maskManager: null
	,filterManager: null
	,blendModeManager: null
	,spriteBatch: null
	,stencilManager: null
	,defaultFramebuffer: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_TextFieldGraphics = function() { };
$hxClasses["openfl._internal.renderer.TextFieldGraphics"] = openfl__$internal_renderer_TextFieldGraphics;
openfl__$internal_renderer_TextFieldGraphics.__name__ = ["openfl","_internal","renderer","TextFieldGraphics"];
openfl__$internal_renderer_TextFieldGraphics.render = function(textField) {
	var bounds = textField.getBounds(null);
	openfl__$internal_renderer_TextFieldGraphics.update(textField,bounds);
	if(textField.__graphics == null) textField.__graphics = new openfl_display_Graphics();
	var graphics = textField.__graphics;
	graphics.clear();
	if(textField.border || textField.background) {
		if(textField.border) graphics.lineStyle(1,textField.borderColor);
		if(textField.background) graphics.beginFill(textField.backgroundColor);
		graphics.drawRect(bounds.x + 0.5,bounds.y + 0.5,bounds.width - 1,bounds.height - 1);
	}
	if(textField.__tileData != null) {
		var $it0 = textField.__tilesheets.keys();
		while( $it0.hasNext() ) {
			var tilesheet = $it0.next();
			graphics.drawTiles(tilesheet,textField.__tileData.h[tilesheet.__id__],true,4,textField.__tileDataLength.h[tilesheet.__id__]);
		}
	}
};
openfl__$internal_renderer_TextFieldGraphics.renderText = function(textField,text,format,offsetX,bounds) {
	var font = openfl__$internal_renderer_cairo_CairoTextField.getFontInstance(format);
	if(font != null && format.size != null) {
		if(!(openfl__$internal_renderer_TextFieldGraphics.glyphs.h.__keys__[font.__id__] != null)) {
			var value = new haxe_ds_IntMap();
			openfl__$internal_renderer_TextFieldGraphics.glyphs.set(font,value);
		}
		var size = format.size | 0;
		var fontGlyphs = openfl__$internal_renderer_TextFieldGraphics.glyphs.h[font.__id__];
		if(!fontGlyphs.h.hasOwnProperty(size)) {
			var value1 = font.renderGlyphs(font.getGlyphs(),size);
			fontGlyphs.h[size] = value1;
		}
		var images = fontGlyphs.h[size];
		if(!(openfl__$internal_renderer_TextFieldGraphics.bitmapData.h.__keys__[font.__id__] != null)) {
			var value2 = new haxe_ds_IntMap();
			openfl__$internal_renderer_TextFieldGraphics.bitmapData.set(font,value2);
		}
		var fontBitmapData = openfl__$internal_renderer_TextFieldGraphics.bitmapData.h[font.__id__];
		if(!fontBitmapData.h.hasOwnProperty(size)) {
			var width;
			var height;
			var data;
			var $it0 = images.iterator();
			while( $it0.hasNext() ) {
				var image1 = $it0.next();
				width = image1.buffer.width;
				height = image1.buffer.height;
				data = image1.get_data();
				break;
			}
			var bitmapData1 = new openfl_display_BitmapData(width,height);
			var _g = 0;
			while(_g < width) {
				var x1 = _g++;
				var _g1 = 0;
				while(_g1 < height) {
					var y1 = _g1++;
					var alpha = data[y1 * width + x1];
					var color = alpha << 24 | 16711680 | 65280 | 255;
					bitmapData1.setPixel32(x1,y1,color);
				}
			}
			fontBitmapData.h[size] = bitmapData1;
		}
		var bitmapData = fontBitmapData.h[size];
		if(!(openfl__$internal_renderer_TextFieldGraphics.tilesheets.h.__keys__[bitmapData.__id__] != null)) {
			var tilesheet1 = new openfl_display_Tilesheet(bitmapData);
			var tileID1 = new haxe_ds_IntMap();
			var image2;
			var index;
			var $it1 = images.keys();
			while( $it1.hasNext() ) {
				var key = $it1.next();
				image2 = images.h[key];
				index = tilesheet1.addTileRect(new openfl_geom_Rectangle(image2.offsetX,image2.offsetY,image2.width,image2.height));
				tileID1.h[key] = index;
			}
			openfl__$internal_renderer_TextFieldGraphics.tileIDs.set(bitmapData,tileID1);
			openfl__$internal_renderer_TextFieldGraphics.tilesheets.set(bitmapData,tilesheet1);
		}
		var tilesheet = openfl__$internal_renderer_TextFieldGraphics.tilesheets.h[bitmapData.__id__];
		var tileID = openfl__$internal_renderer_TextFieldGraphics.tileIDs.h[bitmapData.__id__];
		var r = (format.color >> 16 & 255) / 255;
		var g = (format.color >> 8 & 255) / 255;
		var b = (format.color & 255) / 255;
		var tlm = textField.getLineMetrics(0);
		var image;
		var x = offsetX;
		var y = 2 + tlm.ascent;
		var tileData;
		textField.__tilesheets.set(tilesheet,true);
		if(!(textField.__tileData.h.__keys__[tilesheet.__id__] != null)) {
			tileData = [];
			textField.__tileData.set(tilesheet,tileData);
			textField.__tileDataLength.set(tilesheet,0);
		}
		tileData = textField.__tileData.h[tilesheet.__id__];
		var offsetY = 0;
		var lines = text.split("\n");
		if(textField.__textLayout == null) textField.__textLayout = new lime_text_TextLayout();
		var textLayout = textField.__textLayout;
		var length = 0;
		var line_i = 0;
		var oldX = x;
		var _g2 = 0;
		while(_g2 < lines.length) {
			var line = lines[_g2];
			++_g2;
			tlm = textField.getLineMetrics(line_i);
			x = oldX;
			var _g11 = format.align;
			switch(_g11[1]) {
			case 0:case 2:
				x += 0;
				break;
			case 3:
				x += (textField.__width - 4 - tlm.width) / 2;
				break;
			case 1:
				x += textField.__width - 4 - tlm.width;
				break;
			}
			textLayout.set_text(null);
			textLayout.set_font(font);
			textLayout.set_size(size);
			textLayout.set_text(line);
			var _g12 = 0;
			var _g21 = textLayout.get_positions();
			while(_g12 < _g21.length) {
				var position = _g21[_g12];
				++_g12;
				image = images.h[position.glyph];
				if(image != null) {
					if(length >= tileData.length) {
						tileData.push(x + position.offset.x + image.x);
						tileData.push(y + position.offset.y - image.y);
						tileData.push(tileID.h[position.glyph]);
						tileData.push(r);
						tileData.push(g);
						tileData.push(b);
					} else {
						tileData[length] = x + position.offset.x + image.x;
						tileData[length + 1] = y + position.offset.y - image.y;
						tileData[length + 2] = tileID.h[position.glyph];
						tileData[length + 3] = r;
						tileData[length + 4] = g;
						tileData[length + 5] = b;
					}
					length += 6;
				}
				x += position.advance.x;
				y -= position.advance.y;
			}
			y += tlm.height;
			line_i++;
		}
		textField.__tileDataLength.set(tilesheet,length);
	}
};
openfl__$internal_renderer_TextFieldGraphics.update = function(textField,bounds) {
	if(textField.__dirty) {
		if((textField.__text == null || textField.__text == "") && !textField.background && !textField.border || (textField.get_width() <= 0 || textField.get_height() <= 0) && textField.autoSize != openfl_text_TextFieldAutoSize.LEFT) {
			textField.__tilesheets = null;
			textField.__tileData = null;
			textField.__tileDataLength = null;
			textField.__dirty = false;
		} else {
			textField.__tilesheets = new haxe_ds_ObjectMap();
			if(textField.__tileData == null) {
				textField.__tileData = new haxe_ds_ObjectMap();
				textField.__tileDataLength = new haxe_ds_ObjectMap();
			}
			if(textField.__text != null && textField.__text != "") {
				var text = textField.get_text();
				if(textField.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				var measurements = openfl__$internal_renderer_cairo_CairoTextField.measureText(textField);
				if(textField.__ranges == null) openfl__$internal_renderer_TextFieldGraphics.renderText(textField,text,textField.__textFormat,2,bounds); else {
					var currentIndex = 0;
					var range;
					var offsetX = 2.0;
					var _g1 = 0;
					var _g2 = textField.__ranges.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						range = textField.__ranges[i1];
						openfl__$internal_renderer_TextFieldGraphics.renderText(textField,text.substring(range.start,range.end),range.format,offsetX,bounds);
						offsetX += measurements[i1];
					}
				}
			}
			var $it0 = textField.__tileData.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				if(!(textField.__tilesheets.h.__keys__[key.__id__] != null)) {
					textField.__tileData.remove(key);
					textField.__tileDataLength.remove(key);
				}
			}
			textField.__dirty = false;
			return true;
		}
	}
	return false;
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		var transform = bitmap.__worldTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			cairo.setSourceSurface(surface,0,0);
			if(scrollRect != null) {
				cairo.pushGroup();
				cairo.setSourceSurface(surface,0,0);
				cairo.newPath();
				cairo.rectangle(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				cairo.fill();
				cairo.popGroupToSource();
			}
			if(bitmap.__worldAlpha == 1) cairo.paint(); else cairo.paintWithAlpha(bitmap.__worldAlpha);
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.bounds = null;
openfl__$internal_renderer_cairo_CairoGraphics.cairo = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.graphics = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = null;
openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = null;
openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = null;
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = [];
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = [];
};
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + rx,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - rx,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	switch(type[1]) {
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x,y,0,x,y,(point.x - matrix.tx) / 2);
		break;
	case 1:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point1 = matrix.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix.transformPoint(new openfl_geom_Point(819.2,0));
		point1.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point1.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = ((rgb & 16711680) >>> 16) / 255;
		var g = ((rgb & 65280) >>> 8) / 255;
		var b = (rgb & 255) / 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern,ratio,r,g,b,alpha);
	}
	var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,mat);
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat) {
	var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
	if(bitmapRepeat) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern,1);
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function() {
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) return;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
	var hasPath = false;
	var _g = 0;
	try {
		while(_g < commands.length) {
			var command = commands[_g];
			++_g;
			switch(command[1]) {
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cx2 = command[4];
				var cy1 = command[3];
				var cx1 = command[2];
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x2 - offsetX + radius,y2 - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2);
				break;
			case 7:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(x3 - offsetX,y3 - offsetY,width,height);
				break;
			case 6:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				hasPath = true;
				x4 -= offsetX;
				y4 -= offsetY;
				var kappa = .5522848;
				var ox = width1 / 2 * kappa;
				var oy = height1 / 2 * kappa;
				var xe = x4 + width1;
				var ye = y4 + height1;
				var xm = x4 + width1 / 2;
				var ym = y4 + height1 / 2;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x4,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x4,ym - oy,xm - ox,y4,xm,y4);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox,y4,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox,ye,x4,ym + oy,x4,ym);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 15:
				var y6 = command[3];
				var x6 = command[2];
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 16:
				var y7 = command[3];
				var x7 = command[2];
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				closeGap = true;
				startX = x7;
				startY = y7;
				break;
			case 12:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha = command[4];
				var color = command[3];
				var thickness = command[2];
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				if(thickness == null) openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false; else {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(thickness);
					if(joints == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin((function($this) {
						var $r;
						switch(joints[1]) {
						case 0:
							$r = 0;
							break;
						case 2:
							$r = 2;
							break;
						default:
							$r = 1;
						}
						return $r;
					}(this)));
					if(caps == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap((function($this) {
						var $r;
						switch(caps[1]) {
						case 0:
							$r = 0;
							break;
						case 2:
							$r = 2;
							break;
						default:
							$r = 1;
						}
						return $r;
					}(this)));
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(miterLimit == null?3:miterLimit);
					if(color != null) {
						var r = ((color & 16711680) >>> 16) / 255;
						var g = ((color & 65280) >>> 8) / 255;
						var b = (color & 255) / 255;
						if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern != null) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
						if(alpha == 1 || alpha == null) openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r,g,b); else openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r,g,b,alpha);
					}
				}
				break;
			case 14:
				var focalPointRatio = command[9];
				var interpolationMethod = command[8];
				var spreadMethod = command[7];
				var matrix = command[6];
				var ratios = command[5];
				var alphas = command[4];
				var colors = command[3];
				var type = command[2];
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern != null) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 13:
				var smooth = command[5];
				var repeat = command[4];
				var matrix1 = command[3];
				var bitmap = command[2];
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern != null) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(bitmap,matrix1,repeat);
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 0:
				var smooth1 = command[5];
				var repeat1 = command[4];
				var matrix2 = command[3];
				var bitmap1 = command[2];
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(bitmap1,matrix2,repeat1);
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = bitmap1;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = repeat1;
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				break;
			case 1:
				var alpha1 = command[3];
				var rgb = command[2];
				if(alpha1 < 0.005) openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false; else {
					if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
						lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
						openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((rgb & 16711680) >>> 16) / 255,((rgb & 65280) >>> 8) / 255,(rgb & 255) / 255,alpha1);
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 2:
				var focalPointRatio1 = command[9];
				var interpolationMethod1 = command[8];
				var spreadMethod1 = command[7];
				var matrix3 = command[6];
				var ratios1 = command[5];
				var alphas1 = command[4];
				var colors1 = command[3];
				var type1 = command[2];
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
					lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.destroy(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(type1,colors1,alphas1,ratios1,matrix3,spreadMethod1,interpolationMethod1,focalPointRatio1);
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 10:
				var culling = command[5];
				var uvtData = command[4];
				var indices = command[3];
				var vertices = command[2];
				var v = vertices;
				var ind = indices;
				var uvt = uvtData;
				var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
				if(colorFill && uvt != null) throw "__break__";
				var width3 = 0;
				var height3 = 0;
				if(!colorFill) {
					if(uvtData == null) {
						var this1;
						this1 = new openfl_VectorData();
						var this2;
						this2 = new Array(0);
						this1.data = this2;
						this1.length = 0;
						this1.fixed = false;
						uvtData = this1;
						var _g2 = 0;
						var _g1 = v.length / 2 | 0;
						while(_g2 < _g1) {
							var i1 = _g2++;
							if(!uvtData.fixed) {
								uvtData.length++;
								if(uvtData.data.length < uvtData.length) {
									var data;
									var this3;
									this3 = new Array(uvtData.data.length + 10);
									data = this3;
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data,0,uvtData.data.length);
									uvtData.data = data;
								}
								uvtData.data[uvtData.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
							}
							uvtData.length;
							if(!uvtData.fixed) {
								uvtData.length++;
								if(uvtData.data.length < uvtData.length) {
									var data1;
									var this4;
									this4 = new Array(uvtData.data.length + 10);
									data1 = this4;
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
									uvtData.data = data1;
								}
								uvtData.data[uvtData.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
							}
							uvtData.length;
						}
					}
					var skipT = uvtData.length != v.length;
					var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvtData,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						width3 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
						height3 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
					} else {
						width3 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
						height3 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
					}
				}
				var i = 0;
				var l = ind.length;
				var a;
				var b1;
				var c;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x11;
				var y11;
				var x21;
				var y21;
				var x31;
				var y31;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
				while(i < l) {
					a = i;
					b1 = i + 1;
					c = i + 2;
					iax = ind.data[a] * 2;
					iay = ind.data[a] * 2 + 1;
					ibx = ind.data[b1] * 2;
					iby = ind.data[b1] * 2 + 1;
					icx = ind.data[c] * 2;
					icy = ind.data[c] * 2 + 1;
					x11 = v.data[iax];
					y11 = v.data[iay];
					x21 = v.data[ibx];
					y21 = v.data[iby];
					x31 = v.data[icx];
					y31 = v.data[icy];
					switch(culling[1]) {
					case 2:
						if(!((x21 - x11) * (y31 - y11) - (y21 - y11) * (x31 - x11) < 0)) {
							i += 3;
							continue;
						}
						break;
					case 0:
						if((x21 - x11) * (y31 - y11) - (y21 - y11) * (x31 - x11) < 0) {
							i += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x11,y11);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x21,y21);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x31,y31);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
						i += 3;
						continue;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x11,y11);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x21,y21);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x31,y31);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
					uvx1 = uvt.data[iax] * width3;
					uvx2 = uvt.data[ibx] * width3;
					uvx3 = uvt.data[icx] * width3;
					uvy1 = uvt.data[iay] * height3;
					uvy2 = uvt.data[iby] * height3;
					uvy3 = uvt.data[icy] * height3;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i += 3;
						continue;
					}
					t1 = -(uvy1 * (x31 - x21) - uvy2 * x31 + uvy3 * x21 + (uvy2 - uvy3) * x11) / denom;
					t2 = (uvy2 * y31 + uvy1 * (y21 - y31) - uvy3 * y21 + (uvy3 - uvy2) * y11) / denom;
					t3 = (uvx1 * (x31 - x21) - uvx2 * x31 + uvx3 * x21 + (uvx2 - uvx3) * x11) / denom;
					t4 = -(uvx2 * y31 + uvx1 * (y21 - y31) - uvx3 * y21 + (uvx3 - uvx2) * y11) / denom;
					dx = (uvx1 * (uvy3 * x21 - uvy2 * x31) + uvy1 * (uvx2 * x31 - uvx3 * x21) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
					dy = (uvx1 * (uvy3 * y21 - uvy2 * y31) + uvy1 * (uvx2 * y31 - uvx3 * y21) + (uvx3 * uvy2 - uvx2 * uvy3) * y11) / denom;
					var matrix4 = new lime_math_Matrix3(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix4);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
					i += 3;
				}
				break;
			case 9:
				var count = command[6];
				var flags = command[5];
				var smooth2 = command[4];
				var tileData = command[3];
				var sheet = command[2];
				var useScale = (flags & 1) > 0;
				var useRotation = (flags & 2) > 0;
				var useTransform = (flags & 16) > 0;
				var useRGB = (flags & 4) > 0;
				var useAlpha = (flags & 8) > 0;
				var useRect = (flags & 32) > 0;
				var useOrigin = (flags & 64) > 0;
				var useBlendAdd = (flags & 65536) > 0;
				if(useTransform) {
					useScale = false;
					useRotation = false;
				}
				var scaleIndex = 0;
				var rotationIndex = 0;
				var rgbIndex = 0;
				var alphaIndex = 0;
				var transformIndex = 0;
				var numValues = 3;
				if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
				if(useScale) {
					scaleIndex = numValues;
					numValues++;
				}
				if(useRotation) {
					rotationIndex = numValues;
					numValues++;
				}
				if(useTransform) {
					transformIndex = numValues;
					numValues += 4;
				}
				if(useRGB) {
					rgbIndex = numValues;
					numValues += 3;
				}
				if(useAlpha) {
					alphaIndex = numValues;
					numValues++;
				}
				var totalCount = tileData.length;
				if(count >= 0 && totalCount > count) totalCount = count;
				var itemCount = totalCount / numValues | 0;
				var index = 0;
				var rect = null;
				var center = null;
				var previousTileID = -1;
				var surface;
				sheet.__bitmap.__sync();
				surface = sheet.__bitmap.getSurface();
				if(useBlendAdd) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(12);
				while(index < totalCount) {
					var i2 = tileData[index + 2] | 0;
					var tileID;
					if(!useRect) tileID = i2; else tileID = -1;
					if(!useRect && tileID != previousTileID) {
						rect = sheet.__tileRects[tileID];
						center = sheet.__centerPoints[tileID];
						previousTileID = tileID;
					} else if(useRect) {
						rect = sheet.__rectTile;
						rect.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
						center = sheet.__point;
						if(useOrigin) {
							center.x = tileData[index + 6];
							center.y = tileData[index + 7];
						} else {
							center.x = 0;
							center.y = 0;
						}
					}
					if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
						if(useTransform) {
							var matrix5 = new lime_math_Matrix3(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix5);
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(tileData[index],tileData[index + 1]);
						if(useRotation) openfl__$internal_renderer_cairo_CairoGraphics.cairo.rotate(tileData[index + rotationIndex]);
						if(useScale) {
							var scale = tileData[index + scaleIndex];
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.scale(scale,scale);
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.setSourceSurface(surface,0,0);
						if(useAlpha) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paintWithAlpha(tileData[index + alphaIndex]); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.paint();
					}
					index += numValues;
				}
				if(useBlendAdd) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(2);
				break;
			default:
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,-openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix6 = openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
				matrix6.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) matrix6.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,matrix6.__toMatrix3());
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
	var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
	var cx2 = x + 0.66666666666666663 * (cx - x);
	var cy2 = y + 0.66666666666666663 * (cy - y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1,cy1,cx2,cy2,x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.length != 0) {
		var cairo = renderSession.cairo;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cy1 = command[4];
				var cx2 = command[3];
				var cx1 = command[2];
				cairo.curveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				positionX = x;
				positionY = y;
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				positionX = x1;
				positionY = y1;
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				cairo.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				x3 -= offsetX;
				y3 -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x3 + width;
				var ye = y3 + height;
				var xm = x3 + width / 2;
				var ym = y3 + height / 2;
				cairo.moveTo(x3,ym);
				cairo.curveTo(x3,ym - oy,xm - ox,y3,xm,y3);
				cairo.curveTo(xm + ox,y3,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x3,ym + oy,x3,ym);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				cairo.rectangle(x4 - offsetX,y4 - offsetY,width1,height1);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 15:
				var y6 = command[3];
				var x6 = command[2];
				cairo.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 16:
				var y7 = command[3];
				var x7 = command[2];
				cairo.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				break;
			default:
			}
		}
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		var transform = mask.__getTransform();
		cairo.set_matrix(transform.__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clip();
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new lime_math_Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clip();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function(width,height,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.cairo = cairo;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	cairo: null
	,render: function(stage) {
		this.cairo.identityMatrix();
		if(stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2]);
			this.cairo.paint();
		}
		stage.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoShape = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoShape"] = openfl__$internal_renderer_cairo_CairoShape;
openfl__$internal_renderer_cairo_CairoShape.__name__ = ["openfl","_internal","renderer","cairo","CairoShape"];
openfl__$internal_renderer_cairo_CairoShape.render = function(shape,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.findFont = function(name) {
	return null;
};
openfl__$internal_renderer_cairo_CairoTextField.getFontInstance = function(format) {
	return null;
};
openfl__$internal_renderer_cairo_CairoTextField.getLineBreaks = function(textField) {
	var lines = 0;
	var _g1 = 0;
	var _g;
	var s = textField.get_text();
	_g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var $char = haxe_Utf8.charCodeAt(textField.get_text(),i);
		if($char == openfl__$internal_renderer_cairo_CairoTextField.__utf8_endline_code) lines++;
	}
	return lines;
};
openfl__$internal_renderer_cairo_CairoTextField.getLineBreakIndices = function(textField) {
	var breaks = [];
	var _g1 = 0;
	var _g;
	var s = textField.get_text();
	_g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var $char = haxe_Utf8.charCodeAt(textField.get_text(),i);
		if($char == openfl__$internal_renderer_cairo_CairoTextField.__utf8_endline_code) breaks.push(i);
	}
	return breaks;
};
openfl__$internal_renderer_cairo_CairoTextField.getLineBreaksInRange = function(textField,i) {
	var lines = 0;
	if(textField.__ranges.length > i && i >= 0) {
		var range = textField.__ranges[i];
		if(range.start > 0 && range.end < textField.get_text().length) {
			var _g1 = range.start;
			var _g = range.end + 1;
			while(_g1 < _g) {
				var j = _g1++;
				var $char = haxe_Utf8.charCodeAt(textField.get_text(),i);
				if($char == openfl__$internal_renderer_cairo_CairoTextField.__utf8_endline_code) lines++;
			}
		}
	}
	return lines;
};
openfl__$internal_renderer_cairo_CairoTextField.getLineIndices = function(textField,line) {
	var breaks = openfl__$internal_renderer_cairo_CairoTextField.getLineBreakIndices(textField);
	var i = 0;
	var first_char = 0;
	var last_char = textField.get_text().length - 1;
	var _g = 0;
	while(_g < breaks.length) {
		var br = breaks[_g];
		++_g;
		if(i == line) {
			first_char = br + 1;
			if(i != breaks.length - 1) last_char = breaks[i + 1] - 1;
		}
		i++;
	}
	return [first_char,last_char];
};
openfl__$internal_renderer_cairo_CairoTextField.getLineMetric = function(textField,line,metric) {
	if(textField.__ranges == null) return openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNull(textField,true,metric); else return openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNotNull(textField,line,metric);
};
openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNotNull = function(textField,specificLine,metric) {
	var lineChars = openfl__$internal_renderer_cairo_CairoTextField.getLineIndices(textField,specificLine);
	var m = 0.0;
	var best_m = 0.0;
	var _g = 0;
	var _g1 = textField.__ranges;
	while(_g < _g1.length) {
		var range = _g1[_g];
		++_g;
		if(range.start >= lineChars[0]) {
			var font = openfl__$internal_renderer_cairo_CairoTextField.getFontInstance(range.format);
			if(font != null) switch(metric) {
			case 2:
				m = openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNotNull(textField,specificLine,0) + openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNotNull(textField,specificLine,1) + openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNotNull(textField,specificLine,3);
				break;
			case 0:
				m = font.get_ascender() / font.get_unitsPerEM() * textField.__textFormat.size;
				break;
			case 1:
				m = Math.abs(font.get_descender() / font.get_unitsPerEM() * textField.__textFormat.size);
				break;
			case 3:
				m = textField.__textFormat.leading;
				break;
			default:
				m = 0;
			}
		}
		if(m > best_m) best_m = m;
		m = 0;
	}
	return best_m;
};
openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNull = function(textField,singleLine,metric) {
	if(singleLine == null) singleLine = false;
	var font = openfl__$internal_renderer_cairo_CairoTextField.getFontInstance(textField.__textFormat);
	if(font != null) switch(metric) {
	case 2:
		return openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNull(textField,singleLine,0) + openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNull(textField,singleLine,1) + openfl__$internal_renderer_cairo_CairoTextField.getLineMetricSubRangesNull(textField,singleLine,3);
	case 0:
		return font.get_ascender() / font.get_unitsPerEM() * textField.__textFormat.size;
	case 1:
		return Math.abs(font.get_descender() / font.get_unitsPerEM() * textField.__textFormat.size);
	case 3:
		return textField.__textFormat.leading;
	default:
		return 0;
	}
	return 0;
};
openfl__$internal_renderer_cairo_CairoTextField.getLineWidth = function(textField,line) {
	return 0;
};
openfl__$internal_renderer_cairo_CairoTextField.getTextHeight = function(textField) {
	var th = 0.0;
	var _g1 = 0;
	var _g = textField.get_numLines();
	while(_g1 < _g) {
		var i = _g1++;
		th += openfl__$internal_renderer_cairo_CairoTextField.getLineMetric(textField,i,0) + openfl__$internal_renderer_cairo_CairoTextField.getLineMetric(textField,i,1);
		if(i != textField.get_numLines() - 1) th += openfl__$internal_renderer_cairo_CairoTextField.getLineMetric(textField,i,3);
	}
	return th;
};
openfl__$internal_renderer_cairo_CairoTextField.getTextWidth = function(textField,text) {
	return 0;
};
openfl__$internal_renderer_cairo_CairoTextField.measureText = function(textField,condense) {
	if(condense == null) condense = true;
	return openfl__$internal_renderer_cairo_CairoTextField.measureTextSub(textField,condense);
};
openfl__$internal_renderer_cairo_CairoTextField.measureTextSub = function(textField,condense) {
	if(textField.__textLayout == null) textField.__textLayout = new lime_text_TextLayout();
	if(textField.__ranges == null) return openfl__$internal_renderer_cairo_CairoTextField.measureTextSubRangesNull(textField,condense); else return openfl__$internal_renderer_cairo_CairoTextField.measureTextSubRangesNotNull(textField,condense);
	return null;
};
openfl__$internal_renderer_cairo_CairoTextField.measureTextSubRangesNotNull = function(textField,condense) {
	var measurements = [];
	var textLayout = textField.__textLayout;
	var _g = 0;
	var _g1 = textField.__ranges;
	while(_g < _g1.length) {
		var range = _g1[_g];
		++_g;
		var font = openfl__$internal_renderer_cairo_CairoTextField.getFontInstance(range.format);
		var width = 0.0;
		if(font != null && range.format.size != null) {
			textLayout.set_text(null);
			textLayout.set_font(font);
			textLayout.set_size(range.format.size | 0);
			textLayout.set_text(textField.get_text().substring(range.start,range.end));
			var _g2 = 0;
			var _g3 = textLayout.get_positions();
			while(_g2 < _g3.length) {
				var position = _g3[_g2];
				++_g2;
				if(condense) width += position.advance.x; else measurements.push(position.advance.x);
			}
		}
		if(condense) measurements.push(width);
	}
	return measurements;
};
openfl__$internal_renderer_cairo_CairoTextField.measureTextSubRangesNull = function(textField,condense) {
	var font = openfl__$internal_renderer_cairo_CairoTextField.getFontInstance(textField.__textFormat);
	var width = 0.0;
	var widths = [];
	var textLayout = textField.__textLayout;
	if(font != null && textField.__textFormat.size != null) {
		textLayout.set_text(null);
		textLayout.set_font(font);
		textLayout.set_size(textField.__textFormat.size | 0);
		textLayout.set_text(textField.__text);
		var _g = 0;
		var _g1 = textLayout.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			if(condense) width += position.advance.x; else widths.push(position.advance.x);
		}
	}
	if(condense) widths.push(width);
	return widths;
};
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession) {
};
openfl__$internal_renderer_cairo_CairoTextField.renderText = function(textField,text,format,offsetX,bounds) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__worldTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.webkitImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.__image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.__image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.webkitImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bounds = null;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = null;
openfl__$internal_renderer_canvas_CanvasGraphics.graphics = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = null;
openfl__$internal_renderer_canvas_CanvasGraphics.context = null;
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat) {
	bitmap.__sync();
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.__image.get_src(),bitmapRepeat?"repeat":"no-repeat");
	return null;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.__image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	context.fill();
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = [];
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = [];
};
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function() {
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) return;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + rx,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - rx,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ry);
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var _g = 0;
	while(_g < commands.length) {
		var command = commands[_g];
		++_g;
		switch(command[1]) {
		case 3:
			var y = command[7];
			var x = command[6];
			var cy2 = command[5];
			var cx2 = command[4];
			var cy1 = command[3];
			var cx1 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
			break;
		case 4:
			var y1 = command[5];
			var x1 = command[4];
			var cy = command[3];
			var cx = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
			break;
		case 5:
			var radius = command[4];
			var y2 = command[3];
			var x2 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x2 - offsetX + radius,y2 - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
			break;
		case 6:
			var height = command[5];
			var width = command[4];
			var y3 = command[3];
			var x3 = command[2];
			x3 -= offsetX;
			y3 -= offsetY;
			var kappa = .5522848;
			var ox = width / 2 * kappa;
			var oy = height / 2 * kappa;
			var xe = x3 + width;
			var ye = y3 + height;
			var xm = x3 + width / 2;
			var ym = y3 + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x3,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
			break;
		case 8:
			var ry = command[7];
			var rx = command[6];
			var height1 = command[5];
			var width1 = command[4];
			var y4 = command[3];
			var x4 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(x4 - offsetX,y4 - offsetY,width1,height1,rx,ry);
			break;
		case 15:
			var y5 = command[3];
			var x5 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x5 - offsetX,y5 - offsetY);
			positionX = x5;
			positionY = y5;
			break;
		case 16:
			var y6 = command[3];
			var x6 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x6 - offsetX,y6 - offsetY);
			positionX = x6;
			positionY = y6;
			closeGap = true;
			startX = x6;
			startY = y6;
			break;
		case 12:
			var miterLimit = command[9];
			var joints = command[8];
			var caps = command[7];
			var scaleMode = command[6];
			var pixelHinting = command[5];
			var alpha = command[4];
			var color = command[3];
			var thickness = command[2];
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(thickness == null) openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false; else {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = thickness;
				if(joints == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = "round"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = Std.string(joints).toLowerCase();
				if(caps == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "round"; else switch(caps[1]) {
				case 0:
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "butt";
					break;
				default:
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = Std.string(caps).toLowerCase();
				}
				if(miterLimit == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = 3; else openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = miterLimit;
				if(alpha == 1 || alpha == null) if(color == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(color & 16777215,6); else {
					var r = (color & 16711680) >>> 16;
					var g = (color & 65280) >>> 8;
					var b = color & 255;
					if(color == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#000000"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 14:
			var focalPointRatio = command[9];
			var interpolationMethod = command[8];
			var spreadMethod = command[7];
			var matrix = command[6];
			var ratios = command[5];
			var alphas = command[4];
			var colors = command[3];
			var type = command[2];
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 13:
			var smooth = command[5];
			var repeat = command[4];
			var matrix1 = command[3];
			var bitmap = command[2];
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(bitmap,repeat);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 0:
			var smooth1 = command[5];
			var repeat1 = command[4];
			var matrix2 = command[3];
			var bitmap1 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(bitmap1,true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(matrix2 != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = matrix2;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = new openfl_geom_Matrix(matrix2.a,matrix2.b,matrix2.c,matrix2.d,matrix2.tx,matrix2.ty);
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var alpha1 = command[3];
			var rgb = command[2];
			if(alpha1 < 0.005) openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false; else {
				if(alpha1 == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(rgb,6); else {
					var r1 = (rgb & 16711680) >>> 16;
					var g1 = (rgb & 65280) >>> 8;
					var b1 = rgb & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + alpha1 + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var focalPointRatio1 = command[9];
			var interpolationMethod1 = command[8];
			var spreadMethod1 = command[7];
			var matrix3 = command[6];
			var ratios1 = command[5];
			var alphas1 = command[4];
			var colors1 = command[3];
			var type1 = command[2];
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(type1,colors1,alphas1,ratios1,matrix3,spreadMethod1,interpolationMethod1,focalPointRatio1);
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 7:
			var height2 = command[5];
			var width2 = command[4];
			var y7 = command[3];
			var x7 = command[2];
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(x7,y7));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(x7 + width2,y7 + height2));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = y7;
					sl = x7;
					sb = y7 + height2;
					sr = x7 + width2;
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.__image.get_src(),sl,st,sr - sl,sb - st,x7 - offsetX,y7 - offsetY,width2,height2);
				}
			}
			if(!optimizationUsed) openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(x7 - offsetX,y7 - offsetY,width2,height2);
			break;
		default:
		}
	}
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
		openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type[1]) {
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,(point.x - matrix.tx) / 2);
		break;
	case 1:
		var matrix1;
		if(matrix != null) matrix1 = new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty); else matrix1 = new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession) {
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		if(!graphics.__visible || graphics.__commands.length == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height == 0) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			graphics.__canvas.width = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width);
			graphics.__canvas.height = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height);
			var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
			var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = [];
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = [];
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var _g = 0;
			var _g1 = graphics.__commands;
			try {
				while(_g < _g1.length) {
					var command = _g1[_g];
					++_g;
					switch(command[1]) {
					case 3:case 4:case 15:case 16:
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.push(command);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.push(command);
						break;
					case 11:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 12:case 14:case 13:
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.push(command);
						break;
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.push(command);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.push(command);
						break;
					case 5:case 6:case 7:case 8:
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.push(command);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.push(command);
						break;
					case 10:
						var culling = command[5];
						var uvtData = command[4];
						var indices = command[3];
						var vertices = command[2];
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var v = vertices;
						var ind = indices;
						var uvt = uvtData;
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvtData == null) {
								var this1;
								this1 = new openfl_VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvtData = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i1 = _g3++;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data;
											var this3;
											this3 = new Array(uvtData.data.length + 10);
											data = this3;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data,0,uvtData.data.length);
											uvtData.data = data;
										}
										uvtData.data[uvtData.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
									}
									uvtData.length;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data1;
											var this4;
											this4 = new Array(uvtData.data.length + 10);
											data1 = this4;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
											uvtData.data = data1;
										}
										uvtData.data[uvtData.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
									}
									uvtData.length;
								}
							}
							var skipT = uvtData.length != v.length;
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvtData,skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0); else pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
						var i = 0;
						var l = ind.length;
						var a;
						var b;
						var c;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i < l) {
							a = i;
							b = i + 1;
							c = i + 2;
							iax = ind.data[a] * 2;
							iay = ind.data[a] * 2 + 1;
							ibx = ind.data[b] * 2;
							iby = ind.data[b] * 2 + 1;
							icx = ind.data[c] * 2;
							icy = ind.data[c] * 2 + 1;
							x1 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							switch(culling[1]) {
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i += 3;
									continue;
								}
								break;
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								i += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i += 3;
						}
						break;
					case 9:
						var count = command[6];
						var flags = command[5];
						var smooth = command[4];
						var tileData = command[3];
						var sheet = command[2];
						var useScale = (flags & 1) > 0;
						var useRotation = (flags & 2) > 0;
						var useTransform = (flags & 16) > 0;
						var useRGB = (flags & 4) > 0;
						var useAlpha = (flags & 8) > 0;
						var useRect = (flags & 32) > 0;
						var useOrigin = (flags & 64) > 0;
						var useBlendAdd = (flags & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = tileData.length;
						if(count >= 0 && totalCount > count) totalCount = count;
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						sheet.__bitmap.__sync();
						surface = sheet.__bitmap.__image.get_src();
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "lighter";
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = tileData[index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = sheet.__tileRects[tileID];
								center = sheet.__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = sheet.__rectTile;
								rect.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
								center = sheet.__point;
								if(useOrigin) {
									center.x = tileData[index + 6];
									center.y = tileData[index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(tileData[index],tileData[index + 1]);
								if(useRotation) openfl__$internal_renderer_canvas_CanvasGraphics.context.rotate(tileData[index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = tileData[index + scaleIndex];
								if(useTransform) openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
								if(useAlpha) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalAlpha = tileData[index + alphaIndex];
								openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "source-over";
						break;
					default:
						openfl_Lib.notImplemented("CanvasGraphics");
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.length > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.length > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.length != 0) {
		var context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cy1 = command[4];
				var cx2 = command[3];
				var cx1 = command[2];
				context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				positionX = x;
				positionY = y;
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				positionX = x1;
				positionY = y1;
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				x3 -= offsetX;
				y3 -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x3 + width;
				var ye = y3 + height;
				var xm = x3 + width / 2;
				var ym = y3 + height / 2;
				context.moveTo(x3,ym);
				context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
				context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
				context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				context.rect(x4 - offsetX,y4 - offsetY,width1,height1);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 15:
				var y6 = command[3];
				var x6 = command[2];
				context.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 16:
				var y7 = command[3];
				var x7 = command[2];
				context.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				break;
			default:
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getTransform();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(width,height,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			if(shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			context.globalAlpha = shape.__worldAlpha;
			var transform = shape.__worldTransform;
			if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			if(scrollRect == null) context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y); else context.drawImage(graphics.__canvas,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height);
			if(shape.__mask != null) renderSession.maskManager.popMask();
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.context = null;
openfl__$internal_renderer_canvas_CanvasTextField.clipText = function(textField,value) {
	var textWidth = openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(textField,value);
	var fillPer = textWidth / textField.__width;
	textField.set_text(fillPer > 1?(function($this) {
		var $r;
		var _this = textField.get_text();
		var pos = -1 * Math.floor(textField.get_text().length / fillPer);
		$r = HxOverrides.substr(_this,pos,null);
		return $r;
	}(this)):textField.get_text());
	return textField.get_text() + "";
};
openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function(textField) {
	textField.this_onRemovedFromStage(null);
};
openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function(textField) {
	textField.__cursorPosition = -1;
	if(textField.__hiddenInput == null) {
		textField.__hiddenInput = window.document.createElement("input");
		var hiddenInput = textField.__hiddenInput;
		hiddenInput.type = "text";
		hiddenInput.style.position = "absolute";
		hiddenInput.style.opacity = "0";
		hiddenInput.style.color = "transparent";
		hiddenInput.style.left = "0px";
		hiddenInput.style.top = "50%";
		if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
			hiddenInput.style.fontSize = "0px";
			hiddenInput.style.width = "0px";
			hiddenInput.style.height = "0px";
		} else {
			hiddenInput.style.width = "1px";
			hiddenInput.style.height = "1px";
		}
		hiddenInput.style.pointerEvents = "none";
		hiddenInput.style.zIndex = "-10000000";
		if(textField.maxChars > 0) hiddenInput.maxLength = textField.maxChars;
		window.document.body.appendChild(hiddenInput);
		hiddenInput.value = textField.__text;
	}
	if(textField.stage != null) textField.this_onAddedToStage(null); else {
		textField.addEventListener(openfl_events_Event.ADDED_TO_STAGE,$bind(textField,textField.this_onAddedToStage));
		textField.addEventListener(openfl_events_Event.REMOVED_FROM_STAGE,$bind(textField,textField.this_onRemovedFromStage));
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.getLineBreakIndices = function(textField) {
	var breaks = [];
	var _g1 = 0;
	var _g;
	var s = textField.get_text();
	_g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var $char = haxe_Utf8.charCodeAt(textField.get_text(),i);
		if($char == openfl__$internal_renderer_canvas_CanvasTextField.__utf8_endline_code) breaks.push(i);
	}
	return breaks;
};
openfl__$internal_renderer_canvas_CanvasTextField.getLineWidth = function(textField,line) {
	if(textField.__context == null) {
		textField.__canvas = window.document.createElement("canvas");
		textField.__context = textField.__canvas.getContext("2d");
	}
	var linebreaks = openfl__$internal_renderer_canvas_CanvasTextField.getLineBreakIndices(textField);
	var context = textField.__context;
	context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat);
	if(line == -1) {
		var longest = 0.0;
		var _g1 = 0;
		var _g = linebreaks.length;
		while(_g1 < _g) {
			var i = _g1++;
			longest = Math.max(longest,context.measureText(textField.__text.substring(i == 0?0:linebreaks[i - 1] + 1,linebreaks[i])).width);
		}
		longest = Math.max(longest,context.measureText(textField.__text.substring(linebreaks.length == 0?0:linebreaks[linebreaks.length - 1] + 1)).width);
		return longest;
	} else return context.measureText(textField.__text.substring(line == 0?0:linebreaks[line - 1] + 1)).width;
};
openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth = function(textField,text) {
	if(textField.__context == null) {
		textField.__canvas = window.document.createElement("canvas");
		textField.__context = textField.__canvas.getContext("2d");
	}
	textField.__context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat);
	textField.__context.textAlign = "left";
	return textField.__context.measureText(text).width;
};
openfl__$internal_renderer_canvas_CanvasTextField.measureText = function(textField,condense) {
	if(condense == null) condense = true;
	if(textField.__context == null) {
		textField.__canvas = window.document.createElement("canvas");
		textField.__context = textField.__canvas.getContext("2d");
	}
	if(textField.__ranges == null) {
		textField.__context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat);
		return [textField.__context.measureText(textField.__text).width];
	} else {
		var measurements = [];
		var _g = 0;
		var _g1 = textField.__ranges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			textField.__context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(range.format);
			measurements.push(textField.__context.measureText(textField.get_text().substring(range.start,range.end)).width);
		}
		return measurements;
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession) {
	var bounds = textField.getBounds(null);
	if(textField.__dirty) {
		if((textField.__text == null || textField.__text == "") && !textField.background && !textField.border && !textField.__hasFocus || (textField.get_width() <= 0 || textField.get_height() <= 0) && textField.autoSize != openfl_text_TextFieldAutoSize.NONE) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics == null || textField.__graphics.__canvas == null) {
				if(textField.__graphics == null) textField.__graphics = new openfl_display_Graphics();
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
				textField.__graphics.__bounds = new openfl_geom_Rectangle(0,0,bounds.width,bounds.height);
			}
			var graphics = textField.__graphics;
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			if(textField.__text != null && textField.__text != "" || textField.__hasFocus) {
				var text = textField.get_text();
				if(textField.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g = 0;
					while(_g < length) {
						var i = _g++;
						mask += "*";
					}
					text = mask;
				}
				var measurements = openfl__$internal_renderer_canvas_CanvasTextField.measureText(textField);
				graphics.__canvas.width = Math.ceil(textField.__width);
				graphics.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,textField.get_width() - 1,textField.get_height() - 1);
					if(textField.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__hasFocus && textField.__selectionStart == textField.__cursorPosition && textField.__showCursor) {
					var cursorOffset = openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(textField,text.substring(0,textField.__cursorPosition)) + 3;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.__textFormat.color,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(cursorOffset,5,1,textField.__textFormat.size * 1.185 - 4);
				} else if(textField.__hasFocus && Math.abs(textField.__selectionStart - textField.__cursorPosition) > 0) {
					var lowPos = Std["int"](Math.min(textField.__selectionStart,textField.__cursorPosition));
					var highPos = Std["int"](Math.max(textField.__selectionStart,textField.__cursorPosition));
					var xPos = openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(textField,text.substring(0,lowPos)) + 2;
					var widthPos = openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(textField,text.substring(lowPos,highPos));
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(xPos,5,widthPos,textField.__textFormat.size * 1.185 - 4);
				}
				if(textField.__ranges == null) openfl__$internal_renderer_canvas_CanvasTextField.renderText(textField,text,textField.__textFormat,0,bounds); else {
					var currentIndex = 0;
					var range;
					var offsetX = 0.0;
					var _g1 = 0;
					var _g2 = textField.__ranges.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						range = textField.__ranges[i1];
						openfl__$internal_renderer_canvas_CanvasTextField.renderText(textField,text.substring(range.start,range.end),range.format,offsetX,bounds);
						offsetX += measurements[i1];
					}
				}
			} else {
				graphics.__canvas.width = Math.ceil(textField.__width);
				graphics.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					if(textField.border) openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,textField.get_width() - 1,textField.get_height() - 1); else openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,textField.get_width(),textField.get_height());
					if(textField.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.renderText = function(textField,text,format,offsetX,bounds) {
	openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_renderer_dom_DOMTextField.getFont(format);
	openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(format.color,6);
	openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
	var yOffset = 0.0;
	if(new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent)) yOffset = format.size * 0.185;
	var lines = [];
	if(textField.get_wordWrap()) {
		var words = text.split(" ");
		var line = "";
		var word;
		var newLineIndex;
		var test;
		var _g1 = 0;
		var _g = words.length;
		while(_g1 < _g) {
			var i = _g1++;
			word = words[i];
			newLineIndex = word.indexOf("\n");
			if(newLineIndex > -1) {
				while(newLineIndex > -1) {
					test = line + word.substring(0,newLineIndex) + " ";
					if(openfl__$internal_renderer_canvas_CanvasTextField.context.measureText(test).width > textField.__width - 4 && i > 0) {
						lines.push(line);
						lines.push(word.substring(0,newLineIndex));
					} else lines.push(line + word.substring(0,newLineIndex));
					word = HxOverrides.substr(word,newLineIndex + 1,null);
					newLineIndex = word.indexOf("\n");
					line = "";
				}
				if(word != "") line = word + " ";
			} else {
				test = line + words[i] + " ";
				if(openfl__$internal_renderer_canvas_CanvasTextField.context.measureText(test).width > textField.__width - 4 && i > 0) {
					lines.push(line);
					line = words[i] + " ";
				} else line = test;
			}
		}
		if(line != "") lines.push(line);
	} else lines = text.split("\n");
	var _g2 = 0;
	while(_g2 < lines.length) {
		var line1 = lines[_g2];
		++_g2;
		var _g11 = format.align;
		switch(_g11[1]) {
		case 3:
			openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "center";
			openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(line1,offsetX + textField.get_width() / 2,2 + yOffset,textField.get_textWidth());
			break;
		case 1:
			openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "end";
			openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(line1,offsetX + textField.get_width() - 2,2 + yOffset,textField.get_textWidth());
			break;
		default:
			openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
			openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(line1,2 + offsetX,2 + yOffset,textField.get_textWidth());
		}
		yOffset += format.size * 1.185 + format.leading;
		offsetX = 0;
	}
};
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.bitmapData.__image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.webkitImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.__image.buffer.__srcCanvas,0,0);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.__image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(width,height,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__worldTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = displayObject.__worldClip.transform(displayObject.__worldTransform.clone().invert());
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	element: null
	,render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = new openfl_geom_Matrix();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform = transform.mult(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.getFont = function(format) {
	var font;
	if(format.italic) font = "italic "; else font = "normal ";
	font += "normal ";
	if(format.bold) font += "bold "; else font += "normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading) + "px ";
	font += "" + (function($this) {
		var $r;
		var _g = format.font;
		$r = (function($this) {
			var $r;
			switch(_g) {
			case "_sans":
				$r = "sans-serif";
				break;
			case "_serif":
				$r = "serif";
				break;
			case "_typewriter":
				$r = "monospace";
				break;
			default:
				$r = "'" + format.font + "'";
			}
			return $r;
		}($this));
		return $r;
	}(this));
	return font;
};
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		div.innerHTML = new EReg("\n","g").replace(textField.__text,"<br>");
		div.style.setProperty("font",openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textField.__measuredWidth = div.clientWidth;
	if(textField.__div == null) div.style.width = Std.string(textField.__width - 4) + "px";
	textField.__measuredHeight = div.clientHeight;
	if(textField.__div == null) window.document.body.removeChild(div);
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textField.__text != "" || textField.background || textField.border) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("cursor","inherit",null);
				}
				var style = textField.__style;
				textField.__div.innerHTML = textField.__text;
				if(textField.background) style.setProperty("background-color","#" + StringTools.hex(textField.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textField.border) style.setProperty("border","solid 1px #" + StringTools.hex(textField.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",openfl__$internal_renderer_dom_DOMTextField.getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textField.autoSize != openfl_text_TextFieldAutoSize.NONE) style.setProperty("width","auto",null); else style.setProperty("width",textField.__width + "px",null);
				style.setProperty("height",textField.__height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g[1]) {
				case 3:
					style.setProperty("text-align","center",null);
					break;
				case 1:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,false);
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0 || bitmap.bitmapData == null || !bitmap.bitmapData.__isValid) return;
	renderSession.spriteBatch.renderBitmapData(bitmap.bitmapData,bitmap.smoothing,bitmap.__worldTransform,bitmap.__worldColorTransform,bitmap.__worldAlpha,bitmap.__blendMode,bitmap.pixelSnapping);
};
var openfl__$internal_renderer_opengl_GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) preserveDrawingBuffer = false;
	if(antialias == null) antialias = false;
	if(transparent == null) transparent = false;
	if(height == null) height = 600;
	if(width == null) width = 800;
	this.vpHeight = 0;
	this.vpWidth = 0;
	this.vpY = 0;
	this.vpX = 0;
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
	this.gl = gl;
	this.defaultFramebuffer = null;
	openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = gl;
	this.projectionMatrix = new openfl_geom_Matrix();
	this.projection = new openfl_geom_Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl_geom_Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl__$internal_renderer_opengl_utils_ShaderManager(gl);
	this.spriteBatch = new openfl__$internal_renderer_opengl_utils_SpriteBatch(gl);
	this.filterManager = new openfl__$internal_renderer_opengl_utils_FilterManager(gl,this.transparent);
	this.stencilManager = new openfl__$internal_renderer_opengl_utils_StencilManager(gl);
	this.blendModeManager = new openfl__$internal_renderer_opengl_utils_BlendModeManager(gl);
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.maskManager = this.maskManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	this.renderSession.defaultFramebuffer = this.defaultFramebuffer;
	this.renderSession.projectionMatrix = this.projectionMatrix;
	this.maskManager = new openfl__$internal_renderer_opengl_utils_GLMaskManager(this.renderSession);
	this.renderSession.maskManager = this.maskManager;
	this.shaderManager.setShader(this.shaderManager.defaultShader);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.renderBitmap = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	if(shape.__graphics == null || shape.__graphics.__bitmap == null) return;
	var bounds = shape.getBounds(null);
	var bitmap = shape.__graphics.__bitmap;
	var local = new openfl_geom_Matrix();
	local.translate(shape.__graphics.__bounds.x,shape.__graphics.__bounds.y);
	local = local.mult(shape.__worldTransform);
	renderSession.spriteBatch.renderBitmapData(bitmap,true,local,shape.__worldColorTransform,shape.__worldAlpha,shape.__blendMode,openfl_display_PixelSnapping.ALWAYS);
};
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	blendModeManager: null
	,contextLost: null
	,defaultFramebuffer: null
	,filterManager: null
	,gl: null
	,_glContextId: null
	,maskManager: null
	,offset: null
	,options: null
	,preserveDrawingBuffer: null
	,projection: null
	,shaderManager: null
	,spriteBatch: null
	,stencilManager: null
	,view: null
	,projectionMatrix: null
	,__stage: null
	,vpX: null
	,vpY: null
	,vpWidth: null
	,vpHeight: null
	,destroy: function() {
		openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = null;
		this.projection = null;
		this.offset = null;
		this.shaderManager.destroy();
		this.spriteBatch.destroy();
		this.maskManager.destroy();
		this.filterManager.destroy();
		this.shaderManager = null;
		this.spriteBatch = null;
		this.maskManager = null;
		this.filterManager = null;
		this.gl = null;
		this.renderSession = null;
	}
	,setViewport: function(x,y,width,height) {
		if(!(this.vpX == x && this.vpY == y && this.vpWidth == width && this.vpHeight == height)) {
			this.vpX = x;
			this.vpY = y;
			this.vpWidth = width;
			this.vpHeight = height;
			this.gl.viewport(x,y,width,height);
			this.setOrtho(x,y,width,height);
		}
	}
	,setOrtho: function(x,y,width,height) {
		var o = this.projectionMatrix;
		o.identity();
		o.a = 1 / width * 2;
		o.d = -1 / height * 2;
		o.tx = -1 - x * o.a;
		o.ty = 1 - y * o.d;
	}
	,handleContextLost: function(event) {
		event.preventDefault();
		this.contextLost = true;
	}
	,handleContextRestored: function() {
		var gl = this.gl;
		openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
		this.shaderManager.setContext(gl);
		this.spriteBatch.setContext(gl);
		this.maskManager.setContext(gl);
		this.filterManager.setContext(gl);
		this.renderSession.gl = gl;
		this.defaultFramebuffer = null;
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);
		gl.enable(gl.BLEND);
		gl.colorMask(true,true,true,this.transparent);
		this.setViewport(0,0,this.width,this.height);
		this.contextLost = false;
	}
	,render: function(stage) {
		if(this.contextLost) return;
		var gl = this.gl;
		this.setViewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.defaultFramebuffer);
		if(this.transparent) gl.clearColor(0,0,0,0); else gl.clearColor(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2],1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(openfl_display_BlendMode.NORMAL);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.finish();
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		this.setViewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_GLTextField = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLTextField"] = openfl__$internal_renderer_opengl_GLTextField;
openfl__$internal_renderer_opengl_GLTextField.__name__ = ["openfl","_internal","renderer","opengl","GLTextField"];
openfl__$internal_renderer_opengl_GLTextField.render = function(textField,renderSession) {
	if(!textField.__renderable || textField.__worldAlpha <= 0) return;
	openfl__$internal_renderer_TextFieldGraphics.render(textField);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(textField,renderSession);
};
var openfl__$internal_renderer_opengl_shaders2_Shader = function(gl) {
	this.uniforms = new haxe_ds_StringMap();
	this.attributes = new haxe_ds_StringMap();
	this.ID = openfl__$internal_renderer_opengl_shaders2_Shader.UID++;
	this.gl = gl;
	this.program = null;
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_Shader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","Shader"];
openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var vertexShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,vertexSrc,gl.VERTEX_SHADER);
	var fragmentShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,fragmentSrc,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	if(vertexShader != null && fragmentShader != null) {
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) haxe_Log.trace("Could not initialize shaders",{ fileName : "Shader.hx", lineNumber : 127, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
	}
	return program;
};
openfl__$internal_renderer_opengl_shaders2_Shader.compileShader = function(gl,shaderSrc,type) {
	var src = shaderSrc.join("\n");
	var shader = gl.createShader(type);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace(gl.getShaderInfoLog(shader),{ fileName : "Shader.hx", lineNumber : 141, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		return null;
	}
	return shader;
};
openfl__$internal_renderer_opengl_shaders2_Shader.prototype = {
	gl: null
	,vertexSrc: null
	,fragmentSrc: null
	,attributes: null
	,uniforms: null
	,ID: null
	,program: null
	,init: function() {
		this.program = openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram(this.gl,this.vertexSrc,this.fragmentSrc);
		this.gl.useProgram(this.program);
	}
	,destroy: function() {
		if(this.program != null) this.gl.deleteProgram(this.program);
		this.attributes = null;
	}
	,getAttribLocation: function(attribute) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.attributes.exists(attribute)) return this.attributes.get(attribute); else {
			var location = this.gl.getAttribLocation(this.program,attribute);
			this.attributes.set(attribute,location);
			return location;
		}
	}
	,getUniformLocation: function(uniform) {
		if(this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
		if(this.uniforms.exists(uniform)) return this.uniforms.get(uniform); else {
			var location = this.gl.getUniformLocation(this.program,uniform);
			this.uniforms.set(uniform,location);
			return location;
		}
	}
	,enableVertexAttribute: function(attribute,stride,offset) {
		var location = this.getAttribLocation(attribute.name);
		this.gl.enableVertexAttribArray(location);
		this.gl.vertexAttribPointer(location,attribute.components,attribute.type,attribute.normalized,stride,offset * 4);
	}
	,disableVertexAttribute: function(attribute,setDefault) {
		if(setDefault == null) setDefault = true;
		var location = this.getAttribLocation(attribute.name);
		this.gl.disableVertexAttribArray(location);
		if(setDefault) {
			var _g = attribute.components;
			switch(_g) {
			case 1:
				this.gl.vertexAttrib1fv(location,attribute.defaultValue.subarray(0,1));
				break;
			case 2:
				this.gl.vertexAttrib2fv(location,attribute.defaultValue.subarray(0,2));
				break;
			case 3:
				this.gl.vertexAttrib3fv(location,attribute.defaultValue.subarray(0,3));
				break;
			default:
				this.gl.vertexAttrib4fv(location,attribute.defaultValue.subarray(0,4));
			}
		}
	}
	,bindVertexArray: function(va) {
		var offset = 0;
		var stride = va.get_stride();
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			if(attribute.enabled) {
				this.enableVertexAttribute(attribute,stride,offset);
				offset += Math.floor(attribute.components * attribute.getElementsBytes() / 4);
			} else this.disableVertexAttribute(attribute,true);
		}
	}
	,unbindVertexArray: function(va) {
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this.disableVertexAttribute(attribute,false);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_Shader
};
var openfl__$internal_renderer_opengl_shaders2_DefaultShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","attribute vec2 " + "aTexCoord0" + ";","attribute vec4 " + "aColor" + ";","uniform mat3 " + "uProjectionMatrix" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + "aTexCoord0" + ";","   vColor = " + "aColor" + ";","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "uSampler0" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec4 tc = texture2D(" + "uSampler0" + ", vTexCoord);","   gl_FragColor = colorTransform(tc, vColor, " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl__$internal_renderer_opengl_shaders2_DefaultShader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DefaultShader"];
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DefaultShader
});
var openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","attribute vec2 " + "aTexCoord0" + ";","attribute vec4 " + "aColor" + ";","uniform mat3 " + "uProjectionMatrix" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + "aTexCoord0" + ";","   vColor = " + "aColor" + ".bgra;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "uSampler0" + ";","uniform vec3 " + "uColor" + ";","uniform bool " + "uUseTexture" + ";","uniform float " + "uAlpha" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 tmp;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   if(" + "uUseTexture" + ") {","       tmp = texture2D(" + "uSampler0" + ", vTexCoord);","   } else {","       tmp = vec4(" + "uColor" + ", 1.);","   }","   gl_FragColor = colorTransform(tmp, vColor, " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DrawTrianglesShader"];
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aTexCoord0");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uUseTexture");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader
});
var openfl__$internal_renderer_opengl_shaders2_FillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","uniform mat3 " + "uTranslationMatrix" + ";","uniform mat3 " + "uProjectionMatrix" + ";","uniform vec4 " + "uColor" + ";","uniform float " + "uAlpha" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * " + "uTranslationMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "uColor" + ", " + "uAlpha" + ", " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl__$internal_renderer_opengl_shaders2_FillShader;
openfl__$internal_renderer_opengl_shaders2_FillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","FillShader"];
openfl__$internal_renderer_opengl_shaders2_FillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_FillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uColor");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_FillShader
});
var openfl__$internal_renderer_opengl_shaders2_PatternFillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","uniform mat3 " + "uTranslationMatrix" + ";","uniform mat3 " + "uProjectionMatrix" + ";","uniform mat3 " + "uPatternMatrix" + ";","varying vec2 vPosition;","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * " + "uTranslationMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vPosition = (" + "uPatternMatrix" + " * vec3(" + "aPosition" + ", 1)).xy;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform float " + "uAlpha" + ";","uniform vec2 " + "uPatternTL" + ";","uniform vec2 " + "uPatternBR" + ";","uniform sampler2D " + "uSampler0" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","varying vec2 vPosition;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec2 pos = mix(" + "uPatternTL" + ", " + "uPatternBR" + ", vPosition);","   vec4 tcol = texture2D(" + "uSampler0" + ", pos);","   gl_FragColor = colorTransform(tcol, " + "uAlpha" + ", " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl__$internal_renderer_opengl_shaders2_PatternFillShader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PatternFillShader"];
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uPatternMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uSampler0");
		this.getUniformLocation("uPatternTL");
		this.getUniformLocation("uPatternBR");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PatternFillShader
});
var openfl__$internal_renderer_opengl_shaders2_PrimitiveShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "aPosition" + ";","attribute vec4 " + "aColor" + ";","uniform mat3 " + "uTranslationMatrix" + ";","uniform mat3 " + "uProjectionMatrix" + ";","uniform vec4 " + "uColorMultiplier" + ";","uniform vec4 " + "uColorOffset" + ";","uniform float " + "uAlpha" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "uProjectionMatrix" + " * " + "uTranslationMatrix" + " * vec3(" + "aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "aColor" + ", " + "uAlpha" + ", " + "uColorMultiplier" + ", " + "uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl__$internal_renderer_opengl_shaders2_PrimitiveShader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PrimitiveShader"];
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function() {
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this);
		this.getAttribLocation("aPosition");
		this.getAttribLocation("aColor");
		this.getUniformLocation("uTranslationMatrix");
		this.getUniformLocation("uProjectionMatrix");
		this.getUniformLocation("uAlpha");
		this.getUniformLocation("uColorMultiplier");
		this.getUniformLocation("uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PrimitiveShader
});
var openfl__$internal_renderer_opengl_utils_BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
	if(openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes == null) {
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes = new haxe_ds_EnumValueMap();
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.NORMAL,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.ADD,{ src : 1, dest : 1, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.MULTIPLY,{ src : 774, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.SCREEN,{ src : 1, dest : 769, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.SUBTRACT,{ src : 1, dest : 1, func : 32779});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.LAYER,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.DARKEN,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.LIGHTEN,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.ERASE,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.ALPHA,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.INVERT,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.DIFFERENCE,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.HARDLIGHT,{ src : 1, dest : 771, func : 32774});
		openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.set(openfl_display_BlendMode.OVERLAY,{ src : 1, dest : 771, func : 32774});
	}
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl__$internal_renderer_opengl_utils_BlendModeManager;
openfl__$internal_renderer_opengl_utils_BlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","utils","BlendModeManager"];
openfl__$internal_renderer_opengl_utils_BlendModeManager.prototype = {
	currentBlendMode: null
	,gl: null
	,destroy: function() {
		this.gl = null;
	}
	,setBlendMode: function(blendMode,force) {
		if(force == null) force = false;
		if(blendMode == null) {
			blendMode = openfl_display_BlendMode.NORMAL;
			force = true;
		}
		if(!force && this.currentBlendMode == blendMode) return false;
		this.currentBlendMode = blendMode;
		var glBlend = openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes.get(this.currentBlendMode);
		this.gl.blendEquation(glBlend.func);
		this.gl.blendFunc(glBlend.src,glBlend.dest);
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_BlendModeManager
};
var openfl__$internal_renderer_opengl_utils_DrawPath = function() {
	this.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	this.points = [];
	this.winding = 0;
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	this.fill = openfl__$internal_renderer_opengl_utils_FillType.None;
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl__$internal_renderer_opengl_utils_DrawPath;
openfl__$internal_renderer_opengl_utils_DrawPath.__name__ = ["openfl","_internal","renderer","opengl","utils","DrawPath"];
openfl__$internal_renderer_opengl_utils_DrawPath.getStack = function(graphics,gl) {
	return openfl__$internal_renderer_opengl_utils_PathBuiler.build(graphics,gl);
};
openfl__$internal_renderer_opengl_utils_DrawPath.prototype = {
	line: null
	,fill: null
	,fillIndex: null
	,isRemovable: null
	,winding: null
	,points: null
	,type: null
	,update: function(line,fill,fillIndex,winding) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
		this.winding = winding;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color;
		if(line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
		if(line.scaleMode == null) this.line.scaleMode = openfl_display_LineScaleMode.NORMAL; else this.line.scaleMode = line.scaleMode;
		if(line.caps == null) this.line.caps = openfl_display_CapsStyle.ROUND; else this.line.caps = line.caps;
		if(line.joints == null) this.line.joints = openfl_display_JointStyle.ROUND; else this.line.joints = line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_DrawPath
};
var openfl__$internal_renderer_opengl_utils_PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl__$internal_renderer_opengl_utils_PathBuiler;
openfl__$internal_renderer_opengl_utils_PathBuiler.__name__ = ["openfl","_internal","renderer","opengl","utils","PathBuiler"];
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__line = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.closePath = function() {
	var l = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length;
	if(l <= 0) return;
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type == openfl__$internal_renderer_opengl_utils_GraphicType.Polygon && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.fill != openfl__$internal_renderer_opengl_utils_FillType.None) {
		var sx = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[0];
		var sy = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[1];
		var ex = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 2];
		var ey = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(sx,sy);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.endFill = function() {
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
};
openfl__$internal_renderer_opengl_utils_PathBuiler.moveTo = function(x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo = function(x,y) {
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var push_point = true;
	if(points.length > 1) {
		var lastX = points[points.length - 2];
		var lastY = points[points.length - 1];
		if(lastX == x && lastY == y) push_point = false;
	}
	if(push_point == true) {
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo = function(cx,cy,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	var xa = 0;
	var ya = 0;
	var n = 20;
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo = function(cx,cy,cx2,cy2,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	var n = 20;
	var dt = 0;
	var dt2 = 0;
	var dt3 = 0;
	var t2 = 0;
	var t3 = 0;
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		dt = 1 - tmp;
		dt2 = dt * dt;
		dt3 = dt2 * dt;
		t2 = tmp * tmp;
		t3 = t2 * tmp;
		px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
		py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.graphicDataPop = function() {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
};
openfl__$internal_renderer_opengl_utils_PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = [];
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId] = new openfl__$internal_renderer_opengl_utils_GLStack(gl);
	if(!graphics.__visible || graphics.__commands.length == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
	} else {
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmap = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(bitmap != null) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Texture(bitmap,matrix,repeat,smooth); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 1:
				var alpha = command[3];
				var rgb = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				if(alpha > 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Color(rgb & 16777215,alpha); else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 3:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cx2 = command[4];
				var cy = command[3];
				var cx = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo(cx,cy,cx2,cy2,x,y);
				break;
			case 4:
				var y1 = command[5];
				var x1 = command[4];
				var cy1 = command[3];
				var cx1 = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo(cx1,cy1,x1,y1);
				break;
			case 5:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Circle;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x2,y2,radius];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 6:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x3,y3,width,height];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 7:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x4,y4,width1,height1];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 8:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				if(ry == -1) ry = rx;
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width2 / 2) rx = width2 / 2;
				if(ry > height2 / 2) ry = height2 / 2;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(true);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x5,y5,width2,height2,rx,ry];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 11:
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				break;
			case 12:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color = command[3];
				var thickness = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
				if(thickness == null || isNaN(thickness) || thickness < 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 0; else if(thickness == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = thickness;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				if(color == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = 0; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = color;
				if(alpha1 == null) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = 1; else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = alpha1;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.scaleMode = scaleMode;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.caps = caps;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.joints = joints;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.miterLimit = miterLimit;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 15:
				var y6 = command[3];
				var x6 = command[2];
				openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(x6,y6);
				break;
			case 16:
				var y7 = command[3];
				var x7 = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x7);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y7);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 10:
				var blendMode = command[7];
				var colors = command[6];
				var culling = command[5];
				var uvtData = command[4];
				var indices = command[3];
				var vertices = command[2];
				var isColor;
				{
					var _g2 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
					switch(_g2[1]) {
					case 1:
						isColor = true;
						break;
					default:
						isColor = false;
					}
				}
				if(isColor && uvtData != null) continue;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				if(uvtData == null) {
					var this1;
					this1 = new openfl_VectorData();
					var this2;
					this2 = new Array(0);
					this1.data = this2;
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					{
						var _g21 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
						switch(_g21[1]) {
						case 2:
							var b = _g21[2];
							var _g4 = 0;
							var _g3 = vertices.length / 2 | 0;
							while(_g4 < _g3) {
								var i = _g4++;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data;
										var this3;
										this3 = new Array(uvtData.data.length + 10);
										data = this3;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data,0,uvtData.data.length);
										uvtData.data = data;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2] / b.width;
								}
								uvtData.length;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data1;
										var this4;
										this4 = new Array(uvtData.data.length + 10);
										data1 = this4;
										haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
										uvtData.data = data1;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i * 2 + 1] / b.height;
								}
								uvtData.length;
							}
							break;
						default:
						}
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 9:
				var count = command[6];
				var flags = command[5];
				var smooth1 = command[4];
				var tileData = command[3];
				var sheet = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles(sheet,tileData,smooth1,flags,count);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 17:
				var winding = command[4];
				var data2 = command[3];
				var commands = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				switch(winding) {
				case openfl_display_GraphicsPathWinding.EVEN_ODD:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
					break;
				case openfl_display_GraphicsPathWinding.NON_ZERO:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 1;
					break;
				default:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				}
				var command1;
				var cx3;
				var cy3;
				var cx21;
				var cy21;
				var ax;
				var ay;
				var idx = 0;
				var _g31 = 0;
				var _g22 = commands.length;
				while(_g31 < _g22) {
					var i1 = _g31++;
					command1 = commands.data[i1];
					switch(command1) {
					case 1:
						ax = data2.data[idx];
						ay = data2.data[idx + 1];
						idx += 2;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 4:
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 2:
						ax = data2.data[idx];
						ay = data2.data[idx + 1];
						idx += 2;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 5:
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax,ay);
						break;
					case 3:
						cx3 = data2.data[idx];
						cy3 = data2.data[idx + 1];
						ax = data2.data[idx + 2];
						ay = data2.data[idx + 3];
						idx += 4;
						openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo(cx3,cy3,ax,ay);
						break;
					case 6:
						cx3 = data2.data[idx];
						cy3 = data2.data[idx + 1];
						cx21 = data2.data[idx + 2];
						cy21 = data2.data[idx + 3];
						ax = data2.data[idx + 4];
						ay = data2.data[idx + 5];
						idx += 6;
						openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo(cx3,cy3,cx21,cy21,ax,ay);
						break;
					default:
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				break;
			case 18:
				var m = command[2];
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop(); else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix(m);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			default:
			}
		}
		openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
	}
	graphics.__drawPaths = openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths;
	return glStack;
};
var openfl__$internal_renderer_opengl_utils_LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = openfl_display_LineScaleMode.NORMAL;
	this.caps = openfl_display_CapsStyle.ROUND;
	this.joints = openfl_display_JointStyle.ROUND;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl__$internal_renderer_opengl_utils_LineStyle;
openfl__$internal_renderer_opengl_utils_LineStyle.__name__ = ["openfl","_internal","renderer","opengl","utils","LineStyle"];
openfl__$internal_renderer_opengl_utils_LineStyle.prototype = {
	width: null
	,color: null
	,alpha: null
	,scaleMode: null
	,caps: null
	,joints: null
	,miterLimit: null
	,__class__: openfl__$internal_renderer_opengl_utils_LineStyle
};
var openfl__$internal_renderer_opengl_utils_FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","FillType"], __constructs__ : ["None","Color","Texture","Gradient"] };
openfl__$internal_renderer_opengl_utils_FillType.None = ["None",0];
openfl__$internal_renderer_opengl_utils_FillType.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.None.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
openfl__$internal_renderer_opengl_utils_FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Gradient = ["Gradient",3];
openfl__$internal_renderer_opengl_utils_FillType.Gradient.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.Gradient.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
var openfl__$internal_renderer_opengl_utils_FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl__$internal_renderer_opengl_utils_FilterManager;
openfl__$internal_renderer_opengl_utils_FilterManager.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterManager"];
openfl__$internal_renderer_opengl_utils_FilterManager.prototype = {
	buffer: null
	,colorArray: null
	,colorBuffer: null
	,defaultShader: null
	,filterStack: null
	,gl: null
	,height: null
	,indexBuffer: null
	,offsetX: null
	,offsetY: null
	,renderSession: null
	,texturePool: null
	,transparent: null
	,uvArray: null
	,uvBuffer: null
	,vertexArray: null
	,vertexBuffer: null
	,width: null
	,applyFilterPass: function(filter,filterArea,width,height) {
	}
	,begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		this.width = 0;
		this.height = 0;
		this.buffer = buffer;
	}
	,destroy: function() {
		var gl = this.gl;
		this.filterStack = null;
		this.offsetX = 0;
		this.offsetY = 0;
		var _g = 0;
		var _g1 = this.texturePool;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.destroy();
		}
		this.texturePool = null;
		gl.deleteBuffer(this.vertexBuffer);
		gl.deleteBuffer(this.uvBuffer);
		gl.deleteBuffer(this.colorBuffer);
		gl.deleteBuffer(this.indexBuffer);
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		this.vertexArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		this.uvArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		this.colorArray = new Float32Array([1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,1,3,2]),gl.STATIC_DRAW);
	}
	,popFilter: function() {
	}
	,pushFilter: function(filterBlock) {
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl__$internal_renderer_opengl_utils_FilterManager
};
var openfl__$internal_renderer_opengl_utils_FilterTexture = function(gl,width,height,smoothing) {
	if(smoothing == null) smoothing = true;
	this.gl = gl;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterTexture"] = openfl__$internal_renderer_opengl_utils_FilterTexture;
openfl__$internal_renderer_opengl_utils_FilterTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterTexture"];
openfl__$internal_renderer_opengl_utils_FilterTexture.prototype = {
	frameBuffer: null
	,gl: null
	,renderBuffer: null
	,smoothing: null
	,texture: null
	,width: null
	,height: null
	,clear: function() {
		this.gl.clearColor(0,0,0,0);
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
	}
	,destroy: function() {
		this.gl.deleteFramebuffer(this.frameBuffer);
		this.gl.deleteTexture(this.texture);
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) return;
		this.width = width;
		this.height = height;
		this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture);
		this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,width,height,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null);
		this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.renderBuffer);
		this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,width,height);
	}
	,__class__: openfl__$internal_renderer_opengl_utils_FilterTexture
};
var openfl__$internal_renderer_opengl_utils_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.setContext(renderSession.gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLMaskManager"] = openfl__$internal_renderer_opengl_utils_GLMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","utils","GLMaskManager"];
openfl__$internal_renderer_opengl_utils_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	gl: null
	,destroy: function() {
		this.gl = null;
	}
	,pushMask: function(mask) {
		this.renderSession.stencilManager.pushMask(mask,this.renderSession);
	}
	,popMask: function() {
		this.renderSession.stencilManager.popMask(null,this.renderSession);
	}
	,setContext: function(gl) {
		if(this.renderSession != null) this.renderSession.gl = gl;
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLMaskManager
});
var openfl__$internal_renderer_opengl_utils_VertexAttribute = function(components,type,normalized,name,defaultValue) {
	if(normalized == null) normalized = false;
	this.enabled = true;
	this.normalized = false;
	this.components = components;
	this.type = type;
	this.normalized = normalized;
	this.name = name;
	if(defaultValue == null) this.defaultValue = new Float32Array(components); else this.defaultValue = defaultValue;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl__$internal_renderer_opengl_utils_VertexAttribute;
openfl__$internal_renderer_opengl_utils_VertexAttribute.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexAttribute"];
openfl__$internal_renderer_opengl_utils_VertexAttribute.prototype = {
	components: null
	,normalized: null
	,type: null
	,name: null
	,enabled: null
	,defaultValue: null
	,copy: function() {
		return new openfl__$internal_renderer_opengl_utils_VertexAttribute(this.components,this.type,this.normalized,this.name,this.defaultValue);
	}
	,getElementsBytes: function() {
		var _g = this.type;
		switch(_g) {
		case 5120:case 5121:
			return 1;
		case 5122:case 5123:
			return 2;
		default:
			return 4;
		}
	}
	,get_elements: function() {
		return Math.floor(this.components * this.getElementsBytes() / 4);
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexAttribute
	,__properties__: {get_elements:"get_elements"}
};
var openfl__$internal_renderer_opengl_utils_GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl__$internal_renderer_opengl_utils_GraphicsRenderer;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.__name__ = ["openfl","_internal","renderer","opengl","utils","GraphicsRenderer"];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastVertsBuffer = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastBucketMode = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTexture = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureRepeat = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureSmooth = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height;
	if(rectData.length == 3) height = width; else height = rectData[3];
	if(path.type == openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse) {
		width /= 2;
		height /= 2;
		x += width;
		y += height;
	}
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var totalSegs = 40;
	var seg = Math.PI * 2 / totalSegs;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		var _g = totalSegs + 1;
		while(_g1 < _g) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * width);
			verts.push(y + Math.cos(seg * i) * height);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		var _g11 = 0;
		var _g2 = totalSegs + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			path.points.push(x + Math.sin(seg * i1) * width);
			path.points.push(y + Math.cos(seg * i1) * height);
		}
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var bucket = null;
	if(path.points.length >= 6) {
		var points = path.points.slice();
		if(localCoords) {
			var _g1 = 0;
			var _g = points.length / 2 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
				points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			}
		}
		bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		fill.drawMode = glStack.gl.TRIANGLE_FAN;
		fill.verts = points;
		var indices = fill.indices;
		var length = points.length / 2 | 0;
		var _g2 = 0;
		while(_g2 < length) {
			var i1 = _g2++;
			indices.push(i1);
		}
	}
	if(path.line.width > 0) {
		if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket,localCoords);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points;
	if(points.length == 0) return;
	var line = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Line);
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
	}
	var firstPoint = new openfl_geom_Point(points[0],points[1]);
	var lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = line.verts;
	var indices = line.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var color = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb(path.line.color);
	var alpha = path.line.alpha;
	var r = color[0];
	var g = color[1];
	var b = color[2];
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g11 = 1;
	var _g2 = length - 1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		p1x = points[(i1 - 1) * 2];
		p1y = points[(i1 - 1) * 2 + 1];
		p2x = points[i1 * 2];
		p2y = points[i1 * 2 + 1];
		p3x = points[(i1 + 1) * 2];
		p3y = points[(i1 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x = perp2x / dist;
		perp2y = perp2y / dist;
		perp2x = perp2x * width;
		perp2y = perp2y * width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x = perp3x / dist;
			perp3y = perp3y / dist;
			perp3x = perp3x * width;
			perp3y = perp3y * width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			indexCount++;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!isFinite(dist)) haxe_Log.trace(perpx * perpx + perpy * perpy,{ fileName : "GraphicsRenderer.hx", lineNumber : 411, className : "openfl._internal.renderer.opengl.utils.GraphicsRenderer", methodName : "buildLine"});
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g3 = 0;
	while(_g3 < indexCount) {
		var i2 = _g3++;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildPoly = function(path,glStack) {
	if(path.points.length < 6) return;
	var points = path.points;
	var l = points.length;
	var sx = points[0];
	var sy = points[1];
	var ex = points[l - 2];
	var ey = points[l - 1];
	if(sx != ex || sy != ey) {
		points.push(sx);
		points.push(sy);
	}
	var length = points.length / 2 | 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var verts = fill.verts;
	var indices = fill.indices;
	if(fill != null) {
		var triangles = openfl__$internal_renderer_opengl_utils_PolyK.triangulate(points);
		var vertPos = verts.length / 2;
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i + 1] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			i += 3;
		}
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			verts.push(points[i1 * 2]);
			verts.push(points[i1 * 2 + 1]);
		}
	}
	if(path.line.width > 0) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var rx = points[4];
	var ry = points[5];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22;
	var recPoints = [];
	recPoints.push(xe);
	recPoints.push(ye - ry);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,xe + cx2,ye,xe - rx,ye);
	recPoints.push(x + rx);
	recPoints.push(ye);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,x,ye + cy2,x,ye - ry);
	recPoints.push(x);
	recPoints.push(y + ry);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,x - cx2,y,x + rx,y);
	recPoints.push(xe - rx);
	recPoints.push(y);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo(recPoints,xe,y - cy2,xe,y + ry);
	recPoints.push(xe);
	recPoints.push(ye - ry);
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vecPos = verts.length / 2;
		var triangles = openfl__$internal_renderer_opengl_utils_PolyK.triangulate(recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			i++;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var blendMode = args[5];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var colorAttrib = fill.vertexArray.attributes[2];
	colorAttrib.enabled = hasColors;
	colorAttrib.defaultValue = new Float32Array([1,1,1,1]);
	fill.rawVerts = true;
	fill.glLength = indices.length;
	fill.stride = Std["int"](fill.vertexArray.get_stride() / 4);
	var vertsLength = fill.glLength * fill.stride;
	var verts;
	if(fill.glVerts == null || fill.glVerts.length < vertsLength) {
		verts = new Float32Array(vertsLength);
		fill.glVerts = verts;
	} else verts = fill.glVerts;
	var glColors = new Uint32Array(verts.buffer);
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
		switch(culling[1]) {
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
			break;
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
			break;
		default:
		}
		verts[idx++] = a * x0 + c * y0 + tx;
		verts[idx++] = b * x0 + d * y0 + ty;
		verts[idx++] = uvtData.data[v0];
		verts[idx++] = uvtData.data[v0 + 1];
		if(hasColors) glColors[idx++] = colors.data[i0];
		verts[idx++] = a * x1 + c * y1 + tx;
		verts[idx++] = b * x1 + d * y1 + ty;
		verts[idx++] = uvtData.data[v1];
		verts[idx++] = uvtData.data[v1 + 1];
		if(hasColors) glColors[idx++] = colors.data[i1];
		verts[idx++] = a * x2 + c * y2 + tx;
		verts[idx++] = b * x2 + d * y2 + ty;
		verts[idx++] = uvtData.data[v2];
		verts[idx++] = uvtData.data[v2 + 1];
		if(hasColors) glColors[idx++] = colors.data[i2];
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTiles = function(path,glStack) {
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.curveTo = function(points,cx,cy,x,y) {
	var xa = 0;
	var ya = 0;
	var n = 20;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		tmp = i / n;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.quadraticBezierCurve = function(fromX,fromY,cpX,cpY,toX,toY) {
	var xa;
	var ya;
	var xb;
	var yb;
	var x;
	var y;
	var n = 20;
	var points = [];
	var getPt = function(n1,n2,perc) {
		var diff = n2 - n1;
		return n1 + diff * perc;
	};
	var j = 0.0;
	var _g1 = 0;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		j = i / n;
		xa = getPt(fromX,cpX,j);
		ya = getPt(fromY,cpY,j);
		xb = getPt(cpX,toX,j);
		yb = getPt(cpY,toY,j);
		x = getPt(xa,xb,j);
		y = getPt(ya,yb,j);
		points.push(x);
		points.push(y);
	}
	return points;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var spritebatch = renderSession.spriteBatch;
	var dirty = graphics.__dirty;
	if(graphics.__commands.length <= 0) return;
	if(dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,object.__graphics,renderSession.gl,object.cacheAsBitmap);
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics(object,renderSession,false);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics = function(object,renderSession,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	var bucket;
	var translationMatrix;
	if(localCoords) translationMatrix = openfl_geom_Matrix.__identity; else translationMatrix = object.__worldTransform;
	var clipRect = renderSession.spriteBatch.clipRect;
	var batchDrawing = renderSession.spriteBatch.drawing;
	batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		if(batchDrawing && !localCoords) renderSession.spriteBatch.finish();
		renderSession.blendModeManager.setBlendMode(object.__blendMode);
		if(clipRect != null) {
			gl.enable(gl.SCISSOR_TEST);
			gl.scissor(Math.floor(clipRect.x),Math.floor(clipRect.y),Math.floor(clipRect.width),Math.floor(clipRect.height));
		}
		bucket = glStack.buckets[i];
		var _g2 = bucket.mode;
		switch(_g2[1]) {
		case 1:case 2:
			renderSession.stencilManager.pushBucket(bucket,renderSession,translationMatrix.toArray(true));
			var shader = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,translationMatrix.toArray(true));
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill(bucket,shader,renderSession);
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			var shader1 = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,null);
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles(bucket,shader1,renderSession);
			break;
		case 6:
			if(!batchDrawing) renderSession.spriteBatch.begin(renderSession,clipRect);
			var args = bucket.graphicType.slice(2);
			renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4]);
			renderSession.spriteBatch.finish();
			break;
		default:
		}
		var ct = object.__worldColorTransform;
		var _g21 = 0;
		var _g3 = bucket.lines;
		while(_g21 < _g3.length) {
			var line = _g3[_g21];
			++_g21;
			if(line != null && line.verts.length > 0) {
				var shader2 = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader2);
				gl.uniformMatrix3fv(shader2.getUniformLocation("uTranslationMatrix"),false,translationMatrix.toArray(true));
				gl.uniformMatrix3fv(shader2.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
				gl.uniform1f(shader2.getUniformLocation("uAlpha"),1);
				gl.uniform4f(shader2.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
				gl.uniform4f(shader2.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
				line.vertexArray.bind();
				shader2.bindVertexArray(line.vertexArray);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		if(clipRect != null) gl.disable(gl.SCISSOR_TEST);
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession,clipRect);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics = function(object,graphics,gl,localCoords) {
	if(localCoords == null) localCoords = false;
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	if(graphics.__bounds == null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle(); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	var glStack = null;
	if(graphics.__dirty) glStack = openfl__$internal_renderer_opengl_utils_DrawPath.getStack(graphics,gl);
	graphics.set___dirty(false);
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var path = graphics.__drawPaths[i];
		{
			var _g21 = path.type;
			switch(_g21[1]) {
			case 0:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
				break;
			case 1:
				var rounded = _g21[2];
				if(rounded) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords); else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle(path,glStack,localCoords);
				break;
			case 2:case 3:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle(path,glStack,localCoords);
				break;
			case 4:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
				break;
			case 5:
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
				break;
			case 6:
				var m = _g21[2];
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = m;
				break;
			}
		}
		glStack.lastIndex++;
	}
	var _g3 = 0;
	var _g12 = glStack.buckets;
	while(_g3 < _g12.length) {
		var bucket = _g12[_g3];
		++_g3;
		if(bucket.uploadTileBuffer) bucket.uploadTile(Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_left()),Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_top()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_right()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_bottom()));
		bucket.optimize();
	}
	glStack.upload();
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	{
		var _g = path.fill;
		switch(_g[1]) {
		case 1:
			var a = _g[3];
			var c = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Fill);
			if(c == null) bucket.color = [1,1,1]; else bucket.color = [(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
			bucket.color[3] = a;
			bucket.uploadTileBuffer = true;
			break;
		case 2:
			var s = _g[5];
			var r = _g[4];
			var m = _g[3];
			var b = _g[2];
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill);
			bucket.bitmap = b;
			bucket.textureRepeat = r;
			bucket.textureSmooth = s;
			bucket.texture = b.getTexture(glStack.gl);
			bucket.uploadTileBuffer = true;
			var pMatrix;
			if(m == null) pMatrix = new openfl_geom_Matrix(); else pMatrix = new openfl_geom_Matrix(m.a,m.b,m.c,m.d,m.tx,m.ty);
			pMatrix.invert();
			pMatrix.scale(1 / b.width,1 / b.height);
			var tx = pMatrix.tx;
			var ty = pMatrix.ty;
			pMatrix.tx = 0;
			pMatrix.ty = 0;
			bucket.textureTL.x = tx;
			bucket.textureTL.y = ty;
			bucket.textureBR.x = tx + 1;
			bucket.textureBR.y = ty + 1;
			bucket.textureMatrix = pMatrix;
			break;
		default:
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Line);
			bucket.uploadTileBuffer = false;
		}
	}
	{
		var _g1 = path.type;
		switch(_g1[1]) {
		case 4:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles;
			bucket.uploadTileBuffer = false;
			break;
		case 5:
			bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles;
			bucket.uploadTileBuffer = false;
			break;
		default:
		}
	}
	bucket.graphicType = path.type;
	bucket.overrideMatrix = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.pop();
	if(b == null) b = new openfl__$internal_renderer_opengl_utils_GLBucket(glStack.gl);
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket = null;
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.fillIndex == fillIndex) {
			bucket = b;
			break;
		}
	}
	if(bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket(glStack,mode);
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader = function(bucket,renderSession,object,translationMatrix) {
	var gl = renderSession.gl;
	var shader = null;
	var _g = bucket.mode;
	switch(_g[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) return null;
	var newShader = renderSession.shaderManager.setShader(shader);
	gl.uniform1f(shader.getUniformLocation("uAlpha"),object.__worldAlpha);
	gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
	var ct = object.__worldColorTransform;
	gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
	gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
	var _g1 = bucket.mode;
	switch(_g1[1]) {
	case 1:
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform4fv(shader.getUniformLocation("uColor"),new Float32Array(bucket.color));
		break;
	case 2:
		gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		gl.uniform2f(shader.getUniformLocation("uPatternTL"),bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.getUniformLocation("uPatternBR"),bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("uPatternMatrix"),false,bucket.textureMatrix.toArray(true));
		break;
	case 5:
		if(bucket.texture != null) gl.uniform1i(shader.getUniformLocation("uUseTexture"),1); else {
			gl.uniform1i(shader.getUniformLocation("uUseTexture"),0);
			gl.uniform4fv(shader.getUniformLocation("uColor"),new Float32Array(bucket.color));
		}
		break;
	default:
	}
	return shader;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill && bucket.texture != null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.getAttribLocation("aPosition"),4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.fills;
	while(_g < _g1.length) {
		var fill = _g1[_g];
		++_g;
		if(fill.available) continue;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		gl.drawArrays(gl.TRIANGLES,fill.glStart,fill.glLength);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.__image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) return [1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgba = function(hex) {
	if(hex == null) return [1,1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255,(hex >> 24 & 255) / 255];
};
var openfl__$internal_renderer_opengl_utils_GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl__$internal_renderer_opengl_utils_GLStack;
openfl__$internal_renderer_opengl_utils_GLStack.__name__ = ["openfl","_internal","renderer","opengl","utils","GLStack"];
openfl__$internal_renderer_opengl_utils_GLStack.prototype = {
	lastIndex: null
	,buckets: null
	,gl: null
	,reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) bucket.upload();
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLStack
};
var openfl__$internal_renderer_opengl_utils_GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.lines = [];
	this.fills = [];
	this.fillIndex = -1;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl__$internal_renderer_opengl_utils_BucketMode.Fill;
	this.textureMatrix = new openfl_geom_Matrix();
	this.textureTL = new openfl_geom_Point();
	this.textureBR = new openfl_geom_Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl__$internal_renderer_opengl_utils_GLBucket;
openfl__$internal_renderer_opengl_utils_GLBucket.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucket"];
openfl__$internal_renderer_opengl_utils_GLBucket.prototype = {
	gl: null
	,color: null
	,alpha: null
	,dirty: null
	,graphicType: null
	,lastIndex: null
	,fillIndex: null
	,mode: null
	,fills: null
	,lines: null
	,bitmap: null
	,texture: null
	,textureMatrix: null
	,textureRepeat: null
	,textureSmooth: null
	,textureTL: null
	,textureBR: null
	,overrideMatrix: null
	,tileBuffer: null
	,glTile: null
	,tile: null
	,uploadTileBuffer: null
	,getData: function(type) {
		var data;
		switch(type[1]) {
		case 1:
			data = this.fills;
			break;
		default:
			data = this.lines;
		}
		var result = null;
		var remove = false;
		var _g = 0;
		while(_g < data.length) {
			var d = data[_g];
			++_g;
			if(d.available) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) result = new openfl__$internal_renderer_opengl_utils_GLBucketData(this.gl);
		result.available = false;
		result.parent = this;
		result.type = type;
		if(remove) HxOverrides.remove(data,result);
		data.push(result);
		switch(type[1]) {
		case 1:
			var _g1 = this.mode;
			switch(_g1[1]) {
			case 1:case 2:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes;
				break;
			case 5:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes.slice();
				result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
				break;
			default:
			}
			break;
		case 0:
			result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes;
			break;
		}
		return result;
	}
	,optimize: function() {
		var _g = this;
		var data = this.lines;
		if(data.length > 1) {
			var result = [];
			var tmp = null;
			var last = null;
			var idx = 0;
			var vi = 0;
			var ii = 0;
			var before = data.length;
			var _g1 = 0;
			while(_g1 < data.length) {
				var d = data[_g1];
				++_g1;
				if(d.available || d.rawVerts || d.rawIndices) {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
				if(last == null || last.drawMode == d.drawMode) {
					if(tmp == null) tmp = d; else {
						vi = tmp.verts.length;
						ii = tmp.indices.length;
						var _g2 = 0;
						var _g11 = d.verts.length;
						while(_g2 < _g11) {
							var j = _g2++;
							tmp.verts[j + vi] = d.verts[j];
						}
						var _g21 = 0;
						var _g12 = d.indices.length;
						while(_g21 < _g12) {
							var j1 = _g21++;
							tmp.indices[j1 + ii] = d.indices[j1] + idx;
						}
					}
					idx = tmp.indices[tmp.indices.length - 1] + 1;
					last = d;
				} else {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
			}
			if(result.length == 0 && tmp != null) result.push(tmp);
			if(result.length > 0) switch(openfl__$internal_renderer_opengl_utils_BucketDataType.Line[1]) {
			case 1:
				_g.fills = result;
				break;
			default:
				_g.lines = result;
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			fill.reset();
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			line.reset();
		}
		this.fillIndex = -1;
		this.uploadTileBuffer = true;
		this.graphicType = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	}
	,uploadTile: function(x,y,w,h) {
		if(this.tileBuffer == null) this.tileBuffer = this.gl.createBuffer();
		this.tile = [x,y,0,0,w,y,1,0,x,h,0,1,w,h,1,1];
		this.glTile = new Int16Array(this.tile);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
	}
	,upload: function() {
		if(this.mode != openfl__$internal_renderer_opengl_utils_BucketMode.Line) {
			var _g = 0;
			var _g1 = this.fills;
			while(_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				if(!fill.available) fill.upload();
			}
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			if(!line.available) line.upload();
		}
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucket
};
var openfl__$internal_renderer_opengl_utils_GLBucketData = function(gl) {
	this.available = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.indices = [];
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray([]);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl__$internal_renderer_opengl_utils_GLBucketData;
openfl__$internal_renderer_opengl_utils_GLBucketData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucketData"];
openfl__$internal_renderer_opengl_utils_GLBucketData.prototype = {
	type: null
	,gl: null
	,drawMode: null
	,glLength: null
	,glStart: null
	,vertexArray: null
	,glVerts: null
	,lastVertsSize: null
	,verts: null
	,rawVerts: null
	,stride: null
	,indexBuffer: null
	,glIndices: null
	,indices: null
	,rawIndices: null
	,available: null
	,parent: null
	,reset: function() {
		this.available = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
		this.drawMode = this.gl.TRIANGLE_STRIP;
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) this.glVerts = new Float32Array(this.verts);
			this.vertexArray.buffer = this.glVerts.buffer;
			if(this.glVerts.length <= this.lastVertsSize) {
				this.vertexArray.bind();
				var end = this.glLength * 4 * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					var view = this.glVerts.subarray(0,end);
					this.vertexArray.upload(view);
				} else this.vertexArray.upload(this.glVerts);
			} else {
				this.vertexArray.setContext(this.gl,this.glVerts);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(this.indexBuffer == null) this.indexBuffer = this.gl.createBuffer();
			if(!this.rawIndices) this.glIndices = new Uint16Array(this.indices);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucketData
};
var openfl__$internal_renderer_opengl_utils_BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketMode"], __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl__$internal_renderer_opengl_utils_BucketMode.None = ["None",0];
openfl__$internal_renderer_opengl_utils_BucketMode.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.None.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill = ["PatternFill",2];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Line = ["Line",3];
openfl__$internal_renderer_opengl_utils_BucketMode.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine = ["PatternLine",4];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles = ["DrawTiles",6];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
var openfl__$internal_renderer_opengl_utils_BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketDataType"], __constructs__ : ["Line","Fill"] };
openfl__$internal_renderer_opengl_utils_BucketDataType.Line = ["Line",0];
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
var openfl__$internal_renderer_opengl_utils_GLGraphicsData = function(gl) {
	this.indices = [];
	this.data = [];
	this.lastIndex = 0;
	this.mode = 0;
	this.dirty = true;
	this.alpha = 1.0;
	this.tint = [1.0,1.0,1.0];
	this.gl = gl;
	this.dataBuffer = gl.createBuffer();
	this.indexBuffer = gl.createBuffer();
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl__$internal_renderer_opengl_utils_GLGraphicsData;
openfl__$internal_renderer_opengl_utils_GLGraphicsData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLGraphicsData"];
openfl__$internal_renderer_opengl_utils_GLGraphicsData.prototype = {
	gl: null
	,tint: null
	,alpha: null
	,dirty: null
	,mode: null
	,lastIndex: null
	,data: null
	,glData: null
	,dataBuffer: null
	,indices: null
	,glIndices: null
	,indexBuffer: null
	,reset: function() {
		this.data = [];
		this.indices = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		this.glData = new Float32Array(this.data);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.dataBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glData,this.gl.STATIC_DRAW);
		this.glIndices = new Uint16Array(this.indices);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STATIC_DRAW);
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLGraphicsData
};
var openfl__$internal_renderer_opengl_utils_PolyK = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PolyK"] = openfl__$internal_renderer_opengl_utils_PolyK;
openfl__$internal_renderer_opengl_utils_PolyK.__name__ = ["openfl","_internal","renderer","opengl","utils","PolyK"];
openfl__$internal_renderer_opengl_utils_PolyK.triangulate = function(p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) return [];
	var tgs = [];
	var avl;
	var _g = [];
	var _g1 = 0;
	while(_g1 < n) {
		var i1 = _g1++;
		_g.push(i1);
	}
	avl = _g;
	var i = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i % al];
		var i11 = avl[(i + 1) % al];
		var i2 = avl[(i + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i11];
		var by = p[2 * i11 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl__$internal_renderer_opengl_utils_PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g11 = 0;
			while(_g11 < al) {
				var j = _g11++;
				var vi = avl[j];
				if(vi == i0 || vi == i11 || vi == i2) continue;
				if(openfl__$internal_renderer_opengl_utils_PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i + 1) % al,1);
			al--;
			i = 0;
		} else if(i++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g12 = [];
				var _g2 = 0;
				while(_g2 < n) {
					var k = _g2++;
					_g12.push(k);
				}
				avl = _g12;
				i = 0;
				al = n;
				sign = false;
			} else {
				haxe_Log.trace("Warning: shape too complex to fill",{ fileName : "GraphicsRenderer.hx", lineNumber : 1718, className : "openfl._internal.renderer.opengl.utils.PolyK", methodName : "triangulate"});
				return [];
			}
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl__$internal_renderer_opengl_utils_PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return u >= 0 && v >= 0 && u + v < 1;
};
openfl__$internal_renderer_opengl_utils_PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
var openfl__$internal_renderer_opengl_utils_GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","GraphicType"], __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles","OverrideMatrix"] };
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon = ["Polygon",0];
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.Circle = ["Circle",2];
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse = ["Ellipse",3];
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",6,matrix]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
var openfl__$internal_renderer_opengl_utils_ShaderManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl__$internal_renderer_opengl_utils_ShaderManager;
openfl__$internal_renderer_opengl_utils_ShaderManager.__name__ = ["openfl","_internal","renderer","opengl","utils","ShaderManager"];
openfl__$internal_renderer_opengl_utils_ShaderManager.prototype = {
	gl: null
	,currentShader: null
	,defaultShader: null
	,fillShader: null
	,patternFillShader: null
	,drawTrianglesShader: null
	,primitiveShader: null
	,setContext: function(gl) {
		this.gl = gl;
		this.defaultShader = new openfl__$internal_renderer_opengl_shaders2_DefaultShader(gl);
		this.fillShader = new openfl__$internal_renderer_opengl_shaders2_FillShader(gl);
		this.patternFillShader = new openfl__$internal_renderer_opengl_shaders2_PatternFillShader(gl);
		this.drawTrianglesShader = new openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader(gl);
		this.primitiveShader = new openfl__$internal_renderer_opengl_shaders2_PrimitiveShader(gl);
		this.setShader(this.defaultShader,true);
	}
	,destroy: function() {
		this.defaultShader.destroy();
		this.fillShader.destroy();
		this.patternFillShader.destroy();
		this.drawTrianglesShader.destroy();
		this.primitiveShader.destroy();
		this.gl = null;
	}
	,setShader: function(shader,force) {
		if(force == null) force = false;
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return true;
		}
		if(this.currentShader != null && !force && this.currentShader.ID == shader.ID) return false;
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_ShaderManager
};
var openfl__$internal_renderer_opengl_utils_SpriteBatch = function(gl,maxSprites) {
	if(maxSprites == null) maxSprites = 2000;
	this.lastEnableColor = true;
	this.enableColor = true;
	this.attributes = [];
	this.writtenVertexBytes = 0;
	this.drawing = false;
	this.dirty = true;
	this.states = [];
	this.maxSprites = maxSprites;
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aTexCoord0"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"aColor"));
	this.attributes[2].defaultValue = new Float32Array([1,1,1,1]);
	this.maxElementsPerVertex = 0;
	var _g = 0;
	var _g1 = this.attributes;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		this.maxElementsPerVertex += Math.floor(a.components * a.getElementsBytes() / 4);
	}
	this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
	this.indexArraySize = maxSprites * 6;
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray(this.attributes,this.vertexArraySize,false);
	this.positions = new Float32Array(this.vertexArray.buffer);
	this.colors = new Uint32Array(this.vertexArray.buffer);
	this.indices = new Uint16Array(this.indexArraySize);
	var i = 0;
	var j = 0;
	while(i < this.indexArraySize) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.currentState = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
	this.dirty = true;
	this.drawing = false;
	this.batchedSprites = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl__$internal_renderer_opengl_utils_SpriteBatch;
openfl__$internal_renderer_opengl_utils_SpriteBatch.__name__ = ["openfl","_internal","renderer","opengl","utils","SpriteBatch"];
openfl__$internal_renderer_opengl_utils_SpriteBatch.prototype = {
	gl: null
	,renderSession: null
	,states: null
	,currentState: null
	,vertexArray: null
	,positions: null
	,colors: null
	,indexBuffer: null
	,indices: null
	,dirty: null
	,drawing: null
	,clipRect: null
	,maxSprites: null
	,batchedSprites: null
	,vertexArraySize: null
	,indexArraySize: null
	,maxElementsPerVertex: null
	,elementsPerVertex: null
	,writtenVertexBytes: null
	,shader: null
	,attributes: null
	,enableColor: null
	,lastEnableColor: null
	,destroy: function() {
		this.vertexArray.destroy();
		this.vertexArray = null;
		this.indices = null;
		this.gl.deleteBuffer(this.indexBuffer);
		this.currentState.destroy();
		var _g = 0;
		var _g1 = this.states;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.destroy();
		}
		this.gl = null;
	}
	,begin: function(renderSession,clipRect) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start(clipRect);
	}
	,finish: function() {
		this.stop();
		this.clipRect = null;
		this.drawing = false;
	}
	,start: function(clipRect) {
		if(!this.drawing) throw new js__$Boot_HaxeError("Call Spritebatch.begin() before start()");
		this.dirty = true;
		this.clipRect = clipRect;
	}
	,stop: function() {
		this.flush();
	}
	,renderBitmapData: function(bitmapData,smoothing,matrix,ct,alpha,blendMode,pixelSnapping,bgra) {
		if(bgra == null) bgra = false;
		if(alpha == null) alpha = 1;
		if(bitmapData == null) return;
		var texture = bitmapData.getTexture(this.gl);
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var uvs = bitmapData.__uvData;
		if(uvs == null) return;
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,bitmapData.width,bitmapData.height,matrix,uvs,null,color,pixelSnapping);
		this.setState(this.batchedSprites,texture,smoothing,blendMode,ct,true);
		this.batchedSprites++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) return;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var blendMode;
		var _g = flags & 983040;
		switch(_g) {
		case 65536:
			blendMode = openfl_display_BlendMode.ADD;
			break;
		case 131072:
			blendMode = openfl_display_BlendMode.MULTIPLY;
			break;
		case 262144:
			blendMode = openfl_display_BlendMode.SCREEN;
			break;
		case 524288:
			blendMode = openfl_display_BlendMode.SUBTRACT;
			break;
		default:
			blendMode = openfl_display_BlendMode.NORMAL;
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) totalCount = count;
		var itemCount = totalCount / numValues | 0;
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var color = -1;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		var matrix = new openfl_geom_Matrix();
		var oMatrix = object.__worldTransform;
		var uvs = new openfl_display_TextureUvs();
		var bIndex = 0;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		while(iIndex < totalCount) {
			if(this.batchedSprites >= this.maxSprites) this.flush();
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else {
					center.x = 0;
					center.y = 0;
				}
				tileUV.setTo(rect.get_left() / sheet.__bitmap.width,rect.get_top() / sheet.__bitmap.height,rect.get_right() / sheet.__bitmap.width,rect.get_bottom() / sheet.__bitmap.height);
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				a = 1;
				b = 0;
				c = 0;
				d = 1;
				tx = 0;
				ty = 0;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				matrix.identity();
				if(useAlpha) alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha; else alpha = object.__worldAlpha;
				if(useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				if(useScale) scale = tileData[iIndex + scaleIndex];
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				matrix.a = a * oMatrix.a + b * oMatrix.c;
				matrix.b = a * oMatrix.b + b * oMatrix.d;
				matrix.c = c * oMatrix.a + d * oMatrix.c;
				matrix.d = c * oMatrix.b + d * oMatrix.d;
				matrix.tx = tx * oMatrix.a + ty * oMatrix.c + oMatrix.tx;
				matrix.ty = tx * oMatrix.b + ty * oMatrix.d + oMatrix.ty;
				uvs.x0 = tileUV.x;
				uvs.y0 = tileUV.y;
				uvs.x1 = tileUV.width;
				uvs.y1 = tileUV.y;
				uvs.x2 = tileUV.width;
				uvs.y2 = tileUV.height;
				uvs.x3 = tileUV.x;
				uvs.y3 = tileUV.height;
				bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
				color = ((alpha * 255 | 0) & 255) << 24 | (tint & 255) << 16 | (tint >> 8 & 255) << 8 | tint >> 16 & 255;
				this.fillVertices(bIndex,rect.width,rect.height,matrix,uvs,null,color,openfl_display_PixelSnapping.NEVER);
				this.setState(this.batchedSprites,texture,smooth,blendMode,object.__worldColorTransform,false);
				this.batchedSprites++;
			}
			iIndex += numValues;
		}
	}
	,renderCachedGraphics: function(object) {
		var cachedTexture = object.__graphics.__cachedTexture;
		if(cachedTexture == null) return;
		if(this.batchedSprites >= this.maxSprites) this.flush();
		var alpha = object.__worldAlpha;
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		var uvs = new openfl_display_TextureUvs();
		uvs.x0 = 0;
		uvs.y0 = 1;
		uvs.x1 = 1;
		uvs.y1 = 1;
		uvs.x2 = 1;
		uvs.y2 = 0;
		uvs.x3 = 0;
		uvs.y3 = 0;
		var worldTransform = object.__worldTransform.clone();
		worldTransform.__translateTransformed(new openfl_geom_Point(object.__graphics.__bounds.x,object.__graphics.__bounds.y));
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		this.fillVertices(index,cachedTexture.width,cachedTexture.height,worldTransform,uvs,null,color,null);
		this.setState(this.batchedSprites,cachedTexture.texture,null,object.blendMode,object.__worldColorTransform);
		this.batchedSprites++;
	}
	,fillVertices: function(index,width,height,matrix,uvs,pivot,color,pixelSnapping) {
		if(color == null) color = -1;
		var w0;
		var w1;
		var h0;
		var h1;
		if(pivot == null) {
			w0 = width;
			w1 = 0;
			h0 = height;
			h1 = 0;
		} else {
			w0 = width * (1 - pivot.x);
			w1 = width * -pivot.x;
			h0 = height * (1 - pivot.y);
			h1 = height * -pivot.y;
		}
		if(pixelSnapping == null) pixelSnapping = openfl_display_PixelSnapping.NEVER;
		var snap = pixelSnapping != openfl_display_PixelSnapping.NEVER;
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		var cOffsetIndex = 0;
		if(!snap) {
			this.positions[index++] = a * w1 + c * h1 + tx;
			this.positions[index++] = d * h1 + b * w1 + ty;
		} else {
			this.positions[index++] = Math.round(a * w1 + c * h1 + tx);
			this.positions[index++] = Math.round(d * h1 + b * w1 + ty);
		}
		this.positions[index++] = uvs.x0;
		this.positions[index++] = uvs.y0;
		if(this.enableColor) this.colors[index++] = color;
		if(!snap) {
			this.positions[index++] = a * w0 + c * h1 + tx;
			this.positions[index++] = d * h1 + b * w0 + ty;
		} else {
			this.positions[index++] = Math.round(a * w0 + c * h1 + tx);
			this.positions[index++] = Math.round(d * h1 + b * w0 + ty);
		}
		this.positions[index++] = uvs.x1;
		this.positions[index++] = uvs.y1;
		if(this.enableColor) this.colors[index++] = color;
		if(!snap) {
			this.positions[index++] = a * w0 + c * h0 + tx;
			this.positions[index++] = d * h0 + b * w0 + ty;
		} else {
			this.positions[index++] = Math.round(a * w0 + c * h0 + tx);
			this.positions[index++] = Math.round(d * h0 + b * w0 + ty);
		}
		this.positions[index++] = uvs.x2;
		this.positions[index++] = uvs.y2;
		if(this.enableColor) this.colors[index++] = color;
		if(!snap) {
			this.positions[index++] = a * w1 + c * h0 + tx;
			this.positions[index++] = d * h0 + b * w1 + ty;
		} else {
			this.positions[index++] = Math.round(a * w1 + c * h0 + tx);
			this.positions[index++] = Math.round(d * h0 + b * w1 + ty);
		}
		this.positions[index++] = uvs.x3;
		this.positions[index++] = uvs.y3;
		if(this.enableColor) this.colors[index++] = color;
		this.writtenVertexBytes = index;
	}
	,enableAttributes: function(color) {
		if(color == null) color = -1;
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		this.elementsPerVertex = this.getElementsPerVertex();
	}
	,flush: function() {
		if(this.batchedSprites == 0) return;
		if(this.clipRect != null) {
			this.gl.enable(this.gl.SCISSOR_TEST);
			this.gl.scissor(Math.floor(this.clipRect.x),Math.floor(this.clipRect.y),Math.floor(this.clipRect.width),Math.floor(this.clipRect.height));
		}
		if(this.dirty) {
			this.dirty = false;
			this.gl.activeTexture(this.gl.TEXTURE0);
			this.vertexArray.bind();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		}
		if(this.writtenVertexBytes > this.vertexArraySize * 0.5) this.vertexArray.upload(this.positions); else {
			var view = this.positions.subarray(0,this.writtenVertexBytes);
			this.vertexArray.upload(view);
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.shader = this.renderSession.shaderManager.defaultShader;
		this.currentState.texture = null;
		this.currentState.textureSmooth = false;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		this.currentState.colorTransform = null;
		this.currentState.skipColorTransformAlpha = false;
		var _g1 = 0;
		var _g = this.batchedSprites;
		while(_g1 < _g) {
			var i = _g1++;
			nextState = this.states[i];
			this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
			if(!nextState.equals(this.currentState)) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.shader = nextState.shader;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.currentState.colorTransform = nextState.colorTransform;
			}
			batchSize++;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.batchedSprites = 0;
		this.writtenVertexBytes = 0;
		if(this.clipRect != null) this.gl.disable(this.gl.SCISSOR_TEST);
	}
	,renderBatch: function(state,size,start) {
		if(size == 0 || state.texture == null) return;
		var shader;
		if(state.shader == null) shader = this.renderSession.shaderManager.defaultShader; else shader = state.shader;
		this.renderSession.shaderManager.setShader(shader);
		shader.bindVertexArray(this.vertexArray);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,this.renderSession.projectionMatrix.toArray(true));
		if(state.colorTransform != null) {
			var ct = state.colorTransform;
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,state.skipColorTransformAlpha?1:ct.alphaMultiplier);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),ct.redOffset / 255.,ct.greenOffset / 255.,ct.blueOffset / 255.,ct.alphaOffset / 255.);
		} else {
			this.gl.uniform4f(shader.getUniformLocation("uColorMultiplier"),1,1,1,1);
			this.gl.uniform4f(shader.getUniformLocation("uColorOffset"),0,0,0,0);
		}
		this.renderSession.blendModeManager.setBlendMode(state.blendMode);
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		if(state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,start * 6 * 2);
		this.renderSession.drawCount++;
	}
	,setState: function(index,texture,smooth,blendMode,colorTransform,skipAlpha) {
		if(skipAlpha == null) skipAlpha = false;
		if(smooth == null) smooth = false;
		var state = this.states[index];
		if(state == null) state = this.states[index] = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
		state.colorTransform = colorTransform;
		state.skipColorTransformAlpha = skipAlpha;
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexArray.setContext(gl,this.positions);
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
	}
	,getElementsPerVertex: function() {
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) r += Math.floor(a.components * a.getElementsBytes() / 4);
		}
		return r;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_SpriteBatch
};
var openfl__$internal_renderer_opengl_utils__$SpriteBatch_State = function() {
	this.skipColorTransformAlpha = false;
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl__$internal_renderer_opengl_utils__$SpriteBatch_State;
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.__name__ = ["openfl","_internal","renderer","opengl","utils","_SpriteBatch","State"];
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.prototype = {
	texture: null
	,textureSmooth: null
	,blendMode: null
	,colorTransform: null
	,skipColorTransformAlpha: null
	,shader: null
	,equals: function(other) {
		return (this.shader == null || other.shader == null || this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode && (this.colorTransform != null && this.colorTransform.__equals(other.colorTransform,this.skipColorTransformAlpha));
	}
	,destroy: function() {
		this.texture = null;
		this.colorTransform = null;
	}
	,__class__: openfl__$internal_renderer_opengl_utils__$SpriteBatch_State
};
var openfl__$internal_renderer_opengl_utils_StencilManager = function(gl) {
	this.stencilMask = 0;
	this.stencilStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl__$internal_renderer_opengl_utils_StencilManager;
openfl__$internal_renderer_opengl_utils_StencilManager.__name__ = ["openfl","_internal","renderer","opengl","utils","StencilManager"];
openfl__$internal_renderer_opengl_utils_StencilManager.prototype = {
	count: null
	,gl: null
	,reverse: null
	,stencilStack: null
	,stencilMask: null
	,prepareGraphics: function(fill,renderSession,translationMatrix) {
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uTranslationMatrix"),false,translationMatrix);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
		fill.vertexArray.bind();
		shader.bindVertexArray(fill.vertexArray);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,fill.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,translationMatrix,isMask) {
		if(isMask == null) isMask = false;
		if(!isMask) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
			this.gl.colorMask(false,false,false,false);
			this.gl.stencilFunc(this.gl.NEVER,1,255);
			this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		var _g = 0;
		var _g1 = bucket.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			if(fill.available) continue;
			this.prepareGraphics(fill,renderSession,translationMatrix);
			this.gl.drawElements(fill.drawMode,fill.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		if(!isMask) {
			this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL,255,255);
		}
	}
	,popBucket: function(object,bucket,renderSession) {
		this.gl.disable(this.gl.STENCIL_TEST);
	}
	,pushMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.length <= 0) return;
		if(this.stencilMask == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.stencilMask++;
		if(maskGraphics.__dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,maskGraphics,renderSession.gl);
		var func;
		if(this.stencilMask == 1) func = this.gl.NEVER; else func = this.gl.EQUAL;
		var ref = this.stencilMask;
		var mask = 255 - this.stencilMask;
		this.gl.stencilMask(255);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(func,ref,mask);
		this.gl.stencilOp(this.gl.REPLACE,this.gl.KEEP,this.gl.KEEP);
		var glStack = maskGraphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
		var bucket;
		var translationMatrix = object.__worldTransform;
		var _g1 = 0;
		var _g = glStack.buckets.length;
		while(_g1 < _g) {
			var i = _g1++;
			bucket = glStack.buckets[i];
			if(bucket.overrideMatrix != null) translationMatrix = bucket.overrideMatrix; else translationMatrix = object.__worldTransform;
			var _g2 = bucket.mode;
			switch(_g2[1]) {
			case 1:case 2:
				this.pushBucket(bucket,renderSession,translationMatrix.toArray(true),true);
				break;
			default:
			}
		}
		this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilMask,255);
	}
	,popMask: function(object,renderSession) {
		this.stencilMask--;
		if(this.stencilMask <= 0) {
			this.gl.disable(this.gl.STENCIL_TEST);
			this.stencilMask = 0;
		}
	}
	,bindGraphics: function(object,glData,renderSession) {
	}
	,destroy: function() {
		this.stencilStack = null;
		this.gl = null;
	}
	,popStencil: function(object,glData,renderSession) {
		this.stencilStack.pop();
		this.count--;
		if(this.stencilStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST); else {
			var level = this.count;
			this.bindGraphics(object,glData,renderSession);
			this.gl.colorMask(false,false,false,false);
			if(glData.mode == 1) {
				this.reverse = !this.reverse;
				if(this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
				this.gl.stencilFunc(this.gl.ALWAYS,0,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
				this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			} else {
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			}
			this.gl.colorMask(true,true,true,true);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		}
	}
	,pushStencil: function(object,glData,renderSession) {
		this.bindGraphics(object,glData,renderSession);
		if(this.stencilStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.reverse = true;
			this.count = 0;
		}
		this.stencilStack.push(glData);
		var level = this.count;
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.ALWAYS,0,255);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
		if(glData.mode == 1) {
			this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
			if(this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
			if(this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
			this.reverse = !this.reverse;
		} else {
			if(!this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
			if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.count++;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_StencilManager
};
var openfl__$internal_renderer_opengl_utils_VertexArray = function(attributes,size,isStatic) {
	if(isStatic == null) isStatic = false;
	if(size == null) size = 0;
	this.isStatic = false;
	this.size = 0;
	this.attributes = [];
	this.size = size;
	this.attributes = attributes;
	if(size > 0) this.buffer = new ArrayBuffer(size);
	this.isStatic = isStatic;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl__$internal_renderer_opengl_utils_VertexArray;
openfl__$internal_renderer_opengl_utils_VertexArray.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexArray"];
openfl__$internal_renderer_opengl_utils_VertexArray.prototype = {
	gl: null
	,glBuffer: null
	,attributes: null
	,buffer: null
	,size: null
	,isStatic: null
	,bind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.glBuffer);
	}
	,unbind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
	}
	,upload: function(view) {
		this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
	}
	,destroy: function() {
		this.gl.deleteBuffer(this.glBuffer);
		this.buffer = null;
	}
	,setContext: function(gl,view) {
		this.gl = gl;
		this.glBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.glBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,view,this.isStatic?gl.STATIC_DRAW:gl.DYNAMIC_DRAW);
	}
	,get_stride: function() {
		var s = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) s += Math.floor(a.components * a.getElementsBytes() / 4) * 4;
		}
		return s;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexArray
	,__properties__: {get_stride:"get_stride"}
};
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl_display_DisplayObjectContainer.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = openfl_display_PixelSnapping.AUTO;
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	bitmapData: null
	,pixelSnapping: null
	,smoothing: null
	,__image: null
	,__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = new openfl_geom_Rectangle(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds = bounds.transform(matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.bitmapData == null) return false;
		var point = this.globalToLocal(new openfl_geom_Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.bitmapData.width && point.y <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoBitmap.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasBitmap.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.__image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid) null; else renderSession.spriteBatch.renderBitmapData(this.bitmapData,this.smoothing,this.__worldTransform,this.__worldColorTransform,this.__worldAlpha,this.__blendMode,this.pixelSnapping);
	}
	,__updateMask: function(maskGraphics) {
		maskGraphics.__commands.push(openfl_display_DrawCommand.OverrideMatrix(this.__worldTransform));
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObjectContainer.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
});
var openfl_display_TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl_display_TextureUvs;
openfl_display_TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl_display_TextureUvs.prototype = {
	x0: null
	,x1: null
	,x2: null
	,x3: null
	,y0: null
	,y1: null
	,y2: null
	,y3: null
	,__class__: openfl_display_TextureUvs
};
var openfl_display_BitmapDataChannel = function() { };
$hxClasses["openfl.display.BitmapDataChannel"] = openfl_display_BitmapDataChannel;
openfl_display_BitmapDataChannel.__name__ = ["openfl","display","BitmapDataChannel"];
var openfl_display_BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : ["openfl","display","BlendMode"], __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SUBTRACT"] };
openfl_display_BlendMode.ADD = ["ADD",0];
openfl_display_BlendMode.ADD.toString = $estr;
openfl_display_BlendMode.ADD.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ALPHA = ["ALPHA",1];
openfl_display_BlendMode.ALPHA.toString = $estr;
openfl_display_BlendMode.ALPHA.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DARKEN = ["DARKEN",2];
openfl_display_BlendMode.DARKEN.toString = $estr;
openfl_display_BlendMode.DARKEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl_display_BlendMode.DIFFERENCE.toString = $estr;
openfl_display_BlendMode.DIFFERENCE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.ERASE = ["ERASE",4];
openfl_display_BlendMode.ERASE.toString = $estr;
openfl_display_BlendMode.ERASE.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl_display_BlendMode.HARDLIGHT.toString = $estr;
openfl_display_BlendMode.HARDLIGHT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.INVERT = ["INVERT",6];
openfl_display_BlendMode.INVERT.toString = $estr;
openfl_display_BlendMode.INVERT.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LAYER = ["LAYER",7];
openfl_display_BlendMode.LAYER.toString = $estr;
openfl_display_BlendMode.LAYER.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl_display_BlendMode.LIGHTEN.toString = $estr;
openfl_display_BlendMode.LIGHTEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl_display_BlendMode.MULTIPLY.toString = $estr;
openfl_display_BlendMode.MULTIPLY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.NORMAL = ["NORMAL",10];
openfl_display_BlendMode.NORMAL.toString = $estr;
openfl_display_BlendMode.NORMAL.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.OVERLAY = ["OVERLAY",11];
openfl_display_BlendMode.OVERLAY.toString = $estr;
openfl_display_BlendMode.OVERLAY.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SCREEN = ["SCREEN",12];
openfl_display_BlendMode.SCREEN.toString = $estr;
openfl_display_BlendMode.SCREEN.__enum__ = openfl_display_BlendMode;
openfl_display_BlendMode.SUBTRACT = ["SUBTRACT",13];
openfl_display_BlendMode.SUBTRACT.toString = $estr;
openfl_display_BlendMode.SUBTRACT.__enum__ = openfl_display_BlendMode;
var openfl_display_CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__ : ["openfl","display","CapsStyle"], __constructs__ : ["NONE","ROUND","SQUARE"] };
openfl_display_CapsStyle.NONE = ["NONE",0];
openfl_display_CapsStyle.NONE.toString = $estr;
openfl_display_CapsStyle.NONE.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.ROUND = ["ROUND",1];
openfl_display_CapsStyle.ROUND.toString = $estr;
openfl_display_CapsStyle.ROUND.__enum__ = openfl_display_CapsStyle;
openfl_display_CapsStyle.SQUARE = ["SQUARE",2];
openfl_display_CapsStyle.SQUARE.toString = $estr;
openfl_display_CapsStyle.SQUARE.__enum__ = openfl_display_CapsStyle;
var openfl_display_DirectRenderer = function(type) {
	if(type == null) type = "DirectRenderer";
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__render: null
	,get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	frame: null
	,name: null
	,__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display_GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : ["openfl","display","GradientType"], __constructs__ : ["RADIAL","LINEAR"] };
openfl_display_GradientType.RADIAL = ["RADIAL",0];
openfl_display_GradientType.RADIAL.toString = $estr;
openfl_display_GradientType.RADIAL.__enum__ = openfl_display_GradientType;
openfl_display_GradientType.LINEAR = ["LINEAR",1];
openfl_display_GradientType.LINEAR.toString = $estr;
openfl_display_GradientType.LINEAR.__enum__ = openfl_display_GradientType;
var openfl_display_Graphics = function() {
	this.__visible = true;
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = [];
	this.__commands = [];
	this.__halfStrokeWidth = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__hardware = true;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__hardware: null
	,__bounds: null
	,__commands: null
	,__dirty: null
	,__glStack: null
	,__drawPaths: null
	,__halfStrokeWidth: null
	,__image: null
	,__positionX: null
	,__positionY: null
	,__transformDirty: null
	,__visible: null
	,__cachedTexture: null
	,__owner: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.push(openfl_display_DrawCommand.BeginBitmapFill(bitmap,matrix != null?new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth));
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.push(openfl_display_DrawCommand.BeginFill(color & 16777215,alpha));
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.push(openfl_display_DrawCommand.BeginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio));
		this.__hardware = false;
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands = [];
		this.__halfStrokeWidth = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__hardware = true;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds.clone();
		this.__commands = sourceGraphics.__commands.slice();
		this.set___dirty(true);
		this.__halfStrokeWidth = sourceGraphics.__halfStrokeWidth;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			if(t2 > 0 && t2 < 1) ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			if(t21 > 0 && t21 < 1) iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
		}
		this.__inflateBounds(ix1 - this.__halfStrokeWidth,iy1 - this.__halfStrokeWidth);
		this.__inflateBounds(ix1 + this.__halfStrokeWidth,iy1 + this.__halfStrokeWidth);
		this.__inflateBounds(ix2 - this.__halfStrokeWidth,iy2 - this.__halfStrokeWidth);
		this.__inflateBounds(ix2 + this.__halfStrokeWidth,iy2 + this.__halfStrokeWidth);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.push(openfl_display_DrawCommand.CubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) ix = anchorX; else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) iy = anchorY; else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__halfStrokeWidth,iy - this.__halfStrokeWidth);
		this.__inflateBounds(ix + this.__halfStrokeWidth,iy + this.__halfStrokeWidth);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.push(openfl_display_DrawCommand.CurveTo(controlX,controlY,anchorX,anchorY));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__halfStrokeWidth,y - radius - this.__halfStrokeWidth);
		this.__inflateBounds(x + radius + this.__halfStrokeWidth,y + radius + this.__halfStrokeWidth);
		this.__commands.push(openfl_display_DrawCommand.DrawCircle(x,y,radius));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl_display_DrawCommand.DrawEllipse(x,y,width,height));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		openfl_Lib.notImplemented("Graphics.drawGraphicsData");
	}
	,drawPath: function(commands,data,winding) {
		var dataIndex = 0;
		var _g = 0;
		while(_g < commands.length) {
			var command = commands.data[_g];
			++_g;
			if(command != null) switch(command) {
			case 1:
				this.moveTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 2:
				this.lineTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 3:
				this.curveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3]);
				dataIndex += 4;
				break;
			case 6:
				this.cubicCurveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3],data.data[dataIndex + 4],data.data[dataIndex + 5]);
				dataIndex += 6;
				break;
			default:
			} else {
			}
		}
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl_display_DrawCommand.DrawRect(x,y,width,height));
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		if(ry == null) ry = -1;
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl_display_DrawCommand.DrawRoundRect(x,y,width,height,rx,ry));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl_Lib.notImplemented("Graphics.drawRoundRectComplex");
	}
	,drawTiles: function(sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		this.__inflateBounds(0,0);
		this.__inflateBounds(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
		this.__commands.push(openfl_display_DrawCommand.DrawTiles(sheet,tileData,smooth,flags,count));
		this.set___dirty(true);
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		if(blendMode == null) blendMode = 0;
		var vlen = vertices.length / 2 | 0;
		if(culling == null) culling = openfl_display_TriangleCulling.NONE;
		if(indices == null) {
			if(vlen % 3 != 0) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			var this1;
			this1 = new openfl_VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			indices = this1;
			var _g = 0;
			while(_g < vlen) {
				var i = _g++;
				if(!indices.fixed) {
					indices.length++;
					if(indices.data.length < indices.length) {
						var data;
						var this3;
						this3 = new Array(indices.data.length + 10);
						data = this3;
						haxe_ds__$Vector_Vector_$Impl_$.blit(indices.data,0,data,0,indices.data.length);
						indices.data = data;
					}
					indices.data[indices.length - 1] = i;
				}
				indices.length;
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g1 = 0;
		while(_g1 < vlen) {
			var i1 = _g1++;
			tmpx = vertices.data[i1 * 2];
			tmpy = vertices.data[i1 * 2 + 1];
			if(maxX < tmpx) maxX = tmpx;
			if(maxY < tmpy) maxY = tmpy;
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.push(openfl_display_DrawCommand.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode));
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.push(openfl_display_DrawCommand.EndFill);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.push(openfl_display_DrawCommand.LineBitmapStyle(bitmap,matrix != null?new openfl_geom_Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth));
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.__commands.push(openfl_display_DrawCommand.LineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio));
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(thickness > this.__halfStrokeWidth) this.__halfStrokeWidth = thickness / 2; else this.__halfStrokeWidth = this.__halfStrokeWidth;
		this.__commands.push(openfl_display_DrawCommand.LineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit));
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl_display_DrawCommand.LineTo(x,y));
		this.__hardware = false;
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.push(openfl_display_DrawCommand.MoveTo(x,y));
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = this.__bounds.transform(matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var bounds = this.__bounds.transform(matrix);
		return x > bounds.x && y > bounds.y && x <= bounds.get_right() && y <= bounds.get_bottom();
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_DrawCommand = $hxClasses["openfl.display.DrawCommand"] = { __ename__ : ["openfl","display","DrawCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CubicCurveTo","CurveTo","DrawCircle","DrawEllipse","DrawRect","DrawRoundRect","DrawTiles","DrawTriangles","EndFill","LineStyle","LineBitmapStyle","LineGradientStyle","LineTo","MoveTo","DrawPathC","OverrideMatrix"] };
openfl_display_DrawCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.BeginGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.CubicCurveTo = function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) { var $x = ["CubicCurveTo",3,controlX1,controlY1,controlX2,controlY2,anchorX,anchorY]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",4,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawCircle = function(x,y,radius) { var $x = ["DrawCircle",5,x,y,radius]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawEllipse = function(x,y,width,height) { var $x = ["DrawEllipse",6,x,y,width,height]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawRect = function(x,y,width,height) { var $x = ["DrawRect",7,x,y,width,height]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawRoundRect = function(x,y,width,height,rx,ry) { var $x = ["DrawRoundRect",8,x,y,width,height,rx,ry]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",9,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",10,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.EndFill = ["EndFill",11];
openfl_display_DrawCommand.EndFill.toString = $estr;
openfl_display_DrawCommand.EndFill.__enum__ = openfl_display_DrawCommand;
openfl_display_DrawCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",12,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.LineBitmapStyle = function(bitmap,matrix,repeat,smooth) { var $x = ["LineBitmapStyle",13,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.LineGradientStyle = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["LineGradientStyle",14,type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.LineTo = function(x,y) { var $x = ["LineTo",15,x,y]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.MoveTo = function(x,y) { var $x = ["MoveTo",16,x,y]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.DrawPathC = function(commands,data,winding) { var $x = ["DrawPathC",17,commands,data,winding]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
openfl_display_DrawCommand.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",18,matrix]; $x.__enum__ = openfl_display_DrawCommand; $x.toString = $estr; return $x; };
var openfl_display_GraphicsPathCommand = function() { };
$hxClasses["openfl.display.GraphicsPathCommand"] = openfl_display_GraphicsPathCommand;
openfl_display_GraphicsPathCommand.__name__ = ["openfl","display","GraphicsPathCommand"];
var openfl_display_GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : ["openfl","display","GraphicsPathWinding"], __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl_display_GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl_display_GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl_display_GraphicsPathWinding.EVEN_ODD.__enum__ = openfl_display_GraphicsPathWinding;
openfl_display_GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl_display_GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl_display_GraphicsPathWinding.NON_ZERO.__enum__ = openfl_display_GraphicsPathWinding;
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
var openfl_display_InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : ["openfl","display","InterpolationMethod"], __constructs__ : ["RGB","LINEAR_RGB"] };
openfl_display_InterpolationMethod.RGB = ["RGB",0];
openfl_display_InterpolationMethod.RGB.toString = $estr;
openfl_display_InterpolationMethod.RGB.__enum__ = openfl_display_InterpolationMethod;
openfl_display_InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl_display_InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl_display_InterpolationMethod.LINEAR_RGB.__enum__ = openfl_display_InterpolationMethod;
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) quality = 80;
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display_JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__ : ["openfl","display","JointStyle"], __constructs__ : ["MITER","ROUND","BEVEL"] };
openfl_display_JointStyle.MITER = ["MITER",0];
openfl_display_JointStyle.MITER.toString = $estr;
openfl_display_JointStyle.MITER.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.ROUND = ["ROUND",1];
openfl_display_JointStyle.ROUND.toString = $estr;
openfl_display_JointStyle.ROUND.__enum__ = openfl_display_JointStyle;
openfl_display_JointStyle.BEVEL = ["BEVEL",2];
openfl_display_JointStyle.BEVEL.toString = $estr;
openfl_display_JointStyle.BEVEL.__enum__ = openfl_display_JointStyle;
var openfl_display_LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : ["openfl","display","LineScaleMode"], __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl_display_LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl_display_LineScaleMode.HORIZONTAL.toString = $estr;
openfl_display_LineScaleMode.HORIZONTAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NONE = ["NONE",1];
openfl_display_LineScaleMode.NONE.toString = $estr;
openfl_display_LineScaleMode.NONE.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.NORMAL = ["NORMAL",2];
openfl_display_LineScaleMode.NORMAL.toString = $estr;
openfl_display_LineScaleMode.NORMAL.__enum__ = openfl_display_LineScaleMode;
openfl_display_LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl_display_LineScaleMode.VERTICAL.toString = $estr;
openfl_display_LineScaleMode.VERTICAL.__enum__ = openfl_display_LineScaleMode;
var openfl_display_Loader = function() {
	openfl_display_Sprite.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_Sprite;
openfl_display_Loader.prototype = $extend(openfl_display_Sprite.prototype,{
	content: null
	,contentLoaderInfo: null
	,mImage: null
	,mShape: null
	,close: function() {
		openfl_Lib.notImplemented("Loader.close");
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		if(extension.indexOf("?") != -1) extension = extension.split("?")[0];
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		openfl_display_BitmapData.fromFile(request.url,$bind(this,this.BitmapData_onLoad),$bind(this,this.BitmapData_onError));
	}
	,loadBytes: function(buffer) {
		openfl_display_BitmapData.fromBytes(buffer,null,$bind(this,this.BitmapData_onLoad));
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl_events_Event(openfl_events_Event.UNLOAD);
			event.currentTarget = this;
			this.dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) gc = true;
		openfl_Lib.notImplemented("Loader.unloadAndStop");
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl_events_Event(openfl_events_Event.COMPLETE);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function() {
		var event = new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_OpenGLView = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
	if(!this.__added) {
		this.__added = true;
		haxe_Log.trace("Warning: OpenGLView is not available in HTML5 canvas rendering mode",{ fileName : "OpenGLView.hx", lineNumber : 66, className : "openfl.display.OpenGLView", methodName : "new"});
		haxe_Log.trace("Please compile your project using -Ddom or -Dwebgl (beta) to enable",{ fileName : "OpenGLView.hx", lineNumber : 67, className : "openfl.display.OpenGLView", methodName : "new"});
	}
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl_display_OpenGLView.isSupported = null;
openfl_display_OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) return false;
	if(lime_graphics_opengl_GL.context != null) return true; else {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) context = canvas.getContext("experimental-webgl");
		return context != null;
	}
	return true;
};
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__added: null
	,__initialized: null
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				if(this.__render != null) this.__render(rect);
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			if(this.__render != null) this.__render(rect);
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
		}
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) fastCompression = false;
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display_PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : ["openfl","display","PixelSnapping"], __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl_display_PixelSnapping.NEVER = ["NEVER",0];
openfl_display_PixelSnapping.NEVER.toString = $estr;
openfl_display_PixelSnapping.NEVER.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.AUTO = ["AUTO",1];
openfl_display_PixelSnapping.AUTO.toString = $estr;
openfl_display_PixelSnapping.AUTO.__enum__ = openfl_display_PixelSnapping;
openfl_display_PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl_display_PixelSnapping.ALWAYS.toString = $estr;
openfl_display_PixelSnapping.ALWAYS.__enum__ = openfl_display_PixelSnapping;
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl_Lib.current.addChild(display);
		if(js_Boot.__instanceof(display,NMEPreloader)) (js_Boot.__cast(display , NMEPreloader)).onInit();
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	display: null
	,displayComplete: null
	,load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe_io_Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) this.total++;
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl_media_Sound();
			sound1.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.sound_onComplete));
			sound1.addEventListener(openfl_events_IOErrorEvent.IO_ERROR,$bind(this,this.sound_onIOError));
			sound1.load(new openfl_net_URLRequest(soundName + ".ogg"));
		}
		lime_app_Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
			(js_Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else lime_app_Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) (js_Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener(openfl_events_Event.COMPLETE,$bind(this,this.display_onComplete));
		openfl_Lib.current.removeChild(this.display);
		openfl_Lib.current.stage.set_focus(null);
		this.display = null;
		lime_app_Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	graphics: null
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : ["openfl","display","SpreadMethod"], __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl_display_SpreadMethod.REPEAT = ["REPEAT",0];
openfl_display_SpreadMethod.REPEAT.toString = $estr;
openfl_display_SpreadMethod.REPEAT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.REFLECT = ["REFLECT",1];
openfl_display_SpreadMethod.REFLECT.toString = $estr;
openfl_display_SpreadMethod.REFLECT.__enum__ = openfl_display_SpreadMethod;
openfl_display_SpreadMethod.PAD = ["PAD",2];
openfl_display_SpreadMethod.PAD.toString = $estr;
openfl_display_SpreadMethod.PAD.__enum__ = openfl_display_SpreadMethod;
var openfl_display_Stage = function(width,height,color) {
	openfl_display_DisplayObjectContainer.call(this);
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__displayState = openfl_display_StageDisplayState.NORMAL;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.stageWidth = width;
	this.stageHeight = height;
	this.stage = this;
	this.align = openfl_display_StageAlign.TOP_LEFT;
	this.allowsFullScreen = false;
	this.quality = openfl_display_StageQuality.HIGH;
	this.scaleMode = openfl_display_StageScaleMode.NO_SCALE;
	this.stageFocusRect = true;
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__mouseOutStack = [];
	var this1;
	this1 = new openfl_VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	this3.length;
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,quality: null
	,scaleMode: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__dirty: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__mouseOutStack: null
	,__mouseX: null
	,__mouseY: null
	,__originalWidth: null
	,__originalHeight: null
	,__renderer: null
	,__rendering: null
	,__stack: null
	,__transparent: null
	,__wasDirty: null
	,globalToLocal: function(pos) {
		return pos;
	}
	,init: function(context) {
		switch(context[1]) {
		case 0:
			var gl = context[2];
			this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this.stageWidth,this.stageHeight,gl);
			break;
		case 1:
			var context1 = context[2];
			this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this.stageWidth,this.stageHeight,context1);
			break;
		case 2:
			var element = context[2];
			this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this.stageWidth,this.stageHeight,element);
			break;
		case 4:
			var cairo = context[2];
			this.__renderer = new openfl__$internal_renderer_cairo_CairoRenderer(this.stageWidth,this.stageHeight,cairo);
			break;
		default:
		}
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos;
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
	}
	,onGamepadButtonDown: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
	}
	,onGamepadButtonUp: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
	}
	,onGamepadConnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadConnect(gamepad);
	}
	,onGamepadDisconnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
	}
	,onKeyDown: function(keyCode,modifier) {
		this.__onKey(openfl_events_KeyboardEvent.KEY_DOWN,keyCode,modifier);
	}
	,onKeyUp: function(keyCode,modifier) {
		this.__onKey(openfl_events_KeyboardEvent.KEY_UP,keyCode,modifier);
	}
	,onMouseDown: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_DOWN;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_DOWN;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseMove: function(x,y) {
		this.__onMouse(openfl_events_MouseEvent.MOUSE_MOVE,x,y,0);
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl_events_MouseEvent.MIDDLE_MOUSE_UP;
			break;
		case 2:
			type = openfl_events_MouseEvent.RIGHT_MOUSE_UP;
			break;
		default:
			type = openfl_events_MouseEvent.MOUSE_UP;
		}
		this.__onMouse(type,x,y,button);
	}
	,onMouseWheel: function(deltaX,deltaY) {
		this.__onMouseWheel(deltaX,deltaY);
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		var event = new openfl_events_TextEvent(openfl_events_TextEvent.TEXT_INPUT,true,false,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__fireEvent(event,stack);
		} else this.__broadcast(event,true);
	}
	,onTouchMove: function(x,y,id) {
		this.__onTouch("touchMove",x,y,id);
	}
	,onTouchEnd: function(x,y,id) {
		this.__onTouch("touchEnd",x,y,id);
	}
	,onTouchStart: function(x,y,id) {
		this.__onTouch("touchBegin",x,y,id);
	}
	,onWindowActivate: function() {
		var event = new openfl_events_Event(openfl_events_Event.ACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
		var event = new openfl_events_Event(openfl_events_Event.DEACTIVATE);
		this.__broadcast(event,true);
	}
	,onWindowEnter: function() {
	}
	,onWindowFocusIn: function() {
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFocusOut: function() {
		var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.MOUSE_LEAVE));
	}
	,onWindowMinimize: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
		this.stageWidth = width;
		this.stageHeight = height;
		if(this.__renderer != null) this.__renderer.resize(width,height);
		var event = new openfl_events_Event(openfl_events_Event.RESIZE);
		this.__broadcast(event,false);
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
		if(this.__rendering) return;
		this.__rendering = true;
		this.__broadcast(new openfl_events_Event(openfl_events_Event.ENTER_FRAME),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl_events_Event(openfl_events_Event.RENDER),true);
		}
		this.__renderable = true;
		this.__update(false,true);
		if(this.__renderer != null) {
			switch(context[1]) {
			case 4:
				var cairo = context[2];
				(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
				this.__renderer.renderSession.cairo = cairo;
				break;
			default:
			}
			this.__renderer.render(this);
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = openfl_events_EventPhase.CAPTURING_PHASE;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCancelled) return;
			}
			event.eventPhase = openfl_events_EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
			if(event.__isCancelled) return;
			if(event.bubbles) {
				event.eventPhase = openfl_events_EventPhase.BUBBLING_PHASE;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCancelled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) stack.push(this);
		return true;
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			var keyCode1 = openfl_ui_Keyboard.convertKeyCode(keyCode);
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,false,charCode,keyCode1,null,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) return;
		this.__mouseX = x;
		this.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl_geom_Point(x,y);
		if(this.__hitTest(x,y,false,stack,true)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(type == openfl_events_MouseEvent.MOUSE_DOWN) this.set_focus(target);
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		var clickType;
		switch(type) {
		case "mouseUp":
			clickType = openfl_events_MouseEvent.CLICK;
			break;
		case "middleMouseUp":
			clickType = openfl_events_MouseEvent.MIDDLE_CLICK;
			break;
		case "rightMouseUp":
			clickType = openfl_events_MouseEvent.RIGHT_CLICK;
			break;
		default:
			clickType = null;
		}
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == openfl_events_MouseEvent.MOUSE_UP && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.DOUBLE_CLICK,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		var cursor = null;
		var _g = 0;
		while(_g < stack.length) {
			var target1 = stack[_g];
			++_g;
			cursor = target1.__getCursor();
			if(cursor != null) {
				lime_ui_Mouse.set_cursor(cursor);
				break;
			}
		}
		if(cursor == null) lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		var _g1 = 0;
		var _g11 = this.__mouseOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(HxOverrides.indexOf(stack,target2,0) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target2);
				var localPoint = target2.globalToLocal(targetPoint);
				target2.dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OUT,false,false,localPoint.x,localPoint.y,target2));
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__mouseOutStack,target3,0) == -1) {
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OVER)) {
					var localPoint1 = target3.globalToLocal(targetPoint);
					target3.dispatchEvent(new openfl_events_MouseEvent(openfl_events_MouseEvent.MOUSE_OVER,false,false,localPoint1.x,localPoint1.y,target3));
				}
				if(target3.hasEventListener(openfl_events_MouseEvent.MOUSE_OUT)) this.__mouseOutStack.push(target3);
			}
		}
		if(this.__dragObject != null) this.__drag(targetPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		if(!this.__hitTest(x,y,false,stack,true)) stack = [this];
		var target = stack[stack.length - 1];
		var targetPoint = new openfl_geom_Point(x,y);
		var delta = deltaY | 0;
		this.__fireEvent(openfl_events_MouseEvent.__create(openfl_events_MouseEvent.MOUSE_WHEEL,0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,delta),stack);
	}
	,__onTouch: function(type,x,y,id) {
		var point = new openfl_geom_Point(x,y);
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		var __stack = [];
		var mouseType;
		switch(type) {
		case "touchBegin":
			mouseType = openfl_events_MouseEvent.MOUSE_DOWN;
			break;
		case "touchMove":
			mouseType = openfl_events_MouseEvent.MOUSE_MOVE;
			break;
		case "touchEnd":
			mouseType = openfl_events_MouseEvent.MOUSE_UP;
			break;
		default:
			mouseType = null;
		}
		if(this.__hitTest(x,y,false,__stack,true)) {
			var target = __stack[__stack.length - 1];
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,localPoint,target);
			touchEvent.touchPointID = id;
			touchEvent.isPrimaryTouchPoint = true;
			var mouseEvent = openfl_events_MouseEvent.__create(mouseType,0,this.__mouseX,this.__mouseY,localPoint,target);
			mouseEvent.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent,__stack);
			this.__fireEvent(mouseEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,point,this);
			touchEvent1.touchPointID = id;
			touchEvent1.isPrimaryTouchPoint = true;
			var mouseEvent1 = openfl_events_MouseEvent.__create(mouseType,0,this.__mouseX,this.__mouseY,point,this);
			mouseEvent1.buttonDown = type != "touchEnd";
			this.__fireEvent(touchEvent1,[this.stage]);
			this.__fireEvent(mouseEvent1,[this.stage]);
		}
		if(type == "touchMove" && this.__dragObject != null) this.__drag(point);
	}
	,__resize: function() {
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = -this.__dragObject.get_width() / 2;
				this.__dragOffsetY = -this.__dragObject.get_height() / 2;
			} else {
				var mouse = new openfl_geom_Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) mouse = parent.globalToLocal(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,canvas_onContextLost: function(event) {
	}
	,canvas_onContextRestored: function(event) {
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		switch(value[1]) {
		case 0:
			openfl_Lib.application.windows[0].set_fullscreen(false);
			break;
		default:
			openfl_Lib.application.windows[0].set_fullscreen(true);
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			if(this.__focus != null) {
				var event = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_OUT,true,false,value,false,0);
				this.__stack = [];
				this.__focus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(value != null) {
				var event1 = new openfl_events_FocusEvent(openfl_events_FocusEvent.FOCUS_IN,true,false,this.__focus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
			this.__focus = value;
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		return openfl_Lib.application.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return openfl_Lib.application.backend.setFrameRate(value);
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,x: null
	,y: null
	,requestContext3D: function(context3DRenderMode) {
		if(context3DRenderMode == null) context3DRenderMode = "";
		if(openfl_display_OpenGLView.get_isSupported()) {
			this.context3D = new openfl_display3D_Context3D();
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CONTEXT3D_CREATE));
		} else this.dispatchEvent(new openfl_events_ErrorEvent(openfl_events_ErrorEvent.ERROR));
	}
	,__class__: openfl_display_Stage3D
});
var openfl_display_StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : ["openfl","display","StageAlign"], __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl_display_StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl_display_StageAlign.TOP_RIGHT.toString = $estr;
openfl_display_StageAlign.TOP_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl_display_StageAlign.TOP_LEFT.toString = $estr;
openfl_display_StageAlign.TOP_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.TOP = ["TOP",2];
openfl_display_StageAlign.TOP.toString = $estr;
openfl_display_StageAlign.TOP.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.RIGHT = ["RIGHT",3];
openfl_display_StageAlign.RIGHT.toString = $estr;
openfl_display_StageAlign.RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.LEFT = ["LEFT",4];
openfl_display_StageAlign.LEFT.toString = $estr;
openfl_display_StageAlign.LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl_display_StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl_display_StageAlign.BOTTOM_RIGHT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl_display_StageAlign.BOTTOM_LEFT.toString = $estr;
openfl_display_StageAlign.BOTTOM_LEFT.__enum__ = openfl_display_StageAlign;
openfl_display_StageAlign.BOTTOM = ["BOTTOM",7];
openfl_display_StageAlign.BOTTOM.toString = $estr;
openfl_display_StageAlign.BOTTOM.__enum__ = openfl_display_StageAlign;
var openfl_display_StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : ["openfl","display","StageDisplayState"], __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl_display_StageDisplayState.NORMAL = ["NORMAL",0];
openfl_display_StageDisplayState.NORMAL.toString = $estr;
openfl_display_StageDisplayState.NORMAL.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl_display_StageDisplayState.FULL_SCREEN.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN.__enum__ = openfl_display_StageDisplayState;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl_display_StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl_display_StageDisplayState;
var openfl_display_StageQuality = $hxClasses["openfl.display.StageQuality"] = { __ename__ : ["openfl","display","StageQuality"], __constructs__ : ["BEST","HIGH","MEDIUM","LOW"] };
openfl_display_StageQuality.BEST = ["BEST",0];
openfl_display_StageQuality.BEST.toString = $estr;
openfl_display_StageQuality.BEST.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.HIGH = ["HIGH",1];
openfl_display_StageQuality.HIGH.toString = $estr;
openfl_display_StageQuality.HIGH.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.MEDIUM = ["MEDIUM",2];
openfl_display_StageQuality.MEDIUM.toString = $estr;
openfl_display_StageQuality.MEDIUM.__enum__ = openfl_display_StageQuality;
openfl_display_StageQuality.LOW = ["LOW",3];
openfl_display_StageQuality.LOW.toString = $estr;
openfl_display_StageQuality.LOW.__enum__ = openfl_display_StageQuality;
var openfl_display_StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : ["openfl","display","StageScaleMode"], __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl_display_StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl_display_StageScaleMode.SHOW_ALL.toString = $estr;
openfl_display_StageScaleMode.SHOW_ALL.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl_display_StageScaleMode.NO_SCALE.toString = $estr;
openfl_display_StageScaleMode.NO_SCALE.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl_display_StageScaleMode.NO_BORDER.toString = $estr;
openfl_display_StageScaleMode.NO_BORDER.__enum__ = openfl_display_StageScaleMode;
openfl_display_StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl_display_StageScaleMode.EXACT_FIT.toString = $estr;
openfl_display_StageScaleMode.EXACT_FIT.__enum__ = openfl_display_StageScaleMode;
var openfl_display_TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__ : ["openfl","display","TriangleCulling"], __constructs__ : ["NEGATIVE","NONE","POSITIVE"] };
openfl_display_TriangleCulling.NEGATIVE = ["NEGATIVE",0];
openfl_display_TriangleCulling.NEGATIVE.toString = $estr;
openfl_display_TriangleCulling.NEGATIVE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.NONE = ["NONE",1];
openfl_display_TriangleCulling.NONE.toString = $estr;
openfl_display_TriangleCulling.NONE.__enum__ = openfl_display_TriangleCulling;
openfl_display_TriangleCulling.POSITIVE = ["POSITIVE",2];
openfl_display_TriangleCulling.POSITIVE.toString = $estr;
openfl_display_TriangleCulling.POSITIVE.__enum__ = openfl_display_TriangleCulling;
var openfl_display3D_Context3D = function() {
	this.disposed = false;
	this._yFlip = 1;
	this.vertexBuffersCreated = [];
	this.indexBuffersCreated = [];
	this.programsCreated = [];
	this.texturesCreated = [];
	this.samplerParameters = [];
	var _g1 = 0;
	var _g = openfl_display3D_Context3D.MAX_SAMPLERS;
	while(_g1 < _g) {
		var i = _g1++;
		this.samplerParameters[i] = new openfl_display3D__$Context3D_SamplerState();
		this.samplerParameters[i].wrap = openfl_display3D_Context3DWrapMode.CLAMP;
		this.samplerParameters[i].filter = openfl_display3D_Context3DTextureFilter.LINEAR;
		this.samplerParameters[i].mipfilter = openfl_display3D_Context3DMipFilter.MIPNONE;
	}
	var stage = openfl_Lib.current.stage;
	this.ogl = new openfl_display_OpenGLView();
	this.ogl.set_scrollRect(new openfl_geom_Rectangle(0,0,stage.stageWidth,stage.stageHeight));
	this.scrollRect = this.ogl.get_scrollRect().clone();
	this.ogl.set_width(stage.stageWidth);
	this.ogl.set_height(stage.stageHeight);
	stage.addChildAt(this.ogl,0);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.prototype = {
	driverInfo: null
	,enableErrorChecking: null
	,blendDestinationFactor: null
	,blendEnabled: null
	,blendSourceFactor: null
	,currentProgram: null
	,disposed: null
	,drawing: null
	,framebuffer: null
	,indexBuffersCreated: null
	,ogl: null
	,programsCreated: null
	,renderbuffer: null
	,samplerParameters: null
	,scrollRect: null
	,stencilbuffer: null
	,stencilCompareMode: null
	,stencilRef: null
	,stencilReadMask: null
	,texturesCreated: null
	,vertexBuffersCreated: null
	,_yFlip: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 17664;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		if(!this.drawing) {
			this.__updateBlendStatus();
			this.drawing = true;
		}
		lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
		lime_graphics_opengl_GL.context.clearDepth(depth);
		lime_graphics_opengl_GL.context.clearStencil(stencil);
		lime_graphics_opengl_GL.context.clear(mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			lime_graphics_opengl_GL.context.enable(2960);
		}
		this.ogl.set_scrollRect(new openfl_geom_Rectangle(0,0,width,height));
		this.ogl.set_width(width);
		this.ogl.set_height(height);
		this.scrollRect = this.ogl.get_scrollRect().clone();
		lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl_display3D_textures_CubeTexture(lime_graphics_opengl_GL.context.createTexture(),size);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createIndexBuffer: function(numIndices) {
		var indexBuffer = new openfl_display3D_IndexBuffer3D(lime_graphics_opengl_GL.context.createBuffer(),numIndices);
		this.indexBuffersCreated.push(indexBuffer);
		return indexBuffer;
	}
	,createProgram: function() {
		var program = new openfl_display3D_Program3D(lime_graphics_opengl_GL.context.createProgram());
		this.programsCreated.push(program);
		return program;
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		var texture = new openfl_display3D_textures_RectangleTexture(lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl_display3D_textures_Texture(lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createVertexBuffer: function(numVertices,data32PerVertex) {
		var vertexBuffer = new openfl_display3D_VertexBuffer3D(lime_graphics_opengl_GL.context.createBuffer(),numVertices,data32PerVertex);
		this.vertexBuffersCreated.push(vertexBuffer);
		return vertexBuffer;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.vertexBuffersCreated;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.dispose();
		}
		this.vertexBuffersCreated = null;
		var _g2 = 0;
		var _g11 = this.indexBuffersCreated;
		while(_g2 < _g11.length) {
			var indexBuffer = _g11[_g2];
			++_g2;
			indexBuffer.dispose();
		}
		this.indexBuffersCreated = null;
		var _g3 = 0;
		var _g12 = this.programsCreated;
		while(_g3 < _g12.length) {
			var program = _g12[_g3];
			++_g3;
			program.dispose();
		}
		this.programsCreated = null;
		this.samplerParameters = null;
		var _g4 = 0;
		var _g13 = this.texturesCreated;
		while(_g4 < _g13.length) {
			var texture = _g13[_g4];
			++_g4;
			texture.dispose();
		}
		this.texturesCreated = null;
		if(this.framebuffer != null) {
			lime_graphics_opengl_GL.context.deleteFramebuffer(this.framebuffer);
			this.framebuffer = null;
		}
		if(this.renderbuffer != null) {
			lime_graphics_opengl_GL.context.deleteRenderbuffer(this.renderbuffer);
			this.renderbuffer = null;
		}
		this.disposed = true;
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,"yflip");
		lime_graphics_opengl_GL.context.uniform1f(location,this._yFlip);
		if(!this.drawing) throw new js__$Boot_HaxeError(new openfl_errors_Error("Need to clear before drawing if the buffer has not been cleared since the last present() call."));
		var numIndices;
		if(numTriangles == -1) numIndices = indexBuffer.numIndices; else numIndices = numTriangles * 3;
		var byteOffset = firstIndex * 2;
		lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.glBuffer);
		lime_graphics_opengl_GL.context.drawElements(4,numIndices,5123,byteOffset);
	}
	,present: function() {
		this.drawing = false;
		lime_graphics_opengl_GL.context.useProgram(null);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		lime_graphics_opengl_GL.context.disable(2884);
		if(this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
	}
	,removeRenderMethod: function(func) {
		this.ogl.set_render(null);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.blendEnabled = true;
		this.blendSourceFactor = sourceFactor;
		this.blendDestinationFactor = destinationFactor;
		this.__updateBlendStatus();
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(triangleFaceToCull == 0) lime_graphics_opengl_GL.context.disable(2884); else {
			lime_graphics_opengl_GL.context.enable(2884);
			switch(triangleFaceToCull) {
			case 1029:
				lime_graphics_opengl_GL.context.cullFace(1029);
				break;
			case 1028:
				lime_graphics_opengl_GL.context.cullFace(1028);
				break;
			case 1032:
				lime_graphics_opengl_GL.context.cullFace(1032);
				break;
			default:
				throw new js__$Boot_HaxeError("Unknown Context3DTriangleFace type.");
			}
		}
		switch(triangleFaceToCull) {
		case 1029:
			this._yFlip = -1;
			break;
		case 1028:
			this._yFlip = 1;
			break;
		case 1032:
			this._yFlip = 1;
			break;
		case 0:
			this._yFlip = 1;
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown culling mode " + triangleFaceToCull + ".");
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		lime_graphics_opengl_GL.context.depthFunc(passCompareMode);
		lime_graphics_opengl_GL.context.depthMask(depthMask);
	}
	,setGLSLProgramConstantsFromByteArray: function(locationName,data,byteArrayOffset) {
		if(byteArrayOffset == null) byteArrayOffset = 0;
		data.position = byteArrayOffset;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.uniform4f(location,data.readFloat(),data.readFloat(),data.readFloat(),data.readFloat());
	}
	,setGLSLProgramConstantsFromMatrix: function(locationName,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.uniformMatrix4fv(location,!transposedMatrix,new Float32Array((function($this) {
			var $r;
			var this1 = matrix.rawData;
			var value = [];
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this))));
	}
	,setGLSLProgramConstantsFromVector4: function(locationName,data,startIndex) {
		if(startIndex == null) startIndex = 0;
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime_graphics_opengl_GL.context.uniform4f(location,data[startIndex],data[startIndex + 1],data[startIndex + 2],data[startIndex + 3]);
	}
	,setGLSLTextureAt: function(locationName,texture,textureIndex) {
		switch(textureIndex) {
		case 0:
			lime_graphics_opengl_GL.context.activeTexture(33984);
			break;
		case 1:
			lime_graphics_opengl_GL.context.activeTexture(33985);
			break;
		case 2:
			lime_graphics_opengl_GL.context.activeTexture(33986);
			break;
		case 3:
			lime_graphics_opengl_GL.context.activeTexture(33987);
			break;
		case 4:
			lime_graphics_opengl_GL.context.activeTexture(33988);
			break;
		case 5:
			lime_graphics_opengl_GL.context.activeTexture(33989);
			break;
		case 6:
			lime_graphics_opengl_GL.context.activeTexture(33990);
			break;
		case 7:
			lime_graphics_opengl_GL.context.activeTexture(33991);
			break;
		default:
			throw new js__$Boot_HaxeError("Does not support texture8 or more");
		}
		if(texture == null) {
			lime_graphics_opengl_GL.context.bindTexture(3553,null);
			lime_graphics_opengl_GL.context.bindTexture(34067,null);
			return;
		}
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			lime_graphics_opengl_GL.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_Texture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_RectangleTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			lime_graphics_opengl_GL.bindTexture(34067,(js_Boot.__cast(texture , openfl_display3D_textures_CubeTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
		var parameters = this.samplerParameters[textureIndex];
		if(parameters != null) this.setTextureParameters(texture,parameters.wrap,parameters.filter,parameters.mipfilter); else this.setTextureParameters(texture,openfl_display3D_Context3DWrapMode.CLAMP,openfl_display3D_Context3DTextureFilter.NEAREST,openfl_display3D_Context3DMipFilter.MIPNONE);
	}
	,setGLSLVertexBufferAt: function(locationName,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var location;
		if(this.currentProgram != null && this.currentProgram.glProgram != null) location = lime_graphics_opengl_GL.context.getAttribLocation(this.currentProgram.glProgram,locationName); else location = -1;
		if(buffer == null) {
			if(location > -1) lime_graphics_opengl_GL.context.disableVertexAttribArray(location);
			return;
		}
		lime_graphics_opengl_GL.context.bindBuffer(34962,buffer.glBuffer);
		var dimension = 4;
		var type = 5126;
		var numBytes = 4;
		if(format == openfl_display3D_Context3DVertexBufferFormat.BYTES_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_1) {
			dimension = 1;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_2) {
			dimension = 2;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_3) {
			dimension = 3;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else throw new js__$Boot_HaxeError("Buffer format " + Std.string(format) + " is not supported");
		lime_graphics_opengl_GL.context.enableVertexAttribArray(location);
		lime_graphics_opengl_GL.context.vertexAttribPointer(location,dimension,type,false,buffer.data32PerVertex * numBytes,bufferOffset * numBytes);
	}
	,setProgram: function(program3D) {
		var glProgram = null;
		if(program3D != null) glProgram = program3D.glProgram;
		lime_graphics_opengl_GL.context.useProgram(glProgram);
		this.currentProgram = program3D;
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromByteArray(locationName,data);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var d = matrix.rawData;
		if(transposedMatrix) {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[4],d.data[8],d.data[12]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[1],d.data[5],d.data[9],d.data[13]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[2],d.data[6],d.data[10],d.data[14]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[3],d.data[7],d.data[11],d.data[15]],1);
		} else {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[1],d.data[2],d.data[3]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[4],d.data[5],d.data[6],d.data[7]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[8],d.data[9],d.data[10],d.data[11]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[12],d.data[13],d.data[14],d.data[15]],1);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = 1;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var currentIndex = i * 4;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromVector4(locationName,data,currentIndex);
		}
	}
	,setRenderMethod: function(func) {
		this.ogl.set_render(function(rect) {
			func(null);
		});
	}
	,setRenderToBackBuffer: function() {
		lime_graphics_opengl_GL.context.disable(2929);
		lime_graphics_opengl_GL.context.disable(2960);
		lime_graphics_opengl_GL.context.disable(3089);
		if(this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		if(this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
		lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this.framebuffer == null) this.framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.framebuffer);
		if(this.renderbuffer == null) this.renderbuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
		lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.renderbuffer);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,6408,texture.width,texture.height);
		lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,texture.glTexture,0);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,34041,texture.width,texture.height);
		lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,33306,36161,this.renderbuffer);
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			lime_graphics_opengl_GL.context.enable(2960);
		}
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.glTexture);
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,texture.width,texture.height,0,6408,5121,null);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9985);
		lime_graphics_opengl_GL.context.viewport(0,0,texture.width,texture.height);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(0 <= sampler && sampler < openfl_display3D_Context3D.MAX_SAMPLERS) {
			this.samplerParameters[sampler].wrap = wrap;
			this.samplerParameters[sampler].filter = filter;
			this.samplerParameters[sampler].mipfilter = mipfilter;
		} else throw new js__$Boot_HaxeError("Sampler is out of bounds.");
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle == null) {
			lime_graphics_opengl_GL.context.disable(3089);
			return;
		}
		lime_graphics_opengl_GL.context.enable(3089);
		lime_graphics_opengl_GL.context.scissor(rectangle.x | 0,rectangle.y | 0,rectangle.width | 0,rectangle.height | 0);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		this.stencilCompareMode = compareMode;
		lime_graphics_opengl_GL.context.stencilOp(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		this.stencilReadMask = readMask;
		this.stencilRef = referenceValue;
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
		lime_graphics_opengl_GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		var locationName = "fs" + sampler;
		this.setGLSLTextureAt(locationName,texture,sampler);
	}
	,setTextureParameters: function(texture,wrap,filter,mipfilter) {
		if(!openfl_display3D_Context3D.anisotropySupportTested) {
			var ext = lime_graphics_opengl_GL.context.getExtension("EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime_graphics_opengl_GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime_graphics_opengl_GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			openfl_display3D_Context3D.supportsAnisotropy = ext != null;
			openfl_display3D_Context3D.anisotropySupportTested = true;
			lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy));
			openfl_display3D_Context3D.maxSupportedAnisotropy = lime_graphics_opengl_GL.context.getTexParameter(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT);
		}
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.generateMipmap(3553);
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.generateMipmap(3553);
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9729);
				break;
			}
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,9729);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9729);
				break;
			}
		} else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var locationName = "va" + index;
		this.setGLSLVertexBufferAt(locationName,buffer,bufferOffset,format);
	}
	,__getUniformLocationNameFromAgalRegisterIndex: function(programType,firstRegister) {
		if(programType == openfl_display3D_Context3DProgramType.VERTEX) return "vc" + firstRegister; else if(programType == openfl_display3D_Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
		throw new js__$Boot_HaxeError("Program Type " + Std.string(programType) + " not supported");
	}
	,__updateBlendStatus: function() {
		if(this.blendEnabled) {
			lime_graphics_opengl_GL.context.enable(3042);
			lime_graphics_opengl_GL.context.blendEquation(32774);
			lime_graphics_opengl_GL.context.blendFunc(this.blendSourceFactor,this.blendDestinationFactor);
		} else lime_graphics_opengl_GL.context.disable(3042);
	}
	,__class__: openfl_display3D_Context3D
};
var openfl_display3D__$Context3D_SamplerState = function() {
};
$hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl_display3D__$Context3D_SamplerState;
openfl_display3D__$Context3D_SamplerState.__name__ = ["openfl","display3D","_Context3D","SamplerState"];
openfl_display3D__$Context3D_SamplerState.prototype = {
	wrap: null
	,filter: null
	,mipfilter: null
	,__class__: openfl_display3D__$Context3D_SamplerState
};
var openfl_display3D_Context3DClearMask = function() { };
$hxClasses["openfl.display3D.Context3DClearMask"] = openfl_display3D_Context3DClearMask;
openfl_display3D_Context3DClearMask.__name__ = ["openfl","display3D","Context3DClearMask"];
var openfl_display3D_Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__ : ["openfl","display3D","Context3DMipFilter"], __constructs__ : ["MIPLINEAR","MIPNEAREST","MIPNONE"] };
openfl_display3D_Context3DMipFilter.MIPLINEAR = ["MIPLINEAR",0];
openfl_display3D_Context3DMipFilter.MIPLINEAR.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPLINEAR.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNEAREST = ["MIPNEAREST",1];
openfl_display3D_Context3DMipFilter.MIPNEAREST.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNEAREST.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNONE = ["MIPNONE",2];
openfl_display3D_Context3DMipFilter.MIPNONE.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNONE.__enum__ = openfl_display3D_Context3DMipFilter;
var openfl_display3D_Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__ : ["openfl","display3D","Context3DProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl_display3D_Context3DProgramType.VERTEX = ["VERTEX",0];
openfl_display3D_Context3DProgramType.VERTEX.toString = $estr;
openfl_display3D_Context3DProgramType.VERTEX.__enum__ = openfl_display3D_Context3DProgramType;
openfl_display3D_Context3DProgramType.FRAGMENT = ["FRAGMENT",1];
openfl_display3D_Context3DProgramType.FRAGMENT.toString = $estr;
openfl_display3D_Context3DProgramType.FRAGMENT.__enum__ = openfl_display3D_Context3DProgramType;
var openfl_display3D_Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__ : ["openfl","display3D","Context3DTextureFilter"], __constructs__ : ["ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X","LINEAR","NEAREST"] };
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X",0];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X",1];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X",2];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X",3];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.LINEAR = ["LINEAR",4];
openfl_display3D_Context3DTextureFilter.LINEAR.toString = $estr;
openfl_display3D_Context3DTextureFilter.LINEAR.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.NEAREST = ["NEAREST",5];
openfl_display3D_Context3DTextureFilter.NEAREST.toString = $estr;
openfl_display3D_Context3DTextureFilter.NEAREST.__enum__ = openfl_display3D_Context3DTextureFilter;
var openfl_display3D_Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__ : ["openfl","display3D","Context3DTextureFormat"], __constructs__ : ["BGRA","COMPRESSED","COMPRESSED_ALPHA"] };
openfl_display3D_Context3DTextureFormat.BGRA = ["BGRA",0];
openfl_display3D_Context3DTextureFormat.BGRA.toString = $estr;
openfl_display3D_Context3DTextureFormat.BGRA.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED = ["COMPRESSED",1];
openfl_display3D_Context3DTextureFormat.COMPRESSED.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA",2];
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl_display3D_Context3DTextureFormat;
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$._new = function(a) {
	return a;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromInt = function(s) {
	return s;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toInt = function(this1) {
	return this1;
};
var openfl_display3D_Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__ : ["openfl","display3D","Context3DVertexBufferFormat"], __constructs__ : ["BYTES_4","FLOAT_1","FLOAT_2","FLOAT_3","FLOAT_4"] };
openfl_display3D_Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4",0];
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1",1];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2",2];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3",3];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4",4];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
var openfl_display3D_Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__ : ["openfl","display3D","Context3DWrapMode"], __constructs__ : ["CLAMP","REPEAT"] };
openfl_display3D_Context3DWrapMode.CLAMP = ["CLAMP",0];
openfl_display3D_Context3DWrapMode.CLAMP.toString = $estr;
openfl_display3D_Context3DWrapMode.CLAMP.__enum__ = openfl_display3D_Context3DWrapMode;
openfl_display3D_Context3DWrapMode.REPEAT = ["REPEAT",1];
openfl_display3D_Context3DWrapMode.REPEAT.toString = $estr;
openfl_display3D_Context3DWrapMode.REPEAT.__enum__ = openfl_display3D_Context3DWrapMode;
var openfl_display3D_IndexBuffer3D = function(glBuffer,numIndices) {
	this.glBuffer = glBuffer;
	this.numIndices = numIndices;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	glBuffer: null
	,numIndices: null
	,dispose: function() {
		lime_graphics_opengl_GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerIndex = 2;
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var length = count * bytesPerIndex;
		var offset = byteArrayOffset + startOffset * bytesPerIndex;
		var indices;
		indices = new Int16Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			indices[i] = byteArray.readUnsignedByte();
			i++;
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,35044);
	}
	,uploadFromVector: function(data,startOffset,count) {
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var indices;
		indices = new Int16Array(count);
		var _g1 = startOffset;
		var _g = startOffset + count;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,35044);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(program) {
	this.glProgram = program;
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	glProgram: null
	,dispose: function() {
		lime_graphics_opengl_GL.context.deleteProgram(this.glProgram);
	}
	,upload: function(vertexShader,fragmentShader) {
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,vertexShader);
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,fragmentShader);
		lime_graphics_opengl_GL.context.linkProgram(this.glProgram);
		if(lime_graphics_opengl_GL.context.getProgramParameter(this.glProgram,35714) == 0) {
			var result = lime_graphics_opengl_GL.context.getProgramInfoLog(this.glProgram);
			if(result != "") throw new js__$Boot_HaxeError(result);
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_VertexBuffer3D = function(glBuffer,numVertices,data32PerVertex) {
	this.glBuffer = glBuffer;
	this.numVertices = numVertices;
	this.data32PerVertex = data32PerVertex;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	data32PerVertex: null
	,glBuffer: null
	,numVertices: null
	,dispose: function() {
		lime_graphics_opengl_GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = count * bytesPerVertex;
		var offset = byteArrayOffset + startOffset * bytesPerVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			float32Array[i] = byteArray.readUnsignedByte();
			i++;
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,35044);
	}
	,uploadFromFloat32Array: function(data,startVertex,numVertices) {
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		lime_graphics_opengl_GL.context.bufferData(34962,data,35044);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = numVertices * this.data32PerVertex;
		var offset = startVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		var _g1 = startVertex;
		var _g = startVertex + length;
		while(_g1 < _g) {
			var i = _g1++;
			float32Array[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,35044);
		float32Array = null;
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(glTexture,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	openfl_events_EventDispatcher.call(this);
	this.width = width;
	this.height = height;
	this.glTexture = glTexture;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	height: null
	,frameBuffer: null
	,glTexture: null
	,width: null
	,dispose: function() {
		lime_graphics_opengl_GL.context.deleteTexture(this.glTexture);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(glTexture,size) {
	openfl_display3D_textures_TextureBase.call(this,glTexture,size,size);
	this.size = size;
	this._textures = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this._textures[i] = lime_graphics_opengl_GL.context.createTexture();
	}
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	size: null
	,_textures: null
	,glTextureAt: function(index) {
		return this._textures[index];
	}
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source = bitmapData.__image.get_data();
		lime_graphics_opengl_GL.context.bindTexture(34067,this.glTexture);
		switch(side) {
		case 0:
			lime_graphics_opengl_GL.context.texImage2D(34069,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 1:
			lime_graphics_opengl_GL.context.texImage2D(34070,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 2:
			lime_graphics_opengl_GL.context.texImage2D(34071,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 3:
			lime_graphics_opengl_GL.context.texImage2D(34072,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 4:
			lime_graphics_opengl_GL.context.texImage2D(34073,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 5:
			lime_graphics_opengl_GL.context.texImage2D(34074,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		default:
			throw new js__$Boot_HaxeError("unknown side type");
		}
		lime_graphics_opengl_GL.context.bindTexture(34067,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl_display3D_textures_TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	optimizeForRenderToTexture: null
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = lime_utils_ByteArray.__ofBuffer(bitmapData.__image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) lime_graphics_opengl_GL.context.pixelStorei(37440,1);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		var source = new Uint8Array(data.length);
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			source[i] = data.readUnsignedByte();
			i++;
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,source);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl_display3D_textures_TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	optimizeForRenderToTexture: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var image = bitmapData.__image;
		if(!image.get_premultiplied() && image.get_transparent()) {
			image = image.clone();
			image.set_premultiplied(true);
		}
		this.width = image.width;
		this.height = image.height;
		this.uploadFromUInt8Array(image.get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source = new Uint8Array(data.length);
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			source[i] = data.readUnsignedByte();
			i++;
		}
		this.uploadFromUInt8Array(source,miplevel);
	}
	,uploadFromUInt8Array: function(data,miplevel) {
		if(miplevel == null) miplevel = 0;
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			lime_graphics_opengl_GL.context.pixelStorei(37440,1);
			lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,miplevel,6408,this.width,this.height,0,6408,5121,data);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = openfl_events_EventPhase.AT_TARGET;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCancelled: null
	,__isCancelledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) this.__preventDefault = true;
	}
	,stopImmediatePropagation: function() {
		this.__isCancelled = true;
		this.__isCancelledNow = true;
	}
	,stopPropagation: function() {
		this.__isCancelled = true;
	}
	,toString: function() {
		return "[Event type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,__class__: openfl_events_Event
};
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		return new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
	}
	,toString: function() {
		return "[TextEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + "]";
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		return new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[ErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_EventPhase = $hxClasses["openfl.events.EventPhase"] = { __ename__ : ["openfl","events","EventPhase"], __constructs__ : ["CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE"] };
openfl_events_EventPhase.CAPTURING_PHASE = ["CAPTURING_PHASE",0];
openfl_events_EventPhase.CAPTURING_PHASE.toString = $estr;
openfl_events_EventPhase.CAPTURING_PHASE.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.AT_TARGET = ["AT_TARGET",1];
openfl_events_EventPhase.AT_TARGET.toString = $estr;
openfl_events_EventPhase.AT_TARGET.__enum__ = openfl_events_EventPhase;
openfl_events_EventPhase.BUBBLING_PHASE = ["BUBBLING_PHASE",2];
openfl_events_EventPhase.BUBBLING_PHASE.toString = $estr;
openfl_events_EventPhase.BUBBLING_PHASE.__enum__ = openfl_events_EventPhase;
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return "[FocusEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " relatedObject=" + Std.string(this.relatedObject) + " shiftKey=" + Std.string(this.shiftKey) + " keyCode=" + this.keyCode + "]";
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		return new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
	}
	,toString: function() {
		return "[GameInputEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " device=" + Std.string(this.device) + "]";
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		return new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[IOErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		return new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
	}
	,toString: function() {
		return "[KeyboardEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " charCode=" + this.charCode + " keyCode=" + this.keyCode + " keyLocation=" + this.keyLocation + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + "]";
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__altKey = null;
openfl_events_MouseEvent.__buttonDown = null;
openfl_events_MouseEvent.__commandKey = null;
openfl_events_MouseEvent.__ctrlKey = null;
openfl_events_MouseEvent.__shiftKey = null;
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) delta = 0;
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		return new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
	}
	,toString: function() {
		return "[MouseEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " localX=" + this.localX + " localY=" + this.localY + " relatedObject=" + Std.string(this.relatedObject) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + " buttonDown=" + Std.string(this.buttonDown) + " delta=" + this.delta + "]";
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,localX,localY,sizeX,sizeY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(sizeY == null) sizeY = 1;
	if(sizeX == null) sizeX = 1;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.pressure = 1;
	this.touchPointID = 0;
	this.isPrimaryTouchPoint = true;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,local.x,local.y,null,null,null,false,false,false,false,0,null,0);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_filters_BitmapFilter = function() {
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.length == 16) this.rawData = v; else {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var value = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		if(!this1.fixed) {
			if(i >= this1.length) this1.length = i + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
	}
	return m;
};
openfl_geom_Matrix3D.getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	var this1 = m.rawData;
	if(!this1.fixed) {
		if(0 >= this1.length) this1.length = 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = c + a1.x * a1.x * t;
	var this3 = m.rawData;
	if(!this3.fixed) {
		if(5 >= this3.length) this3.length = 6;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
	}
	this3.data[5] = c + a1.y * a1.y * t;
	var this5 = m.rawData;
	if(!this5.fixed) {
		if(10 >= this5.length) this5.length = 11;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
	}
	this5.data[10] = c + a1.z * a1.z * t;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	var this7 = m.rawData;
	if(!this7.fixed) {
		if(4 >= this7.length) this7.length = 5;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
	}
	this7.data[4] = tmp1 + tmp2;
	var this9 = m.rawData;
	if(!this9.fixed) {
		if(1 >= this9.length) this9.length = 2;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
	}
	this9.data[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	var this11 = m.rawData;
	if(!this11.fixed) {
		if(8 >= this11.length) this11.length = 9;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
	}
	this11.data[8] = tmp1 - tmp2;
	var this13 = m.rawData;
	if(!this13.fixed) {
		if(2 >= this13.length) this13.length = 3;
		if(this13.data.length < this13.length) {
			var data6;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data6 = this14;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
			this13.data = data6;
		}
	}
	this13.data[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	var this15 = m.rawData;
	if(!this15.fixed) {
		if(9 >= this15.length) this15.length = 10;
		if(this15.data.length < this15.length) {
			var data7;
			var this16;
			this16 = new Array(this15.data.length + 10);
			data7 = this16;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
			this15.data = data7;
		}
	}
	this15.data[9] = tmp1 + tmp2;
	var this17 = m.rawData;
	if(!this17.fixed) {
		if(6 >= this17.length) this17.length = 7;
		if(this17.data.length < this17.length) {
			var data8;
			var this18;
			this18 = new Array(this17.data.length + 10);
			data8 = this18;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
			this17.data = data8;
		}
	}
	this17.data[6] = tmp1 - tmp2;
	return m;
};
openfl_geom_Matrix3D.prototype = {
	determinant: null
	,rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.data[0];
		var m121 = this.rawData.data[4];
		var m131 = this.rawData.data[8];
		var m141 = this.rawData.data[12];
		var m112 = this.rawData.data[1];
		var m122 = this.rawData.data[5];
		var m132 = this.rawData.data[9];
		var m142 = this.rawData.data[13];
		var m113 = this.rawData.data[2];
		var m123 = this.rawData.data[6];
		var m133 = this.rawData.data[10];
		var m143 = this.rawData.data[14];
		var m114 = this.rawData.data[3];
		var m124 = this.rawData.data[7];
		var m134 = this.rawData.data[11];
		var m144 = this.rawData.data[15];
		var m211 = lhs.rawData.data[0];
		var m221 = lhs.rawData.data[4];
		var m231 = lhs.rawData.data[8];
		var m241 = lhs.rawData.data[12];
		var m212 = lhs.rawData.data[1];
		var m222 = lhs.rawData.data[5];
		var m232 = lhs.rawData.data[9];
		var m242 = lhs.rawData.data[13];
		var m213 = lhs.rawData.data[2];
		var m223 = lhs.rawData.data[6];
		var m233 = lhs.rawData.data[10];
		var m243 = lhs.rawData.data[14];
		var m214 = lhs.rawData.data[3];
		var m224 = lhs.rawData.data[7];
		var m234 = lhs.rawData.data[11];
		var m244 = lhs.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = this.rawData.data[12] + x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = this.rawData.data[13] + y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = this.rawData.data[14] + z;
	}
	,clone: function() {
		return new openfl_geom_Matrix3D((function($this) {
			var $r;
			var this1 = $this.rawData;
			var vectorData = new openfl_VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Column " + column + " out of bounds [0, ..., 3]"));
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[1];
			vector3D.z = this.rawData.data[2];
			vector3D.w = this.rawData.data[3];
			break;
		case 1:
			vector3D.x = this.rawData.data[4];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[6];
			vector3D.w = this.rawData.data[7];
			break;
		case 2:
			vector3D.x = this.rawData.data[8];
			vector3D.y = this.rawData.data[9];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[11];
			break;
		case 3:
			vector3D.x = this.rawData.data[12];
			vector3D.y = this.rawData.data[13];
			vector3D.z = this.rawData.data[14];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Column " + column + " out of bounds [0, ..., 3]"));
		}
	}
	,copyFrom: function(other) {
		var this1 = other.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		this.rawData = vectorData;
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = vector.length - index;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(c >= this1.length) this1.length = c + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[c] = vector.data[c + index];
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = this.rawData.length;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var key = c + index;
			if(!vector.fixed) {
				if(key >= vector.length) vector.length = key + 1;
				if(vector.data.length < vector.length) {
					var data;
					var this1;
					this1 = new Array(vector.data.length + 10);
					data = this1;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vector.data,0,data,0,vector.data.length);
					vector.data = data;
				}
			}
			vector.data[key] = this.rawData.data[c];
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(4 >= this3.length) this3.length = 5;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[4] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(8 >= this5.length) this5.length = 9;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[8] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(12 >= this7.length) this7.length = 13;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[12] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(1 >= this9.length) this9.length = 2;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[1] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(9 >= this13.length) this13.length = 10;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[9] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(13 >= this15.length) this15.length = 14;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[13] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(2 >= this17.length) this17.length = 3;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[2] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(6 >= this19.length) this19.length = 7;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[6] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(14 >= this23.length) this23.length = 15;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[14] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(3 >= this25.length) this25.length = 4;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[3] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(7 >= this27.length) this27.length = 8;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[7] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(11 >= this29.length) this29.length = 12;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[11] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]"));
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[4];
			vector3D.z = this.rawData.data[8];
			vector3D.w = this.rawData.data[12];
			break;
		case 1:
			vector3D.x = this.rawData.data[1];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[9];
			vector3D.w = this.rawData.data[13];
			break;
		case 2:
			vector3D.x = this.rawData.data[2];
			vector3D.y = this.rawData.data[6];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[14];
			break;
		case 3:
			vector3D.x = this.rawData.data[3];
			vector3D.y = this.rawData.data[7];
			vector3D.z = this.rawData.data[11];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error, Row " + row + " out of bounds [0, ..., 3]"));
		}
	}
	,copyToMatrix3D: function(other) {
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		other.rawData = vectorData;
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = openfl_geom_Orientation3D.EULER_ANGLES;
		var vec;
		var this1;
		this1 = new openfl_VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		vec = this1;
		var m = this.clone();
		var mr;
		var this3 = m.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this3.length;
		vectorData.fixed = this3.fixed;
		var this4;
		this4 = new Array(this3.length);
		vectorData.data = this4;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,vectorData.data,0,this3.length);
		mr = vectorData;
		var pos = new openfl_geom_Vector3D(mr.data[12],mr.data[13],mr.data[14]);
		{
			if(!mr.fixed) {
				if(12 >= mr.length) mr.length = 13;
				if(mr.data.length < mr.length) {
					var data;
					var this5;
					this5 = new Array(mr.data.length + 10);
					data = this5;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data,0,mr.data.length);
					mr.data = data;
				}
			}
			mr.data[12] = 0;
		}
		{
			if(!mr.fixed) {
				if(13 >= mr.length) mr.length = 14;
				if(mr.data.length < mr.length) {
					var data1;
					var this6;
					this6 = new Array(mr.data.length + 10);
					data1 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data1,0,mr.data.length);
					mr.data = data1;
				}
			}
			mr.data[13] = 0;
		}
		{
			if(!mr.fixed) {
				if(14 >= mr.length) mr.length = 15;
				if(mr.data.length < mr.length) {
					var data2;
					var this7;
					this7 = new Array(mr.data.length + 10);
					data2 = this7;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data2,0,mr.data.length);
					mr.data = data2;
				}
			}
			mr.data[14] = 0;
		}
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
		scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
		scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
		if(mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z;
		{
			if(!mr.fixed) {
				if(0 >= mr.length) mr.length = 1;
				if(mr.data.length < mr.length) {
					var data3;
					var this8;
					this8 = new Array(mr.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data3,0,mr.data.length);
					mr.data = data3;
				}
			}
			mr.data[0] = mr.data[0] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(1 >= mr.length) mr.length = 2;
				if(mr.data.length < mr.length) {
					var data4;
					var this9;
					this9 = new Array(mr.data.length + 10);
					data4 = this9;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data4,0,mr.data.length);
					mr.data = data4;
				}
			}
			mr.data[1] = mr.data[1] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(2 >= mr.length) mr.length = 3;
				if(mr.data.length < mr.length) {
					var data5;
					var this10;
					this10 = new Array(mr.data.length + 10);
					data5 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data5,0,mr.data.length);
					mr.data = data5;
				}
			}
			mr.data[2] = mr.data[2] / scale.x;
		}
		{
			if(!mr.fixed) {
				if(4 >= mr.length) mr.length = 5;
				if(mr.data.length < mr.length) {
					var data6;
					var this11;
					this11 = new Array(mr.data.length + 10);
					data6 = this11;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data6,0,mr.data.length);
					mr.data = data6;
				}
			}
			mr.data[4] = mr.data[4] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(5 >= mr.length) mr.length = 6;
				if(mr.data.length < mr.length) {
					var data7;
					var this12;
					this12 = new Array(mr.data.length + 10);
					data7 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data7,0,mr.data.length);
					mr.data = data7;
				}
			}
			mr.data[5] = mr.data[5] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(6 >= mr.length) mr.length = 7;
				if(mr.data.length < mr.length) {
					var data8;
					var this13;
					this13 = new Array(mr.data.length + 10);
					data8 = this13;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data8,0,mr.data.length);
					mr.data = data8;
				}
			}
			mr.data[6] = mr.data[6] / scale.y;
		}
		{
			if(!mr.fixed) {
				if(8 >= mr.length) mr.length = 9;
				if(mr.data.length < mr.length) {
					var data9;
					var this14;
					this14 = new Array(mr.data.length + 10);
					data9 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data9,0,mr.data.length);
					mr.data = data9;
				}
			}
			mr.data[8] = mr.data[8] / scale.z;
		}
		{
			if(!mr.fixed) {
				if(9 >= mr.length) mr.length = 10;
				if(mr.data.length < mr.length) {
					var data10;
					var this15;
					this15 = new Array(mr.data.length + 10);
					data10 = this15;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data10,0,mr.data.length);
					mr.data = data10;
				}
			}
			mr.data[9] = mr.data[9] / scale.z;
		}
		{
			if(!mr.fixed) {
				if(10 >= mr.length) mr.length = 11;
				if(mr.data.length < mr.length) {
					var data11;
					var this16;
					this16 = new Array(mr.data.length + 10);
					data11 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data11,0,mr.data.length);
					mr.data = data11;
				}
			}
			mr.data[10] = mr.data[10] / scale.z;
		}
		var rot = new openfl_geom_Vector3D();
		if(orientationStyle != null) switch(orientationStyle[1]) {
		case 0:
			rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
			var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
			if(len != 0) {
				rot.x = (mr.data[6] - mr.data[9]) / len;
				rot.y = (mr.data[8] - mr.data[2]) / len;
				rot.z = (mr.data[1] - mr.data[4]) / len;
			} else rot.x = rot.y = rot.z = 0;
			break;
		case 2:
			var tr = mr.data[0] + mr.data[5] + mr.data[10];
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
				rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
				rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
			} else if(mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
				rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
				rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
				rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
				rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
			} else if(mr.data[5] > mr.data[10]) {
				rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
				rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
				rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
				rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
				rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
				rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
				rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data[2]);
			if(mr.data[2] != 1 && mr.data[2] != -1) {
				rot.x = Math.atan2(mr.data[6],mr.data[10]);
				rot.z = Math.atan2(mr.data[1],mr.data[0]);
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data[4],mr.data[5]);
			}
			break;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data12;
				var this17;
				this17 = new Array(vec.data.length + 10);
				data12 = this17;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data12,0,vec.data.length);
				vec.data = data12;
			}
			vec.data[vec.length - 1] = pos;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data13;
				var this18;
				this18 = new Array(vec.data.length + 10);
				data13 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data13,0,vec.data.length);
				vec.data = data13;
			}
			vec.data[vec.length - 1] = rot;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data14;
				var this19;
				this19 = new Array(vec.data.length + 10);
				data14 = this19;
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data14,0,vec.data.length);
				vec.data = data14;
			}
			vec.data[vec.length - 1] = scale;
		}
		vec.length;
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11],0);
	}
	,identity: function() {
		{
			var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
			this.rawData = vectorData;
		}
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
		}
	}
	,invert: function() {
		var d = (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data[0];
			var m21 = this.rawData.data[4];
			var m31 = this.rawData.data[8];
			var m41 = this.rawData.data[12];
			var m12 = this.rawData.data[1];
			var m22 = this.rawData.data[5];
			var m32 = this.rawData.data[9];
			var m42 = this.rawData.data[13];
			var m13 = this.rawData.data[2];
			var m23 = this.rawData.data[6];
			var m33 = this.rawData.data[10];
			var m43 = this.rawData.data[14];
			var m14 = this.rawData.data[3];
			var m24 = this.rawData.data[7];
			var m34 = this.rawData.data[11];
			var m44 = this.rawData.data[15];
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl_geom_Vector3D(0,0,-1);
		if(up == null) up = new openfl_geom_Vector3D(0,-1,0);
		var dir = new openfl_geom_Vector3D(at.x - pos.x,at.y - pos.y,at.z - pos.z);
		var vup = new openfl_geom_Vector3D(up.x,up.y,up.z,up.w);
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = new openfl_geom_Vector3D(dir.x,dir.y,dir.z,dir.w);
		dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
		vup = new openfl_geom_Vector3D(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
		if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl_geom_Vector3D(-dir.y,dir.x,0); else vup = new openfl_geom_Vector3D(1,0,0);
		right = new openfl_geom_Vector3D(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
		right.normalize();
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = right.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(4 >= this3.length) this3.length = 5;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[4] = right.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(8 >= this5.length) this5.length = 9;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[8] = right.z;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(12 >= this7.length) this7.length = 13;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[12] = 0.0;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(1 >= this9.length) this9.length = 2;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = vup.x;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = vup.y;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(9 >= this13.length) this13.length = 10;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[9] = vup.z;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(13 >= this15.length) this15.length = 14;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[13] = 0.0;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(2 >= this17.length) this17.length = 3;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[2] = dir.x;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(6 >= this19.length) this19.length = 7;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[6] = dir.y;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = dir.z;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(14 >= this23.length) this23.length = 15;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[14] = 0.0;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(3 >= this25.length) this25.length = 4;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[3] = pos.x;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(7 >= this27.length) this27.length = 8;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[7] = pos.y;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(11 >= this29.length) this29.length = 12;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[11] = pos.z;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = 1.0;
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data[0];
		var m121 = rhs.rawData.data[4];
		var m131 = rhs.rawData.data[8];
		var m141 = rhs.rawData.data[12];
		var m112 = rhs.rawData.data[1];
		var m122 = rhs.rawData.data[5];
		var m132 = rhs.rawData.data[9];
		var m142 = rhs.rawData.data[13];
		var m113 = rhs.rawData.data[2];
		var m123 = rhs.rawData.data[6];
		var m133 = rhs.rawData.data[10];
		var m143 = rhs.rawData.data[14];
		var m114 = rhs.rawData.data[3];
		var m124 = rhs.rawData.data[7];
		var m134 = rhs.rawData.data[11];
		var m144 = rhs.rawData.data[15];
		var m211 = this.rawData.data[0];
		var m221 = this.rawData.data[4];
		var m231 = this.rawData.data[8];
		var m241 = this.rawData.data[12];
		var m212 = this.rawData.data[1];
		var m222 = this.rawData.data[5];
		var m232 = this.rawData.data[9];
		var m242 = this.rawData.data[13];
		var m213 = this.rawData.data[2];
		var m223 = this.rawData.data[6];
		var m233 = this.rawData.data[10];
		var m243 = this.rawData.data[14];
		var m214 = this.rawData.data[3];
		var m224 = this.rawData.data[7];
		var m234 = this.rawData.data[11];
		var m244 = this.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
		if(orientationStyle == null) orientationStyle = openfl_geom_Orientation3D.EULER_ANGLES;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data[2].x;
		scale[4] = scale[5] = scale[6] = components.data[2].y;
		scale[8] = scale[9] = scale[10] = components.data[2].z;
		if(orientationStyle != null) switch(orientationStyle[1]) {
		case 1:
			var cx = Math.cos(components.data[1].x);
			var cy = Math.cos(components.data[1].y);
			var cz = Math.cos(components.data[1].z);
			var sx = Math.sin(components.data[1].x);
			var sy = Math.sin(components.data[1].y);
			var sz = Math.sin(components.data[1].z);
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = cy * cz * scale[0];
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = cy * sz * scale[1];
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = -sy * scale[2];
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = 0;
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = (sx * sy * cz - cx * sz) * scale[4];
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = (sx * sy * sz + cx * cz) * scale[5];
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = sx * cy * scale[6];
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = 0;
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = (cx * sy * cz + sx * sz) * scale[8];
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = (cx * sy * sz - sx * cz) * scale[9];
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = cx * cy * scale[10];
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = 0;
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = components.data[0].x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = components.data[0].y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = components.data[0].z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = 1;
			break;
		default:
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl_geom_Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		} else {
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl_geom_Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		}
		if(components.data[2].x == 0) {
			var this65 = this.rawData;
			if(!this65.fixed) {
				if(0 >= this65.length) this65.length = 1;
				if(this65.data.length < this65.length) {
					var data32;
					var this66;
					this66 = new Array(this65.data.length + 10);
					data32 = this66;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this65.data,0,data32,0,this65.data.length);
					this65.data = data32;
				}
			}
			this65.data[0] = 1e-15;
		}
		if(components.data[2].y == 0) {
			var this67 = this.rawData;
			if(!this67.fixed) {
				if(5 >= this67.length) this67.length = 6;
				if(this67.data.length < this67.length) {
					var data33;
					var this68;
					this68 = new Array(this67.data.length + 10);
					data33 = this68;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this67.data,0,data33,0,this67.data.length);
					this67.data = data33;
				}
			}
			this67.data[5] = 1e-15;
		}
		if(components.data[2].z == 0) {
			var this69 = this.rawData;
			if(!this69.fixed) {
				if(10 >= this69.length) this69.length = 11;
				if(this69.data.length < this69.length) {
					var data34;
					var this70;
					this70 = new Array(this69.data.length + 10);
					data34 = this70;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this69.data,0,data34,0,this69.data.length);
					this69.data = data34;
				}
			}
			this69.data[10] = 1e-15;
		}
		return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14],x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		while(i + 3 <= vin.length) {
			var x = vin.data[i];
			var y = vin.data[i + 1];
			var z = vin.data[i + 2];
			{
				if(!vout.fixed) {
					if(i >= vout.length) vout.length = i + 1;
					if(vout.data.length < vout.length) {
						var data;
						var this1;
						this1 = new Array(vout.data.length + 10);
						data = this1;
						haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data,0,vout.data.length);
						vout.data = data;
					}
				}
				vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
			}
			var key = i + 1;
			if(!vout.fixed) {
				if(key >= vout.length) vout.length = key + 1;
				if(vout.data.length < vout.length) {
					var data1;
					var this2;
					this2 = new Array(vout.data.length + 10);
					data1 = this2;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data1,0,vout.data.length);
					vout.data = data1;
				}
			}
			vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
			var key1 = i + 2;
			if(!vout.fixed) {
				if(key1 >= vout.length) vout.length = key1 + 1;
				if(vout.data.length < vout.length) {
					var data2;
					var this3;
					this3 = new Array(vout.data.length + 10);
					data2 = this3;
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data2,0,vout.data.length);
					vout.data = data2;
				}
			}
			vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData;
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		oRawData = vectorData;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		this3.data[1] = oRawData.data[4];
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
		}
		this5.data[2] = oRawData.data[8];
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
		}
		this7.data[3] = oRawData.data[12];
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
		}
		this9.data[4] = oRawData.data[1];
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(6 >= this11.length) this11.length = 7;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
		}
		this11.data[6] = oRawData.data[9];
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(7 >= this13.length) this13.length = 8;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
		}
		this13.data[7] = oRawData.data[13];
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(8 >= this15.length) this15.length = 9;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
		}
		this15.data[8] = oRawData.data[2];
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(9 >= this17.length) this17.length = 10;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
		}
		this17.data[9] = oRawData.data[6];
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(11 >= this19.length) this19.length = 12;
			if(this19.data.length < this19.length) {
				var data8;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data8 = this20;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data8,0,this19.data.length);
				this19.data = data8;
			}
		}
		this19.data[11] = oRawData.data[14];
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(12 >= this21.length) this21.length = 13;
			if(this21.data.length < this21.length) {
				var data9;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data9 = this22;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data9,0,this21.data.length);
				this21.data = data9;
			}
		}
		this21.data[12] = oRawData.data[3];
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(13 >= this23.length) this23.length = 14;
			if(this23.data.length < this23.length) {
				var data10;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data10 = this24;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data10,0,this23.data.length);
				this23.data = data10;
			}
		}
		this23.data[13] = oRawData.data[7];
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(14 >= this25.length) this25.length = 15;
			if(this25.data.length < this25.length) {
				var data11;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data11 = this26;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data11,0,this25.data.length);
				this25.data = data11;
			}
		}
		this25.data[14] = oRawData.data[11];
	}
	,get_determinant: function() {
		return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.data[12],this.rawData.data[13],this.rawData.data[14]);
	}
	,set_position: function(val) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = val.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = val.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = val.z;
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom_Orientation3D = $hxClasses["openfl.geom.Orientation3D"] = { __ename__ : ["openfl","geom","Orientation3D"], __constructs__ : ["AXIS_ANGLE","EULER_ANGLES","QUATERNION"] };
openfl_geom_Orientation3D.AXIS_ANGLE = ["AXIS_ANGLE",0];
openfl_geom_Orientation3D.AXIS_ANGLE.toString = $estr;
openfl_geom_Orientation3D.AXIS_ANGLE.__enum__ = openfl_geom_Orientation3D;
openfl_geom_Orientation3D.EULER_ANGLES = ["EULER_ANGLES",1];
openfl_geom_Orientation3D.EULER_ANGLES.toString = $estr;
openfl_geom_Orientation3D.EULER_ANGLES.__enum__ = openfl_geom_Orientation3D;
openfl_geom_Orientation3D.QUATERNION = ["QUATERNION",2];
openfl_geom_Orientation3D.QUATERNION.toString = $estr;
openfl_geom_Orientation3D.QUATERNION.__enum__ = openfl_geom_Orientation3D;
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.concatenatedMatrix = new openfl_geom_Matrix();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,concatenatedMatrix: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		this.__colorTransform = value;
		if(value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			var matrix = new openfl_geom_Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return matrix;
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.tx);
			this.__displayObject.set_y(value.ty);
			this.__displayObject.set_scaleX(Math.sqrt(value.a * value.a + value.b * value.b));
			this.__displayObject.set_scaleY(Math.sqrt(value.c * value.c + value.d * value.d));
			this.__displayObject.set_rotation(Math.atan2(value.b,value.a) * (180 / Math.PI));
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = new openfl_geom_Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return new openfl_geom_Matrix3D((function($this) {
				var $r;
				var value = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
				var vectorData = new openfl_VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.rawData.data[12]);
			this.__displayObject.set_y(value.rawData.data[13]);
			this.__displayObject.set_scaleX(Math.sqrt(value.rawData.data[0] * value.rawData.data[0] + value.rawData.data[1] * value.rawData.data[1]));
			this.__displayObject.set_scaleY(Math.sqrt(value.rawData.data[4] * value.rawData.data[4] + value.rawData.data[5] * value.rawData.data[5]));
			this.__displayObject.set_rotation(Math.atan2(value.rawData.data[1],value.rawData.data[0]) * (180 / Math.PI));
		}
		return value;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl_geom_Vector3D.X_AXIS = null;
openfl_geom_Vector3D.Y_AXIS = null;
openfl_geom_Vector3D.Z_AXIS = null;
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var a0 = new openfl_geom_Vector3D(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new openfl_geom_Vector3D(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.length = 0;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,id3: null
	,isBuffering: null
	,length: null
	,url: null
	,__buffer: null
	,__sound: null
	,__soundID: null
	,close: function() {
		if(openfl_media_Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe_io_Path.withoutExtension(stream.url);
		if(!openfl_media_Sound.__registeredSounds.exists(this.__soundID)) {
			openfl_media_Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) forcePlayAsMusic = false;
		openfl_Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		openfl_Lib.notImplemented("Sound.loadPCMFromByteArray");
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl_media_SoundTransform(1,0);
		var instance;
		if(loops > 1) instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops - 1,sndTransform.volume,sndTransform.pan); else instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,0,sndTransform.volume,sndTransform.pan);
		return new openfl_media_SoundChannel(instance);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		this.__buffer = buffer;
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_Event(openfl_events_Event.COMPLETE));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_IOErrorEvent(openfl_events_IOErrorEvent.IO_ERROR));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(soundInstance) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__source: null
	,__soundInstance: null
	,stop: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
		this.__soundInstance = null;
		this.__isValid = false;
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) return new openfl_media_SoundTransform();
		return new openfl_media_SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) return value;
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
	}
	,source_onComplete: function() {
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.SOUND_COMPLETE));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 0;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = ["openfl","net","SharedObject"];
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) secure = false;
	if(localPath == null) localPath = window.location.href;
	var so = new openfl_net_SharedObject();
	so.__key = localPath + ":" + name;
	var rawData = null;
	try {
		rawData = openfl_net_SharedObject.__getLocalStorage().getItem(so.__key);
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
	}
	so.data = { };
	if(rawData != null && rawData != "") {
		var unserializer = new haxe_Unserializer(rawData);
		unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.resolveClass});
		so.data = unserializer.unserialize();
	}
	if(so.data == null) so.data = { };
	return so;
};
openfl_net_SharedObject.__getLocalStorage = function() {
	var res = js_Browser.getLocalStorage();
	if(res == null) throw new js__$Boot_HaxeError(new openfl_errors_Error("SharedObject not supported"));
	return res;
};
openfl_net_SharedObject.resolveClass = function(name) {
	if(name != null) {
		name = StringTools.replace(name,"flash.","openfl.");
		name = StringTools.replace(name,"openfl._v2.","openfl.");
		name = StringTools.replace(name,"openfl._legacy.","openfl.");
		return Type.resolveClass(name);
	}
	return null;
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	data: null
	,__key: null
	,clear: function() {
		this.data = { };
		try {
			openfl_net_SharedObject.__getLocalStorage().removeItem(this.__key);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
		}
		this.flush();
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) minDiskSpace = 0;
		var data = haxe_Serializer.run(this.data);
		try {
			openfl_net_SharedObject.__getLocalStorage().removeItem(this.__key);
			openfl_net_SharedObject.__getLocalStorage().setItem(this.__key,data);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return openfl_net_SharedObjectFlushStatus.PENDING;
		}
		return openfl_net_SharedObjectFlushStatus.FLUSHED;
	}
	,setProperty: function(propertyName,value) {
		if(this.data != null) this.data[propertyName] = value;
	}
	,get_size: function() {
		var d = haxe_Serializer.run(this.data);
		return haxe_io_Bytes.ofString(d).length;
	}
	,__class__: openfl_net_SharedObject
	,__properties__: {get_size:"get_size"}
});
var openfl_net_SharedObjectFlushStatus = $hxClasses["openfl.net.SharedObjectFlushStatus"] = { __ename__ : ["openfl","net","SharedObjectFlushStatus"], __constructs__ : ["FLUSHED","PENDING"] };
openfl_net_SharedObjectFlushStatus.FLUSHED = ["FLUSHED",0];
openfl_net_SharedObjectFlushStatus.FLUSHED.toString = $estr;
openfl_net_SharedObjectFlushStatus.FLUSHED.__enum__ = openfl_net_SharedObjectFlushStatus;
openfl_net_SharedObjectFlushStatus.PENDING = ["PENDING",1];
openfl_net_SharedObjectFlushStatus.PENDING.toString = $estr;
openfl_net_SharedObjectFlushStatus.PENDING.__enum__ = openfl_net_SharedObjectFlushStatus;
var openfl_net_URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,lime_utils_ByteArray)) {
			res = res.slice();
			res.push(new openfl_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_text_AntiAliasType = $hxClasses["openfl.text.AntiAliasType"] = { __ename__ : ["openfl","text","AntiAliasType"], __constructs__ : ["ADVANCED","NORMAL"] };
openfl_text_AntiAliasType.ADVANCED = ["ADVANCED",0];
openfl_text_AntiAliasType.ADVANCED.toString = $estr;
openfl_text_AntiAliasType.ADVANCED.__enum__ = openfl_text_AntiAliasType;
openfl_text_AntiAliasType.NORMAL = ["NORMAL",1];
openfl_text_AntiAliasType.NORMAL.toString = $estr;
openfl_text_AntiAliasType.NORMAL.__enum__ = openfl_text_AntiAliasType;
var openfl_text_FontStyle = $hxClasses["openfl.text.FontStyle"] = { __ename__ : ["openfl","text","FontStyle"], __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] };
openfl_text_FontStyle.REGULAR = ["REGULAR",0];
openfl_text_FontStyle.REGULAR.toString = $estr;
openfl_text_FontStyle.REGULAR.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.ITALIC = ["ITALIC",1];
openfl_text_FontStyle.ITALIC.toString = $estr;
openfl_text_FontStyle.ITALIC.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
openfl_text_FontStyle.BOLD_ITALIC.toString = $estr;
openfl_text_FontStyle.BOLD_ITALIC.__enum__ = openfl_text_FontStyle;
openfl_text_FontStyle.BOLD = ["BOLD",3];
openfl_text_FontStyle.BOLD.toString = $estr;
openfl_text_FontStyle.BOLD.__enum__ = openfl_text_FontStyle;
var openfl_text_FontType = $hxClasses["openfl.text.FontType"] = { __ename__ : ["openfl","text","FontType"], __constructs__ : ["DEVICE","EMBEDDED","EMBEDDED_CFF"] };
openfl_text_FontType.DEVICE = ["DEVICE",0];
openfl_text_FontType.DEVICE.toString = $estr;
openfl_text_FontType.DEVICE.__enum__ = openfl_text_FontType;
openfl_text_FontType.EMBEDDED = ["EMBEDDED",1];
openfl_text_FontType.EMBEDDED.toString = $estr;
openfl_text_FontType.EMBEDDED.__enum__ = openfl_text_FontType;
openfl_text_FontType.EMBEDDED_CFF = ["EMBEDDED_CFF",2];
openfl_text_FontType.EMBEDDED_CFF.toString = $estr;
openfl_text_FontType.EMBEDDED_CFF.__enum__ = openfl_text_FontType;
var openfl_text_GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : ["openfl","text","GridFitType"], __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl_text_GridFitType.NONE = ["NONE",0];
openfl_text_GridFitType.NONE.toString = $estr;
openfl_text_GridFitType.NONE.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.PIXEL = ["PIXEL",1];
openfl_text_GridFitType.PIXEL.toString = $estr;
openfl_text_GridFitType.PIXEL.__enum__ = openfl_text_GridFitType;
openfl_text_GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl_text_GridFitType.SUBPIXEL.toString = $estr;
openfl_text_GridFitType.SUBPIXEL.__enum__ = openfl_text_GridFitType;
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__width = 100;
	this.__height = 100;
	this.__text = "";
	this.__dirtyBounds = true;
	this.__bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.__graphics = new openfl_display_Graphics();
	this.set_type(openfl_text_TextFieldType.DYNAMIC);
	this.set_autoSize(openfl_text_TextFieldAutoSize.NONE);
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.set_selectable(true);
	this.set_borderColor(0);
	this.set_border(false);
	this.set_backgroundColor(16777215);
	this.set_background(false);
	this.gridFitType = openfl_text_GridFitType.PIXEL;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.set_wordWrap(false);
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",openfl_text_TextFormatAlign.LEFT,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__defaultTextFormat = null;
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,caretIndex: null
	,caretPos: null
	,displayAsPassword: null
	,embedFonts: null
	,gridFitType: null
	,length: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,selectionBeginIndex: null
	,selectionEndIndex: null
	,sharpness: null
	,textHeight: null
	,textWidth: null
	,type: null
	,wordWrap: null
	,__bounds: null
	,__cursorPosition: null
	,__cursorTimer: null
	,__dirty: null
	,__dirtyBounds: null
	,__hasFocus: null
	,__height: null
	,__isHTML: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__ranges: null
	,__selectable: null
	,__selectionStart: null
	,__showCursor: null
	,__text: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__tileData: null
	,__tileDataLength: null
	,__tilesheets: null
	,__width: null
	,bounds: null
	,__div: null
	,__hiddenInput: null
	,__cairoFont: null
	,appendText: function(text) {
		var _g = this;
		_g.set_text(_g.get_text() + text);
	}
	,getCharBoundaries: function(a) {
		openfl_Lib.notImplemented("TextField.getCharBoundaries");
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		openfl_Lib.notImplemented("TextField.getCharIndexAtPoint");
		return 0;
	}
	,getLineIndexAtPoint: function(x,y) {
		openfl_Lib.notImplemented("TextField.getLineIndexAtPoint");
		return 0;
	}
	,getLineMetrics: function(lineIndex) {
		var lineWidth = openfl__$internal_renderer_canvas_CanvasTextField.getLineWidth(this,lineIndex);
		var lineHeight = this.get_textHeight();
		var ascender = lineHeight * 0.8;
		var descender = lineHeight * 0.2;
		var leading = 0;
		var margin;
		var _g = this.__textFormat.align;
		switch(_g[1]) {
		case 0:case 2:
			margin = 2;
			break;
		case 1:
			margin = this.get_width() - lineWidth - 2;
			break;
		case 3:
			margin = (this.get_width() - lineWidth) / 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		openfl_Lib.notImplemented("TextField.getLineOffset");
		return 0;
	}
	,getLineText: function(lineIndex) {
		openfl_Lib.notImplemented("TextField.getLineText");
		return "";
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		return this.__textFormat.clone();
	}
	,setSelection: function(beginIndex,endIndex) {
		openfl_Lib.notImplemented("TextField.setSelection");
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
		this.__dirtyBounds = true;
	}
	,__getBounds: function(rect,matrix) {
		var bounds = this.get_bounds().transform(matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.type == openfl_text_TextFieldType.INPUT && this.selectable) return lime_ui_MouseCursor.TEXT; else return null;
	}
	,__getPosition: function(x,y) {
		if(x <= 2) return 0;
		var value = this.get_text();
		var text = value;
		var totalW = 2;
		var pos = text.length;
		if(x < openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(this,text) + 2) {
			var _g1 = 0;
			var _g = text.length;
			while(_g1 < _g) {
				var i = _g1++;
				totalW += openfl__$internal_renderer_canvas_CanvasTextField.getTextWidth(this,text.charAt(i));
				if(totalW >= x) {
					pos = i;
					break;
				}
			}
		}
		return pos;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var point = this.globalToLocal(new openfl_geom_Point(x,y));
		if(this.get_bounds().containsPoint(point)) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoTextField.render(this,renderSession);
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl__$internal_renderer_dom_DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession);
		openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),500);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) this.__cursorTimer.stop();
	}
	,input_onKeyUp: function(event) {
		this.__isKeyDown = false;
		if(event == null) event == window.event;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		if(this.__hiddenInput.selectionDirection == "backward") {
			this.__cursorPosition = this.__hiddenInput.selectionStart;
			this.__selectionStart = this.__hiddenInput.selectionEnd;
		} else {
			this.__cursorPosition = this.__hiddenInput.selectionEnd;
			this.__selectionStart = this.__hiddenInput.selectionStart;
		}
		this.__dirty = true;
		this.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE,true));
	}
	,input_onKeyDown: function(event) {
		this.__isKeyDown = true;
		if(event == null) event == window.event;
		var keyCode = event.which;
		var isShift = event.shiftKey;
		this.__text = this.__hiddenInput.value;
		this.__ranges = null;
		this.__isHTML = false;
		if(this.__hiddenInput.selectionDirection == "backward") {
			this.__cursorPosition = this.__hiddenInput.selectionStart;
			this.__selectionStart = this.__hiddenInput.selectionEnd;
		} else {
			this.__cursorPosition = this.__hiddenInput.selectionEnd;
			this.__selectionStart = this.__hiddenInput.selectionStart;
		}
		this.__dirty = true;
	}
	,stage_onMouseMove: function(event) {
		if(this.__hasFocus && this.__selectionStart >= 0) {
			var localPoint = this.globalToLocal(new openfl_geom_Point(event.stageX,event.stageY));
			this.__cursorPosition = this.__getPosition(localPoint.x,localPoint.y);
			this.__dirty = true;
		}
	}
	,stage_onMouseUp: function(event) {
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			var localPoint = this.globalToLocal(new openfl_geom_Point(event.stageX,event.stageY));
			var upPos = this.__getPosition(localPoint.x,localPoint.y);
			var leftPos;
			var rightPos;
			leftPos = Std["int"](Math.min(this.__selectionStart,upPos));
			rightPos = Std["int"](Math.max(this.__selectionStart,upPos));
			this.__selectionStart = leftPos;
			this.__cursorPosition = rightPos;
			this.this_onFocusIn(null);
		}
	}
	,this_onAddedToStage: function(event) {
		this.addEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
		this.addEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
		this.__hiddenInput.addEventListener("keydown",$bind(this,this.input_onKeyDown),true);
		this.__hiddenInput.addEventListener("keyup",$bind(this,this.input_onKeyUp),true);
		this.__hiddenInput.addEventListener("input",$bind(this,this.input_onKeyUp),true);
		this.addEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
		if(this.stage.get_focus() == this) this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.__cursorPosition < 0) {
			this.__cursorPosition = this.__text.length;
			this.__selectionStart = this.__cursorPosition;
		}
		this.__hiddenInput.focus();
		this.__hiddenInput.selectionStart = this.__selectionStart;
		this.__hiddenInput.selectionEnd = this.__cursorPosition;
		this.__stopCursorTimer();
		this.__startCursorTimer();
		this.__hasFocus = true;
		this.__dirty = true;
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,this_onFocusOut: function(event) {
		this.__cursorPosition = -1;
		this.__hasFocus = false;
		this.__stopCursorTimer();
		if(this.__hiddenInput != null) this.__hiddenInput.blur();
		this.__dirty = true;
	}
	,this_onMouseDown: function(event) {
		if(!this.selectable) return;
		var localPoint = this.globalToLocal(new openfl_geom_Point(event.stageX,event.stageY));
		this.__selectionStart = this.__getPosition(localPoint.x,localPoint.y);
		this.__cursorPosition = this.__selectionStart;
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,this_onRemovedFromStage: function(event) {
		this.removeEventListener(openfl_events_FocusEvent.FOCUS_IN,$bind(this,this.this_onFocusIn));
		this.removeEventListener(openfl_events_FocusEvent.FOCUS_OUT,$bind(this,this.this_onFocusOut));
		this.this_onFocusOut(null);
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keydown",$bind(this,this.input_onKeyDown),true);
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("keyup",$bind(this,this.input_onKeyUp),true);
		if(this.__hiddenInput != null) this.__hiddenInput.removeEventListener("input",$bind(this,this.input_onKeyUp),true);
		this.removeEventListener(openfl_events_MouseEvent.MOUSE_DOWN,$bind(this,this.this_onMouseDown));
		if(this.stage != null) this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_MOVE,$bind(this,this.stage_onMouseMove));
		if(this.stage != null) this.stage.removeEventListener(openfl_events_MouseEvent.MOUSE_UP,$bind(this,this.stage_onMouseUp));
	}
	,set_autoSize: function(value) {
		if(value != this.autoSize) {
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		return this.autoSize = value;
	}
	,set_background: function(value) {
		if(value != this.background) this.__dirty = true;
		return this.background = value;
	}
	,set_backgroundColor: function(value) {
		if(value != this.backgroundColor) this.__dirty = true;
		return this.backgroundColor = value;
	}
	,set_border: function(value) {
		if(value != this.border) {
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		return this.border = value;
	}
	,set_borderColor: function(value) {
		if(value != this.borderColor) this.__dirty = true;
		return this.borderColor = value;
	}
	,get_bottomScrollV: function() {
		return this.get_numLines();
	}
	,get_bounds: function() {
		if(!this.__dirtyBounds) return this.__bounds;
		if(this.autoSize != openfl_text_TextFieldAutoSize.NONE) {
			this.__bounds.width = this.get_textWidth() + 4 + (this.border?1:0);
			this.__bounds.height = this.get_textHeight() + 4 + (this.border?1:0);
		} else {
			this.__bounds.width = this.__width;
			this.__bounds.height = this.__height;
		}
		this.__dirtyBounds = false;
		return this.__bounds;
	}
	,get_caretPos: function() {
		return 0;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		return value;
	}
	,get_height: function() {
		return this.get_bounds().height;
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		this.__ranges = null;
		this.__isHTML = true;
		if(this.__div == null) {
			value = new EReg("<br>","g").replace(value,"\n");
			value = new EReg("<br/>","g").replace(value,"\n");
			var segments = value.split("<font");
			if(segments.length == 1) {
				value = new EReg("<.*?>","g").replace(value,"");
				if(this.__text != value && this.__hiddenInput != null) {
					var selectionStart = this.__hiddenInput.selectionStart;
					var selectionEnd = this.__hiddenInput.selectionEnd;
					this.__hiddenInput.value = value;
					this.__hiddenInput.selectionStart = selectionStart;
					this.__hiddenInput.selectionEnd = selectionEnd;
				}
				return this.__text = value;
			} else {
				value = "";
				this.__ranges = [];
				var _g = 0;
				while(_g < segments.length) {
					var segment = segments[_g];
					++_g;
					if(segment == "") continue;
					var closeFontIndex = segment.indexOf("</font>");
					if(closeFontIndex > -1) {
						var start = segment.indexOf(">") + 1;
						var end = closeFontIndex;
						var format = this.__textFormat.clone();
						var faceIndex = segment.indexOf("face=");
						var colorIndex = segment.indexOf("color=");
						var sizeIndex = segment.indexOf("size=");
						if(faceIndex > -1 && faceIndex < start) {
							var len = segment.indexOf("\"",faceIndex);
							format.font = HxOverrides.substr(segment,faceIndex + 6,len);
						}
						if(colorIndex > -1 && colorIndex < start) format.color = Std.parseInt("0x" + HxOverrides.substr(segment,colorIndex + 8,6));
						if(sizeIndex > -1 && sizeIndex < start) format.size = Std.parseInt((function($this) {
							var $r;
							var len1 = segment.indexOf("\"",sizeIndex);
							$r = HxOverrides.substr(segment,sizeIndex + 6,len1);
							return $r;
						}(this)));
						var sub = segment.substring(start,end);
						sub = new EReg("<.*?>","g").replace(sub,"");
						this.__ranges.push(new openfl_text_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						if(closeFontIndex + 7 < segment.length) {
							sub = HxOverrides.substr(segment,closeFontIndex + 7,null);
							this.__ranges.push(new openfl_text_TextFormatRange(this.__textFormat,value.length,value.length + sub.length));
							value += sub;
						}
					} else {
						this.__ranges.push(new openfl_text_TextFormatRange(this.__textFormat,value.length,value.length + segment.length));
						value += segment;
					}
				}
			}
		}
		if(this.__text != value && this.__hiddenInput != null) {
			var selectionStart1 = this.__hiddenInput.selectionStart;
			var selectionEnd1 = this.__hiddenInput.selectionEnd;
			this.__hiddenInput.value = value;
			this.__hiddenInput.selectionStart = selectionStart1;
			this.__hiddenInput.selectionEnd = selectionEnd1;
		}
		return this.__text = value;
	}
	,get_maxScrollH: function() {
		return 0;
	}
	,get_maxScrollV: function() {
		return 1;
	}
	,get_numLines: function() {
		if(this.get_text() != "" && this.get_text() != null) {
			var count = this.get_text().split("\n").length;
			if(this.__isHTML) count += this.get_text().split("<br>").length - 1;
			return count;
		}
		return 1;
	}
	,set_selectable: function(value) {
		if(!value && this.selectable && this.type == openfl_text_TextFieldType.INPUT) this.this_onRemovedFromStage(null);
		return this.selectable = value;
	}
	,get_text: function() {
		if(this.__isHTML) {
		}
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__text != value && this.__hiddenInput != null) {
			var selectionStart = this.__hiddenInput.selectionStart;
			var selectionEnd = this.__hiddenInput.selectionEnd;
			this.__hiddenInput.value = value;
			this.__hiddenInput.selectionStart = selectionStart;
			this.__hiddenInput.selectionEnd = selectionEnd;
		}
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		this.__ranges = null;
		this.__isHTML = false;
		return this.__text = value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		if(this.__ranges != null) {
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				range.format.color = value;
			}
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		return openfl__$internal_renderer_canvas_CanvasTextField.getLineWidth(this,-1);
	}
	,get_textHeight: function() {
		if(this.__canvas != null) return this.__textFormat.size * 1.185 * this.get_numLines() + (this.__textFormat.leading == null?0:this.__textFormat.leading) * this.get_numLines(); else if(this.__div != null) return this.__div.clientHeight; else {
			openfl__$internal_renderer_dom_DOMTextField.measureText(this);
			return this.__measuredHeight + this.__textFormat.size * 0.185;
		}
	}
	,set_type: function(value) {
		if(value != this.type) {
			if(value == openfl_text_TextFieldType.INPUT) openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode(this); else openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode(this);
			this.__dirty = true;
		}
		return this.type = value;
	}
	,get_width: function() {
		return this.get_bounds().width;
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__dirtyBounds = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,get_wordWrap: function() {
		return this.wordWrap;
	}
	,set_wordWrap: function(value) {
		return this.wordWrap = value;
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_bounds:"get_bounds",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_selectable:"set_selectable",get_numLines:"get_numLines",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretPos:"get_caretPos",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",set_border:"set_border",set_backgroundColor:"set_backgroundColor",set_background:"set_background",set_autoSize:"set_autoSize"})
});
var openfl_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl.text.TextFormatRange"] = openfl_text_TextFormatRange;
openfl_text_TextFormatRange.__name__ = ["openfl","text","TextFormatRange"];
openfl_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl_text_TextFormatRange
};
var openfl_text_TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : ["openfl","text","TextFieldAutoSize"], __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl_text_TextFieldAutoSize.CENTER = ["CENTER",0];
openfl_text_TextFieldAutoSize.CENTER.toString = $estr;
openfl_text_TextFieldAutoSize.CENTER.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.LEFT = ["LEFT",1];
openfl_text_TextFieldAutoSize.LEFT.toString = $estr;
openfl_text_TextFieldAutoSize.LEFT.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.NONE = ["NONE",2];
openfl_text_TextFieldAutoSize.NONE.toString = $estr;
openfl_text_TextFieldAutoSize.NONE.__enum__ = openfl_text_TextFieldAutoSize;
openfl_text_TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl_text_TextFieldAutoSize.RIGHT.toString = $estr;
openfl_text_TextFieldAutoSize.RIGHT.__enum__ = openfl_text_TextFieldAutoSize;
var openfl_text_TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__ : ["openfl","text","TextFieldType"], __constructs__ : ["DYNAMIC","INPUT"] };
openfl_text_TextFieldType.DYNAMIC = ["DYNAMIC",0];
openfl_text_TextFieldType.DYNAMIC.toString = $estr;
openfl_text_TextFieldType.DYNAMIC.__enum__ = openfl_text_TextFieldType;
openfl_text_TextFieldType.INPUT = ["INPUT",1];
openfl_text_TextFieldType.INPUT.toString = $estr;
openfl_text_TextFieldType.INPUT.__enum__ = openfl_text_TextFieldType;
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text_TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : ["openfl","text","TextFormatAlign"], __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl_text_TextFormatAlign.LEFT = ["LEFT",0];
openfl_text_TextFormatAlign.LEFT.toString = $estr;
openfl_text_TextFormatAlign.LEFT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.RIGHT = ["RIGHT",1];
openfl_text_TextFormatAlign.RIGHT.toString = $estr;
openfl_text_TextFormatAlign.RIGHT.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl_text_TextFormatAlign.JUSTIFY.toString = $estr;
openfl_text_TextFormatAlign.JUSTIFY.__enum__ = openfl_text_TextFormatAlign;
openfl_text_TextFormatAlign.CENTER = ["CENTER",3];
openfl_text_TextFormatAlign.CENTER.toString = $estr;
openfl_text_TextFormatAlign.CENTER.__enum__ = openfl_text_TextFormatAlign;
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(lime_ui_Gamepad.devices.h.hasOwnProperty(index)) {
		var key = lime_ui_Gamepad.devices.h[index];
		return openfl_ui_GameInput.__devices.h[key.__id__];
	}
	return null;
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + (function($this) {
				var $r;
				switch(axis) {
				case 0:
					$r = "LEFT_X";
					break;
				case 1:
					$r = "LEFT_Y";
					break;
				case 2:
					$r = "RIGHT_X";
					break;
				case 3:
					$r = "RIGHT_Y";
					break;
				case 4:
					$r = "TRIGGER_LEFT";
					break;
				case 5:
					$r = "TRIGGER_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + axis + ")";
				}
				return $r;
			}(this)),-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event(openfl_events_Event.CHANGE));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = new openfl_ui_GameInputDevice(null,null);
	openfl_ui_GameInput.__devices.set(gamepad,device);
	openfl_ui_GameInput.numDevices = Lambda.count(openfl_ui_GameInput.__devices);
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_ADDED,null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		openfl_ui_GameInput.__devices.remove(gamepad);
		openfl_ui_GameInput.numDevices = Lambda.count(openfl_ui_GameInput.__devices);
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent(openfl_events_GameInputEvent.DEVICE_REMOVED,null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) value = 0;
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) append = false;
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) return this.__controls[i];
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.capsLock = null;
openfl_ui_Keyboard.numLock = null;
openfl_ui_Keyboard.convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) shift = false;
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) return key - 48 + 48;
		if(key >= 65 && key <= 90) return key - 65 + 97;
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) return key - 65 + 65;
	}
	if(key >= 96 && key <= 105) return key - 96 + 48;
	switch(key) {
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	case 46:
		return 127;
	case 13:
		return 13;
	case 8:
		return 8;
	}
	return 0;
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.hide = function() {
	lime_ui_Mouse.hide();
};
openfl_ui_Mouse.show = function() {
	lime_ui_Mouse.show();
};
var openfl_ui_Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = ["openfl","ui","Multitouch"];
openfl_ui_Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents",set_inputMode:"set_inputMode",get_inputMode:"get_inputMode"}
openfl_ui_Multitouch.maxTouchPoints = null;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = null;
openfl_ui_Multitouch.supportsTouchEvents = null;
openfl_ui_Multitouch.get_inputMode = function() {
	return openfl_ui_MultitouchInputMode.TOUCH_POINT;
};
openfl_ui_Multitouch.set_inputMode = function(inMode) {
	if(inMode == openfl_ui_MultitouchInputMode.GESTURE) return openfl_ui_Multitouch.get_inputMode();
	return inMode;
};
openfl_ui_Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) return true;
	return false;
};
var openfl_ui_MultitouchInputMode = $hxClasses["openfl.ui.MultitouchInputMode"] = { __ename__ : ["openfl","ui","MultitouchInputMode"], __constructs__ : ["NONE","TOUCH_POINT","GESTURE"] };
openfl_ui_MultitouchInputMode.NONE = ["NONE",0];
openfl_ui_MultitouchInputMode.NONE.toString = $estr;
openfl_ui_MultitouchInputMode.NONE.__enum__ = openfl_ui_MultitouchInputMode;
openfl_ui_MultitouchInputMode.TOUCH_POINT = ["TOUCH_POINT",1];
openfl_ui_MultitouchInputMode.TOUCH_POINT.toString = $estr;
openfl_ui_MultitouchInputMode.TOUCH_POINT.__enum__ = openfl_ui_MultitouchInputMode;
openfl_ui_MultitouchInputMode.GESTURE = ["GESTURE",2];
openfl_ui_MultitouchInputMode.GESTURE.toString = $estr;
openfl_ui_MultitouchInputMode.GESTURE.__enum__ = openfl_ui_MultitouchInputMode;
var zpp_$nape_ZPP_$Const = function() { };
$hxClasses["zpp_nape.ZPP_Const"] = zpp_$nape_ZPP_$Const;
zpp_$nape_ZPP_$Const.__name__ = ["zpp_nape","ZPP_Const"];
zpp_$nape_ZPP_$Const.POSINF = function() {
	return Infinity;
};
zpp_$nape_ZPP_$Const.NEGINF = function() {
	return -Infinity;
};
var zpp_$nape_ZPP_$ID = function() { };
$hxClasses["zpp_nape.ZPP_ID"] = zpp_$nape_ZPP_$ID;
zpp_$nape_ZPP_$ID.__name__ = ["zpp_nape","ZPP_ID"];
zpp_$nape_ZPP_$ID.Constraint = function() {
	return zpp_$nape_ZPP_$ID._Constraint++;
};
zpp_$nape_ZPP_$ID.Interactor = function() {
	return zpp_$nape_ZPP_$ID._Interactor++;
};
zpp_$nape_ZPP_$ID.CbType = function() {
	return zpp_$nape_ZPP_$ID._CbType++;
};
zpp_$nape_ZPP_$ID.CbSet = function() {
	return zpp_$nape_ZPP_$ID._CbSet++;
};
zpp_$nape_ZPP_$ID.Listener = function() {
	return zpp_$nape_ZPP_$ID._Listener++;
};
zpp_$nape_ZPP_$ID.ZPP_SimpleVert = function() {
	return zpp_$nape_ZPP_$ID._ZPP_SimpleVert++;
};
zpp_$nape_ZPP_$ID.ZPP_SimpleSeg = function() {
	return zpp_$nape_ZPP_$ID._ZPP_SimpleSeg++;
};
zpp_$nape_ZPP_$ID.Space = function() {
	return zpp_$nape_ZPP_$ID._Space++;
};
zpp_$nape_ZPP_$ID.InteractionGroup = function() {
	return zpp_$nape_ZPP_$ID._InteractionGroup++;
};
var zpp_$nape_callbacks_ZPP_$Callback = function() {
	this.constraint = null;
	this.body = null;
	this.pre_swapped = false;
	this.pre_arbiter = null;
	this.wrap_arbiters = null;
	this.set = null;
	this.int2 = null;
	this.int1 = null;
	this.length = 0;
	this.prev = null;
	this.next = null;
	this.index = 0;
	this.space = null;
	this.listener = null;
	this.event = 0;
	this.outer_int = null;
	this.outer_con = null;
	this.outer_body = null;
	this.length = 0;
};
$hxClasses["zpp_nape.callbacks.ZPP_Callback"] = zpp_$nape_callbacks_ZPP_$Callback;
zpp_$nape_callbacks_ZPP_$Callback.__name__ = ["zpp_nape","callbacks","ZPP_Callback"];
zpp_$nape_callbacks_ZPP_$Callback.prototype = {
	outer_body: null
	,outer_con: null
	,outer_int: null
	,wrapper_body: function() {
		if(this.outer_body == null) {
			this.outer_body = new nape_callbacks_BodyCallback();
			this.outer_body.zpp_inner = this;
		}
		return this.outer_body;
	}
	,wrapper_con: function() {
		if(this.outer_con == null) {
			this.outer_con = new nape_callbacks_ConstraintCallback();
			this.outer_con.zpp_inner = this;
		}
		return this.outer_con;
	}
	,wrapper_int: function() {
		if(this.outer_int == null) {
			this.outer_int = new nape_callbacks_InteractionCallback();
			this.outer_int.zpp_inner = this;
		}
		if(this.wrap_arbiters == null) this.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get(this.set.arbiters,true); else this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
		return this.outer_int;
	}
	,event: null
	,listener: null
	,space: null
	,index: null
	,next: null
	,prev: null
	,length: null
	,push: function(obj) {
		if(this.prev != null) this.prev.next = obj; else this.next = obj;
		obj.prev = this.prev;
		obj.next = null;
		this.prev = obj;
		this.length++;
	}
	,push_rev: function(obj) {
		if(this.next != null) this.next.prev = obj; else this.prev = obj;
		obj.next = this.next;
		obj.prev = null;
		this.next = obj;
		this.length++;
	}
	,pop: function() {
		var ret = this.next;
		this.next = ret.next;
		if(this.next == null) this.prev = null; else this.next.prev = null;
		this.length--;
		return ret;
	}
	,pop_rev: function() {
		var ret = this.prev;
		this.prev = ret.prev;
		if(this.prev == null) this.next = null; else this.prev.next = null;
		this.length--;
		return ret;
	}
	,empty: function() {
		return this.next == null;
	}
	,clear: function() {
		while(!this.empty()) this.pop();
	}
	,splice: function(o) {
		var ret = o.next;
		if(o.prev == null) {
			this.next = o.next;
			if(this.next != null) this.next.prev = null; else this.prev = null;
		} else {
			o.prev.next = o.next;
			if(o.next != null) o.next.prev = o.prev; else this.prev = o.prev;
		}
		this.length--;
		return ret;
	}
	,rotateL: function() {
		this.push(this.pop());
	}
	,rotateR: function() {
		this.push_rev(this.pop_rev());
	}
	,cycleNext: function(o) {
		if(o.next == null) return this.next; else return o.next;
	}
	,cyclePrev: function(o) {
		if(o.prev == null) return this.prev; else return o.prev;
	}
	,at: function(i) {
		var ret = this.next;
		while(i-- != 0) ret = ret.next;
		return ret;
	}
	,rev_at: function(i) {
		var ret = this.prev;
		while(i-- != 0) ret = ret.prev;
		return ret;
	}
	,free: function() {
		this.int1 = this.int2 = null;
		this.body = null;
		this.constraint = null;
		this.listener = null;
		if(this.wrap_arbiters != null) this.wrap_arbiters.zpp_inner.inner = null;
		this.set = null;
	}
	,alloc: function() {
	}
	,int1: null
	,int2: null
	,set: null
	,wrap_arbiters: null
	,pre_arbiter: null
	,pre_swapped: null
	,genarbs: function() {
		if(this.wrap_arbiters == null) this.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get(this.set.arbiters,true); else this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
	}
	,body: null
	,constraint: null
	,__class__: zpp_$nape_callbacks_ZPP_$Callback
};
var zpp_$nape_callbacks_ZPP_$CbSet = function() {
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_interactors = null;
	this.interactors = null;
	this.zip_conlisteners = false;
	this.conlisteners = null;
	this.zip_bodylisteners = false;
	this.bodylisteners = null;
	this.zip_listeners = false;
	this.listeners = null;
	this.cbpairs = null;
	this.manager = null;
	this.id = 0;
	this.next = null;
	this.count = 0;
	this.cbTypes = null;
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.zip_listeners = true;
	this.bodylisteners = new zpp_$nape_util_ZNPList_$ZPP_$BodyListener();
	this.zip_bodylisteners = true;
	this.conlisteners = new zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener();
	this.zip_conlisteners = true;
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.id = zpp_$nape_ZPP_$ID.CbSet();
	this.cbpairs = new zpp_$nape_util_ZNPList_$ZPP_$CbSetPair();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbSet"] = zpp_$nape_callbacks_ZPP_$CbSet;
zpp_$nape_callbacks_ZPP_$CbSet.__name__ = ["zpp_nape","callbacks","ZPP_CbSet"];
zpp_$nape_callbacks_ZPP_$CbSet.setlt = function(a,b) {
	var i = a.cbTypes.head;
	var j = b.cbTypes.head;
	while(i != null && j != null) {
		var ca = i.elt;
		var cb = j.elt;
		if(ca.id < cb.id) return true;
		if(cb.id < ca.id) return false; else {
			i = i.next;
			j = j.next;
		}
	}
	return j != null && i == null;
};
zpp_$nape_callbacks_ZPP_$CbSet.get = function(cbTypes) {
	var ret;
	if(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool == null) ret = new zpp_$nape_callbacks_ZPP_$CbSet(); else {
		ret = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	var ite = null;
	var cx_ite = cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		ite = ret.cbTypes.insert(ite,cb);
		cb.cbsets.add(ret);
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_$nape_callbacks_ZPP_$CbSet.compatible = function(i,a,b) {
	return i.options1.compatible(a.cbTypes) && i.options2.compatible(b.cbTypes) || i.options2.compatible(a.cbTypes) && i.options1.compatible(b.cbTypes);
};
zpp_$nape_callbacks_ZPP_$CbSet.empty_intersection = function(a,b) {
	return a.manager.pair(a,b).empty_intersection();
};
zpp_$nape_callbacks_ZPP_$CbSet.single_intersection = function(a,b,i) {
	return a.manager.pair(a,b).single_intersection(i);
};
zpp_$nape_callbacks_ZPP_$CbSet.find_all = function(a,b,event,cb) {
	a.manager.pair(a,b).forall(event,cb);
};
zpp_$nape_callbacks_ZPP_$CbSet.prototype = {
	cbTypes: null
	,count: null
	,next: null
	,id: null
	,manager: null
	,cbpairs: null
	,increment: function() {
		this.count++;
	}
	,decrement: function() {
		return --this.count == 0;
	}
	,invalidate_pairs: function() {
		var cx_ite = this.cbpairs.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_listeners = true;
			cx_ite = cx_ite.next;
		}
	}
	,listeners: null
	,zip_listeners: null
	,invalidate_listeners: function() {
		this.zip_listeners = true;
		this.invalidate_pairs();
	}
	,validate_listeners: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
	}
	,realvalidate_listeners: function() {
		this.listeners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.listeners.head;
			var cite = cb.listeners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_$nape_callbacks_ZPP_$Listener.setlt(cx,nite.elt)) {
					if(cx.space == this.manager.space) npre = this.listeners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,bodylisteners: null
	,zip_bodylisteners: null
	,invalidate_bodylisteners: function() {
		this.zip_bodylisteners = true;
	}
	,validate_bodylisteners: function() {
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
	}
	,realvalidate_bodylisteners: function() {
		this.bodylisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.bodylisteners.head;
			var cite = cb.bodylisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_$nape_callbacks_ZPP_$Listener.setlt(cx,nite.elt)) {
					if(!cx.options.excluded(this.cbTypes) && cx.space == this.manager.space) npre = this.bodylisteners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,conlisteners: null
	,zip_conlisteners: null
	,invalidate_conlisteners: function() {
		this.zip_conlisteners = true;
	}
	,validate_conlisteners: function() {
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
	,realvalidate_conlisteners: function() {
		this.conlisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.conlisteners.head;
			var cite = cb.conlisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_$nape_callbacks_ZPP_$Listener.setlt(cx,nite.elt)) {
					if(!cx.options.excluded(this.cbTypes) && cx.space == this.manager.space) npre = this.conlisteners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
	,interactors: null
	,wrap_interactors: null
	,constraints: null
	,wrap_constraints: null
	,addConstraint: function(con) {
		this.constraints.add(con);
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remConstraint: function(con) {
		this.constraints.remove(con);
	}
	,remInteractor: function(intx) {
		this.interactors.remove(intx);
	}
	,free: function() {
		this.listeners.clear();
		this.zip_listeners = true;
		this.bodylisteners.clear();
		this.zip_bodylisteners = true;
		this.conlisteners.clear();
		this.zip_conlisteners = true;
		while(!(this.cbTypes.head == null)) {
			var cb = this.cbTypes.pop_unsafe();
			cb.cbsets.remove(this);
		}
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_callbacks_ZPP_$CbSet
};
var zpp_$nape_callbacks_ZPP_$CbSetPair = function() {
	this.listeners = null;
	this.zip_listeners = false;
	this.next = null;
	this.b = null;
	this.a = null;
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbSetPair"] = zpp_$nape_callbacks_ZPP_$CbSetPair;
zpp_$nape_callbacks_ZPP_$CbSetPair.__name__ = ["zpp_nape","callbacks","ZPP_CbSetPair"];
zpp_$nape_callbacks_ZPP_$CbSetPair.get = function(a,b) {
	var ret;
	if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) ret = new zpp_$nape_callbacks_ZPP_$CbSetPair(); else {
		ret = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.zip_listeners = true;
	if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b)) {
		ret.a = a;
		ret.b = b;
	} else {
		ret.a = b;
		ret.b = a;
	}
	return ret;
};
zpp_$nape_callbacks_ZPP_$CbSetPair.setlt = function(x,y) {
	return zpp_$nape_callbacks_ZPP_$CbSet.setlt(x.a,y.a) || x.a == y.a && zpp_$nape_callbacks_ZPP_$CbSet.setlt(x.b,y.b);
};
zpp_$nape_callbacks_ZPP_$CbSetPair.prototype = {
	a: null
	,b: null
	,next: null
	,free: function() {
		this.a = this.b = null;
		this.listeners.clear();
	}
	,alloc: function() {
		this.zip_listeners = true;
	}
	,compatible: function(i) {
		return i.options1.compatible(this.a.cbTypes) && i.options2.compatible(this.b.cbTypes) || i.options2.compatible(this.a.cbTypes) && i.options1.compatible(this.b.cbTypes);
	}
	,zip_listeners: null
	,listeners: null
	,invalidate: function() {
		this.zip_listeners = true;
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.__validate();
		}
	}
	,__validate: function() {
		this.listeners.clear();
		var aite = this.a.listeners.head;
		var bite = this.b.listeners.head;
		while(aite != null && bite != null) {
			var ax = aite.elt;
			var bx = bite.elt;
			if(ax == bx) {
				if(ax.options1.compatible(this.a.cbTypes) && ax.options2.compatible(this.b.cbTypes) || ax.options2.compatible(this.a.cbTypes) && ax.options1.compatible(this.b.cbTypes)) this.listeners.add(ax);
				aite = aite.next;
				bite = bite.next;
			} else if(ax.precedence > bx.precedence || ax.precedence == bx.precedence && ax.id > bx.id) aite = aite.next; else bite = bite.next;
		}
	}
	,empty_intersection: function() {
		return this.listeners.head == null;
	}
	,single_intersection: function(i) {
		var ite = this.listeners.head;
		return ite != null && ite.elt == i && ite.next == null;
	}
	,forall: function(event,cb) {
		var cx_ite = this.listeners.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x.event == event) cb(x);
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_InteractionListener"] = zpp_$nape_util_ZNPList_$ZPP_$InteractionListener;
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionListener"];
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$InteractionListener
};
var zpp_$nape_util_ZNPList_$ZPP_$BodyListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_BodyListener"] = zpp_$nape_util_ZNPList_$ZPP_$BodyListener;
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_BodyListener"];
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$BodyListener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$BodyListener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$BodyListener
};
var zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ConstraintListener"] = zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener;
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_ConstraintListener"];
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener
};
var zpp_$nape_util_ZNPList_$ZPP_$Constraint = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Constraint"] = zpp_$nape_util_ZNPList_$ZPP_$Constraint;
zpp_$nape_util_ZNPList_$ZPP_$Constraint.__name__ = ["zpp_nape","util","ZNPList_ZPP_Constraint"];
zpp_$nape_util_ZNPList_$ZPP_$Constraint.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Constraint
};
var zpp_$nape_util_ZNPList_$ZPP_$Interactor = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Interactor"] = zpp_$nape_util_ZNPList_$ZPP_$Interactor;
zpp_$nape_util_ZNPList_$ZPP_$Interactor.__name__ = ["zpp_nape","util","ZNPList_ZPP_Interactor"];
zpp_$nape_util_ZNPList_$ZPP_$Interactor.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Interactor
};
var zpp_$nape_util_ZNPList_$ZPP_$CbSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbSet"] = zpp_$nape_util_ZNPList_$ZPP_$CbSet;
zpp_$nape_util_ZNPList_$ZPP_$CbSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSet"];
zpp_$nape_util_ZNPList_$ZPP_$CbSet.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbSet
};
var zpp_$nape_callbacks_ZPP_$CbType = function() {
	this.conlisteners = null;
	this.bodylisteners = null;
	this.listeners = null;
	this.cbsets = null;
	this.id = 0;
	this.userData = null;
	this.outer = null;
	this.id = zpp_$nape_ZPP_$ID.CbType();
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.bodylisteners = new zpp_$nape_util_ZNPList_$ZPP_$BodyListener();
	this.conlisteners = new zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.cbsets = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbType"] = zpp_$nape_callbacks_ZPP_$CbType;
zpp_$nape_callbacks_ZPP_$CbType.__name__ = ["zpp_nape","callbacks","ZPP_CbType"];
zpp_$nape_callbacks_ZPP_$CbType.setlt = function(a,b) {
	return a.id < b.id;
};
zpp_$nape_callbacks_ZPP_$CbType.prototype = {
	outer: null
	,userData: null
	,id: null
	,cbsets: null
	,interactors: null
	,wrap_interactors: null
	,constraints: null
	,wrap_constraints: null
	,addConstraint: function(con) {
		this.constraints.add(con);
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remConstraint: function(con) {
		this.constraints.remove(con);
	}
	,remInteractor: function(intx) {
		this.interactors.remove(intx);
	}
	,listeners: null
	,addint: function(x) {
		var pre = null;
		var cx_ite = this.listeners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.listeners.inlined_insert(pre,x);
		this.invalidateint();
	}
	,removeint: function(x) {
		this.listeners.remove(x);
		this.invalidateint();
	}
	,invalidateint: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_listeners = true;
			cb.invalidate_pairs();
			cx_ite = cx_ite.next;
		}
	}
	,bodylisteners: null
	,addbody: function(x) {
		var pre = null;
		var cx_ite = this.bodylisteners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bodylisteners.inlined_insert(pre,x);
		this.invalidatebody();
	}
	,removebody: function(x) {
		this.bodylisteners.remove(x);
		this.invalidatebody();
	}
	,invalidatebody: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_bodylisteners = true;
			cx_ite = cx_ite.next;
		}
	}
	,conlisteners: null
	,addconstraint: function(x) {
		var pre = null;
		var cx_ite = this.conlisteners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.conlisteners.inlined_insert(pre,x);
		this.invalidateconstraint();
	}
	,removeconstraint: function(x) {
		this.conlisteners.remove(x);
		this.invalidateconstraint();
	}
	,invalidateconstraint: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_conlisteners = true;
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$CbType
};
var zpp_$nape_util_ZPP_$Flags = function() { };
$hxClasses["zpp_nape.util.ZPP_Flags"] = zpp_$nape_util_ZPP_$Flags;
zpp_$nape_util_ZPP_$Flags.__name__ = ["zpp_nape","util","ZPP_Flags"];
zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = null;
zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = null;
zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = null;
zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = null;
zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = null;
zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = null;
zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = null;
zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = null;
zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = null;
zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = null;
zpp_$nape_util_ZPP_$Flags.ListenerType_BODY = null;
zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT = null;
zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = null;
zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION = null;
zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = null;
zpp_$nape_util_ZPP_$Flags.ListenerType_PRE = null;
zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = null;
zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = null;
zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = null;
zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = null;
zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = null;
zpp_$nape_util_ZPP_$Flags.CbEvent_END = null;
zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = null;
zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = null;
zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = null;
zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = null;
zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = null;
zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = null;
zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = null;
zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = null;
zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = null;
zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE = null;
zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = null;
zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = null;
zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = null;
zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = null;
zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE = null;
zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON = null;
zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = null;
zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = null;
zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION = null;
zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR = null;
zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID = null;
var zpp_$nape_callbacks_ZPP_$Listener = function() {
	this.space = null;
	this.interaction = null;
	this.constraint = null;
	this.body = null;
	this.precedence = 0;
	this.event = 0;
	this.type = 0;
	this.id = 0;
	this.outer = null;
	this.id = zpp_$nape_ZPP_$ID.Listener();
};
$hxClasses["zpp_nape.callbacks.ZPP_Listener"] = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$Listener.__name__ = ["zpp_nape","callbacks","ZPP_Listener"];
zpp_$nape_callbacks_ZPP_$Listener.setlt = function(a,b) {
	return a.precedence > b.precedence || a.precedence == b.precedence && a.id > b.id;
};
zpp_$nape_callbacks_ZPP_$Listener.prototype = {
	outer: null
	,id: null
	,type: null
	,event: null
	,precedence: null
	,body: null
	,constraint: null
	,interaction: null
	,space: null
	,swapEvent: function(event) {
	}
	,invalidate_precedence: function() {
	}
	,addedToSpace: function() {
	}
	,removedFromSpace: function() {
	}
	,__class__: zpp_$nape_callbacks_ZPP_$Listener
};
var zpp_$nape_callbacks_ZPP_$BodyListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.body = this;
	this.type = zpp_$nape_util_ZPP_$Flags.id_ListenerType_BODY;
	this.options = options.zpp_inner;
};
$hxClasses["zpp_nape.callbacks.ZPP_BodyListener"] = zpp_$nape_callbacks_ZPP_$BodyListener;
zpp_$nape_callbacks_ZPP_$BodyListener.__name__ = ["zpp_nape","callbacks","ZPP_BodyListener"];
zpp_$nape_callbacks_ZPP_$BodyListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$BodyListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	outer_zn: null
	,options: null
	,handler: null
	,addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.addbody(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.bodylisteners.remove(this);
			cb.invalidatebody();
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		this.options.effect_change(cb,included,added);
		this.addedToSpace();
	}
	,invalidate_precedence: function() {
		if(this.space != null) {
			this.removedFromSpace();
			this.addedToSpace();
		}
	}
	,swapEvent: function(newev) {
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,__class__: zpp_$nape_callbacks_ZPP_$BodyListener
});
var zpp_$nape_callbacks_ZPP_$ConstraintListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.constraint = this;
	this.type = zpp_$nape_util_ZPP_$Flags.id_ListenerType_CONSTRAINT;
	this.options = options.zpp_inner;
};
$hxClasses["zpp_nape.callbacks.ZPP_ConstraintListener"] = zpp_$nape_callbacks_ZPP_$ConstraintListener;
zpp_$nape_callbacks_ZPP_$ConstraintListener.__name__ = ["zpp_nape","callbacks","ZPP_ConstraintListener"];
zpp_$nape_callbacks_ZPP_$ConstraintListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$ConstraintListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	outer_zn: null
	,options: null
	,handler: null
	,addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.addconstraint(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.conlisteners.remove(this);
			cb.invalidateconstraint();
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		this.options.effect_change(cb,included,added);
		this.addedToSpace();
	}
	,invalidate_precedence: function() {
		if(this.space != null) {
			this.removedFromSpace();
			this.addedToSpace();
		}
	}
	,swapEvent: function(newev) {
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,__class__: zpp_$nape_callbacks_ZPP_$ConstraintListener
});
var zpp_$nape_util_ZNPList_$ZPP_$CbType = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbType"] = zpp_$nape_util_ZNPList_$ZPP_$CbType;
zpp_$nape_util_ZNPList_$ZPP_$CbType.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbType"];
zpp_$nape_util_ZNPList_$ZPP_$CbType.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbType
};
var zpp_$nape_callbacks_ZPP_$InteractionListener = function(options1,options2,event,type) {
	this.handlerp = null;
	this.pure = false;
	this.allowSleepingCallbacks = false;
	this.handleri = null;
	this.options2 = null;
	this.options1 = null;
	this.itype = 0;
	this.outer_znp = null;
	this.outer_zni = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.type = type;
	this.interaction = this;
	this.event = event;
	this.options1 = options1.zpp_inner;
	this.options2 = options2.zpp_inner;
	this.allowSleepingCallbacks = false;
};
$hxClasses["zpp_nape.callbacks.ZPP_InteractionListener"] = zpp_$nape_callbacks_ZPP_$InteractionListener;
zpp_$nape_callbacks_ZPP_$InteractionListener.__name__ = ["zpp_nape","callbacks","ZPP_InteractionListener"];
zpp_$nape_callbacks_ZPP_$InteractionListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$InteractionListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	outer_zni: null
	,outer_znp: null
	,itype: null
	,options1: null
	,options2: null
	,handleri: null
	,allowSleepingCallbacks: null
	,pure: null
	,handlerp: null
	,setInteractionType: function(itype) {
		this.itype = itype;
	}
	,wake: function() {
		this.with_union(function(cb) {
			var cx_ite = cb.interactors.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				i.wake();
				cx_ite = cx_ite.next;
			}
		});
	}
	,CbSetset: function(A,B,lambda) {
		var U = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
		var V = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
		var W = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
		var aite = A.head;
		var bite = B.head;
		while(aite != null && bite != null) {
			var a = aite.elt;
			var b = bite.elt;
			if(a == b) {
				W.inlined_add(a);
				aite = aite.next;
				bite = bite.next;
			} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b)) {
				U.inlined_add(a);
				aite = aite.next;
			} else {
				V.inlined_add(b);
				bite = bite.next;
			}
		}
		while(aite != null) {
			U.inlined_add(aite.elt);
			aite = aite.next;
		}
		while(bite != null) {
			V.inlined_add(bite.elt);
			bite = bite.next;
		}
		while(!(U.head == null)) {
			var x = U.pop_unsafe();
			var cx_ite = B.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!(V.head == null)) {
			var x1 = V.pop_unsafe();
			var cx_ite1 = W.head;
			while(cx_ite1 != null) {
				var y1 = cx_ite1.elt;
				lambda(x1,y1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(W.head == null)) {
			var x2 = W.pop_unsafe();
			lambda(x2,x2);
			var cx_ite2 = W.head;
			while(cx_ite2 != null) {
				var y2 = cx_ite2.elt;
				lambda(x2,y2);
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,CbTypeset: function(A,B,lambda) {
		var U = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbType;
		var V = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbType;
		var W = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbType;
		var aite = A.head;
		var bite = B.head;
		while(aite != null && bite != null) {
			var a = aite.elt;
			var b = bite.elt;
			if(a == b) {
				W.inlined_add(a);
				aite = aite.next;
				bite = bite.next;
			} else if(a.id < b.id) {
				U.inlined_add(a);
				aite = aite.next;
			} else {
				V.inlined_add(b);
				bite = bite.next;
			}
		}
		while(aite != null) {
			U.inlined_add(aite.elt);
			aite = aite.next;
		}
		while(bite != null) {
			V.inlined_add(bite.elt);
			bite = bite.next;
		}
		while(!(U.head == null)) {
			var x = U.pop_unsafe();
			var cx_ite = B.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!(V.head == null)) {
			var x1 = V.pop_unsafe();
			var cx_ite1 = W.head;
			while(cx_ite1 != null) {
				var y1 = cx_ite1.elt;
				lambda(x1,y1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(W.head == null)) {
			var x2 = W.pop_unsafe();
			lambda(x2,x2);
			var cx_ite2 = W.head;
			while(cx_ite2 != null) {
				var y2 = cx_ite2.elt;
				lambda(x2,y2);
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,with_uniquesets: function(fresh) {
		var _g = this;
		var set;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) set = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
			set = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = set.next;
			set.next = null;
		}
		null;
		set.lt = zpp_$nape_callbacks_ZPP_$CbSetPair.setlt;
		this.CbTypeset(this.options1.includes,this.options2.includes,function(a,b) {
			_g.CbSetset(a.cbsets,b.cbsets,function(a1,b1) {
				a1.validate();
				b1.validate();
				if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(a1,b1,_g)) set.try_insert(zpp_$nape_callbacks_ZPP_$CbSetPair.get(a1,b1));
			});
		});
		set.clear_with(function(pair) {
			if(fresh) _g.space.freshListenerType(pair.a,pair.b); else _g.space.nullListenerType(pair.a,pair.b);
			var o = pair;
			o.a = o.b = null;
			o.listeners.clear();
			o.next = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = o;
		});
		var o1 = set;
		o1.data = null;
		o1.lt = null;
		o1.swapped = null;
		o1.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o1;
	}
	,with_union: function(lambda) {
		var ite1 = this.options1.includes.head;
		var ite2 = this.options2.includes.head;
		while(ite1 != null && ite2 != null) {
			var cb1 = ite1.elt;
			var cb2 = ite2.elt;
			if(cb1 == cb2) {
				lambda(cb1);
				ite1 = ite1.next;
				ite2 = ite2.next;
			} else if(cb1.id < cb2.id) {
				lambda(cb1);
				ite1 = ite1.next;
			} else {
				lambda(cb2);
				ite2 = ite2.next;
			}
		}
		while(ite1 != null) {
			lambda(ite1.elt);
			ite1 = ite1.next;
		}
		while(ite2 != null) {
			lambda(ite2.elt);
			ite2 = ite2.next;
		}
	}
	,addedToSpace: function() {
		var _g = this;
		var pre = this.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_PRE;
		this.with_union(function(cb) {
			cb.addint(_g);
			if(pre) {
				var cx_ite = cb.interactors.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					i.wake();
					cx_ite = cx_ite.next;
				}
			}
		});
		this.options1.handler = $bind(this,this.cbtype_change1);
		this.options2.handler = $bind(this,this.cbtype_change2);
		this.with_uniquesets(true);
	}
	,removedFromSpace: function() {
		var _g = this;
		this.with_uniquesets(false);
		var pre = this.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_PRE;
		this.with_union(function(cb) {
			cb.listeners.remove(_g);
			cb.invalidateint();
			if(pre) {
				var cx_ite = cb.interactors.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					i.wake();
					cx_ite = cx_ite.next;
				}
			}
		});
		this.options1.handler = null;
		this.options2.handler = null;
	}
	,invalidate_precedence: function() {
		var _g = this;
		if(this.space != null) {
			var pre = this.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_PRE;
			this.with_union(function(cb) {
				cb.listeners.remove(_g);
				cb.invalidateint();
				cb.addint(_g);
				if(pre) {
					var cx_ite = cb.interactors.head;
					while(cx_ite != null) {
						var i = cx_ite.elt;
						i.wake();
						cx_ite = cx_ite.next;
					}
				}
			});
		}
	}
	,cbtype_change1: function(cb,included,added) {
		this.cbtype_change(this.options1,cb,included,added);
	}
	,cbtype_change2: function(cb,included,added) {
		this.cbtype_change(this.options2,cb,included,added);
	}
	,cbtype_change: function(options,cb,included,added) {
		this.removedFromSpace();
		options.effect_change(cb,included,added);
		this.addedToSpace();
		null;
	}
	,swapEvent: function(newev) {
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,__class__: zpp_$nape_callbacks_ZPP_$InteractionListener
});
var zpp_$nape_callbacks_ZPP_$OptionType = function() {
	this.wrap_excludes = null;
	this.wrap_includes = null;
	this.excludes = null;
	this.includes = null;
	this.handler = null;
	this.outer = null;
	this.includes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this.excludes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
$hxClasses["zpp_nape.callbacks.ZPP_OptionType"] = zpp_$nape_callbacks_ZPP_$OptionType;
zpp_$nape_callbacks_ZPP_$OptionType.__name__ = ["zpp_nape","callbacks","ZPP_OptionType"];
zpp_$nape_callbacks_ZPP_$OptionType.argument = function(val) {
	if(val == null) return new nape_callbacks_OptionType(); else if(js_Boot.__instanceof(val,nape_callbacks_OptionType)) return val; else return new nape_callbacks_OptionType().including(val);
};
zpp_$nape_callbacks_ZPP_$OptionType.prototype = {
	outer: null
	,handler: null
	,includes: null
	,excludes: null
	,wrap_includes: null
	,wrap_excludes: null
	,setup_includes: function() {
		this.wrap_includes = zpp_$nape_util_ZPP_$CbTypeList.get(this.includes,true);
	}
	,setup_excludes: function() {
		this.wrap_excludes = zpp_$nape_util_ZPP_$CbTypeList.get(this.excludes,true);
	}
	,excluded: function(xs) {
		return this.nonemptyintersection(xs,this.excludes);
	}
	,included: function(xs) {
		return this.nonemptyintersection(xs,this.includes);
	}
	,compatible: function(xs) {
		return this.nonemptyintersection(xs,this.includes) && !this.nonemptyintersection(xs,this.excludes);
	}
	,nonemptyintersection: function(xs,ys) {
		var ret = false;
		var xite = xs.head;
		var eite = ys.head;
		while(eite != null && xite != null) {
			var ex = eite.elt;
			var xi = xite.elt;
			if(ex == xi) {
				ret = true;
				break;
			} else if(ex.id < xi.id) eite = eite.next; else xite = xite.next;
		}
		return ret;
	}
	,effect_change: function(val,included,added) {
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = this.includes.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(val.id < j.id) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				this.includes.inlined_insert(pre,val);
			} else this.includes.remove(val);
		} else if(added) {
			var pre1 = null;
			var cx_ite1 = this.excludes.head;
			while(cx_ite1 != null) {
				var j1 = cx_ite1.elt;
				if(val.id < j1.id) break;
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			this.excludes.inlined_insert(pre1,val);
		} else this.excludes.remove(val);
	}
	,append_type: function(list,val) {
		if(list == this.includes) {
			if(!this.includes.has(val)) {
				if(!this.excludes.has(val)) {
					if(this.handler != null) this.handler(val,true,true); else this.effect_change(val,true,true);
				} else if(this.handler != null) this.handler(val,false,false); else this.effect_change(val,false,false);
			}
		} else if(!this.excludes.has(val)) {
			if(!this.includes.has(val)) {
				if(this.handler != null) this.handler(val,false,true); else this.effect_change(val,false,true);
			} else if(this.handler != null) this.handler(val,true,false); else this.effect_change(val,true,false);
		}
	}
	,set: function(options) {
		if(options != this) {
			while(!(this.includes.head == null)) this.append_type(this.excludes,this.includes.head.elt);
			while(!(this.excludes.head == null)) this.append_type(this.includes,this.excludes.head.elt);
			var cx_ite = options.excludes.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				this.append_type(this.excludes,i);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = options.includes.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				this.append_type(this.includes,i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		return this;
	}
	,append: function(list,val) {
		if(js_Boot.__instanceof(val,nape_callbacks_CbType)) {
			var cb = val;
			this.append_type(list,cb.zpp_inner);
		} else if(js_Boot.__instanceof(val,nape_callbacks_CbTypeList)) {
			var cbs = val;
			var _g;
			cbs.zpp_inner.valmod();
			_g = nape_callbacks_CbTypeIterator.get(cbs);
			while(_g.hasNext()) {
				var cb1;
				_g.zpp_critical = false;
				cb1 = _g.zpp_inner.at(_g.zpp_i++);
				this.append_type(list,cb1.zpp_inner);
			}
		} else if((val instanceof Array) && val.__enum__ == null) {
			var cbs1 = val;
			var _g1 = 0;
			while(_g1 < cbs1.length) {
				var cb2 = cbs1[_g1];
				++_g1;
				var cbx = cb2;
				this.append_type(list,cbx.zpp_inner);
			}
		} else {
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$OptionType
};
var zpp_$nape_constraint_ZPP_$Constraint = function() {
	this.pre_dt = 0.0;
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.__velocity = false;
	this.ignore = false;
	this.component = null;
	this.removeOnBreak = false;
	this.breakUnderError = false;
	this.breakUnderForce = false;
	this.maxError = 0.0;
	this.maxForce = 0.0;
	this.damping = 0.0;
	this.frequency = 0.0;
	this.stiff = false;
	this.active = false;
	this.space = null;
	this.compound = null;
	this.userData = null;
	this.id = 0;
	this.outer = null;
	this.__velocity = false;
	this.id = zpp_$nape_ZPP_$ID.Constraint();
	this.stiff = true;
	this.active = true;
	this.ignore = false;
	this.frequency = 10;
	this.damping = 1;
	this.maxForce = Infinity;
	this.maxError = Infinity;
	this.breakUnderForce = false;
	this.removeOnBreak = true;
	this.pre_dt = -1.0;
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
$hxClasses["zpp_nape.constraint.ZPP_Constraint"] = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$Constraint.__name__ = ["zpp_nape","constraint","ZPP_Constraint"];
zpp_$nape_constraint_ZPP_$Constraint.prototype = {
	outer: null
	,clear: function() {
	}
	,id: null
	,userData: null
	,compound: null
	,space: null
	,active: null
	,stiff: null
	,frequency: null
	,damping: null
	,maxForce: null
	,maxError: null
	,breakUnderForce: null
	,breakUnderError: null
	,removeOnBreak: null
	,component: null
	,ignore: null
	,__velocity: null
	,immutable_midstep: function(name) {
	}
	,cbTypes: null
	,cbSet: null
	,wrap_cbTypes: null
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_$nape_util_ZPP_$CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.constraints.remove(this);
			}
			this.cbTypes.remove(cb);
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.constraints.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.cbTypes.inlined_insert(pre,cb);
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		if((this.cbSet = this.space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.constraints.add(this);
		}
	}
	,dealloc_cbSet: function() {
		if(this.cbSet != null) {
			this.cbSet.constraints.remove(this);
			if(--this.cbSet.count == 0) {
				this.space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.free();
				o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,activate: function() {
		if(this.space != null) this.activeInSpace();
	}
	,deactivate: function() {
		if(this.space != null) this.inactiveOrOutSpace();
	}
	,addedToSpace: function() {
		if(this.active) this.activeInSpace();
		this.activeBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.add(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		if(this.active) this.inactiveOrOutSpace();
		this.inactiveBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.remove(this);
			cx_ite = cx_ite.next;
		}
	}
	,activeInSpace: function() {
		this.alloc_cbSet();
		if(zpp_$nape_space_ZPP_$Component.zpp_pool == null) this.component = new zpp_$nape_space_ZPP_$Component(); else {
			this.component = zpp_$nape_space_ZPP_$Component.zpp_pool;
			zpp_$nape_space_ZPP_$Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		null;
		this.component.isBody = false;
		this.component.constraint = this;
	}
	,inactiveOrOutSpace: function() {
		this.dealloc_cbSet();
		var o = this.component;
		o.body = null;
		o.constraint = null;
		null;
		o.next = zpp_$nape_space_ZPP_$Component.zpp_pool;
		zpp_$nape_space_ZPP_$Component.zpp_pool = o;
		this.component = null;
	}
	,activeBodies: function() {
	}
	,inactiveBodies: function() {
	}
	,clearcache: function() {
	}
	,validate: function() {
	}
	,wake_connected: function() {
	}
	,forest: function() {
	}
	,pair_exists: function(id,di) {
		return false;
	}
	,broken: function() {
	}
	,warmStart: function() {
	}
	,pre_dt: null
	,preStep: function(dt) {
		return false;
	}
	,applyImpulseVel: function() {
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,wake: function() {
		if(this.space != null) this.space.wake_constraint(this);
	}
	,draw: function(g) {
	}
	,copy: function(dict,todo) {
		return null;
	}
	,copyto: function(ret) {
		var me = this.outer;
		var _g = ((function($this) {
			var $r;
			if(me.zpp_inner.wrap_cbTypes == null) me.zpp_inner.setupcbTypes();
			$r = me.zpp_inner.wrap_cbTypes;
			return $r;
		}(this))).iterator();
		while(_g.hasNext()) {
			var cb;
			_g.zpp_critical = false;
			cb = _g.zpp_inner.at(_g.zpp_i++);
			((function($this) {
				var $r;
				if(ret.zpp_inner.wrap_cbTypes == null) ret.zpp_inner.setupcbTypes();
				$r = ret.zpp_inner.wrap_cbTypes;
				return $r;
			}(this))).add(cb);
		}
		ret.zpp_inner.removeOnBreak = me.zpp_inner.removeOnBreak;
		ret.zpp_inner.removeOnBreak;
		ret.set_breakUnderError(me.zpp_inner.breakUnderError);
		ret.set_breakUnderForce(me.zpp_inner.breakUnderForce);
		ret.set_maxError(me.zpp_inner.maxError);
		ret.set_maxForce(me.zpp_inner.maxForce);
		ret.set_damping(me.zpp_inner.damping);
		ret.set_frequency(me.zpp_inner.frequency);
		ret.set_stiff(me.zpp_inner.stiff);
		ret.set_ignore(me.zpp_inner.ignore);
		ret.set_active(me.zpp_inner.active);
	}
	,__class__: zpp_$nape_constraint_ZPP_$Constraint
};
var zpp_$nape_constraint_ZPP_$AngleJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.scale = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.ratio = 1;
	this.jAcc = 0;
	this.slack = false;
	this.jMax = Infinity;
	this.stepped = false;
};
$hxClasses["zpp_nape.constraint.ZPP_AngleJoint"] = zpp_$nape_constraint_ZPP_$AngleJoint;
zpp_$nape_constraint_ZPP_$AngleJoint.__name__ = ["zpp_nape","constraint","ZPP_AngleJoint"];
zpp_$nape_constraint_ZPP_$AngleJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$AngleJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,ratio: null
	,jointMin: null
	,jointMax: null
	,slack: null
	,equal: null
	,scale: null
	,is_slack: function() {
		var slack;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			slack = true;
		}
		C;
		return slack;
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape_geom_Vec3.get(0,0,-this.scale * this.jAcc); else return nape_geom_Vec3.get(0,0,this.ratio * this.scale * this.jAcc);
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,b1: null
	,b2: null
	,kMass: null
	,jAcc: null
	,jMax: null
	,gamma: null
	,bias: null
	,stepped: null
	,copy: function(dict,todo) {
		var ret = new nape_constraint_AngleJoint(null,null,this.jointMin,this.jointMax,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated null bodies");
		if(this.b1 == this.b2) throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated with body1 == body2");
		if(this.b1.space != this.space || this.b2.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		if(this.jointMin > this.jointMax) throw new js__$Boot_HaxeError("Error: AngleJoint must have jointMin <= jointMax");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
		this.slack = false;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		var C;
		var C1 = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C1 -= this.jointMax;
			this.slack = false;
			this.scale = 1.0;
		} else if(C1 < this.jointMin) {
			C1 = this.jointMin - C1;
			this.scale = -1.0;
			this.slack = false;
		} else if(C1 > this.jointMax) {
			C1 -= this.jointMax;
			this.scale = 1.0;
			this.slack = false;
		} else {
			this.scale = 0.0;
			C1 = 0;
			this.slack = true;
		}
		C = C1;
		if(!this.slack) {
			this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			this.b1.angvel -= this.scale * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.scale * (this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel);
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && (this.jAcc > this.jMax || this.jAcc < -this.jMax)) return true;
		if(!this.stiff) {
			if(this.jAcc > this.jMax) this.jAcc = this.jMax; else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		this.b1.angvel -= this.scale * this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var slack;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			slack = true;
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			E *= 0.5;
			j = -E * this.kMass;
			if(this.equal || j < 0) {
				this.b1.delta_rot(-this.scale * j * this.b1.iinertia);
				this.b2.delta_rot(this.ratio * this.scale * j * this.b2.iinertia);
			}
		}
		return false;
	}
	,draw: function(g) {
		var me = this.outer_zn;
		var minrad = 10;
		var delrad = 5 / Math.PI / 2;
		if((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer) != (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_space().get_world()) {
			var min;
			min = me.zpp_inner_zn.ratio * (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - this.jointMin;
			var max;
			max = me.zpp_inner_zn.ratio * (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - this.jointMax;
			if(min > max) {
				var t = min;
				min = max;
				max = t;
			}
			if((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot > min) {
				var dr;
				var x;
				x = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot;
				var y = max;
				if(x < y) dr = x; else dr = y;
				zpp_$nape_constraint_ZPP_$AngleDraw.drawSpiral(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),min,dr,minrad + (min - min) * delrad,minrad + (dr - min) * delrad,16776960);
			} else if(!this.stiff && (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot < min) zpp_$nape_constraint_ZPP_$AngleDraw.drawSpiralSpring(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot,min,minrad + ((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot - min) * delrad,minrad + (min - min) * delrad,16776960);
			if((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot < max) {
				var dr1;
				var x1;
				x1 = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot;
				var y1 = min;
				if(x1 > y1) dr1 = x1; else dr1 = y1;
				zpp_$nape_constraint_ZPP_$AngleDraw.drawSpiral(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),dr1,max,minrad + (dr1 - min) * delrad,minrad + (max - min) * delrad,65535);
			} else if(!this.stiff && (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot > max) zpp_$nape_constraint_ZPP_$AngleDraw.drawSpiralSpring(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot,max,minrad + ((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot - min) * delrad,minrad + (max - min) * delrad,65535);
			zpp_$nape_constraint_ZPP_$AngleDraw.indicator(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot,minrad + ((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot - min) * delrad,255);
		}
		if((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer) != (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_space().get_world()) {
			var min1;
			min1 = (this.jointMin + (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot) / me.zpp_inner_zn.ratio;
			var max1;
			max1 = (this.jointMax + (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot) / me.zpp_inner_zn.ratio;
			if(min1 > max1) {
				var t1 = min1;
				min1 = max1;
				max1 = t1;
			}
			if((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot > min1) {
				var dr2;
				var x2;
				x2 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot;
				var y2 = max1;
				if(x2 < y2) dr2 = x2; else dr2 = y2;
				zpp_$nape_constraint_ZPP_$AngleDraw.drawSpiral(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),min1,dr2,minrad + (min1 - min1) * delrad,minrad + (dr2 - min1) * delrad,16776960);
			} else if(!this.stiff && (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot < min1) zpp_$nape_constraint_ZPP_$AngleDraw.drawSpiralSpring(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot,min1,minrad + ((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - min1) * delrad,minrad + (min1 - min1) * delrad,16776960);
			if((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot < max1) {
				var dr3;
				var x3;
				x3 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot;
				var y3 = min1;
				if(x3 > y3) dr3 = x3; else dr3 = y3;
				zpp_$nape_constraint_ZPP_$AngleDraw.drawSpiral(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),dr3,max1,minrad + (dr3 - min1) * delrad,minrad + (max1 - min1) * delrad,65535);
			} else if(!this.stiff && (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot > max1) zpp_$nape_constraint_ZPP_$AngleDraw.drawSpiralSpring(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot,max1,minrad + ((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - min1) * delrad,minrad + (max1 - min1) * delrad,65535);
			zpp_$nape_constraint_ZPP_$AngleDraw.indicator(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot,minrad + ((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - min1) * delrad,16711680);
		}
	}
	,__class__: zpp_$nape_constraint_ZPP_$AngleJoint
});
var zpp_$nape_constraint_ZPP_$AngleDraw = function() { };
$hxClasses["zpp_nape.constraint.ZPP_AngleDraw"] = zpp_$nape_constraint_ZPP_$AngleDraw;
zpp_$nape_constraint_ZPP_$AngleDraw.__name__ = ["zpp_nape","constraint","ZPP_AngleDraw"];
zpp_$nape_constraint_ZPP_$AngleDraw.indicator = function(g,c,ang,rad,col) {
	var dir = nape_geom_Vec2.get(Math.cos(ang),Math.sin(ang),null);
	g.drawFilledCircle(c.add(dir.mul(rad,true),true),2,col);
	dir.dispose();
};
zpp_$nape_constraint_ZPP_$AngleDraw.drawSpiralSpring = function(g,c,a0,a1,r0,r1,col,coils) {
	if(coils == null) coils = 4;
	if(a0 > a1) {
		var t = a0;
		a0 = a1;
		a1 = t;
		var t1 = r0;
		r0 = r1;
		r1 = t1;
	}
	if(a0 == a1) return;
	var dr = r1 - r0;
	var da = a1 - a0;
	var Delta;
	var x = 2 * Math.PI * dr / da;
	if(x < 0) Delta = -x; else Delta = x;
	var dcnt;
	var x1 = Math.ceil(da / zpp_$nape_constraint_ZPP_$AngleDraw.maxarc * 3);
	var y = 4 * coils;
	if(x1 > y) dcnt = x1; else dcnt = y;
	var drad = dr / dcnt;
	var dang = da / dcnt;
	var dtime = 1 / dcnt;
	var c0 = Math.cos(a0);
	var s0 = Math.sin(a0);
	var R0;
	var p = r0 + dr * 0;
	R0 = p + 0.75 * Delta * Math.sin(2 * coils * Math.PI * 0);
	var p0 = nape_geom_Vec2.get((function($this) {
		var $r;
		c.zpp_inner.validate();
		$r = c.zpp_inner.x;
		return $r;
	}(this)) + R0 * c0,(function($this) {
		var $r;
		c.zpp_inner.validate();
		$r = c.zpp_inner.y;
		return $r;
	}(this)) + R0 * s0,null);
	var DR = dr + 1.5 * coils * Delta * Math.PI * Math.cos(2 * coils * Math.PI * 0);
	var ux = DR * c0 - R0 * da * s0;
	var uy = DR * s0 + R0 * da * c0;
	var p1 = nape_geom_Vec2.get(null,null,null);
	var ct = nape_geom_Vec2.get(null,null,null);
	var _g = 0;
	while(_g < dcnt) {
		var i = _g++;
		var a11 = a0 + dang;
		var c1 = Math.cos(a11);
		var s1 = Math.sin(a11);
		var R1;
		var p2 = r0 + dr * (i + 1) * dtime;
		R1 = p2 + 0.75 * Delta * Math.sin(2 * coils * Math.PI * (i + 1) * dtime);
		p1.setxy((function($this) {
			var $r;
			c.zpp_inner.validate();
			$r = c.zpp_inner.x;
			return $r;
		}(this)) + R1 * c1,(function($this) {
			var $r;
			c.zpp_inner.validate();
			$r = c.zpp_inner.y;
			return $r;
		}(this)) + R1 * s1);
		var DR1 = dr + 1.5 * coils * Delta * Math.PI * Math.cos(2 * coils * Math.PI * (i + 1) * dtime);
		var vx = DR1 * c1 - R1 * da * s1;
		var vy = DR1 * s1 + R1 * da * c1;
		var den = ux * vy - uy * vx;
		if(den * den < nape_Config.epsilon || ux * vx + uy * vy <= 0 || ux * vx + uy * vy > 0.999) g.drawLine(p0,p1,col); else {
			var t2;
			t2 = (((function($this) {
				var $r;
				p1.zpp_inner.validate();
				$r = p1.zpp_inner.x;
				return $r;
			}(this)) - (function($this) {
				var $r;
				p0.zpp_inner.validate();
				$r = p0.zpp_inner.x;
				return $r;
			}(this))) * vy + ((function($this) {
				var $r;
				p0.zpp_inner.validate();
				$r = p0.zpp_inner.y;
				return $r;
			}(this)) - (function($this) {
				var $r;
				p1.zpp_inner.validate();
				$r = p1.zpp_inner.y;
				return $r;
			}(this))) * vx) / den;
			if(t2 <= 0) g.drawLine(p0,p1,col); else {
				ct.set_x((function($this) {
					var $r;
					p0.zpp_inner.validate();
					$r = p0.zpp_inner.x;
					return $r;
				}(this)) + ux * t2);
				ct.set_y((function($this) {
					var $r;
					p0.zpp_inner.validate();
					$r = p0.zpp_inner.y;
					return $r;
				}(this)) + uy * t2);
				g.drawCurve(p0,ct,p1,col);
			}
		}
		a0 = a11;
		c0 = c1;
		s0 = s1;
		ux = vx;
		uy = vy;
		p0.set(p1);
	}
	p0.dispose();
	p1.dispose();
	ct.dispose();
};
zpp_$nape_constraint_ZPP_$AngleDraw.drawSpiral = function(g,c,a0,a1,r0,r1,col) {
	if(a0 > a1) {
		var t = a0;
		a0 = a1;
		a1 = t;
		var t1 = r0;
		r0 = r1;
		r1 = t1;
	}
	if(a0 == a1) return;
	var dr = r1 - r0;
	var da = a1 - a0;
	var dcnt = Math.ceil(da / zpp_$nape_constraint_ZPP_$AngleDraw.maxarc);
	var drad = dr / dcnt;
	var dang = da / dcnt;
	var c0 = Math.cos(a0);
	var s0 = Math.sin(a0);
	var p0 = nape_geom_Vec2.get((function($this) {
		var $r;
		c.zpp_inner.validate();
		$r = c.zpp_inner.x;
		return $r;
	}(this)) + r0 * c0,(function($this) {
		var $r;
		c.zpp_inner.validate();
		$r = c.zpp_inner.y;
		return $r;
	}(this)) + r0 * s0,null);
	var ux = dr * c0 - r0 * da * s0;
	var uy = dr * s0 + r0 * da * c0;
	var p1 = nape_geom_Vec2.get(null,null,null);
	var ct = nape_geom_Vec2.get(null,null,null);
	var _g = 0;
	while(_g < dcnt) {
		var i = _g++;
		var r11 = r0 + drad;
		var a11 = a0 + dang;
		var c1 = Math.cos(a11);
		var s1 = Math.sin(a11);
		p1.setxy((function($this) {
			var $r;
			c.zpp_inner.validate();
			$r = c.zpp_inner.x;
			return $r;
		}(this)) + r11 * c1,(function($this) {
			var $r;
			c.zpp_inner.validate();
			$r = c.zpp_inner.y;
			return $r;
		}(this)) + r11 * s1);
		var vx = dr * c1 - r11 * da * s1;
		var vy = dr * s1 + r11 * da * c1;
		var den = ux * vy - uy * vx;
		if(den * den < nape_Config.epsilon) g.drawLine(p0,p1,col); else {
			var t2;
			t2 = (((function($this) {
				var $r;
				p1.zpp_inner.validate();
				$r = p1.zpp_inner.x;
				return $r;
			}(this)) - (function($this) {
				var $r;
				p0.zpp_inner.validate();
				$r = p0.zpp_inner.x;
				return $r;
			}(this))) * vy + ((function($this) {
				var $r;
				p0.zpp_inner.validate();
				$r = p0.zpp_inner.y;
				return $r;
			}(this)) - (function($this) {
				var $r;
				p1.zpp_inner.validate();
				$r = p1.zpp_inner.y;
				return $r;
			}(this))) * vx) / den;
			if(t2 <= 0) g.drawLine(p0,p1,col); else {
				ct.set_x((function($this) {
					var $r;
					p0.zpp_inner.validate();
					$r = p0.zpp_inner.x;
					return $r;
				}(this)) + ux * t2);
				ct.set_y((function($this) {
					var $r;
					p0.zpp_inner.validate();
					$r = p0.zpp_inner.y;
					return $r;
				}(this)) + uy * t2);
				g.drawCurve(p0,ct,p1,col);
			}
		}
		r0 = r11;
		a0 = a11;
		c0 = c1;
		s0 = s1;
		ux = vx;
		uy = vy;
		p0.set(p1);
	}
	p0.dispose();
	p1.dispose();
	ct.dispose();
};
var zpp_$nape_constraint_ZPP_$CopyHelper = function() {
	this.cb = null;
	this.bc = null;
	this.id = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_CopyHelper"] = zpp_$nape_constraint_ZPP_$CopyHelper;
zpp_$nape_constraint_ZPP_$CopyHelper.__name__ = ["zpp_nape","constraint","ZPP_CopyHelper"];
zpp_$nape_constraint_ZPP_$CopyHelper.dict = function(id,bc) {
	var ret = new zpp_$nape_constraint_ZPP_$CopyHelper();
	ret.id = id;
	ret.bc = bc;
	return ret;
};
zpp_$nape_constraint_ZPP_$CopyHelper.todo = function(id,cb) {
	var ret = new zpp_$nape_constraint_ZPP_$CopyHelper();
	ret.id = id;
	ret.cb = cb;
	return ret;
};
zpp_$nape_constraint_ZPP_$CopyHelper.prototype = {
	id: null
	,bc: null
	,cb: null
	,__class__: zpp_$nape_constraint_ZPP_$CopyHelper
};
var zpp_$nape_constraint_ZPP_$DistanceJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.jAcc = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.cx1 = this.cx2 = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_DistanceJoint"] = zpp_$nape_constraint_ZPP_$DistanceJoint;
zpp_$nape_constraint_ZPP_$DistanceJoint.__name__ = ["zpp_nape","constraint","ZPP_DistanceJoint"];
zpp_$nape_constraint_ZPP_$DistanceJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$DistanceJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,jointMin: null
	,jointMax: null
	,slack: null
	,equal: null
	,is_slack: function() {
		var slack;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		var C = nx * nx + ny * ny;
		if(C < nape_Config.epsilon) {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		} else {
			C = Math.sqrt(C);
			var t = 1.0 / C;
			nx *= t;
			ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				nx = -nx;
				ny = -ny;
				slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				slack = false;
			} else {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			}
		}
		C;
		return slack;
	}
	,nx: null
	,ny: null
	,cx1: null
	,cx2: null
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape_geom_Vec3.get(-this.jAcc * this.nx,-this.jAcc * this.ny,-this.cx1 * this.jAcc); else return nape_geom_Vec3.get(this.jAcc * this.nx,this.jAcc * this.ny,this.cx2 * this.jAcc);
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,b1: null
	,a1localx: null
	,a1localy: null
	,a1relx: null
	,a1rely: null
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,wrap_a1: null
	,b2: null
	,a2localx: null
	,a2localy: null
	,a2relx: null
	,a2rely: null
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,wrap_a2: null
	,kMass: null
	,jAcc: null
	,jMax: null
	,gamma: null
	,bias: null
	,stepped: null
	,copy: function(dict,todo) {
		var ret = new nape_constraint_DistanceJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.jointMin,this.jointMax);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw new js__$Boot_HaxeError("Error: DistanceJoint cannot be simulated null bodies");
		if(this.b1 == this.b2) throw new js__$Boot_HaxeError("Error: DistanceJoint cannot be simulated with body1 == body2");
		if(this.b1.space != this.space || this.b2.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		if(this.jointMin > this.jointMax) throw new js__$Boot_HaxeError("Error: DistanceJoint must have jointMin <= jointMax");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var C;
		this.nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		this.ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		var C1 = this.nx * this.nx + this.ny * this.ny;
		if(C1 < nape_Config.epsilon) {
			this.nx = 0;
			this.ny = 0;
			C1 = 0;
			this.slack = true;
		} else {
			C1 = Math.sqrt(C1);
			var t = 1.0 / C1;
			this.nx *= t;
			this.ny *= t;
			if(this.equal) {
				C1 -= this.jointMax;
				this.slack = false;
			} else if(C1 < this.jointMin) {
				C1 = this.jointMin - C1;
				this.nx = -this.nx;
				this.ny = -this.ny;
				this.slack = false;
			} else if(C1 > this.jointMax) {
				C1 -= this.jointMax;
				this.slack = false;
			} else {
				this.nx = 0;
				this.ny = 0;
				C1 = 0;
				this.slack = true;
			}
		}
		C = C1;
		if(!this.slack) {
			this.cx1 = this.ny * this.a1relx - this.nx * this.a1rely;
			this.cx2 = this.ny * this.a2relx - this.nx * this.a2rely;
			this.kMass = this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia;
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.nx * t;
			this.b1.vely -= this.ny * t;
			var t1 = this.b2.imass * this.jAcc;
			this.b2.velx += this.nx * t1;
			this.b2.vely += this.ny * t1;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.nx * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.ny * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && this.jAcc < -this.jMax) return true;
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.nx * t;
		this.b1.vely -= this.ny * t;
		var t1 = this.b2.imass * j;
		this.b2.velx += this.nx * t1;
		this.b2.vely += this.ny * t1;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var slack;
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b2.posx + r2x - (this.b1.posx + r1x);
		ny = this.b2.posy + r2y - (this.b1.posy + r1y);
		var C = nx * nx + ny * ny;
		if(C < nape_Config.epsilon) {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		} else {
			C = Math.sqrt(C);
			var t = 1.0 / C;
			nx *= t;
			ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				nx = -nx;
				ny = -ny;
				slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				slack = false;
			} else {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			}
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			if(E * E < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) return false;
			E *= 0.5;
			if(E * E > 6) {
				var k1 = this.b1.smass + this.b2.smass;
				if(k1 > nape_Config.epsilon) {
					k1 = 0.75 / k1;
					j = -E * k1;
					if(this.equal || j < 0) {
						var t1 = j * this.b1.imass;
						this.b1.posx -= nx * t1;
						this.b1.posy -= ny * t1;
						var t2 = j * this.b2.imass;
						this.b2.posx += nx * t2;
						this.b2.posy += ny * t2;
						nx = this.b2.posx + r2x - (this.b1.posx + r1x);
						ny = this.b2.posy + r2y - (this.b1.posy + r1y);
						var C1 = nx * nx + ny * ny;
						if(C1 < nape_Config.epsilon) {
							nx = 0;
							ny = 0;
							C1 = 0;
							slack = true;
						} else {
							C1 = Math.sqrt(C1);
							var t3 = 1.0 / C1;
							nx *= t3;
							ny *= t3;
							if(this.equal) {
								C1 -= this.jointMax;
								slack = false;
							} else if(C1 < this.jointMin) {
								C1 = this.jointMin - C1;
								nx = -nx;
								ny = -ny;
								slack = false;
							} else if(C1 > this.jointMax) {
								C1 -= this.jointMax;
								slack = false;
							} else {
								nx = 0;
								ny = 0;
								C1 = 0;
								slack = true;
							}
						}
						E = C1;
						E *= 0.5;
					}
				}
			}
			var cx1;
			var cx2;
			var k;
			cx1 = ny * r1x - nx * r1y;
			cx2 = ny * r2x - nx * r2y;
			k = this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia;
			if(k != 0) k = 1 / k;
			j = -E * k;
			if(this.equal || j < 0) {
				var t4 = this.b1.imass * j;
				this.b1.posx -= nx * t4;
				this.b1.posy -= ny * t4;
				var t5 = this.b2.imass * j;
				this.b2.posx += nx * t5;
				this.b2.posy += ny * t5;
				this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
				this.b2.delta_rot(cx2 * this.b2.iinertia * j);
			}
		}
		return false;
	}
	,draw: function(g) {
		var me = this.outer_zn;
		var a1 = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a1 == null) me.zpp_inner_zn.setup_a1();
			$r = me.zpp_inner_zn.wrap_a1;
			return $r;
		}(this)));
		var a2 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a2 == null) me.zpp_inner_zn.setup_a2();
			$r = me.zpp_inner_zn.wrap_a2;
			return $r;
		}(this)));
		var n = a2.sub(a1);
		var nl = Math.sqrt((function($this) {
			var $r;
			n.zpp_inner.validate();
			$r = n.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			n.zpp_inner.validate();
			$r = n.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			n.zpp_inner.validate();
			$r = n.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			n.zpp_inner.validate();
			$r = n.zpp_inner.y;
			return $r;
		}(this)));
		if(nl != 0) {
			n.muleq(1 / nl);
			var mid = a1.add(a2).muleq(0.5);
			var min1 = mid.sub(n.mul(this.jointMin * 0.5,true));
			var min2 = mid.add(n.mul(this.jointMin * 0.5,true));
			var max1 = mid.sub(n.mul(this.jointMax * 0.5,true));
			var max2 = mid.add(n.mul(this.jointMax * 0.5,true));
			g.drawLine(min1,min2,16776960);
			g.drawLine(max1,min1,65535);
			g.drawLine(max2,min2,65535);
			if(!this.stiff) {
				if(nl > this.jointMax) {
					g.drawSpring(max1,a1,65535);
					g.drawSpring(max2,a2,65535);
				} else if(nl < this.jointMin) {
					g.drawSpring(min1,a1,16776960);
					g.drawSpring(min2,a2,16776960);
				}
			}
			mid.dispose();
			min1.dispose();
			min2.dispose();
			max1.dispose();
			max2.dispose();
		}
		g.drawFilledCircle(a1,2,255);
		g.drawFilledCircle(a2,2,16711680);
		a1.dispose();
		a2.dispose();
		n.dispose();
	}
	,__class__: zpp_$nape_constraint_ZPP_$DistanceJoint
});
var zpp_$nape_constraint_ZPP_$LineJoint = function() {
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_n = null;
	this.nrely = 0.0;
	this.nrelx = 0.0;
	this.nlocaly = 0.0;
	this.nlocalx = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.dot2 = 0.0;
	this.dot1 = 0.0;
	this.equal = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.scale = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.nlocalx = 0;
	this.nlocaly = 0;
	this.nrelx = 0;
	this.nrely = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Infinity;
	this.jointMin = -Infinity;
	this.jointMax = Infinity;
	this.stepped = false;
};
$hxClasses["zpp_nape.constraint.ZPP_LineJoint"] = zpp_$nape_constraint_ZPP_$LineJoint;
zpp_$nape_constraint_ZPP_$LineJoint.__name__ = ["zpp_nape","constraint","ZPP_LineJoint"];
zpp_$nape_constraint_ZPP_$LineJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$LineJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,scale: null
	,jointMin: null
	,jointMax: null
	,equal: null
	,dot1: null
	,dot2: null
	,cx1: null
	,cx2: null
	,bodyImpulse: function(b) {
		if(this.stepped) {
			var jx = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
			var jy = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
			if(b == this.b1) return nape_geom_Vec3.get(-jx,-jy,this.scale * this.cx1 * jy - this.dot1 * jx); else return nape_geom_Vec3.get(jx,jy,this.scale * this.cx1 * jy - this.dot1 * jx);
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,b1: null
	,a1localx: null
	,a1localy: null
	,a1relx: null
	,a1rely: null
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,wrap_a1: null
	,b2: null
	,a2localx: null
	,a2localy: null
	,a2relx: null
	,a2rely: null
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,wrap_a2: null
	,zip_n: null
	,nlocalx: null
	,nlocaly: null
	,nrelx: null
	,nrely: null
	,validate_n: function() {
		this.wrap_n.zpp_inner.x = this.nlocalx;
		this.wrap_n.zpp_inner.y = this.nlocaly;
	}
	,invalidate_n: function(x) {
		this.immutable_midstep("Constraint::" + "n");
		this.nlocalx = x.x;
		this.nlocaly = x.y;
		this.zip_n = true;
		this.wake();
	}
	,setup_n: function() {
		this.wrap_n = nape_geom_Vec2.get(this.nlocalx,this.nlocaly,null);
		this.wrap_n.zpp_inner._inuse = true;
		this.wrap_n.zpp_inner._validate = $bind(this,this.validate_n);
		this.wrap_n.zpp_inner._invalidate = $bind(this,this.invalidate_n);
	}
	,wrap_n: null
	,validate_norm: function() {
		if(this.zip_n) {
			this.zip_n = false;
			var d = this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			this.nlocalx *= t;
			this.nlocaly *= t;
		}
	}
	,kMassa: null
	,kMassb: null
	,kMassc: null
	,jAccx: null
	,jAccy: null
	,jMax: null
	,gamma: null
	,biasx: null
	,biasy: null
	,stepped: null
	,copy: function(dict,todo) {
		var ret = new nape_constraint_LineJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.outer_zn.get_direction(),this.jointMin,this.jointMax);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated null bodies");
		if(this.b1 == this.b2) throw new js__$Boot_HaxeError("Error: DistanceJoint cannot be simulated with body1 == body2");
		if(this.b1.space != this.space || this.b2.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		if(this.jointMin > this.jointMax) throw new js__$Boot_HaxeError("Error: DistanceJoint must have jointMin <= jointMax");
		if(this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly < nape_Config.epsilon) throw new js__$Boot_HaxeError("Error: DistanceJoint direction must be non-degenerate");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.equal = this.jointMin == this.jointMax;
		this.stepped = true;
		this.validate_norm();
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.nrelx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		this.nrely = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var Cx = 0.0;
		var Cy = 0.0;
		dx = this.b2.posx + this.a2relx - this.b1.posx - this.a1relx;
		dy = this.b2.posy + this.a2rely - this.b1.posy - this.a1rely;
		Cx = dy * this.nrelx - dx * this.nrely;
		Cy = this.nrelx * dx + this.nrely * dy;
		if(this.equal) {
			Cy -= this.jointMin;
			this.scale = 1.0;
		} else if(Cy > this.jointMax) {
			Cy -= this.jointMax;
			this.scale = 1.0;
		} else if(Cy < this.jointMin) {
			Cy = this.jointMin - Cy;
			this.scale = -1.0;
		} else {
			Cy = 0;
			this.scale = 0;
		}
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + this.a1relx;
		dry = dy + this.a1rely;
		this.dot1 = this.nrelx * drx + this.nrely * dry;
		this.cx1 = dry * this.nrelx - drx * this.nrely;
		this.dot2 = this.nrelx * this.a2relx + this.nrely * this.a2rely;
		this.cx2 = this.a2rely * this.nrelx - this.a2relx * this.nrely;
		this.kMassa = this.b1.smass + this.b2.smass + this.dot1 * this.dot1 * this.b1.sinertia + this.dot2 * this.dot2 * this.b2.sinertia;
		this.kMassb = -this.scale * (this.dot1 * this.cx1 * this.b1.sinertia + this.dot2 * this.cx2 * this.b2.sinertia);
		this.kMassc = this.scale * this.scale * (this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia);
		var flag;
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if(!this.stiff) {
			if(this.breakUnderError && Cx * Cx + Cy * Cy > this.maxError * this.maxError) return true;
			var biasCoef;
			var X;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			X = ig;
			this.kMassa *= X;
			this.kMassb *= X;
			this.kMassc *= X;
			this.biasx = Cx;
			this.biasy = Cy;
			var t1 = -biasCoef;
			this.biasx *= t1;
			this.biasy *= t1;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				this.biasx *= t3;
				this.biasy *= t3;
			}
		} else {
			this.gamma = 0;
			this.biasx = 0;
			this.biasy = 0;
		}
		var t4 = dtratio;
		this.jAccx *= t4;
		this.jAccy *= t4;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var J2x = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
		var J2y = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
		var t = this.b1.imass;
		this.b1.velx -= J2x * t;
		this.b1.vely -= J2y * t;
		var t1 = this.b2.imass;
		this.b2.velx += J2x * t1;
		this.b2.vely += J2y * t1;
		this.b1.angvel += (this.scale * this.cx1 * this.jAccy - this.dot1 * this.jAccx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * this.jAccx - this.scale * this.cx2 * this.jAccy) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var dvx = 0.0;
		var dvy = 0.0;
		dvx = this.b2.velx - this.b1.velx;
		dvy = this.b2.vely - this.b1.vely;
		dvx += this.b2.kinvelx - this.b1.kinvelx;
		dvy += this.b2.kinvely - this.b1.kinvely;
		Ex = dvy * this.nrelx - dvx * this.nrely + (this.b2.angvel + this.b2.kinangvel) * this.dot2 - (this.b1.angvel + this.b1.kinangvel) * this.dot1;
		Ey = this.scale * (this.nrelx * dvx + this.nrely * dvy - (this.b2.angvel + this.b2.kinangvel) * this.cx2 + (this.b1.angvel + this.b1.kinangvel) * this.cx1);
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t1 = this.gamma;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t2 = 1.0;
		this.jAccx += Jx * t2;
		this.jAccy += Jy * t2;
		if(this.jAccy > 0) this.jAccy = 0;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t3 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t3 * t3) {
				var t4 = t3 * (1.0 / Math.sqrt(ls));
				this.jAccx *= t4;
				this.jAccy *= t4;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var J2x = this.scale * this.nrelx * Jy - this.nrely * Jx;
		var J2y = this.nrelx * Jx + this.scale * this.nrely * Jy;
		var t5 = this.b1.imass;
		this.b1.velx -= J2x * t5;
		this.b1.vely -= J2y * t5;
		var t6 = this.b2.imass;
		this.b2.velx += J2x * t6;
		this.b2.vely += J2y * t6;
		this.b1.angvel += (this.scale * this.cx1 * Jy - this.dot1 * Jx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * Jx - this.scale * this.cx2 * Jy) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		ny = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var scale;
		var Ex = 0.0;
		var Ey = 0.0;
		dx = this.b2.posx + r2x - this.b1.posx - r1x;
		dy = this.b2.posy + r2y - this.b1.posy - r1y;
		Ex = dy * nx - dx * ny;
		Ey = nx * dx + ny * dy;
		if(this.equal) {
			Ey -= this.jointMin;
			scale = 1.0;
		} else if(Ey > this.jointMax) {
			Ey -= this.jointMax;
			scale = 1.0;
		} else if(Ey < this.jointMin) {
			Ey = this.jointMin - Ey;
			scale = -1.0;
		} else {
			Ey = 0;
			scale = 0;
		}
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) return true;
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) return false;
		var Jx = 0.0;
		var Jy = 0.0;
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.8 / k;
				var Jx1 = k * (ny * Ex - scale * nx * Ey);
				var Jy1 = k * (nx * Ex * scale - ny * Ex);
				var t1 = this.b1.imass;
				this.b1.posx -= Jx1 * t1;
				this.b1.posy -= Jy1 * t1;
				var t2 = this.b2.imass;
				this.b2.posx += Jx1 * t2;
				this.b2.posy += Jy1 * t2;
				dx = this.b2.posx + r2x - this.b1.posx - r1x;
				dy = this.b2.posy + r2y - this.b1.posy - r1y;
				Ex = dy * nx - dx * ny;
				Ey = nx * dx + ny * dy;
				if(this.equal) {
					Ey -= this.jointMin;
					scale = 1.0;
				} else if(Ey > this.jointMax) {
					Ey -= this.jointMax;
					scale = 1.0;
				} else if(Ey < this.jointMin) {
					Ey = this.jointMin - Ey;
					scale = -1.0;
				} else {
					Ey = 0;
					scale = 0;
				}
				var t3 = 0.5;
				Ex *= t3;
				Ey *= t3;
			}
		}
		var dot1;
		var dot2;
		var cx1;
		var cx2;
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + r1x;
		dry = dy + r1y;
		dot1 = nx * drx + ny * dry;
		cx1 = dry * nx - drx * ny;
		dot2 = nx * r2x + ny * r2y;
		cx2 = r2y * nx - r2x * ny;
		Ka = this.b1.smass + this.b2.smass + dot1 * dot1 * this.b1.sinertia + dot2 * dot2 * this.b2.sinertia;
		Kb = -scale * (dot1 * cx1 * this.b1.sinertia + dot2 * cx2 * this.b2.sinertia);
		Kc = scale * scale * (this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia);
		Jx = -Ex;
		Jy = -Ey;
		var det = Ka * Kc - Kb * Kb;
		if(det != det) Jx = Jy = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kc != 0) Jy /= Kc; else Jy = 0;
		} else {
			det = 1 / det;
			var t4 = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t4;
		}
		if(Jy > 0) Jy = 0;
		var J2x = scale * nx * Jy - ny * Jx;
		var J2y = nx * Jx + scale * ny * Jy;
		var t5 = this.b1.imass;
		this.b1.posx -= J2x * t5;
		this.b1.posy -= J2y * t5;
		var t6 = this.b2.imass;
		this.b2.posx += J2x * t6;
		this.b2.posy += J2y * t6;
		this.b1.delta_rot((scale * cx1 * Jy - dot1 * Jx) * this.b1.iinertia);
		this.b2.delta_rot((dot2 * Jx - scale * cx2 * Jy) * this.b2.iinertia);
		return false;
	}
	,draw: function(g) {
		var me = this.outer_zn;
		var a1 = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a1 == null) me.zpp_inner_zn.setup_a1();
			$r = me.zpp_inner_zn.wrap_a1;
			return $r;
		}(this)));
		var a2 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a2 == null) me.zpp_inner_zn.setup_a2();
			$r = me.zpp_inner_zn.wrap_a2;
			return $r;
		}(this)));
		var dir = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).localVectorToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_n == null) me.zpp_inner_zn.setup_n();
			$r = me.zpp_inner_zn.wrap_n;
			return $r;
		}(this)));
		dir.muleq(1 / Math.sqrt((function($this) {
			var $r;
			dir.zpp_inner.validate();
			$r = dir.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			dir.zpp_inner.validate();
			$r = dir.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			dir.zpp_inner.validate();
			$r = dir.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			dir.zpp_inner.validate();
			$r = dir.zpp_inner.y;
			return $r;
		}(this))));
		var min = me.zpp_inner_zn.jointMin;
		var max = me.zpp_inner_zn.jointMax;
		if(min <= -Infinity) min = -1000;
		if(max >= Infinity) max = 1000;
		var del = a2.sub(a1);
		var pn = del.dot(dir);
		del.dispose();
		var e1 = a1.add(dir.mul(min,true));
		var e2 = a1.add(dir.mul(max,true));
		if(pn > min) g.drawLine(e1,a1.add(dir.mul((function($this) {
			var $r;
			var x = pn;
			var y = max;
			$r = x < y?x:y;
			return $r;
		}(this)),true),true),16776960);
		if(pn < max) g.drawLine(a1.add(dir.mul((function($this) {
			var $r;
			var x1 = pn;
			var y1 = min;
			$r = x1 > y1?x1:y1;
			return $r;
		}(this)),true),true),e2,65535);
		if(!this.stiff) {
			var anch;
			if(pn < this.jointMin) anch = nape_geom_Vec2.get((function($this) {
				var $r;
				e1.zpp_inner.validate();
				$r = e1.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				e1.zpp_inner.validate();
				$r = e1.zpp_inner.y;
				return $r;
			}(this)),false); else if(pn > this.jointMax) anch = nape_geom_Vec2.get((function($this) {
				var $r;
				e2.zpp_inner.validate();
				$r = e2.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				e2.zpp_inner.validate();
				$r = e2.zpp_inner.y;
				return $r;
			}(this)),false); else anch = a1.add(dir.mul(pn,true));
			g.drawSpring(anch,a2,16711935);
			anch.dispose();
		}
		g.drawFilledCircle(a1,2,255);
		g.drawFilledCircle(a2,2,16711680);
		a1.dispose();
		a2.dispose();
		e1.dispose();
		e2.dispose();
	}
	,__class__: zpp_$nape_constraint_ZPP_$LineJoint
});
var zpp_$nape_constraint_ZPP_$MotorJoint = function() {
	this.stepped = false;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.rate = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.jAcc = 0;
	this.stepped = false;
	this.__velocity = true;
};
$hxClasses["zpp_nape.constraint.ZPP_MotorJoint"] = zpp_$nape_constraint_ZPP_$MotorJoint;
zpp_$nape_constraint_ZPP_$MotorJoint.__name__ = ["zpp_nape","constraint","ZPP_MotorJoint"];
zpp_$nape_constraint_ZPP_$MotorJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$MotorJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,ratio: null
	,rate: null
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape_geom_Vec3.get(0,0,-this.jAcc); else return nape_geom_Vec3.get(0,0,this.ratio * this.jAcc);
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,b1: null
	,b2: null
	,kMass: null
	,jAcc: null
	,jMax: null
	,stepped: null
	,copy: function(dict,todo) {
		var ret = new nape_constraint_MotorJoint(null,null,this.rate,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated null bodies");
		if(this.b1 == this.b2) throw new js__$Boot_HaxeError("Error: MotorJoint cannot be simulated with body1 == body2");
		if(this.b1.space != this.space || this.b2.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
		this.kMass = 1.0 / this.kMass;
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		this.b1.angvel -= this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.ratio * this.b2.iinertia * this.jAcc;
	}
	,applyImpulseVel: function() {
		var E = this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel - this.rate;
		var j = -this.kMass * E;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(this.breakUnderForce) {
			if(this.jAcc > this.jMax || this.jAcc < -this.jMax) return true;
		} else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax; else if(this.jAcc > this.jMax) this.jAcc = this.jMax;
		j = this.jAcc - jOld;
		this.b1.angvel -= this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$MotorJoint
});
var zpp_$nape_constraint_ZPP_$PivotJoint = function() {
	this.stepped = false;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.stepped = false;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Infinity;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_PivotJoint"] = zpp_$nape_constraint_ZPP_$PivotJoint;
zpp_$nape_constraint_ZPP_$PivotJoint.__name__ = ["zpp_nape","constraint","ZPP_PivotJoint"];
zpp_$nape_constraint_ZPP_$PivotJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$PivotJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape_geom_Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely)); else return nape_geom_Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely);
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,b1: null
	,a1localx: null
	,a1localy: null
	,a1relx: null
	,a1rely: null
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,wrap_a1: null
	,b2: null
	,a2localx: null
	,a2localy: null
	,a2relx: null
	,a2rely: null
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,wrap_a2: null
	,kMassa: null
	,kMassb: null
	,kMassc: null
	,jAccx: null
	,jAccy: null
	,jMax: null
	,gamma: null
	,biasx: null
	,biasy: null
	,stepped: null
	,copy: function(dict,todo) {
		var ret = new nape_constraint_PivotJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2());
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw new js__$Boot_HaxeError("Error: PivotJoint cannot be simulated null bodies");
		if(this.b1 == this.b2) throw new js__$Boot_HaxeError("Error: PivotJoint cannot be simulated with body1 == body2 (body1=body2=" + this.b1.outer.toString() + ")");
		if(this.b1.space != this.space || this.b2.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassc = m;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassc += X * this.a1relx;
		}
		if(this.b2.sinertia != 0) {
			var X1 = this.a2relx * this.b2.sinertia;
			var Y1 = this.a2rely * this.b2.sinertia;
			this.kMassa += Y1 * this.a2rely;
			this.kMassb += -Y1 * this.a2relx;
			this.kMassc += X1 * this.a2relx;
		}
		var flag;
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if(!this.stiff) {
			var biasCoef;
			var X2;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			X2 = ig;
			this.kMassa *= X2;
			this.kMassb *= X2;
			this.kMassc *= X2;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy > this.maxError * this.maxError) return true;
			var t1 = -biasCoef;
			this.biasx *= t1;
			this.biasy *= t1;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				this.biasx *= t3;
				this.biasy *= t3;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.gamma = 0;
		}
		var t4 = dtratio;
		this.jAccx *= t4;
		this.jAccy *= t4;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.jAccx * t1;
		this.b2.vely += this.jAccy * t1;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t1 = this.gamma;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t2 = 1.0;
		this.jAccx += Jx * t2;
		this.jAccy += Jy * t2;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t3 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t3 * t3) {
				var t4 = t3 * (1.0 / Math.sqrt(ls));
				this.jAccx *= t4;
				this.jAccy *= t4;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var t5 = this.b1.imass;
		this.b1.velx -= Jx * t5;
		this.b1.vely -= Jy * t5;
		var t6 = this.b2.imass;
		this.b2.velx += Jx * t6;
		this.b2.vely += Jy * t6;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) return true;
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) return false;
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		var Jx = 0.0;
		var Jy = 0.0;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t1 = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t1 * t1) {
					var t2 = t1 * (1.0 / Math.sqrt(ls));
					Jx *= t2;
					Jy *= t2;
				}
				var t3 = this.b1.imass;
				this.b1.posx -= Jx * t3;
				this.b1.posy -= Jy * t3;
				var t4 = this.b2.imass;
				this.b2.posx += Jx * t4;
				this.b2.posy += Jy * t4;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				var t5 = 0.5;
				Ex *= t5;
				Ey *= t5;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kc = m;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kc += X * r1x;
		}
		if(this.b2.sinertia != 0) {
			var X1 = r2x * this.b2.sinertia;
			var Y1 = r2y * this.b2.sinertia;
			Ka += Y1 * r2y;
			Kb += -Y1 * r2x;
			Kc += X1 * r2x;
		}
		Jx = -Ex;
		Jy = -Ey;
		var t6 = 6;
		var ls1 = Jx * Jx + Jy * Jy;
		if(ls1 > t6 * t6) {
			var t7 = t6 * (1.0 / Math.sqrt(ls1));
			Jx *= t7;
			Jy *= t7;
		}
		var det = Ka * Kc - Kb * Kb;
		if(det != det) Jx = Jy = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kc != 0) Jy /= Kc; else Jy = 0;
		} else {
			det = 1 / det;
			var t8 = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t8;
		}
		var t9 = this.b1.imass;
		this.b1.posx -= Jx * t9;
		this.b1.posy -= Jy * t9;
		var t10 = this.b2.imass;
		this.b2.posx += Jx * t10;
		this.b2.posy += Jy * t10;
		this.b1.delta_rot(-(Jy * r1x - Jx * r1y) * this.b1.iinertia);
		this.b2.delta_rot((Jy * r2x - Jx * r2y) * this.b2.iinertia);
		return false;
	}
	,draw: function(g) {
		var me = this.outer_zn;
		var a1 = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a1 == null) me.zpp_inner_zn.setup_a1();
			$r = me.zpp_inner_zn.wrap_a1;
			return $r;
		}(this)));
		var a2 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a2 == null) me.zpp_inner_zn.setup_a2();
			$r = me.zpp_inner_zn.wrap_a2;
			return $r;
		}(this)));
		if(!this.stiff) {
			var n = a2.sub(a1);
			var nl = Math.sqrt((function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)));
			if(nl != 0) g.drawSpring(a1,a2,16711935);
			n.dispose();
		}
		g.drawFilledCircle(a1,2,255);
		g.drawFilledCircle(a2,2,16711680);
		a1.dispose();
		a2.dispose();
	}
	,__class__: zpp_$nape_constraint_ZPP_$PivotJoint
});
var zpp_$nape_constraint_ZPP_$PulleyJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a4 = null;
	this.a4rely = 0.0;
	this.a4relx = 0.0;
	this.a4localy = 0.0;
	this.a4localx = 0.0;
	this.b4 = null;
	this.wrap_a3 = null;
	this.a3rely = 0.0;
	this.a3relx = 0.0;
	this.a3localy = 0.0;
	this.a3localx = 0.0;
	this.b3 = null;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx4 = 0.0;
	this.cx3 = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.n34y = 0.0;
	this.n34x = 0.0;
	this.n12y = 0.0;
	this.n12x = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 1.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.a3localx = 0;
	this.a3localy = 0;
	this.a3relx = 0;
	this.a3rely = 0;
	this.a4localx = 0;
	this.a4localy = 0;
	this.a4relx = 0;
	this.a4rely = 0;
	this.n12x = 1;
	this.n12y = 0;
	this.n34x = 1;
	this.n34y = 0;
	this.jAcc = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.cx1 = this.cx2 = this.cx3 = this.cx4 = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_PulleyJoint"] = zpp_$nape_constraint_ZPP_$PulleyJoint;
zpp_$nape_constraint_ZPP_$PulleyJoint.__name__ = ["zpp_nape","constraint","ZPP_PulleyJoint"];
zpp_$nape_constraint_ZPP_$PulleyJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$PulleyJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,ratio: null
	,jointMin: null
	,jointMax: null
	,slack: null
	,equal: null
	,is_slack: function() {
		var slack;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var n12x = 0.0;
		var n12y = 0.0;
		var n34x = 0.0;
		var n34y = 0.0;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
		t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			n12x = t12x * t;
			n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			n34x = t34x * t1;
			n34y = t34y * t1;
			var t2 = this.ratio;
			n34x *= t2;
			n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
			n34x *= t3;
			n34y *= t3;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			n12x = -n12x;
			n12y = -n12y;
			n34x = -n34x;
			n34y = -n34y;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			n12x = 0;
			n12y = 0;
			n34x = 0;
			n34y = 0;
			C = 0;
			slack = true;
		}
		C;
		return slack;
	}
	,n12x: null
	,n12y: null
	,n34x: null
	,n34y: null
	,cx1: null
	,cx2: null
	,cx3: null
	,cx4: null
	,bodyImpulse: function(b) {
		if(this.stepped) {
			var ret = nape_geom_Vec3.get();
			if(b == this.b1) {
				var _g = ret;
				_g.set_x((function($this) {
					var $r;
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.x;
					return $r;
				}(this)) - this.jAcc * this.n12x);
				var _g1 = ret;
				_g1.set_y((function($this) {
					var $r;
					_g1.zpp_inner.validate();
					$r = _g1.zpp_inner.y;
					return $r;
				}(this)) - this.jAcc * this.n12y);
				var _g2 = ret;
				_g2.set_z((function($this) {
					var $r;
					_g2.zpp_inner.validate();
					$r = _g2.zpp_inner.z;
					return $r;
				}(this)) - this.cx1 * this.jAcc);
			}
			if(b == this.b2) {
				var _g3 = ret;
				_g3.set_x((function($this) {
					var $r;
					_g3.zpp_inner.validate();
					$r = _g3.zpp_inner.x;
					return $r;
				}(this)) + this.jAcc * this.n12x);
				var _g4 = ret;
				_g4.set_y((function($this) {
					var $r;
					_g4.zpp_inner.validate();
					$r = _g4.zpp_inner.y;
					return $r;
				}(this)) + this.jAcc * this.n12y);
				var _g5 = ret;
				_g5.set_z((function($this) {
					var $r;
					_g5.zpp_inner.validate();
					$r = _g5.zpp_inner.z;
					return $r;
				}(this)) + this.cx2 * this.jAcc);
			}
			if(b == this.b3) {
				var _g6 = ret;
				_g6.set_x((function($this) {
					var $r;
					_g6.zpp_inner.validate();
					$r = _g6.zpp_inner.x;
					return $r;
				}(this)) - this.jAcc * this.n34x);
				var _g7 = ret;
				_g7.set_y((function($this) {
					var $r;
					_g7.zpp_inner.validate();
					$r = _g7.zpp_inner.y;
					return $r;
				}(this)) - this.jAcc * this.n34y);
				var _g8 = ret;
				_g8.set_z((function($this) {
					var $r;
					_g8.zpp_inner.validate();
					$r = _g8.zpp_inner.z;
					return $r;
				}(this)) - this.cx3 * this.jAcc);
			}
			if(b == this.b4) {
				var _g9 = ret;
				_g9.set_x((function($this) {
					var $r;
					_g9.zpp_inner.validate();
					$r = _g9.zpp_inner.x;
					return $r;
				}(this)) + this.jAcc * this.n34x);
				var _g10 = ret;
				_g10.set_y((function($this) {
					var $r;
					_g10.zpp_inner.validate();
					$r = _g10.zpp_inner.y;
					return $r;
				}(this)) + this.jAcc * this.n34y);
				var _g11 = ret;
				_g11.set_z((function($this) {
					var $r;
					_g11.zpp_inner.validate();
					$r = _g11.zpp_inner.z;
					return $r;
				}(this)) + this.cx4 * this.jAcc);
			}
			return ret;
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) this.b3.constraints.add(this);
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) this.b4.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) this.b3.constraints.remove(this);
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) this.b4.constraints.remove(this);
		}
	}
	,b1: null
	,a1localx: null
	,a1localy: null
	,a1relx: null
	,a1rely: null
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,wrap_a1: null
	,b2: null
	,a2localx: null
	,a2localy: null
	,a2relx: null
	,a2rely: null
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,wrap_a2: null
	,b3: null
	,a3localx: null
	,a3localy: null
	,a3relx: null
	,a3rely: null
	,validate_a3: function() {
		this.wrap_a3.zpp_inner.x = this.a3localx;
		this.wrap_a3.zpp_inner.y = this.a3localy;
	}
	,invalidate_a3: function(x) {
		this.immutable_midstep("Constraint::" + "a3");
		this.a3localx = x.x;
		this.a3localy = x.y;
		this.wake();
	}
	,setup_a3: function() {
		this.wrap_a3 = nape_geom_Vec2.get(this.a3localx,this.a3localy,null);
		this.wrap_a3.zpp_inner._inuse = true;
		this.wrap_a3.zpp_inner._validate = $bind(this,this.validate_a3);
		this.wrap_a3.zpp_inner._invalidate = $bind(this,this.invalidate_a3);
	}
	,wrap_a3: null
	,b4: null
	,a4localx: null
	,a4localy: null
	,a4relx: null
	,a4rely: null
	,validate_a4: function() {
		this.wrap_a4.zpp_inner.x = this.a4localx;
		this.wrap_a4.zpp_inner.y = this.a4localy;
	}
	,invalidate_a4: function(x) {
		this.immutable_midstep("Constraint::" + "a4");
		this.a4localx = x.x;
		this.a4localy = x.y;
		this.wake();
	}
	,setup_a4: function() {
		this.wrap_a4 = nape_geom_Vec2.get(this.a4localx,this.a4localy,null);
		this.wrap_a4.zpp_inner._inuse = true;
		this.wrap_a4.zpp_inner._validate = $bind(this,this.validate_a4);
		this.wrap_a4.zpp_inner._invalidate = $bind(this,this.invalidate_a4);
	}
	,wrap_a4: null
	,kMass: null
	,jAcc: null
	,jMax: null
	,gamma: null
	,bias: null
	,stepped: null
	,copy: function(dict,todo) {
		var ret = new nape_constraint_PulleyJoint(null,null,null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.outer_zn.get_anchor3(),this.outer_zn.get_anchor4(),this.jointMin,this.jointMax,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		if(dict != null && this.b3 != null) {
			var b4 = null;
			var _g2 = 0;
			while(_g2 < dict.length) {
				var idc2 = dict[_g2];
				++_g2;
				if(idc2.id == this.b3.id) {
					b4 = idc2.bc;
					break;
				}
			}
			if(b4 != null) ret.zpp_inner_zn.b3 = b4.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b3.id,function(b5) {
				ret.zpp_inner_zn.b3 = b5.zpp_inner;
			}));
		}
		if(dict != null && this.b4 != null) {
			var b6 = null;
			var _g3 = 0;
			while(_g3 < dict.length) {
				var idc3 = dict[_g3];
				++_g3;
				if(idc3.id == this.b4.id) {
					b6 = idc3.bc;
					break;
				}
			}
			if(b6 != null) ret.zpp_inner_zn.b4 = b6.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b4.id,function(b7) {
				ret.zpp_inner_zn.b4 = b7.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null || this.b3 == null || this.b4 == null) throw new js__$Boot_HaxeError("Error: PulleyJoint cannot be simulated with null bodies");
		if(this.b1 == this.b2 || this.b3 == this.b4) throw new js__$Boot_HaxeError("Error: PulleyJoint cannot have body1==body2 or body3==body4");
		if(this.b1.space != this.space || this.b2.space != this.space || this.b3.space != this.space || this.b4.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		if(this.jointMin > this.jointMax) throw new js__$Boot_HaxeError("Error: PulleyJoint must have jointMin <= jointMax");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic");
		if(!(this.b3.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b4.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
		if(this.b3 != null && this.b3.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b3.wake();
		if(this.b4 != null && this.b4.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b4.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
		if(this.b3.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr2;
			if(this.b3.component == this.b3.component.parent) xr2 = this.b3.component; else {
				var obj4 = this.b3.component;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				xr2 = obj4;
			}
			var yr2;
			if(this.component == this.component.parent) yr2 = this.component; else {
				var obj5 = this.component;
				var stack5 = null;
				while(obj5 != obj5.parent) {
					var nxt10 = obj5.parent;
					obj5.parent = stack5;
					stack5 = obj5;
					obj5 = nxt10;
				}
				while(stack5 != null) {
					var nxt11 = stack5.parent;
					stack5.parent = obj5;
					stack5 = nxt11;
				}
				yr2 = obj5;
			}
			if(xr2 != yr2) {
				if(xr2.rank < yr2.rank) xr2.parent = yr2; else if(xr2.rank > yr2.rank) yr2.parent = xr2; else {
					yr2.parent = xr2;
					xr2.rank++;
				}
			}
		}
		if(this.b4.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr3;
			if(this.b4.component == this.b4.component.parent) xr3 = this.b4.component; else {
				var obj6 = this.b4.component;
				var stack6 = null;
				while(obj6 != obj6.parent) {
					var nxt12 = obj6.parent;
					obj6.parent = stack6;
					stack6 = obj6;
					obj6 = nxt12;
				}
				while(stack6 != null) {
					var nxt13 = stack6.parent;
					stack6.parent = obj6;
					stack6 = nxt13;
				}
				xr3 = obj6;
			}
			var yr3;
			if(this.component == this.component.parent) yr3 = this.component; else {
				var obj7 = this.component;
				var stack7 = null;
				while(obj7 != obj7.parent) {
					var nxt14 = obj7.parent;
					obj7.parent = stack7;
					stack7 = obj7;
					obj7 = nxt14;
				}
				while(stack7 != null) {
					var nxt15 = stack7.parent;
					stack7.parent = obj7;
					stack7 = nxt15;
				}
				yr3 = obj7;
			}
			if(xr3 != yr3) {
				if(xr3.rank < yr3.rank) xr3.parent = yr3; else if(xr3.rank > yr3.rank) yr3.parent = xr3; else {
					yr3.parent = xr3;
					xr3.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && (this.b2.id == di || this.b3.id == di || this.b4.id == di) || this.b2.id == id && (this.b3.id == di || this.b4.id == di || this.b1.id == di) || this.b3.id == id && (this.b4.id == di || this.b1.id == di || this.b2.id == di) || this.b4.id == id && (this.b1.id == di || this.b2.id == di || this.b3.id == di);
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var C;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
		t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			this.n12x = t12x * t;
			this.n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			this.n34x = t34x * t1;
			this.n34y = t34y * t1;
			var t2 = this.ratio;
			this.n34x *= t2;
			this.n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(this.n34x * this.n34x + this.n34y * this.n34y);
			this.n34x *= t3;
			this.n34y *= t3;
		}
		var C1 = C12 + this.ratio * C34;
		if(this.equal) {
			C1 -= this.jointMax;
			this.slack = false;
		} else if(C1 < this.jointMin) {
			C1 = this.jointMin - C1;
			this.n12x = -this.n12x;
			this.n12y = -this.n12y;
			this.n34x = -this.n34x;
			this.n34y = -this.n34y;
			this.slack = false;
		} else if(C1 > this.jointMax) {
			C1 -= this.jointMax;
			this.slack = false;
		} else {
			this.n12x = 0;
			this.n12y = 0;
			this.n34x = 0;
			this.n34y = 0;
			C1 = 0;
			this.slack = true;
		}
		C = C1;
		if(!this.slack) {
			this.cx1 = this.n12y * this.a1relx - this.n12x * this.a1rely;
			this.cx2 = this.n12y * this.a2relx - this.n12x * this.a2rely;
			this.cx3 = this.n34y * this.a3relx - this.n34x * this.a3rely;
			this.cx4 = this.n34y * this.a4relx - this.n34x * this.a4rely;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * this.cx1 * this.cx1 + this.b2.sinertia * this.cx2 * this.cx2 + this.b3.sinertia * this.cx3 * this.cx3 + this.b4.sinertia * this.cx4 * this.cx4;
			if(this.b1 == this.b4) K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx4 * this.b1.sinertia);
			if(this.b1 == this.b3) K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx3 * this.b1.sinertia);
			if(this.b2 == this.b3) K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx3 * this.b2.sinertia);
			if(this.b2 == this.b4) K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx4 * this.b2.sinertia);
			this.kMass = K;
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.n12x * t;
			this.b1.vely -= this.n12y * t;
			var t1 = this.b2.imass * this.jAcc;
			this.b2.velx += this.n12x * t1;
			this.b2.vely += this.n12y * t1;
			var t2 = this.b3.imass * this.jAcc;
			this.b3.velx -= this.n34x * t2;
			this.b3.vely -= this.n34y * t2;
			var t3 = this.b4.imass * this.jAcc;
			this.b4.velx += this.n34x * t3;
			this.b4.vely += this.n34y * t3;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
			this.b3.angvel -= this.cx3 * this.b3.iinertia * this.jAcc;
			this.b4.angvel += this.cx4 * this.b4.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.n12x * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.n12y * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + this.n34x * (this.b4.velx + this.b4.kinvelx - this.b3.velx - this.b3.kinvelx) + this.n34y * (this.b4.vely + this.b4.kinvely - this.b3.vely - this.b3.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1 + (this.b4.angvel + this.b4.kinangvel) * this.cx4 - (this.b3.angvel + this.b3.kinangvel) * this.cx3;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && this.jAcc < -this.jMax) return true;
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.n12x * t;
		this.b1.vely -= this.n12y * t;
		var t1 = this.b2.imass * j;
		this.b2.velx += this.n12x * t1;
		this.b2.vely += this.n12y * t1;
		var t2 = this.b3.imass * j;
		this.b3.velx -= this.n34x * t2;
		this.b3.vely -= this.n34y * t2;
		var t3 = this.b4.imass * j;
		this.b4.velx += this.n34x * t3;
		this.b4.vely += this.n34y * t3;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		this.b3.angvel -= this.cx3 * this.b3.iinertia * j;
		this.b4.angvel += this.cx4 * this.b4.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var r3x = 0.0;
		var r3y = 0.0;
		r3x = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		r3y = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		var r4x = 0.0;
		var r4y = 0.0;
		r4x = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		r4y = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var slack;
		var n12x = 0.0;
		var n12y = 0.0;
		var n34x = 0.0;
		var n34y = 0.0;
		n12x = this.n12x;
		n12y = this.n12y;
		n34x = this.n34x;
		n34y = this.n34y;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + r2x - (this.b1.posx + r1x);
		t12y = this.b2.posy + r2y - (this.b1.posy + r1y);
		t34x = this.b4.posx + r4x - (this.b3.posx + r3x);
		t34y = this.b4.posy + r4y - (this.b3.posy + r3y);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			n12x = t12x * t;
			n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			n34x = t34x * t1;
			n34y = t34y * t1;
			var t2 = this.ratio;
			n34x *= t2;
			n34y *= t2;
		} else {
			var t3 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
			n34x *= t3;
			n34y *= t3;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			n12x = -n12x;
			n12y = -n12y;
			n34x = -n34x;
			n34y = -n34y;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			n12x = 0;
			n12y = 0;
			n34x = 0;
			n34y = 0;
			C = 0;
			slack = true;
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			if(E * E < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) return false;
			E *= 0.5;
			if(E * E > 6) {
				var k1 = this.b1.smass + this.b2.smass;
				if(k1 > nape_Config.epsilon) {
					k1 = 0.75 / k1;
					j = -E * k1;
					if(this.equal || j < 0) {
						var t4 = j * this.b1.imass;
						this.b1.posx -= n12x * t4;
						this.b1.posy -= n12y * t4;
						var t5 = j * this.b2.imass;
						this.b2.posx += n12x * t5;
						this.b2.posy += n12y * t5;
						var t6 = j * this.b3.imass;
						this.b3.posx -= n34x * t6;
						this.b3.posy -= n34y * t6;
						var t7 = j * this.b4.imass;
						this.b4.posx += n34x * t7;
						this.b4.posy += n34y * t7;
						var t12x1 = 0.0;
						var t12y1 = 0.0;
						var t34x1 = 0.0;
						var t34y1 = 0.0;
						t12x1 = this.b2.posx + r2x - (this.b1.posx + r1x);
						t12y1 = this.b2.posy + r2y - (this.b1.posy + r1y);
						t34x1 = this.b4.posx + r4x - (this.b3.posx + r3x);
						t34y1 = this.b4.posy + r4y - (this.b3.posy + r3y);
						var C121 = Math.sqrt(t12x1 * t12x1 + t12y1 * t12y1);
						var C341 = Math.sqrt(t34x1 * t34x1 + t34y1 * t34y1);
						if(C121 != 0) {
							var t8 = 1.0 / C121;
							n12x = t12x1 * t8;
							n12y = t12y1 * t8;
						}
						if(C341 != 0) {
							var t9 = 1.0 / C341;
							n34x = t34x1 * t9;
							n34y = t34y1 * t9;
							var t10 = this.ratio;
							n34x *= t10;
							n34y *= t10;
						} else {
							var t11 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
							n34x *= t11;
							n34y *= t11;
						}
						var C1 = C121 + this.ratio * C341;
						if(this.equal) {
							C1 -= this.jointMax;
							slack = false;
						} else if(C1 < this.jointMin) {
							C1 = this.jointMin - C1;
							n12x = -n12x;
							n12y = -n12y;
							n34x = -n34x;
							n34y = -n34y;
							slack = false;
						} else if(C1 > this.jointMax) {
							C1 -= this.jointMax;
							slack = false;
						} else {
							n12x = 0;
							n12y = 0;
							n34x = 0;
							n34y = 0;
							C1 = 0;
							slack = true;
						}
						E = C1;
						E *= 0.5;
					}
				}
			}
			var cx1;
			var cx2;
			var cx3;
			var cx4;
			var k;
			cx1 = n12y * r1x - n12x * r1y;
			cx2 = n12y * r2x - n12x * r2y;
			cx3 = n34y * r3x - n34x * r3y;
			cx4 = n34y * r4x - n34x * r4y;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * cx1 * cx1 + this.b2.sinertia * cx2 * cx2 + this.b3.sinertia * cx3 * cx3 + this.b4.sinertia * cx4 * cx4;
			if(this.b1 == this.b4) K -= 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx4 * this.b1.sinertia);
			if(this.b1 == this.b3) K += 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx3 * this.b1.sinertia);
			if(this.b2 == this.b3) K -= 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx3 * this.b2.sinertia);
			if(this.b2 == this.b4) K += 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx4 * this.b2.sinertia);
			k = K;
			if(k != 0) k = 1 / k;
			j = -E * k;
			if(this.equal || j < 0) {
				var t12 = this.b1.imass * j;
				this.b1.posx -= n12x * t12;
				this.b1.posy -= n12y * t12;
				var t13 = this.b2.imass * j;
				this.b2.posx += n12x * t13;
				this.b2.posy += n12y * t13;
				var t14 = this.b3.imass * j;
				this.b3.posx -= n34x * t14;
				this.b3.posy -= n34y * t14;
				var t15 = this.b4.imass * j;
				this.b4.posx += n34x * t15;
				this.b4.posy += n34y * t15;
				this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
				this.b2.delta_rot(cx2 * this.b2.iinertia * j);
				this.b3.delta_rot(-cx3 * this.b3.iinertia * j);
				this.b4.delta_rot(cx4 * this.b4.iinertia * j);
			}
		}
		return false;
	}
	,draw: function(g) {
		var me = this.outer_zn;
		var a1 = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a1 == null) me.zpp_inner_zn.setup_a1();
			$r = me.zpp_inner_zn.wrap_a1;
			return $r;
		}(this)));
		var a2 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a2 == null) me.zpp_inner_zn.setup_a2();
			$r = me.zpp_inner_zn.wrap_a2;
			return $r;
		}(this)));
		var a3 = (me.zpp_inner_zn.b3 == null?null:me.zpp_inner_zn.b3.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a3 == null) me.zpp_inner_zn.setup_a3();
			$r = me.zpp_inner_zn.wrap_a3;
			return $r;
		}(this)));
		var a4 = (me.zpp_inner_zn.b4 == null?null:me.zpp_inner_zn.b4.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a4 == null) me.zpp_inner_zn.setup_a4();
			$r = me.zpp_inner_zn.wrap_a4;
			return $r;
		}(this)));
		var n12 = a2.sub(a1);
		var n34 = a4.sub(a3);
		var nl12 = Math.sqrt((function($this) {
			var $r;
			n12.zpp_inner.validate();
			$r = n12.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			n12.zpp_inner.validate();
			$r = n12.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			n12.zpp_inner.validate();
			$r = n12.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			n12.zpp_inner.validate();
			$r = n12.zpp_inner.y;
			return $r;
		}(this)));
		var nl34 = Math.sqrt((function($this) {
			var $r;
			n34.zpp_inner.validate();
			$r = n34.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			n34.zpp_inner.validate();
			$r = n34.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			n34.zpp_inner.validate();
			$r = n34.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			n34.zpp_inner.validate();
			$r = n34.zpp_inner.y;
			return $r;
		}(this)));
		this.drawLink(g,a1,a2,n12,nl12,nl34 * this.ratio,1.0,16776960,65535);
		this.drawLink(g,a3,a4,n34,nl34,nl12,1 / this.ratio,65535,16711935);
		g.drawFilledCircle(a1,2,255);
		g.drawFilledCircle(a2,2,16711680);
		g.drawFilledCircle(a3,2,65280);
		g.drawFilledCircle(a4,2,16711935);
		a1.dispose();
		a2.dispose();
		a3.dispose();
		a4.dispose();
		n12.dispose();
		n34.dispose();
	}
	,drawLink: function(g,a1,a2,n,nl,bias,scale,ca,cb) {
		if(nl != 0) {
			n.muleq(1 / nl);
			var mid = a1.add(a2).muleq(0.5);
			var cmin = (this.jointMin - bias) * scale;
			if(cmin < 0) cmin = 0;
			var cmax = (this.jointMax - bias) * scale;
			if(cmax < 0) cmax = 0;
			var min1 = mid.sub(n.mul(cmin * 0.5,true));
			var min2 = mid.add(n.mul(cmin * 0.5,true));
			var max1 = mid.sub(n.mul(cmax * 0.5,true));
			var max2 = mid.add(n.mul(cmax * 0.5,true));
			g.drawLine(min1,min2,ca);
			g.drawLine(max1,min1,cb);
			g.drawLine(max2,min2,cb);
			if(!this.stiff) {
				if(nl > cmax) {
					g.drawSpring(max1,a1,cb);
					g.drawSpring(max2,a2,cb);
				} else if(nl < cmin) {
					g.drawSpring(min1,a1,ca);
					g.drawSpring(min2,a2,ca);
				}
			}
			mid.dispose();
			min1.dispose();
			min2.dispose();
			max1.dispose();
			max2.dispose();
		}
	}
	,__class__: zpp_$nape_constraint_ZPP_$PulleyJoint
});
var zpp_$nape_constraint_ZPP_$UserConstraint = function(dim,velonly) {
	this.jOld = null;
	this.J = null;
	this.vec3 = null;
	this.Keff = null;
	this.jMax = 0.0;
	this.velonly = false;
	this.gamma = 0.0;
	this.soft = 0.0;
	this.y = null;
	this.L = null;
	this.stepped = false;
	this.bias = null;
	this.jAcc = null;
	this.dim = 0;
	this.bodies = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.bodies = [];
	this.dim = dim;
	this.velonly = velonly;
	this.jAcc = [];
	this.bias = [];
	this.L = [];
	this.J = [];
	this.jOld = [];
	this.y = [];
	this.Keff = [];
	this.vec3 = nape_geom_Vec3.get(0,0,0);
	var _g = 0;
	while(_g < dim) {
		var i = _g++;
		this.jAcc[i] = this.bias[i] = this.J[i] = this.jOld[i] = this.y[i] = 0.0;
		var _g1 = 0;
		while(_g1 < dim) {
			var j = _g1++;
			this.L[i * dim + j] = 0.0;
		}
	}
	this.stepped = false;
};
$hxClasses["zpp_nape.constraint.ZPP_UserConstraint"] = zpp_$nape_constraint_ZPP_$UserConstraint;
zpp_$nape_constraint_ZPP_$UserConstraint.__name__ = ["zpp_nape","constraint","ZPP_UserConstraint"];
zpp_$nape_constraint_ZPP_$UserConstraint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$UserConstraint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,bindVec2_invalidate: function(_) {
		this.outer_zn.__invalidate();
	}
	,bodies: null
	,dim: null
	,jAcc: null
	,bias: null
	,addBody: function(b) {
		var match = null;
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			if(x.body == b) {
				match = x;
				break;
			}
		}
		if(match == null) {
			this.bodies.push(new zpp_$nape_constraint_ZPP_$UserBody(1,b));
			if(this.active && this.space != null) {
				if(b != null) b.constraints.add(this);
			}
		} else match.cnt++;
	}
	,remBody: function(b) {
		var match = null;
		var bl = this.bodies.length | 0;
		var i = 0;
		while(i < bl) {
			var x = this.bodies[i];
			if(x.body == b) {
				x.cnt--;
				if(x.cnt == 0) {
					if(bl > 0) this.bodies[i] = this.bodies[bl - 1];
					this.bodies.pop();
					if(this.active && this.space != null) {
						if(b != null) b.constraints.remove(this);
					}
				}
				match = x;
				break;
			}
			i++;
		}
		return match != null;
	}
	,bodyImpulse: function(b) {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.jAcc[i];
		}
		var ret = nape_geom_Vec3.get(0,0,0);
		if(this.stepped) this.outer_zn.__impulse(this.J,b.outer,ret);
		return ret;
	}
	,activeBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) b.body.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) b.body.constraints.remove(this);
		}
	}
	,stepped: null
	,copy: function(dict,todo) {
		var ret = this.outer_zn.__copy();
		this.copyto(ret);
		throw new js__$Boot_HaxeError("not done yet");
		return ret;
	}
	,validate: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same sapce to which the constraint has been assigned");
		}
		this.outer_zn.__validate();
	}
	,wake_connected: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) b.body.wake();
		}
	}
	,forest: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
				var xr;
				if(b.body.component == b.body.component.parent) xr = b.body.component; else {
					var obj = b.body.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt1 = stack.parent;
						stack.parent = obj;
						stack = nxt1;
					}
					xr = obj;
				}
				var yr;
				if(this.component == this.component.parent) yr = this.component; else {
					var obj1 = this.component;
					var stack1 = null;
					while(obj1 != obj1.parent) {
						var nxt2 = obj1.parent;
						obj1.parent = stack1;
						stack1 = obj1;
						obj1 = nxt2;
					}
					while(stack1 != null) {
						var nxt3 = stack1.parent;
						stack1.parent = obj1;
						stack1 = nxt3;
					}
					yr = obj1;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		var ret = false;
		var bl = this.bodies.length | 0;
		var _g = 0;
		while(_g < bl) {
			var bi = _g++;
			var b = this.bodies[bi].body;
			var _g1 = bi + 1;
			while(_g1 < bl) {
				var ci = _g1++;
				var c = this.bodies[ci].body;
				if(b.id == id && c.id == di || b.id == di && c.id == id) {
					ret = true;
					break;
				}
			}
			if(ret) break;
		}
		return ret;
	}
	,broken: function() {
		this.outer_zn.__broken();
	}
	,clearcache: function() {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.jAcc[i] = 0.0;
		}
		this.pre_dt = -1.0;
	}
	,lsq: function(v) {
		var sum = 0.0;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			sum += v[i] * v[i];
		}
		return sum;
	}
	,_clamp: function(v,max) {
		var x = this.lsq(v);
		if(x > max * max) {
			var scale = max / Math.sqrt(x);
			var _g1 = 0;
			var _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				v[i] *= scale;
			}
		}
	}
	,L: null
	,solve: function(m) {
		var ind = 0;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var j = _g1++;
			var sum = 0.0;
			var _g3 = 0;
			var _g2 = j - 1;
			while(_g3 < _g2) {
				var k = _g3++;
				sum += this.L[j * this.dim + k] * this.L[j * this.dim + k];
			}
			var rec = Math.sqrt(m[ind++] - sum);
			this.L[j * this.dim + j] = rec;
			if(rec != 0) {
				rec = 1.0 / rec;
				var _g31 = j + 1;
				var _g21 = this.dim;
				while(_g31 < _g21) {
					var i = _g31++;
					var sum1 = 0.0;
					var _g5 = 0;
					var _g4 = j - 1;
					while(_g5 < _g4) {
						var k1 = _g5++;
						sum1 += this.L[i * this.dim + k1] * this.L[j * this.dim + k1];
					}
					this.L[i * this.dim + j] = rec * (m[ind++] - sum1);
				}
			} else {
				var _g32 = j + 1;
				var _g22 = this.dim;
				while(_g32 < _g22) {
					var i1 = _g32++;
					this.L[i1 * this.dim + j] = 0.0;
				}
				ind += this.dim - j - 1;
			}
		}
		return this.L;
	}
	,y: null
	,transform: function(L,x) {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			var sum = x[i];
			var lii = L[i * this.dim + i];
			if(lii != 0) {
				var _g2 = 0;
				while(_g2 < i) {
					var k = _g2++;
					sum -= L[i * this.dim + k] * this.y[k];
				}
				this.y[i] = sum / lii;
			} else this.y[i] = 0.0;
		}
		var _g11 = 0;
		var _g3 = this.dim;
		while(_g11 < _g3) {
			var ix = _g11++;
			var i1 = this.dim - 1 - ix;
			var lii1 = L[i1 * this.dim + i1];
			if(lii1 != 0) {
				var sum1 = this.y[i1];
				var _g31 = i1 + 1;
				var _g21 = this.dim;
				while(_g31 < _g21) {
					var k1 = _g31++;
					sum1 -= L[k1 * this.dim + i1] * x[k1];
				}
				x[i1] = sum1 / lii1;
			} else x[i1] = 0.0;
		}
	}
	,soft: null
	,gamma: null
	,velonly: null
	,jMax: null
	,Keff: null
	,preStep: function(dt) {
		this.outer_zn.__validate();
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.outer_zn.__prepare();
		this.outer_zn.__eff_mass(this.Keff);
		this.L = this.solve(this.Keff);
		if(!this.stiff && !this.velonly) {
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			this.soft = ig;
			this.outer_zn.__position(this.bias);
			if(this.breakUnderError && this.lsq(this.bias) > this.maxError * this.maxError) return true;
			var _g1 = 0;
			var _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				this.bias[i] *= -biasCoef;
			}
			this._clamp(this.bias,this.maxError);
		} else {
			var _g11 = 0;
			var _g2 = this.dim;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.bias[i1] = 0.0;
			}
			this.gamma = 0.0;
			this.soft = 1.0;
		}
		var _g12 = 0;
		var _g3 = this.dim;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.jAcc[i2] *= dtratio;
		}
		this.jMax = this.maxForce * dt;
		return false;
	}
	,vec3: null
	,warmStart: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var bs = _g1[_g];
			++_g;
			var b = bs.body;
			this.outer_zn.__impulse(this.jAcc,b.outer,this.vec3);
			var t = b.imass;
			b.velx += this.vec3.get_x() * t;
			b.vely += this.vec3.get_y() * t;
			b.angvel += this.vec3.get_z() * b.iinertia;
		}
	}
	,J: null
	,jOld: null
	,applyImpulseVel: function() {
		this.outer_zn.__velocity(this.J);
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.bias[i] - this.J[i];
		}
		this.transform(this.L,this.J);
		var _g11 = 0;
		var _g2 = this.dim;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.jOld[i1] = this.jAcc[i1];
			this.jAcc[i1] += this.J[i1] = this.J[i1] * this.soft - this.jAcc[i1] * this.gamma;
		}
		this.outer_zn.__clamp(this.jAcc);
		if((this.breakUnderForce || !this.stiff) && this.lsq(this.jAcc) > this.jMax * this.jMax) {
			if(this.breakUnderForce) return true; else if(!this.stiff) this._clamp(this.jAcc,this.jMax);
		}
		var _g12 = 0;
		var _g3 = this.dim;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.J[i2] = this.jAcc[i2] - this.jOld[i2];
		}
		var _g4 = 0;
		var _g13 = this.bodies;
		while(_g4 < _g13.length) {
			var bs = _g13[_g4];
			++_g4;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			b.velx += this.vec3.get_x() * t;
			b.vely += this.vec3.get_y() * t;
			b.angvel += this.vec3.get_z() * b.iinertia;
		}
		return false;
	}
	,applyImpulsePos: function() {
		if(this.velonly) return false;
		this.outer_zn.__prepare();
		this.outer_zn.__position(this.J);
		var lj = this.lsq(this.J);
		if(this.breakUnderError && lj > this.maxError * this.maxError) return true; else if(lj < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) return false;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] *= -1;
		}
		this.outer_zn.__eff_mass(this.Keff);
		this.transform(this.solve(this.Keff),this.J);
		this.outer_zn.__clamp(this.J);
		var _g2 = 0;
		var _g11 = this.bodies;
		while(_g2 < _g11.length) {
			var bs = _g11[_g2];
			++_g2;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			b.posx += this.vec3.get_x() * t;
			b.posy += this.vec3.get_y() * t;
			b.delta_rot(this.vec3.get_z() * b.iinertia);
		}
		return false;
	}
	,draw: function(g) {
		this.outer_zn.__draw(g);
	}
	,__class__: zpp_$nape_constraint_ZPP_$UserConstraint
});
var zpp_$nape_constraint_ZPP_$UserBody = function(cnt,body) {
	this.body = null;
	this.cnt = 0;
	this.cnt = cnt;
	this.body = body;
};
$hxClasses["zpp_nape.constraint.ZPP_UserBody"] = zpp_$nape_constraint_ZPP_$UserBody;
zpp_$nape_constraint_ZPP_$UserBody.__name__ = ["zpp_nape","constraint","ZPP_UserBody"];
zpp_$nape_constraint_ZPP_$UserBody.prototype = {
	cnt: null
	,body: null
	,__class__: zpp_$nape_constraint_ZPP_$UserBody
};
var zpp_$nape_constraint_ZPP_$WeldJoint = function() {
	this.stepped = false;
	this.biasz = 0.0;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccz = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassf = 0.0;
	this.kMasse = 0.0;
	this.kMassc = 0.0;
	this.kMassd = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.phase = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.phase = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_WeldJoint"] = zpp_$nape_constraint_ZPP_$WeldJoint;
zpp_$nape_constraint_ZPP_$WeldJoint.__name__ = ["zpp_nape","constraint","ZPP_WeldJoint"];
zpp_$nape_constraint_ZPP_$WeldJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$WeldJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape_geom_Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz)); else return nape_geom_Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz);
		} else return nape_geom_Vec3.get(0,0,0);
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,b1: null
	,a1localx: null
	,a1localy: null
	,a1relx: null
	,a1rely: null
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,wrap_a1: null
	,b2: null
	,a2localx: null
	,a2localy: null
	,a2relx: null
	,a2rely: null
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,wrap_a2: null
	,phase: null
	,kMassa: null
	,kMassb: null
	,kMassd: null
	,kMassc: null
	,kMasse: null
	,kMassf: null
	,jAccx: null
	,jAccy: null
	,jAccz: null
	,jMax: null
	,gamma: null
	,biasx: null
	,biasy: null
	,biasz: null
	,stepped: null
	,copy: function(dict,todo) {
		var ret = new nape_constraint_PivotJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2());
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b2 = null;
			var _g1 = 0;
			while(_g1 < dict.length) {
				var idc1 = dict[_g1];
				++_g1;
				if(idc1.id == this.b2.id) {
					b2 = idc1.bc;
					break;
				}
			}
			if(b2 != null) ret.zpp_inner_zn.b2 = b2.zpp_inner; else todo.push(zpp_$nape_constraint_ZPP_$CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
		return ret;
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw new js__$Boot_HaxeError("Error: AngleJoint cannot be simulated null bodies");
		if(this.b1 == this.b2) throw new js__$Boot_HaxeError("Error: WeldJoint cannot be simulated with body1 == body2");
		if(this.b1.space != this.space || this.b2.space != this.space) throw new js__$Boot_HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		if(!(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) throw new js__$Boot_HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,forest: function() {
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr;
			if(this.b1.component == this.b1.component.parent) xr = this.b1.component; else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) yr = this.component; else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) xr1 = this.b2.component; else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) yr1 = this.component; else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.jAccz = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassd = m;
		this.kMassc = 0;
		this.kMasse = 0;
		this.kMassf = 0;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassd += X * this.a1relx;
			this.kMassc += -Y;
			this.kMasse += X;
			this.kMassf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X1 = this.a2relx * this.b2.sinertia;
			var Y1 = this.a2rely * this.b2.sinertia;
			this.kMassa += Y1 * this.a2rely;
			this.kMassb += -Y1 * this.a2relx;
			this.kMassd += X1 * this.a2relx;
			this.kMassc += -Y1;
			this.kMasse += X1;
			this.kMassf += this.b2.sinertia;
		}
		var flag;
		var det = this.kMassa * (this.kMassd * this.kMassf - this.kMasse * this.kMasse) + this.kMassb * (this.kMassc * this.kMasse - this.kMassb * this.kMassf) + this.kMassc * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
		if(det != det) {
			this.kMassa = 0;
			this.kMassb = 0;
			this.kMassd = 0;
			this.kMassc = 0;
			this.kMasse = 0;
			this.kMassf = 0;
			flag = 7;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassd != 0) this.kMassd = 1 / this.kMassd; else {
				this.kMassd = 0;
				flag1 |= 2;
			}
			if(this.kMassf != 0) this.kMassf = 1 / this.kMassf; else {
				this.kMassf = 0;
				flag1 |= 4;
			}
			this.kMassb = this.kMassc = this.kMasse = 0.0;
			flag = flag1;
		} else {
			det = 1 / det;
			var A = det * (this.kMassd * this.kMassf - this.kMasse * this.kMasse);
			var B = det * (this.kMasse * this.kMassc - this.kMassb * this.kMassf);
			var D = det * (this.kMassa * this.kMassf - this.kMassc * this.kMassc);
			var C = det * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
			var E = det * (this.kMassb * this.kMassc - this.kMassa * this.kMasse);
			var F = det * (this.kMassa * this.kMassd - this.kMassb * this.kMassb);
			this.kMassa = A;
			this.kMassb = B;
			this.kMassd = D;
			this.kMassc = C;
			this.kMasse = E;
			this.kMassf = F;
			flag = 0;
		}
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if((flag & 4) != 0) this.jAccz = 0;
		if(!this.stiff) {
			var biasCoef;
			var X2;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			X2 = ig;
			this.kMassa *= X2;
			this.kMassb *= X2;
			this.kMassd *= X2;
			this.kMassc *= X2;
			this.kMasse *= X2;
			this.kMassf *= X2;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			this.biasz = this.b2.rot - this.b1.rot - this.phase;
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz > this.maxError * this.maxError) return true;
			var t = -biasCoef;
			var t1 = t;
			this.biasx *= t1;
			this.biasy *= t1;
			this.biasz *= t;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz;
			if(ls > t2 * t2) {
				var t3 = t2 * (1.0 / Math.sqrt(ls));
				var t4 = t3;
				this.biasx *= t4;
				this.biasy *= t4;
				this.biasz *= t3;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.biasz = 0;
			this.gamma = 0;
		}
		var t5 = dtratio;
		var t6 = t5;
		this.jAccx *= t6;
		this.jAccy *= t6;
		this.jAccz *= t5;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.jAccx * t1;
		this.b2.vely += this.jAccy * t1;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		Ez = this.b2.angvel + this.b2.kinangvel - this.b1.angvel - this.b1.kinangvel;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		Jz = this.biasz - Ez;
		var X = this.kMassa * Jx + this.kMassb * Jy + this.kMassc * Jz;
		var Y = this.kMassb * Jx + this.kMassd * Jy + this.kMasse * Jz;
		Jz = this.kMassc * Jx + this.kMasse * Jy + this.kMassf * Jz;
		Jx = X;
		Jy = Y;
		var t = this.gamma;
		var t1 = t;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		Jz -= this.jAccz * t;
		var jOldx = 0.0;
		var jOldy = 0.0;
		var jOldz = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		jOldz = this.jAccz;
		var t2 = 1;
		var t3 = t2;
		this.jAccx += Jx * t3;
		this.jAccy += Jy * t3;
		this.jAccz += Jz * t2;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t4 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz;
			if(ls > t4 * t4) {
				var t5 = t4 * (1.0 / Math.sqrt(ls));
				var t6 = t5;
				this.jAccx *= t6;
				this.jAccy *= t6;
				this.jAccz *= t5;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		Jz = this.jAccz - jOldz;
		var t7 = this.b1.imass;
		this.b1.velx -= Jx * t7;
		this.b1.vely -= Jy * t7;
		var t8 = this.b2.imass;
		this.b2.velx += Jx * t8;
		this.b2.vely += Jy * t8;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely + Jz) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely + Jz) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		Ez = this.b2.rot - this.b1.rot - this.phase;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		if(this.breakUnderError && Ex * Ex + Ey * Ey + Ez * Ez > this.maxError * this.maxError) return true;
		var cont = true;
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			cont = false;
			Ex = 0;
			Ey = 0;
		}
		if(Ez * Ez < zpp_$nape_util_ZPP_$Math.sqr(nape_Config.constraintAngularSlop)) {
			if(!cont) return false; else Ez = 0;
		}
		var t = 0.5;
		var t1 = t;
		Ex *= t1;
		Ey *= t1;
		Ez *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t2 = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t2 * t2) {
					var t3 = t2 * (1.0 / Math.sqrt(ls));
					Jx *= t3;
					Jy *= t3;
				}
				var t4 = this.b1.imass;
				this.b1.posx -= Jx * t4;
				this.b1.posy -= Jy * t4;
				var t5 = this.b2.imass;
				this.b2.posx += Jx * t5;
				this.b2.posy += Jy * t5;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				Ez = this.b2.rot - this.b1.rot - this.phase;
				var t6 = 0.5;
				var t7 = t6;
				Ex *= t7;
				Ey *= t7;
				Ez *= t6;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kd = 0.0;
		var Kc = 0.0;
		var Ke = 0.0;
		var Kf = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kd = m;
		Kc = 0;
		Ke = 0;
		Kf = 0;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kd += X * r1x;
			Kc += -Y;
			Ke += X;
			Kf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X1 = r2x * this.b2.sinertia;
			var Y1 = r2y * this.b2.sinertia;
			Ka += Y1 * r2y;
			Kb += -Y1 * r2x;
			Kd += X1 * r2x;
			Kc += -Y1;
			Ke += X1;
			Kf += this.b2.sinertia;
		}
		Jx = -Ex;
		Jy = -Ey;
		Jz = -Ez;
		var t8 = 6;
		var ls1 = Jx * Jx + Jy * Jy;
		if(ls1 > t8 * t8) {
			var t9 = t8 * (1.0 / Math.sqrt(ls1));
			Jx *= t9;
			Jy *= t9;
		}
		zpp_$nape_util_ZPP_$Math.clamp(Jz,-0.25,0.25);
		var det = Ka * (Kd * Kf - Ke * Ke) + Kb * (Kc * Ke - Kb * Kf) + Kc * (Kb * Ke - Kc * Kd);
		if(det != det) Jx = Jy = Jz = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kd != 0) Jy /= Kd; else Jy = 0;
			if(Kf != 0) Jz /= Kf; else Jz = 0;
		} else {
			det = 1 / det;
			var B = Ke * Kc - Kb * Kf;
			var C = Kb * Ke - Kc * Kd;
			var E = Kb * Kc - Ka * Ke;
			var X2 = det * (Jx * (Kd * Kf - Ke * Ke) + Jy * B + Jz * C);
			var Y2 = det * (Jx * B + Jy * (Ka * Kf - Kc * Kc) + Jz * E);
			Jz = det * (Jx * C + Jy * E + Jz * (Ka * Kd - Kb * Kb));
			Jx = X2;
			Jy = Y2;
		}
		var t10 = this.b1.imass;
		this.b1.posx -= Jx * t10;
		this.b1.posy -= Jy * t10;
		var t11 = this.b2.imass;
		this.b2.posx += Jx * t11;
		this.b2.posy += Jy * t11;
		this.b1.delta_rot(-(Jy * r1x - Jx * r1y + Jz) * this.b1.iinertia);
		this.b2.delta_rot((Jy * r2x - Jx * r2y + Jz) * this.b2.iinertia);
		return false;
	}
	,draw: function(g) {
		var me = this.outer_zn;
		var a1 = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a1 == null) me.zpp_inner_zn.setup_a1();
			$r = me.zpp_inner_zn.wrap_a1;
			return $r;
		}(this)));
		var a2 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).localPointToWorld((function($this) {
			var $r;
			if(me.zpp_inner_zn.wrap_a2 == null) me.zpp_inner_zn.setup_a2();
			$r = me.zpp_inner_zn.wrap_a2;
			return $r;
		}(this)));
		if(!this.stiff) {
			var n = a2.sub(a1);
			var nl = Math.sqrt((function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)));
			if(nl != 0) g.drawSpring(a1,a2,16711935);
			n.dispose();
			var minrad = 10;
			var delrad = 5 / Math.PI / 2;
			if((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer) != (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_space().get_world()) {
				var max;
				max = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - me.zpp_inner_zn.phase;
				var min;
				min = (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot;
				if(min > max) {
					var t = min;
					min = max;
					max = t;
				}
				zpp_$nape_constraint_ZPP_$AngleDraw.drawSpiralSpring(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),min,max,minrad + (min - min) * delrad,minrad + (max - min) * delrad,16711808);
				zpp_$nape_constraint_ZPP_$AngleDraw.indicator(g,(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).get_position(),(me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot,minrad + ((me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot - min) * delrad,16711808);
			}
			if((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer) != (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_space().get_world()) {
				var max1;
				max1 = me.zpp_inner_zn.phase + (me.zpp_inner_zn.b1 == null?null:me.zpp_inner_zn.b1.outer).zpp_inner.rot;
				var min1;
				min1 = (me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot;
				if(min1 > max1) {
					var t1 = min1;
					min1 = max1;
					max1 = t1;
				}
				zpp_$nape_constraint_ZPP_$AngleDraw.drawSpiralSpring(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),min1,max1,minrad + (min1 - min1) * delrad,minrad + (max1 - min1) * delrad,8388863);
				zpp_$nape_constraint_ZPP_$AngleDraw.indicator(g,(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).get_position(),(me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot,minrad + ((me.zpp_inner_zn.b2 == null?null:me.zpp_inner_zn.b2.outer).zpp_inner.rot - min1) * delrad,8388863);
			}
		}
		g.drawFilledCircle(a1,2,255);
		g.drawFilledCircle(a2,2,16711680);
		a1.dispose();
		a2.dispose();
	}
	,__class__: zpp_$nape_constraint_ZPP_$WeldJoint
});
var zpp_$nape_dynamics_ZPP_$Arbiter = function() {
	this.sensorarb = null;
	this.fluidarb = null;
	this.colarb = null;
	this.type = 0;
	this.pair = null;
	this.ws2 = null;
	this.ws1 = null;
	this.b2 = null;
	this.b1 = null;
	this.invalidated = false;
	this.immState = 0;
	this.fresh = false;
	this.continuous = false;
	this.presentable = false;
	this.intchange = false;
	this.present = 0;
	this.sleeping = false;
	this.cleared = false;
	this.active = false;
	this.endGenerated = 0;
	this.sleep_stamp = 0;
	this.up_stamp = 0;
	this.stamp = 0;
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.outer = null;
};
$hxClasses["zpp_nape.dynamics.ZPP_Arbiter"] = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$Arbiter.__name__ = ["zpp_nape","dynamics","ZPP_Arbiter"];
zpp_$nape_dynamics_ZPP_$Arbiter.prototype = {
	outer: null
	,wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = true;
			if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				this.colarb.outer_zn = new nape_dynamics_CollisionArbiter();
				this.outer = this.colarb.outer_zn;
			} else if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
				this.fluidarb.outer_zn = new nape_dynamics_FluidArbiter();
				this.outer = this.fluidarb.outer_zn;
			} else this.outer = new nape_dynamics_Arbiter();
			this.outer.zpp_inner = this;
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
		}
		return this.outer;
	}
	,inactiveme: function() {
		return !this.active;
	}
	,hnext: null
	,id: null
	,di: null
	,stamp: null
	,up_stamp: null
	,sleep_stamp: null
	,endGenerated: null
	,active: null
	,cleared: null
	,sleeping: null
	,present: null
	,intchange: null
	,presentable: null
	,continuous: null
	,fresh: null
	,immState: null
	,acting: function() {
		return this.active && (this.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0;
	}
	,invalidated: null
	,b1: null
	,b2: null
	,ws1: null
	,ws2: null
	,pair: null
	,swap_features: function() {
		var t = this.b1;
		this.b1 = this.b2;
		this.b2 = t;
		var t1 = this.ws1;
		this.ws1 = this.ws2;
		this.ws2 = t1;
		var t2 = this.colarb.s1;
		this.colarb.s1 = this.colarb.s2;
		this.colarb.s2 = t2;
	}
	,type: null
	,colarb: null
	,fluidarb: null
	,sensorarb: null
	,lazyRetire: function(s,b) {
		this.cleared = true;
		if(b == null || this.b2 == b) this.b1.arbiters.inlined_try_remove(this);
		if(b == null || this.b1 == b) this.b2.arbiters.inlined_try_remove(this);
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
		this.active = false;
		s.f_arbiters.modified = true;
	}
	,sup_assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
	}
	,sup_retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$Arbiter
};
var zpp_$nape_dynamics_ZPP_$SensorArbiter = function() {
	this.next = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR;
	this.sensorarb = this;
};
$hxClasses["zpp_nape.dynamics.ZPP_SensorArbiter"] = zpp_$nape_dynamics_ZPP_$SensorArbiter;
zpp_$nape_dynamics_ZPP_$SensorArbiter.__name__ = ["zpp_nape","dynamics","ZPP_SensorArbiter"];
zpp_$nape_dynamics_ZPP_$SensorArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$SensorArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	next: null
	,alloc: function() {
	}
	,free: function() {
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		var o = this;
		o.next = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = o;
	}
	,makemutable: function() {
	}
	,makeimmutable: function() {
	}
	,__class__: zpp_$nape_dynamics_ZPP_$SensorArbiter
});
var zpp_$nape_dynamics_ZPP_$FluidArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.wrap_position = null;
	this.buoyy = 0.0;
	this.buoyx = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.lgamma = 0.0;
	this.dampy = 0.0;
	this.dampx = 0.0;
	this.vMassc = 0.0;
	this.vMassb = 0.0;
	this.vMassa = 0.0;
	this.agamma = 0.0;
	this.adamp = 0.0;
	this.wMass = 0.0;
	this.nodrag = false;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
	this.overlap = 0.0;
	this.centroidy = 0.0;
	this.centroidx = 0.0;
	this.next = null;
	this.outer_zn = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.FLUID;
	this.fluidarb = this;
	this.buoyx = 0;
	this.buoyy = 0;
	this.pre_dt = -1.0;
};
$hxClasses["zpp_nape.dynamics.ZPP_FluidArbiter"] = zpp_$nape_dynamics_ZPP_$FluidArbiter;
zpp_$nape_dynamics_ZPP_$FluidArbiter.__name__ = ["zpp_nape","dynamics","ZPP_FluidArbiter"];
zpp_$nape_dynamics_ZPP_$FluidArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$FluidArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	outer_zn: null
	,next: null
	,alloc: function() {
	}
	,free: function() {
	}
	,centroidx: null
	,centroidy: null
	,overlap: null
	,r1x: null
	,r1y: null
	,r2x: null
	,r2y: null
	,nodrag: null
	,wMass: null
	,adamp: null
	,agamma: null
	,vMassa: null
	,vMassb: null
	,vMassc: null
	,dampx: null
	,dampy: null
	,lgamma: null
	,nx: null
	,ny: null
	,buoyx: null
	,buoyy: null
	,position_validate: function() {
		this.wrap_position.zpp_inner.x = this.centroidx;
		this.wrap_position.zpp_inner.y = this.centroidy;
	}
	,position_invalidate: function(x) {
		this.centroidx = x.x;
		this.centroidy = x.y;
	}
	,wrap_position: null
	,getposition: function() {
		this.wrap_position = nape_geom_Vec2.get(null,null,null);
		this.wrap_position.zpp_inner._inuse = true;
		this.wrap_position.zpp_inner._immutable = !this.mutable;
		this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
		this.wrap_position.zpp_inner._invalidate = $bind(this,this.position_invalidate);
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
		this.nx = 0;
		this.ny = 1;
		this.dampx = 0;
		this.dampy = 0;
		this.adamp = 0.0;
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		var o = this;
		o.next = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = o;
		this.pre_dt = -1.0;
	}
	,mutable: null
	,makemutable: function() {
		this.mutable = true;
		if(this.wrap_position != null) this.wrap_position.zpp_inner._immutable = false;
	}
	,makeimmutable: function() {
		this.mutable = false;
		if(this.wrap_position != null) this.wrap_position.zpp_inner._immutable = true;
	}
	,inject: function(area,cx,cy) {
		this.overlap = area;
		this.centroidx = cx;
		this.centroidy = cy;
	}
	,pre_dt: null
	,preStep: function(s,dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.r1x = this.centroidx - this.b1.posx;
		this.r1y = this.centroidy - this.b1.posy;
		this.r2x = this.centroidx - this.b2.posx;
		this.r2y = this.centroidy - this.b2.posy;
		var g1x = 0.0;
		var g1y = 0.0;
		if(this.ws1.fluidEnabled && this.ws1.fluidProperties.wrap_gravity != null) {
			g1x = this.ws1.fluidProperties.gravityx;
			g1y = this.ws1.fluidProperties.gravityy;
		} else {
			g1x = s.gravityx;
			g1y = s.gravityy;
		}
		var g2x = 0.0;
		var g2y = 0.0;
		if(this.ws2.fluidEnabled && this.ws2.fluidProperties.wrap_gravity != null) {
			g2x = this.ws2.fluidProperties.gravityx;
			g2y = this.ws2.fluidProperties.gravityy;
		} else {
			g2x = s.gravityx;
			g2y = s.gravityy;
		}
		var buoyx = 0;
		var buoyy = 0;
		if(this.ws1.fluidEnabled && this.ws2.fluidEnabled) {
			var mass1 = this.overlap * this.ws1.fluidProperties.density;
			var mass2 = this.overlap * this.ws2.fluidProperties.density;
			if(mass1 > mass2) {
				var t = mass1 + mass2;
				buoyx -= g1x * t;
				buoyy -= g1y * t;
			} else if(mass1 < mass2) {
				var t1 = mass1 + mass2;
				buoyx += g2x * t1;
				buoyy += g2y * t1;
			} else {
				var gx = 0.0;
				var gy = 0.0;
				gx = g1x + g2x;
				gy = g1y + g2y;
				var t2 = 0.5;
				gx *= t2;
				gy *= t2;
				if(this.ws1.worldCOMx * gx + this.ws1.worldCOMy * gy > this.ws2.worldCOMx * gx + this.ws2.worldCOMy * gy) {
					var t3 = mass1 + mass2;
					buoyx -= gx * t3;
					buoyy -= gy * t3;
				} else {
					var t4 = mass1 + mass2;
					buoyx += gx * t4;
					buoyy += gy * t4;
				}
			}
		} else if(this.ws1.fluidEnabled) {
			var mass = this.overlap * this.ws1.fluidProperties.density;
			var t5 = mass;
			buoyx -= g1x * t5;
			buoyy -= g1y * t5;
		} else if(this.ws2.fluidEnabled) {
			var mass3 = this.overlap * this.ws2.fluidProperties.density;
			var t6 = mass3;
			buoyx += g2x * t6;
			buoyy += g2y * t6;
		}
		var t7 = dt;
		buoyx *= t7;
		buoyy *= t7;
		this.buoyx = buoyx;
		this.buoyy = buoyy;
		if(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var t8 = this.b1.imass;
			this.b1.velx -= buoyx * t8;
			this.b1.vely -= buoyy * t8;
			this.b1.angvel -= (buoyy * this.r1x - buoyx * this.r1y) * this.b1.iinertia;
		}
		if(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var t9 = this.b2.imass;
			this.b2.velx += buoyx * t9;
			this.b2.vely += buoyy * t9;
			this.b2.angvel += (buoyy * this.r2x - buoyx * this.r2y) * this.b2.iinertia;
		}
		if((!this.ws1.fluidEnabled || this.ws1.fluidProperties.viscosity == 0) && (!this.ws2.fluidEnabled || this.ws2.fluidProperties.viscosity == 0)) {
			this.nodrag = true;
			this.dampx = 0;
			this.dampy = 0;
			this.adamp = 0;
		} else {
			this.nodrag = false;
			var tViscosity = 0.0;
			if(this.ws1.fluidEnabled) {
				this.ws2.validate_angDrag();
				tViscosity += this.ws1.fluidProperties.viscosity * this.ws2.angDrag * this.overlap / this.ws2.area;
			}
			if(this.ws2.fluidEnabled) {
				this.ws1.validate_angDrag();
				tViscosity += this.ws2.fluidProperties.viscosity * this.ws1.angDrag * this.overlap / this.ws1.area;
			}
			if(tViscosity != 0) {
				var iSum = this.b1.sinertia + this.b2.sinertia;
				if(iSum != 0) this.wMass = 1 / iSum; else this.wMass = 0.0;
				var biasCoef;
				tViscosity *= 0.0004;
				var omega = 2 * Math.PI * tViscosity;
				this.agamma = 1 / (dt * omega * (2 + omega * dt));
				var ig = 1 / (1 + this.agamma);
				biasCoef = dt * omega * omega * this.agamma;
				this.agamma *= ig;
				this.wMass *= ig;
			} else {
				this.wMass = 0.0;
				this.agamma = 0.0;
			}
			var vrnx = this.b2.velx + this.b2.kinvelx - this.r2y * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.r1y * (this.b2.angvel + this.b2.kinangvel));
			var vrny = this.b2.vely + this.b2.kinvely + this.r2x * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.r1x * (this.b1.angvel + this.b1.kinangvel));
			if(vrnx * vrnx + vrny * vrny < nape_Config.epsilon * nape_Config.epsilon) {
			} else {
				var d = vrnx * vrnx + vrny * vrny;
				var imag = 1.0 / Math.sqrt(d);
				var t10 = imag;
				vrnx *= t10;
				vrny *= t10;
				this.nx = vrnx;
				this.ny = vrny;
			}
			var tViscosity1 = 0.0;
			if(this.ws1.fluidEnabled) {
				var f = -this.ws1.fluidProperties.viscosity * this.overlap / this.ws2.area;
				if(this.ws2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) tViscosity1 -= f * this.ws2.circle.radius * nape_Config.fluidLinearDrag / (2 * this.ws2.circle.radius * Math.PI); else {
					var poly = this.ws2.polygon;
					var bord = 0.0;
					var acc = 0.0;
					var cx_ite = poly.edges.head;
					while(cx_ite != null) {
						var ex = cx_ite.elt;
						bord += ex.length;
						var fact = f * ex.length * (ex.gnormx * this.nx + ex.gnormy * this.ny);
						if(fact > 0) fact = fact *= -nape_Config.fluidVacuumDrag;
						acc -= fact * 0.5 * nape_Config.fluidLinearDrag;
						cx_ite = cx_ite.next;
					}
					tViscosity1 += acc / bord;
				}
			}
			if(this.ws2.fluidEnabled) {
				var f1 = -this.ws2.fluidProperties.viscosity * this.overlap / this.ws1.area;
				if(this.ws1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) tViscosity1 -= f1 * this.ws1.circle.radius * nape_Config.fluidLinearDrag / (2 * this.ws1.circle.radius * Math.PI); else {
					var poly1 = this.ws1.polygon;
					var bord1 = 0.0;
					var acc1 = 0.0;
					var cx_ite1 = poly1.edges.head;
					while(cx_ite1 != null) {
						var ex1 = cx_ite1.elt;
						bord1 += ex1.length;
						var fact1 = f1 * ex1.length * (ex1.gnormx * this.nx + ex1.gnormy * this.ny);
						if(fact1 > 0) fact1 = fact1 *= -nape_Config.fluidVacuumDrag;
						acc1 -= fact1 * 0.5 * nape_Config.fluidLinearDrag;
						cx_ite1 = cx_ite1.next;
					}
					tViscosity1 += acc1 / bord1;
				}
			}
			if(tViscosity1 != 0) {
				var m = this.b1.smass + this.b2.smass;
				var Ka = 0.0;
				var Kb = 0.0;
				var Kc = 0.0;
				Ka = m;
				Kb = 0;
				Kc = m;
				if(this.b1.sinertia != 0) {
					var X = this.r1x * this.b1.sinertia;
					var Y = this.r1y * this.b1.sinertia;
					Ka += Y * this.r1y;
					Kb += -Y * this.r1x;
					Kc += X * this.r1x;
				}
				if(this.b2.sinertia != 0) {
					var X1 = this.r2x * this.b2.sinertia;
					var Y1 = this.r2y * this.b2.sinertia;
					Ka += Y1 * this.r2y;
					Kb += -Y1 * this.r2x;
					Kc += X1 * this.r2x;
				}
				var det = Ka * Kc - Kb * Kb;
				if(det != det) {
					Ka = Kb = Kc = 0;
					3;
				} else if(det == 0) {
					var flag = 0;
					if(Ka != 0) Ka = 1 / Ka; else {
						Ka = 0;
						flag |= 1;
					}
					if(Kc != 0) Kc = 1 / Kc; else {
						Kc = 0;
						flag |= 2;
					}
					Kb = 0;
					flag;
				} else {
					det = 1 / det;
					var t11 = Kc * det;
					Kc = Ka * det;
					Ka = t11;
					Kb *= -det;
					0;
				}
				this.vMassa = Ka;
				this.vMassb = Kb;
				this.vMassc = Kc;
				var biasCoef1;
				var X2;
				var omega1 = 2 * Math.PI * tViscosity1;
				this.lgamma = 1 / (dt * omega1 * (2 + omega1 * dt));
				var ig1 = 1 / (1 + this.lgamma);
				biasCoef1 = dt * omega1 * omega1 * this.lgamma;
				this.lgamma *= ig1;
				X2 = ig1;
				this.vMassa *= X2;
				this.vMassb *= X2;
				this.vMassc *= X2;
			} else {
				this.vMassa = 0;
				this.vMassb = 0;
				this.vMassc = 0;
				this.lgamma = 0.0;
			}
		}
		var t12 = dtratio;
		this.dampx *= t12;
		this.dampy *= t12;
		this.adamp *= dtratio;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.dampx * t;
		this.b1.vely -= this.dampy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.dampx * t1;
		this.b2.vely += this.dampy * t1;
		this.b1.angvel -= this.b1.iinertia * (this.dampy * this.r1x - this.dampx * this.r1y);
		this.b2.angvel += this.b2.iinertia * (this.dampy * this.r2x - this.dampx * this.r2y);
		this.b1.angvel -= this.adamp * this.b1.iinertia;
		this.b2.angvel += this.adamp * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		if(!this.nodrag) {
			var w1 = this.b1.angvel + this.b1.kinangvel;
			var w2 = this.b2.angvel + this.b2.kinangvel;
			var jx = this.b1.velx + this.b1.kinvelx - this.r1y * w1 - (this.b2.velx + this.b2.kinvelx - this.r2y * w2);
			var jy = this.b1.vely + this.b1.kinvely + this.r1x * w1 - (this.b2.vely + this.b2.kinvely + this.r2x * w2);
			var t = this.vMassa * jx + this.vMassb * jy;
			jy = this.vMassb * jx + this.vMassc * jy;
			jx = t;
			var t1 = this.lgamma;
			jx -= this.dampx * t1;
			jy -= this.dampy * t1;
			var t2 = 1.0;
			this.dampx += jx * t2;
			this.dampy += jy * t2;
			var t3 = this.b1.imass;
			this.b1.velx -= jx * t3;
			this.b1.vely -= jy * t3;
			var t4 = this.b2.imass;
			this.b2.velx += jx * t4;
			this.b2.vely += jy * t4;
			this.b1.angvel -= this.b1.iinertia * (jy * this.r1x - jx * this.r1y);
			this.b2.angvel += this.b2.iinertia * (jy * this.r2x - jx * this.r2y);
			var j_damp = (w1 - w2) * this.wMass - this.adamp * this.agamma;
			this.adamp += j_damp;
			this.b1.angvel -= j_damp * this.b1.iinertia;
			this.b2.angvel += j_damp * this.b2.iinertia;
		}
	}
	,__class__: zpp_$nape_dynamics_ZPP_$FluidArbiter
});
var zpp_$nape_dynamics_ZPP_$ColArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.stat = false;
	this.next = null;
	this.hpc2 = false;
	this.hc2 = false;
	this.oc2 = null;
	this.c2 = null;
	this.oc1 = null;
	this.c1 = null;
	this.__ref_vertex = 0;
	this.__ref_edge2 = null;
	this.__ref_edge1 = null;
	this.biasCoef = 0.0;
	this.rev = false;
	this.radius = 0.0;
	this.lproj = 0.0;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.surfacey = 0.0;
	this.surfacex = 0.0;
	this.k2y = 0.0;
	this.k2x = 0.0;
	this.k1y = 0.0;
	this.k1x = 0.0;
	this.rt2b = 0.0;
	this.rn2b = 0.0;
	this.rt2a = 0.0;
	this.rn2a = 0.0;
	this.rt1b = 0.0;
	this.rn1b = 0.0;
	this.rt1a = 0.0;
	this.rn1a = 0.0;
	this.jrAcc = 0.0;
	this.rMass = 0.0;
	this.Kc = 0.0;
	this.Kb = 0.0;
	this.Ka = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_normal = null;
	this.ny = 0.0;
	this.nx = 0.0;
	this.innards = null;
	this.wrap_contacts = null;
	this.contacts = null;
	this.s2 = null;
	this.s1 = null;
	this.userdef_rfric = false;
	this.userdef_restitution = false;
	this.userdef_stat_fric = false;
	this.userdef_dyn_fric = false;
	this.rfric = 0.0;
	this.restitution = 0.0;
	this.stat_fric = 0.0;
	this.dyn_fric = 0.0;
	this.outer_zn = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.pre_dt = -1.0;
	this.contacts = new zpp_$nape_dynamics_ZPP_$Contact();
	this.innards = new zpp_$nape_dynamics_ZPP_$IContact();
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.COL;
	this.colarb = this;
};
$hxClasses["zpp_nape.dynamics.ZPP_ColArbiter"] = zpp_$nape_dynamics_ZPP_$ColArbiter;
zpp_$nape_dynamics_ZPP_$ColArbiter.__name__ = ["zpp_nape","dynamics","ZPP_ColArbiter"];
zpp_$nape_dynamics_ZPP_$ColArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$ColArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	outer_zn: null
	,dyn_fric: null
	,stat_fric: null
	,restitution: null
	,rfric: null
	,userdef_dyn_fric: null
	,userdef_stat_fric: null
	,userdef_restitution: null
	,userdef_rfric: null
	,s1: null
	,s2: null
	,contacts: null
	,wrap_contacts: null
	,innards: null
	,nx: null
	,ny: null
	,normal_validate: function() {
		if(this.cleared) throw new js__$Boot_HaxeError("Error: Arbiter not currently in use");
		this.wrap_normal.zpp_inner.x = this.nx;
		this.wrap_normal.zpp_inner.y = this.ny;
		if(this.ws1.id > this.ws2.id) {
			this.wrap_normal.zpp_inner.x = -this.wrap_normal.zpp_inner.x;
			this.wrap_normal.zpp_inner.y = -this.wrap_normal.zpp_inner.y;
		}
	}
	,wrap_normal: null
	,getnormal: function() {
		this.wrap_normal = nape_geom_Vec2.get(0,0,null);
		this.wrap_normal.zpp_inner._immutable = true;
		this.wrap_normal.zpp_inner._inuse = true;
		this.wrap_normal.zpp_inner._validate = $bind(this,this.normal_validate);
	}
	,kMassa: null
	,kMassb: null
	,kMassc: null
	,Ka: null
	,Kb: null
	,Kc: null
	,rMass: null
	,jrAcc: null
	,rn1a: null
	,rt1a: null
	,rn1b: null
	,rt1b: null
	,rn2a: null
	,rt2a: null
	,rn2b: null
	,rt2b: null
	,k1x: null
	,k1y: null
	,k2x: null
	,k2y: null
	,surfacex: null
	,surfacey: null
	,ptype: null
	,lnormx: null
	,lnormy: null
	,lproj: null
	,radius: null
	,rev: null
	,biasCoef: null
	,__ref_edge1: null
	,__ref_edge2: null
	,__ref_vertex: null
	,c1: null
	,oc1: null
	,c2: null
	,oc2: null
	,hc2: null
	,hpc2: null
	,next: null
	,alloc: function() {
	}
	,free: function() {
		this.userdef_dyn_fric = false;
		this.userdef_stat_fric = false;
		this.userdef_restitution = false;
		this.userdef_rfric = false;
		this.__ref_edge1 = this.__ref_edge2 = null;
	}
	,stat: null
	,injectContact: function(px,py,nx,ny,dist,hash,posOnly) {
		if(posOnly == null) posOnly = false;
		var c = null;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var cur = cx_ite;
			if(hash == cur.hash) {
				c = cur;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(c == null) {
			if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) c = new zpp_$nape_dynamics_ZPP_$Contact(); else {
				c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
				zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
				c.next = null;
			}
			null;
			var ci = c.inner;
			ci.jnAcc = ci.jtAcc = 0;
			c.hash = hash;
			c.fresh = true;
			c.arbiter = this;
			this.jrAcc = 0;
			this.contacts.inlined_add(c);
			this.innards.add(ci);
		} else c.fresh = false;
		c.px = px;
		c.py = py;
		this.nx = nx;
		this.ny = ny;
		c.dist = dist;
		c.stamp = this.stamp;
		c.posOnly = posOnly;
		return c;
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
		this.s1 = s1;
		this.s2 = s2;
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= -Infinity || this.s2.material.elasticity <= -Infinity) this.restitution = 0; else if(this.s1.material.elasticity >= Infinity || this.s2.material.elasticity >= Infinity) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
		}
		if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
	,calcProperties: function() {
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= -Infinity || this.s2.material.elasticity <= -Infinity) this.restitution = 0; else if(this.s1.material.elasticity >= Infinity || this.s2.material.elasticity >= Infinity) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
		}
		if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
	,validate_props: function() {
		if(this.invalidated) {
			this.invalidated = false;
			if(!this.userdef_restitution) {
				if(this.s1.material.elasticity <= -Infinity || this.s2.material.elasticity <= -Infinity) this.restitution = 0; else if(this.s1.material.elasticity >= Infinity || this.s2.material.elasticity >= Infinity) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
				if(this.restitution < 0) this.restitution = 0;
				if(this.restitution > 1) this.restitution = 1;
			}
			if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
			if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
			if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
		}
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		while(!(this.contacts.next == null)) {
			var o = this.contacts.inlined_pop_unsafe();
			o.arbiter = null;
			o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
			zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
			this.innards.inlined_pop();
		}
		var o1 = this;
		o1.userdef_dyn_fric = false;
		o1.userdef_stat_fric = false;
		o1.userdef_restitution = false;
		o1.userdef_rfric = false;
		o1.__ref_edge1 = o1.__ref_edge2 = null;
		o1.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = o1;
		this.pre_dt = -1.0;
	}
	,mutable: null
	,makemutable: function() {
		this.mutable = true;
		if(this.wrap_normal != null) this.wrap_normal.zpp_inner._immutable = false;
		if(this.wrap_contacts != null) this.wrap_contacts.zpp_inner.immutable = false;
	}
	,makeimmutable: function() {
		this.mutable = false;
		if(this.wrap_normal != null) this.wrap_normal.zpp_inner._immutable = true;
		if(this.wrap_contacts != null) this.wrap_contacts.zpp_inner.immutable = true;
	}
	,contacts_adder: function(x) {
		return false;
	}
	,contacts_subber: function(x) {
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c == x.zpp_inner) {
				this.contacts.erase(pre);
				this.innards.erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
				zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
				break;
			}
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
	}
	,setupcontacts: function() {
		this.wrap_contacts = zpp_$nape_util_ZPP_$ContactList.get(this.contacts,true);
		this.wrap_contacts.zpp_inner.immutable = !this.mutable;
		this.wrap_contacts.zpp_inner.adder = $bind(this,this.contacts_adder);
		this.wrap_contacts.zpp_inner.dontremove = true;
		this.wrap_contacts.zpp_inner.subber = $bind(this,this.contacts_subber);
	}
	,cleanupContacts: function() {
		var fst = true;
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		this.hc2 = false;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c.stamp + nape_Config.arbiterExpirationDelay < this.stamp) {
				cx_ite = this.contacts.inlined_erase(pre);
				cx_itei = this.innards.inlined_erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
				zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
				continue;
			}
			var ci = c.inner;
			var pact = c.active;
			c.active = c.stamp == this.stamp;
			if(c.active) {
				if(fst) {
					fst = false;
					this.c1 = ci;
					this.oc1 = c;
				} else {
					this.hc2 = true;
					this.c2 = ci;
					this.oc2 = c;
				}
			}
			if(pact != c.active) this.contacts.modified = true;
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
		if(this.hc2) {
			this.hpc2 = true;
			if(this.oc1.posOnly) {
				var tmp = this.c1;
				this.c1 = this.c2;
				this.c2 = tmp;
				var tmp2 = this.oc1;
				this.oc1 = this.oc2;
				this.oc2 = tmp2;
				this.hc2 = false;
			} else if(this.oc2.posOnly) this.hc2 = false;
			if(this.oc1.posOnly) fst = true;
		} else this.hpc2 = false;
		return fst;
	}
	,pre_dt: null
	,preStep: function(dt) {
		if(this.invalidated) {
			this.invalidated = false;
			if(!this.userdef_restitution) {
				if(this.s1.material.elasticity <= -Infinity || this.s2.material.elasticity <= -Infinity) this.restitution = 0; else if(this.s1.material.elasticity >= Infinity || this.s2.material.elasticity >= Infinity) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
				if(this.restitution < 0) this.restitution = 0;
				if(this.restitution > 1) this.restitution = 1;
			}
			if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
			if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
			if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
		}
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		var mass_sum = this.b1.smass + this.b2.smass;
		this.hc2 = false;
		var fst = true;
		var statType = !(this.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) || !(this.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC);
		var bias;
		if(statType) {
			if(this.continuous) bias = nape_Config.contactContinuousStaticBiasCoef; else bias = nape_Config.contactStaticBiasCoef;
		} else if(this.continuous) bias = nape_Config.contactContinuousBiasCoef; else bias = nape_Config.contactBiasCoef;
		this.biasCoef = bias;
		this.continuous = false;
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c.stamp + nape_Config.arbiterExpirationDelay < this.stamp) {
				cx_ite = this.contacts.inlined_erase(pre);
				cx_itei = this.innards.inlined_erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
				zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
				continue;
			}
			var ci = c.inner;
			var pact = c.active;
			c.active = c.stamp == this.stamp;
			if(c.active) {
				if(fst) {
					fst = false;
					this.c1 = ci;
					this.oc1 = c;
				} else {
					this.hc2 = true;
					this.c2 = ci;
					this.oc2 = c;
				}
				ci.r2x = c.px - this.b2.posx;
				ci.r2y = c.py - this.b2.posy;
				ci.r1x = c.px - this.b1.posx;
				ci.r1y = c.py - this.b1.posy;
				var kt = mass_sum + this.b2.sinertia * zpp_$nape_util_ZPP_$Math.sqr(ci.r2x * this.nx + ci.r2y * this.ny);
				kt += this.b1.sinertia * zpp_$nape_util_ZPP_$Math.sqr(ci.r1x * this.nx + ci.r1y * this.ny);
				if(kt < nape_Config.epsilon * nape_Config.epsilon) ci.tMass = 0; else ci.tMass = 1.0 / kt;
				var nt = mass_sum + this.b2.sinertia * zpp_$nape_util_ZPP_$Math.sqr(this.ny * ci.r2x - this.nx * ci.r2y);
				nt += this.b1.sinertia * zpp_$nape_util_ZPP_$Math.sqr(this.ny * ci.r1x - this.nx * ci.r1y);
				if(nt < nape_Config.epsilon * nape_Config.epsilon) ci.nMass = 0; else ci.nMass = 1.0 / nt;
				var vrx = 0.0;
				var vry = 0.0;
				var ang = this.b2.angvel + this.b2.kinangvel;
				vrx = this.b2.velx + this.b2.kinvelx - ci.r2y * ang;
				vry = this.b2.vely + this.b2.kinvely + ci.r2x * ang;
				ang = this.b1.angvel + this.b1.kinangvel;
				vrx -= this.b1.velx + this.b1.kinvelx - ci.r1y * ang;
				vry -= this.b1.vely + this.b1.kinvely + ci.r1x * ang;
				var vdot = this.nx * vrx + this.ny * vry;
				c.elasticity = this.restitution;
				ci.bounce = vdot * c.elasticity;
				if(ci.bounce > -nape_Config.elasticThreshold) ci.bounce = 0;
				vdot = vry * this.nx - vrx * this.ny;
				var thr = nape_Config.staticFrictionThreshold;
				if(vdot * vdot > thr * thr) ci.friction = this.dyn_fric; else ci.friction = this.stat_fric;
				ci.jnAcc *= dtratio;
				ci.jtAcc *= dtratio;
			}
			if(pact != c.active) this.contacts.modified = true;
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
		if(this.hc2) {
			this.hpc2 = true;
			if(this.oc1.posOnly) {
				var tmp = this.c1;
				this.c1 = this.c2;
				this.c2 = tmp;
				var tmp2 = this.oc1;
				this.oc1 = this.oc2;
				this.oc2 = tmp2;
				this.hc2 = false;
			} else if(this.oc2.posOnly) this.hc2 = false;
			if(this.oc1.posOnly) fst = true;
		} else this.hpc2 = false;
		this.jrAcc *= dtratio;
		if(!fst) {
			this.rn1a = this.ny * this.c1.r1x - this.nx * this.c1.r1y;
			this.rt1a = this.c1.r1x * this.nx + this.c1.r1y * this.ny;
			this.rn1b = this.ny * this.c1.r2x - this.nx * this.c1.r2y;
			this.rt1b = this.c1.r2x * this.nx + this.c1.r2y * this.ny;
			this.k1x = this.b2.kinvelx - this.c1.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c1.r1y * this.b1.kinangvel);
			this.k1y = this.b2.kinvely + this.c1.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c1.r1x * this.b1.kinangvel);
		}
		if(this.hc2) {
			this.rn2a = this.ny * this.c2.r1x - this.nx * this.c2.r1y;
			this.rt2a = this.c2.r1x * this.nx + this.c2.r1y * this.ny;
			this.rn2b = this.ny * this.c2.r2x - this.nx * this.c2.r2y;
			this.rt2b = this.c2.r2x * this.nx + this.c2.r2y * this.ny;
			this.k2x = this.b2.kinvelx - this.c2.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c2.r1y * this.b1.kinangvel);
			this.k2y = this.b2.kinvely + this.c2.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c2.r1x * this.b1.kinangvel);
			this.kMassa = mass_sum + this.b1.sinertia * this.rn1a * this.rn1a + this.b2.sinertia * this.rn1b * this.rn1b;
			this.kMassb = mass_sum + this.b1.sinertia * this.rn1a * this.rn2a + this.b2.sinertia * this.rn1b * this.rn2b;
			this.kMassc = mass_sum + this.b1.sinertia * this.rn2a * this.rn2a + this.b2.sinertia * this.rn2b * this.rn2b;
			var norm = this.kMassa * this.kMassa + 2 * this.kMassb * this.kMassb + this.kMassc * this.kMassc;
			if(norm < nape_Config.illConditionedThreshold * (this.kMassa * this.kMassc - this.kMassb * this.kMassb)) {
				this.Ka = this.kMassa;
				this.Kb = this.kMassb;
				this.Kc = this.kMassc;
				var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
				if(det != det) {
					this.kMassa = this.kMassb = this.kMassc = 0;
					3;
				} else if(det == 0) {
					var flag = 0;
					if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
						this.kMassa = 0;
						flag |= 1;
					}
					if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
						this.kMassc = 0;
						flag |= 2;
					}
					this.kMassb = 0;
					flag;
				} else {
					det = 1 / det;
					var t = this.kMassc * det;
					this.kMassc = this.kMassa * det;
					this.kMassa = t;
					this.kMassb *= -det;
					0;
				}
			} else {
				this.hc2 = false;
				if(this.oc2.dist < this.oc1.dist) {
					var t1 = this.c1;
					this.c1 = this.c2;
					this.c2 = t1;
				}
				this.oc2.active = false;
				this.contacts.modified = true;
			}
		}
		this.surfacex = this.b2.svelx;
		this.surfacey = this.b2.svely;
		var t2 = 1.0;
		this.surfacex += this.b1.svelx * t2;
		this.surfacey += this.b1.svely * t2;
		this.surfacex = -this.surfacex;
		this.surfacey = -this.surfacey;
		this.rMass = this.b1.sinertia + this.b2.sinertia;
		if(this.rMass != 0) this.rMass = 1 / this.rMass;
		return fst;
	}
	,warmStart: function() {
		var jx = this.nx * this.c1.jnAcc - this.ny * this.c1.jtAcc;
		var jy = this.ny * this.c1.jnAcc + this.nx * this.c1.jtAcc;
		var t = this.b1.imass;
		this.b1.velx -= jx * t;
		this.b1.vely -= jy * t;
		this.b1.angvel -= this.b1.iinertia * (jy * this.c1.r1x - jx * this.c1.r1y);
		var t1 = this.b2.imass;
		this.b2.velx += jx * t1;
		this.b2.vely += jy * t1;
		this.b2.angvel += this.b2.iinertia * (jy * this.c1.r2x - jx * this.c1.r2y);
		if(this.hc2) {
			var jx1 = this.nx * this.c2.jnAcc - this.ny * this.c2.jtAcc;
			var jy1 = this.ny * this.c2.jnAcc + this.nx * this.c2.jtAcc;
			var t2 = this.b1.imass;
			this.b1.velx -= jx1 * t2;
			this.b1.vely -= jy1 * t2;
			this.b1.angvel -= this.b1.iinertia * (jy1 * this.c2.r1x - jx1 * this.c2.r1y);
			var t3 = this.b2.imass;
			this.b2.velx += jx1 * t3;
			this.b2.vely += jy1 * t3;
			this.b2.angvel += this.b2.iinertia * (jy1 * this.c2.r2x - jx1 * this.c2.r2y);
		}
		this.b2.angvel += this.jrAcc * this.b2.iinertia;
		this.b1.angvel -= this.jrAcc * this.b1.iinertia;
	}
	,applyImpulseVel: function() {
		var jx;
		var jy;
		var j;
		var jMax;
		var jOld;
		var cjAcc;
		var v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		var v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		j = (v1y * this.nx - v1x * this.ny + this.surfacex) * this.c1.tMass;
		jMax = this.c1.friction * this.c1.jnAcc;
		jOld = this.c1.jtAcc;
		cjAcc = jOld - j;
		if(cjAcc > jMax) cjAcc = jMax; else if(cjAcc < -jMax) cjAcc = -jMax;
		j = cjAcc - jOld;
		this.c1.jtAcc = cjAcc;
		jx = -this.ny * j;
		jy = this.nx * j;
		this.b2.velx += jx * this.b2.imass;
		this.b2.vely += jy * this.b2.imass;
		this.b1.velx -= jx * this.b1.imass;
		this.b1.vely -= jy * this.b1.imass;
		this.b2.angvel += this.rt1b * j * this.b2.iinertia;
		this.b1.angvel -= this.rt1a * j * this.b1.iinertia;
		if(this.hc2) {
			var v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
			var v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
			j = (v2y * this.nx - v2x * this.ny + this.surfacex) * this.c2.tMass;
			jMax = this.c2.friction * this.c2.jnAcc;
			jOld = this.c2.jtAcc;
			cjAcc = jOld - j;
			if(cjAcc > jMax) cjAcc = jMax; else if(cjAcc < -jMax) cjAcc = -jMax;
			j = cjAcc - jOld;
			this.c2.jtAcc = cjAcc;
			jx = -this.ny * j;
			jy = this.nx * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += this.rt2b * j * this.b2.iinertia;
			this.b1.angvel -= this.rt2a * j * this.b1.iinertia;
			v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
			v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
			v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
			v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
			var ax = this.c1.jnAcc;
			var ay = this.c2.jnAcc;
			var jnx = v1x * this.nx + v1y * this.ny + this.surfacey + this.c1.bounce - (this.Ka * ax + this.Kb * ay);
			var jny = v2x * this.nx + v2y * this.ny + this.surfacey + this.c2.bounce - (this.Kb * ax + this.Kc * ay);
			var xx = -(this.kMassa * jnx + this.kMassb * jny);
			var xy = -(this.kMassb * jnx + this.kMassc * jny);
			if(xx >= 0 && xy >= 0) {
				jnx = xx - ax;
				jny = xy - ay;
				this.c1.jnAcc = xx;
				this.c2.jnAcc = xy;
			} else {
				xx = -this.c1.nMass * jnx;
				if(xx >= 0 && this.Kb * xx + jny >= 0) {
					jnx = xx - ax;
					jny = -ay;
					this.c1.jnAcc = xx;
					this.c2.jnAcc = 0;
				} else {
					xy = -this.c2.nMass * jny;
					if(xy >= 0 && this.Kb * xy + jnx >= 0) {
						jnx = -ax;
						jny = xy - ay;
						this.c1.jnAcc = 0;
						this.c2.jnAcc = xy;
					} else if(jnx >= 0 && jny >= 0) {
						jnx = -ax;
						jny = -ay;
						this.c1.jnAcc = this.c2.jnAcc = 0;
					} else {
						jnx = 0;
						jny = 0;
					}
				}
			}
			j = jnx + jny;
			jx = this.nx * j;
			jy = this.ny * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += (this.rn1b * jnx + this.rn2b * jny) * this.b2.iinertia;
			this.b1.angvel -= (this.rn1a * jnx + this.rn2a * jny) * this.b1.iinertia;
		} else {
			if(this.radius != 0.0) {
				var dw = this.b2.angvel - this.b1.angvel;
				j = dw * this.rMass;
				jMax = this.rfric * this.c1.jnAcc;
				jOld = this.jrAcc;
				this.jrAcc -= j;
				if(this.jrAcc > jMax) this.jrAcc = jMax; else if(this.jrAcc < -jMax) this.jrAcc = -jMax;
				j = this.jrAcc - jOld;
				this.b2.angvel += j * this.b2.iinertia;
				this.b1.angvel -= j * this.b1.iinertia;
			}
			v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
			v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
			j = (this.c1.bounce + (this.nx * v1x + this.ny * v1y) + this.surfacey) * this.c1.nMass;
			jOld = this.c1.jnAcc;
			cjAcc = jOld - j;
			if(cjAcc < 0.0) cjAcc = 0.0;
			j = cjAcc - jOld;
			this.c1.jnAcc = cjAcc;
			jx = this.nx * j;
			jy = this.ny * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += this.rn1b * j * this.b2.iinertia;
			this.b1.angvel -= this.rn1a * j * this.b1.iinertia;
		}
	}
	,applyImpulsePos: function() {
		if(this.ptype == 2) {
			var c = this.c1;
			var dx = 0.0;
			var dy = 0.0;
			var r2x = 0.0;
			var r2y = 0.0;
			r2x = this.b2.axisy * c.lr2x - this.b2.axisx * c.lr2y;
			r2y = c.lr2x * this.b2.axisx + c.lr2y * this.b2.axisy;
			var t = 1.0;
			r2x += this.b2.posx * t;
			r2y += this.b2.posy * t;
			var r1x = 0.0;
			var r1y = 0.0;
			r1x = this.b1.axisy * c.lr1x - this.b1.axisx * c.lr1y;
			r1y = c.lr1x * this.b1.axisx + c.lr1y * this.b1.axisy;
			var t1 = 1.0;
			r1x += this.b1.posx * t1;
			r1y += this.b1.posy * t1;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = r2x - r1x;
			dy1 = r2y - r1y;
			var dl = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			var r = this.radius - nape_Config.collisionSlop;
			var err = dl - r;
			if(dx1 * this.nx + dy1 * this.ny < 0) {
				dx1 = -dx1;
				dy1 = -dy1;
				err -= this.radius;
			}
			if(err < 0) {
				if(dl < nape_Config.epsilon) {
					if(this.b1.smass != 0.0) this.b1.posx += nape_Config.epsilon * 10; else this.b2.posx += nape_Config.epsilon * 10;
				} else {
					var t2 = 1.0 / dl;
					dx1 *= t2;
					dy1 *= t2;
					var px = 0.5 * (r1x + r2x);
					var py = 0.5 * (r1y + r2y);
					var pen = dl - r;
					r1x = px - this.b1.posx;
					r1y = py - this.b1.posy;
					r2x = px - this.b2.posx;
					r2y = py - this.b2.posy;
					var rn1 = dy1 * r1x - dx1 * r1y;
					var rn2 = dy1 * r2x - dx1 * r2y;
					var K = this.b2.smass + rn2 * rn2 * this.b2.sinertia + this.b1.smass + rn1 * rn1 * this.b1.sinertia;
					if(K != 0) {
						var jn = -this.biasCoef * pen / K;
						var Jx = 0.0;
						var Jy = 0.0;
						var t3 = jn;
						Jx = dx1 * t3;
						Jy = dy1 * t3;
						var t4 = this.b1.imass;
						this.b1.posx -= Jx * t4;
						this.b1.posy -= Jy * t4;
						this.b1.delta_rot(-rn1 * this.b1.iinertia * jn);
						var t5 = this.b2.imass;
						this.b2.posx += Jx * t5;
						this.b2.posy += Jy * t5;
						this.b2.delta_rot(rn2 * this.b2.iinertia * jn);
					}
				}
			}
		} else {
			var gnormx = 0.0;
			var gnormy = 0.0;
			var gproj;
			var clip1x = 0.0;
			var clip1y = 0.0;
			var clip2x = 0;
			var clip2y = 0;
			if(this.ptype == 0) {
				gnormx = this.b1.axisy * this.lnormx - this.b1.axisx * this.lnormy;
				gnormy = this.lnormx * this.b1.axisx + this.lnormy * this.b1.axisy;
				gproj = this.lproj + (gnormx * this.b1.posx + gnormy * this.b1.posy);
				clip1x = this.b2.axisy * this.c1.lr1x - this.b2.axisx * this.c1.lr1y;
				clip1y = this.c1.lr1x * this.b2.axisx + this.c1.lr1y * this.b2.axisy;
				var t6 = 1.0;
				clip1x += this.b2.posx * t6;
				clip1y += this.b2.posy * t6;
				if(this.hpc2) {
					clip2x = this.b2.axisy * this.c2.lr1x - this.b2.axisx * this.c2.lr1y;
					clip2y = this.c2.lr1x * this.b2.axisx + this.c2.lr1y * this.b2.axisy;
					var t7 = 1.0;
					clip2x += this.b2.posx * t7;
					clip2y += this.b2.posy * t7;
				}
			} else {
				gnormx = this.b2.axisy * this.lnormx - this.b2.axisx * this.lnormy;
				gnormy = this.lnormx * this.b2.axisx + this.lnormy * this.b2.axisy;
				gproj = this.lproj + (gnormx * this.b2.posx + gnormy * this.b2.posy);
				clip1x = this.b1.axisy * this.c1.lr1x - this.b1.axisx * this.c1.lr1y;
				clip1y = this.c1.lr1x * this.b1.axisx + this.c1.lr1y * this.b1.axisy;
				var t8 = 1.0;
				clip1x += this.b1.posx * t8;
				clip1y += this.b1.posy * t8;
				if(this.hpc2) {
					clip2x = this.b1.axisy * this.c2.lr1x - this.b1.axisx * this.c2.lr1y;
					clip2y = this.c2.lr1x * this.b1.axisx + this.c2.lr1y * this.b1.axisy;
					var t9 = 1.0;
					clip2x += this.b1.posx * t9;
					clip2y += this.b1.posy * t9;
				}
			}
			var err1 = clip1x * gnormx + clip1y * gnormy - gproj - this.radius;
			err1 += nape_Config.collisionSlop;
			var err2 = 0.0;
			if(this.hpc2) {
				err2 = clip2x * gnormx + clip2y * gnormy - gproj - this.radius;
				err2 += nape_Config.collisionSlop;
			}
			if(err1 < 0 || err2 < 0) {
				if(this.rev) {
					gnormx = -gnormx;
					gnormy = -gnormy;
				}
				var c1r1x = 0.0;
				var c1r1y = 0.0;
				c1r1x = clip1x - this.b1.posx;
				c1r1y = clip1y - this.b1.posy;
				var c1r2x = 0.0;
				var c1r2y = 0.0;
				c1r2x = clip1x - this.b2.posx;
				c1r2y = clip1y - this.b2.posy;
				var c2r1x = 0;
				var c2r1y = 0;
				var c2r2x = 0;
				var c2r2y = 0;
				if(this.hpc2) {
					c2r1x = clip2x - this.b1.posx;
					c2r1y = clip2y - this.b1.posy;
					c2r2x = clip2x - this.b2.posx;
					c2r2y = clip2y - this.b2.posy;
					var rn1a = gnormy * c1r1x - gnormx * c1r1y;
					var rn1b = gnormy * c1r2x - gnormx * c1r2y;
					var rn2a = gnormy * c2r1x - gnormx * c2r1y;
					var rn2b = gnormy * c2r2x - gnormx * c2r2y;
					var mass_sum = this.b1.smass + this.b2.smass;
					this.kMassa = mass_sum + this.b1.sinertia * rn1a * rn1a + this.b2.sinertia * rn1b * rn1b;
					this.kMassb = mass_sum + this.b1.sinertia * rn1a * rn2a + this.b2.sinertia * rn1b * rn2b;
					this.kMassc = mass_sum + this.b1.sinertia * rn2a * rn2a + this.b2.sinertia * rn2b * rn2b;
					var Ka = 0.0;
					var Kb = 0.0;
					var Kc = 0.0;
					Ka = this.kMassa;
					Kb = this.kMassb;
					Kc = this.kMassc;
					var bx = err1 * this.biasCoef;
					var by = err2 * this.biasCoef;
					do {
						var xx = 0.0;
						var xy = 0.0;
						xx = bx;
						xy = by;
						xx = -xx;
						xy = -xy;
						var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
						if(det != det) xx = xy = 0; else if(det == 0) {
							if(this.kMassa != 0) xx /= this.kMassa; else xx = 0;
							if(this.kMassc != 0) xy /= this.kMassc; else xy = 0;
						} else {
							det = 1 / det;
							var t10 = det * (this.kMassc * xx - this.kMassb * xy);
							xy = det * (this.kMassa * xy - this.kMassb * xx);
							xx = t10;
						}
						if(xx >= 0 && xy >= 0) {
							var t11 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t11;
							this.b1.posy -= gnormy * t11;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t12 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t12;
							this.b2.posy += gnormy * t12;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
						xx = -bx / Ka;
						xy = 0;
						var vn2 = Kb * xx + by;
						if(xx >= 0 && vn2 >= 0) {
							var t13 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t13;
							this.b1.posy -= gnormy * t13;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t14 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t14;
							this.b2.posy += gnormy * t14;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
						xx = 0;
						xy = -by / Kc;
						var vn1 = Kb * xy + bx;
						if(xy >= 0 && vn1 >= 0) {
							var t15 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t15;
							this.b1.posy -= gnormy * t15;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t16 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t16;
							this.b2.posy += gnormy * t16;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
					} while(false);
				} else {
					var rn11 = gnormy * c1r1x - gnormx * c1r1y;
					var rn21 = gnormy * c1r2x - gnormx * c1r2y;
					var K1 = this.b2.smass + rn21 * rn21 * this.b2.sinertia + this.b1.smass + rn11 * rn11 * this.b1.sinertia;
					if(K1 != 0) {
						var jn1 = -this.biasCoef * err1 / K1;
						var Jx1 = 0.0;
						var Jy1 = 0.0;
						var t17 = jn1;
						Jx1 = gnormx * t17;
						Jy1 = gnormy * t17;
						var t18 = this.b1.imass;
						this.b1.posx -= Jx1 * t18;
						this.b1.posy -= Jy1 * t18;
						this.b1.delta_rot(-rn11 * this.b1.iinertia * jn1);
						var t19 = this.b2.imass;
						this.b2.posx += Jx1 * t19;
						this.b2.posy += Jy1 * t19;
						this.b2.delta_rot(rn21 * this.b2.iinertia * jn1);
					}
				}
			}
		}
	}
	,__class__: zpp_$nape_dynamics_ZPP_$ColArbiter
});
var zpp_$nape_dynamics_ZPP_$Contact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.elasticity = 0.0;
	this.dist = 0.0;
	this.fresh = false;
	this.hash = 0;
	this.stamp = 0;
	this.posOnly = false;
	this.active = false;
	this.inner = null;
	this.arbiter = null;
	this.wrap_position = null;
	this.py = 0.0;
	this.px = 0.0;
	this.outer = null;
	this.inner = new zpp_$nape_dynamics_ZPP_$IContact();
};
$hxClasses["zpp_nape.dynamics.ZPP_Contact"] = zpp_$nape_dynamics_ZPP_$Contact;
zpp_$nape_dynamics_ZPP_$Contact.__name__ = ["zpp_nape","dynamics","ZPP_Contact"];
zpp_$nape_dynamics_ZPP_$Contact.prototype = {
	outer: null
	,wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Contact.internal = true;
			this.outer = new nape_dynamics_Contact();
			zpp_$nape_dynamics_ZPP_$Contact.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,px: null
	,py: null
	,position_validate: function() {
		this.wrap_position.zpp_inner.x = this.px;
		this.wrap_position.zpp_inner.y = this.py;
	}
	,wrap_position: null
	,getposition: function() {
		var me = this;
		this.wrap_position = nape_geom_Vec2.get(null,null,null);
		this.wrap_position.zpp_inner._inuse = true;
		this.wrap_position.zpp_inner._immutable = true;
		this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
	}
	,inactiveme: function() {
		return !(this.active && this.arbiter != null && !(!this.arbiter.active));
	}
	,arbiter: null
	,inner: null
	,active: null
	,posOnly: null
	,stamp: null
	,hash: null
	,fresh: null
	,dist: null
	,elasticity: null
	,free: function() {
		this.arbiter = null;
	}
	,alloc: function() {
	}
	,next: null
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,_inuse: null
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$Contact
};
var zpp_$nape_dynamics_ZPP_$IContact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.lr2y = 0.0;
	this.lr2x = 0.0;
	this.lr1y = 0.0;
	this.lr1x = 0.0;
	this.jtAcc = 0.0;
	this.jnAcc = 0.0;
	this.friction = 0.0;
	this.bounce = 0.0;
	this.tMass = 0.0;
	this.nMass = 0.0;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
};
$hxClasses["zpp_nape.dynamics.ZPP_IContact"] = zpp_$nape_dynamics_ZPP_$IContact;
zpp_$nape_dynamics_ZPP_$IContact.__name__ = ["zpp_nape","dynamics","ZPP_IContact"];
zpp_$nape_dynamics_ZPP_$IContact.prototype = {
	r1x: null
	,r1y: null
	,r2x: null
	,r2y: null
	,nMass: null
	,tMass: null
	,bounce: null
	,friction: null
	,jnAcc: null
	,jtAcc: null
	,lr1x: null
	,lr1y: null
	,lr2x: null
	,lr2y: null
	,next: null
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,_inuse: null
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$IContact
};
var zpp_$nape_dynamics_ZPP_$InteractionFilter = function() {
	this.fluidMask = 0;
	this.fluidGroup = 0;
	this.sensorMask = 0;
	this.sensorGroup = 0;
	this.collisionMask = 0;
	this.collisionGroup = 0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.collisionGroup = this.sensorGroup = this.fluidGroup = 1;
	this.collisionMask = this.sensorMask = this.fluidMask = -1;
};
$hxClasses["zpp_nape.dynamics.ZPP_InteractionFilter"] = zpp_$nape_dynamics_ZPP_$InteractionFilter;
zpp_$nape_dynamics_ZPP_$InteractionFilter.__name__ = ["zpp_nape","dynamics","ZPP_InteractionFilter"];
zpp_$nape_dynamics_ZPP_$InteractionFilter.prototype = {
	next: null
	,userData: null
	,outer: null
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_dynamics_InteractionFilter();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,shapes: null
	,wrap_shapes: null
	,feature_cons: function() {
		this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,copy: function() {
		var ret;
		if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) ret = new zpp_$nape_dynamics_ZPP_$InteractionFilter(); else {
			ret = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.collisionGroup = this.collisionGroup;
		ret.collisionMask = this.collisionMask;
		ret.sensorGroup = this.sensorGroup;
		ret.sensorMask = this.sensorMask;
		ret.fluidGroup = this.fluidGroup;
		ret.fluidMask = this.fluidMask;
		return ret;
	}
	,collisionGroup: null
	,collisionMask: null
	,shouldCollide: function(x) {
		return (this.collisionMask & x.collisionGroup) != 0 && (x.collisionMask & this.collisionGroup) != 0;
	}
	,sensorGroup: null
	,sensorMask: null
	,shouldSense: function(x) {
		return (this.sensorMask & x.sensorGroup) != 0 && (x.sensorMask & this.sensorGroup) != 0;
	}
	,fluidGroup: null
	,fluidMask: null
	,shouldFlow: function(x) {
		return (this.fluidMask & x.fluidGroup) != 0 && (x.fluidMask & this.fluidGroup) != 0;
	}
	,invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_filter();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_dynamics_ZPP_$InteractionFilter
};
var zpp_$nape_dynamics_ZPP_$InteractionGroup = function() {
	this.depth = 0;
	this.wrap_interactors = null;
	this.interactors = null;
	this.wrap_groups = null;
	this.groups = null;
	this.group = null;
	this.ignore = false;
	this.outer = null;
	this.depth = 0;
	this.groups = new zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
};
$hxClasses["zpp_nape.dynamics.ZPP_InteractionGroup"] = zpp_$nape_dynamics_ZPP_$InteractionGroup;
zpp_$nape_dynamics_ZPP_$InteractionGroup.__name__ = ["zpp_nape","dynamics","ZPP_InteractionGroup"];
zpp_$nape_dynamics_ZPP_$InteractionGroup.prototype = {
	outer: null
	,ignore: null
	,group: null
	,setGroup: function(group) {
		if(this.group != group) {
			if(this.group != null) {
				this.group.groups.remove(this);
				this.depth = 0;
				this.group.invalidate(true);
			}
			this.group = group;
			if(group != null) {
				group.groups.add(this);
				this.depth = group.depth + 1;
				group.invalidate(true);
			} else this.invalidate(true);
		}
	}
	,groups: null
	,wrap_groups: null
	,interactors: null
	,wrap_interactors: null
	,depth: null
	,invalidate: function(force) {
		if(force == null) force = false;
		if(!(force || this.ignore)) return;
		var cx_ite = this.interactors.head;
		while(cx_ite != null) {
			var b = cx_ite.elt;
			if(b.ibody != null) b.ibody.wake(); else if(b.ishape != null) b.ishape.body.wake(); else b.icompound.wake();
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.groups.head;
		while(cx_ite1 != null) {
			var g = cx_ite1.elt;
			g.invalidate(force);
			cx_ite1 = cx_ite1.next;
		}
	}
	,addGroup: function(group) {
		this.groups.add(group);
		group.depth = this.depth + 1;
	}
	,remGroup: function(group) {
		this.groups.remove(group);
		group.depth = 0;
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remInteractor: function(intx,flag) {
		if(flag == null) flag = -1;
		this.interactors.remove(intx);
	}
	,__class__: zpp_$nape_dynamics_ZPP_$InteractionGroup
};
var zpp_$nape_dynamics_ZPP_$SpaceArbiterList = function() {
	this.at_index_3 = 0;
	this.at_index_2 = 0;
	this.at_index_1 = 0;
	this.at_index_0 = 0;
	this.ite_3 = null;
	this.ite_2 = null;
	this.ite_1 = null;
	this.ite_0 = null;
	this.lengths = null;
	this.zip_length = false;
	this._length = 0;
	this.space = null;
	nape_dynamics_ArbiterList.call(this);
	this.at_index_0 = 0;
	this.at_index_1 = 0;
	this.at_index_2 = 0;
	this.at_index_3 = 0;
	this.zip_length = true;
	this._length = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		this.lengths.push(0);
	}
};
$hxClasses["zpp_nape.dynamics.ZPP_SpaceArbiterList"] = zpp_$nape_dynamics_ZPP_$SpaceArbiterList;
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.__name__ = ["zpp_nape","dynamics","ZPP_SpaceArbiterList"];
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.__super__ = nape_dynamics_ArbiterList;
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.prototype = $extend(nape_dynamics_ArbiterList.prototype,{
	space: null
	,_length: null
	,zip_length: null
	,zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var ind = 0;
			var len = 0;
			var cx_ite = this.space.c_arbiters_true.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) len++;
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			var len1 = 0;
			var cx_ite1 = this.space.c_arbiters_false.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				if(i1.active) len1++;
				cx_ite1 = cx_ite1.next;
			}
			this.lengths[ind++] = len1;
			this._length += len1;
			var len2 = 0;
			var cx_ite2 = this.space.f_arbiters.head;
			while(cx_ite2 != null) {
				var i2 = cx_ite2.elt;
				if(i2.active) len2++;
				cx_ite2 = cx_ite2.next;
			}
			this.lengths[ind++] = len2;
			this._length += len2;
			var len3 = 0;
			var cx_ite3 = this.space.s_arbiters.head;
			while(cx_ite3 != null) {
				var i3 = cx_ite3.elt;
				if(i3.active) len3++;
				cx_ite3 = cx_ite3.next;
			}
			this.lengths[ind++] = len3;
			this._length += len3;
			this.zip_length = false;
		}
		return this._length;
	}
	,lengths: null
	,ite_0: null
	,ite_1: null
	,ite_2: null
	,ite_3: null
	,at_index_0: null
	,at_index_1: null
	,at_index_2: null
	,at_index_3: null
	,zpp_vm: function() {
		var modified = false;
		if(this.space.c_arbiters_true.modified) {
			modified = true;
			this.space.c_arbiters_true.modified = false;
		}
		if(this.space.c_arbiters_false.modified) {
			modified = true;
			this.space.c_arbiters_false.modified = false;
		}
		if(this.space.f_arbiters.modified) {
			modified = true;
			this.space.f_arbiters.modified = false;
		}
		if(this.space.s_arbiters.modified) {
			modified = true;
			this.space.s_arbiters.modified = false;
		}
		if(modified) {
			this.zip_length = true;
			this._length = 0;
			this.ite_0 = null;
			this.ite_1 = null;
			this.ite_2 = null;
			this.ite_3 = null;
		}
	}
	,push: function(obj) {
		return false;
	}
	,pop: function() {
		return null;
	}
	,unshift: function(obj) {
		return false;
	}
	,shift: function() {
		return null;
	}
	,remove: function(obj) {
		return false;
	}
	,clear: function() {
	}
	,at: function(index) {
		this.zpp_vm();
		var ret = null;
		var accum_length = 0;
		if(ret == null) {
			if(index < accum_length + this.lengths[0]) {
				var offset = index - accum_length;
				if(offset < this.at_index_0 || this.ite_0 == null) {
					this.at_index_0 = 0;
					this.ite_0 = this.space.c_arbiters_true.head;
					while(true) {
						var x = this.ite_0.elt;
						if(x.active) break;
						this.ite_0 = this.ite_0.next;
					}
				}
				while(this.at_index_0 != offset) {
					this.at_index_0++;
					this.ite_0 = this.ite_0.next;
					while(true) {
						var x1 = this.ite_0.elt;
						if(x1.active) break;
						this.ite_0 = this.ite_0.next;
					}
				}
				ret = this.ite_0.elt.wrapper();
			} else accum_length += this.lengths[0];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[1]) {
				var offset1 = index - accum_length;
				if(offset1 < this.at_index_1 || this.ite_1 == null) {
					this.at_index_1 = 0;
					this.ite_1 = this.space.c_arbiters_false.head;
					while(true) {
						var x2 = this.ite_1.elt;
						if(x2.active) break;
						this.ite_1 = this.ite_1.next;
					}
				}
				while(this.at_index_1 != offset1) {
					this.at_index_1++;
					this.ite_1 = this.ite_1.next;
					while(true) {
						var x3 = this.ite_1.elt;
						if(x3.active) break;
						this.ite_1 = this.ite_1.next;
					}
				}
				ret = this.ite_1.elt.wrapper();
			} else accum_length += this.lengths[1];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[2]) {
				var offset2 = index - accum_length;
				if(offset2 < this.at_index_2 || this.ite_2 == null) {
					this.at_index_2 = 0;
					this.ite_2 = this.space.f_arbiters.head;
					while(true) {
						var x4 = this.ite_2.elt;
						if(x4.active) break;
						this.ite_2 = this.ite_2.next;
					}
				}
				while(this.at_index_2 != offset2) {
					this.at_index_2++;
					this.ite_2 = this.ite_2.next;
					while(true) {
						var x5 = this.ite_2.elt;
						if(x5.active) break;
						this.ite_2 = this.ite_2.next;
					}
				}
				ret = this.ite_2.elt.wrapper();
			} else accum_length += this.lengths[2];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[3]) {
				var offset3 = index - accum_length;
				if(offset3 < this.at_index_3 || this.ite_3 == null) {
					this.at_index_3 = 0;
					this.ite_3 = this.space.s_arbiters.head;
					while(true) {
						var x6 = this.ite_3.elt;
						if(x6.active) break;
						this.ite_3 = this.ite_3.next;
					}
				}
				while(this.at_index_3 != offset3) {
					this.at_index_3++;
					this.ite_3 = this.ite_3.next;
					while(true) {
						var x7 = this.ite_3.elt;
						if(x7.active) break;
						this.ite_3 = this.ite_3.next;
					}
				}
				ret = this.ite_3.elt.wrapper();
			} else accum_length += this.lengths[3];
		}
		return ret;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$SpaceArbiterList
});
var zpp_$nape_geom_ZPP_$AABB = function() {
	this.wrap_max = null;
	this.maxy = 0.0;
	this.maxx = 0.0;
	this.wrap_min = null;
	this.miny = 0.0;
	this.minx = 0.0;
	this.next = null;
	this.outer = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
$hxClasses["zpp_nape.geom.ZPP_AABB"] = zpp_$nape_geom_ZPP_$AABB;
zpp_$nape_geom_ZPP_$AABB.__name__ = ["zpp_nape","geom","ZPP_AABB"];
zpp_$nape_geom_ZPP_$AABB.get = function(minx,miny,maxx,maxy) {
	var ret;
	if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$AABB(); else {
		ret = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.minx = minx;
	ret.miny = miny;
	ret.maxx = maxx;
	ret.maxy = maxy;
	return ret;
};
zpp_$nape_geom_ZPP_$AABB.prototype = {
	_invalidate: null
	,_validate: null
	,_immutable: null
	,validate: function() {
		if(this._validate != null) this._validate();
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate(this);
	}
	,outer: null
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_geom_AABB();
			var o = this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o.wrap_min = o.wrap_max = null;
			o._invalidate = null;
			o._validate = null;
			o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,next: null
	,alloc: function() {
	}
	,free: function() {
		if(this.outer != null) {
			this.outer.zpp_inner = null;
			this.outer = null;
		}
		this.wrap_min = this.wrap_max = null;
		this._invalidate = null;
		this._validate = null;
	}
	,copy: function() {
		return zpp_$nape_geom_ZPP_$AABB.get(this.minx,this.miny,this.maxx,this.maxy);
	}
	,width: function() {
		return this.maxx - this.minx;
	}
	,height: function() {
		return this.maxy - this.miny;
	}
	,perimeter: function() {
		return (this.maxx - this.minx + (this.maxy - this.miny)) * 2;
	}
	,minx: null
	,miny: null
	,wrap_min: null
	,getmin: function() {
		if(this.wrap_min == null) {
			this.wrap_min = nape_geom_Vec2.get(this.minx,this.miny,null);
			this.wrap_min.zpp_inner._inuse = true;
			if(this._immutable) this.wrap_min.zpp_inner._immutable = true; else this.wrap_min.zpp_inner._invalidate = $bind(this,this.mod_min);
			this.wrap_min.zpp_inner._validate = $bind(this,this.dom_min);
		}
		return this.wrap_min;
	}
	,dom_min: function() {
		if(this._validate != null) this._validate();
		this.wrap_min.zpp_inner.x = this.minx;
		this.wrap_min.zpp_inner.y = this.miny;
	}
	,mod_min: function(min) {
		if(min.x != this.minx || min.y != this.miny) {
			this.minx = min.x;
			this.miny = min.y;
			if(this._invalidate != null) this._invalidate(this);
		}
	}
	,maxx: null
	,maxy: null
	,wrap_max: null
	,getmax: function() {
		if(this.wrap_max == null) {
			this.wrap_max = nape_geom_Vec2.get(this.maxx,this.maxy,null);
			this.wrap_max.zpp_inner._inuse = true;
			if(this._immutable) this.wrap_max.zpp_inner._immutable = true; else this.wrap_max.zpp_inner._invalidate = $bind(this,this.mod_max);
			this.wrap_max.zpp_inner._validate = $bind(this,this.dom_max);
		}
		return this.wrap_max;
	}
	,dom_max: function() {
		if(this._validate != null) this._validate();
		this.wrap_max.zpp_inner.x = this.maxx;
		this.wrap_max.zpp_inner.y = this.maxy;
	}
	,mod_max: function(max) {
		if(max.x != this.maxx || max.y != this.maxy) {
			this.maxx = max.x;
			this.maxy = max.y;
			if(this._invalidate != null) this._invalidate(this);
		}
	}
	,intersectX: function(x) {
		return !(x.minx > this.maxx || this.minx > x.maxx);
	}
	,intersectY: function(x) {
		return !(x.miny > this.maxy || this.miny > x.maxy);
	}
	,intersect: function(x) {
		return x.miny <= this.maxy && this.miny <= x.maxy && x.minx <= this.maxx && this.minx <= x.maxx;
	}
	,combine: function(x) {
		if(x.minx < this.minx) this.minx = x.minx;
		if(x.maxx > this.maxx) this.maxx = x.maxx;
		if(x.miny < this.miny) this.miny = x.miny;
		if(x.maxy > this.maxy) this.maxy = x.maxy;
	}
	,contains: function(x) {
		return x.minx >= this.minx && x.miny >= this.miny && x.maxx <= this.maxx && x.maxy <= this.maxy;
	}
	,containsPoint: function(v) {
		return v.x >= this.minx && v.x <= this.maxx && v.y >= this.miny && v.y <= this.maxy;
	}
	,setCombine: function(a,b) {
		if(a.minx < b.minx) this.minx = a.minx; else this.minx = b.minx;
		if(a.miny < b.miny) this.miny = a.miny; else this.miny = b.miny;
		if(a.maxx > b.maxx) this.maxx = a.maxx; else this.maxx = b.maxx;
		if(a.maxy > b.maxy) this.maxy = a.maxy; else this.maxy = b.maxy;
	}
	,setExpand: function(a,fatten) {
		this.minx = a.minx - fatten;
		this.miny = a.miny - fatten;
		this.maxx = a.maxx + fatten;
		this.maxy = a.maxy + fatten;
	}
	,setExpandPoint: function(x,y) {
		if(x < this.minx) this.minx = x;
		if(x > this.maxx) this.maxx = x;
		if(y < this.miny) this.miny = y;
		if(y > this.maxy) this.maxy = y;
	}
	,toString: function() {
		return "{ x: " + this.minx + " y: " + this.miny + " w: " + (this.maxx - this.minx) + " h: " + (this.maxy - this.miny) + " }";
	}
	,__class__: zpp_$nape_geom_ZPP_$AABB
};
var zpp_$nape_util_ZNPList_$ZPP_$Vec2 = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Vec2"] = zpp_$nape_util_ZNPList_$ZPP_$Vec2;
zpp_$nape_util_ZNPList_$ZPP_$Vec2.__name__ = ["zpp_nape","util","ZNPList_ZPP_Vec2"];
zpp_$nape_util_ZNPList_$ZPP_$Vec2.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Vec2
};
var zpp_$nape_geom_ZPP_$Collide = function() { };
$hxClasses["zpp_nape.geom.ZPP_Collide"] = zpp_$nape_geom_ZPP_$Collide;
zpp_$nape_geom_ZPP_$Collide.__name__ = ["zpp_nape","geom","ZPP_Collide"];
zpp_$nape_geom_ZPP_$Collide.circleContains = function(c,p) {
	var dx = 0.0;
	var dy = 0.0;
	dx = p.x - c.worldCOMx;
	dy = p.y - c.worldCOMy;
	return dx * dx + dy * dy < c.radius * c.radius;
};
zpp_$nape_geom_ZPP_$Collide.polyContains = function(s,p) {
	var retvar;
	retvar = true;
	var cx_ite = s.edges.head;
	while(cx_ite != null) {
		var a = cx_ite.elt;
		if(a.gnormx * p.x + a.gnormy * p.y <= a.gprojection) {
			cx_ite = cx_ite.next;
			continue;
		} else {
			retvar = false;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
};
zpp_$nape_geom_ZPP_$Collide.shapeContains = function(s,p) {
	if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) return zpp_$nape_geom_ZPP_$Collide.circleContains(s.circle,p); else return zpp_$nape_geom_ZPP_$Collide.polyContains(s.polygon,p);
};
zpp_$nape_geom_ZPP_$Collide.bodyContains = function(b,p) {
	var retvar;
	retvar = false;
	var cx_ite = b.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(zpp_$nape_geom_ZPP_$Collide.shapeContains(s,p)) {
			retvar = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
};
zpp_$nape_geom_ZPP_$Collide.containTest = function(s1,s2) {
	if(s1.aabb.contains(s2.aabb)) if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
		if(s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
			var minDist = s1.circle.radius + -s2.circle.radius;
			var px = 0.0;
			var py = 0.0;
			px = s2.circle.worldCOMx - s1.circle.worldCOMx;
			py = s2.circle.worldCOMy - s1.circle.worldCOMy;
			var distSqr = px * px + py * py;
			return distSqr <= minDist * minDist;
		} else {
			var retvar;
			retvar = true;
			var cx_ite = s2.polygon.gverts.next;
			while(cx_ite != null) {
				var p = cx_ite;
				if((function($this) {
					var $r;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					{
						px1 = p.x - s1.circle.worldCOMx;
						py1 = p.y - s1.circle.worldCOMy;
					}
					var distSqr1 = px1 * px1 + py1 * py1;
					$r = distSqr1 <= minDist1 * minDist1;
					return $r;
				}(this))) {
					cx_ite = cx_ite.next;
					continue;
				} else {
					retvar = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			return retvar;
		}
	} else if(s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
		var retvar1;
		retvar1 = true;
		var cx_ite1 = s1.polygon.edges.head;
		while(cx_ite1 != null) {
			var a = cx_ite1.elt;
			if(a.gnormx * s2.circle.worldCOMx + a.gnormy * s2.circle.worldCOMy + s2.circle.radius <= a.gprojection) {
				cx_ite1 = cx_ite1.next;
				continue;
			} else {
				retvar1 = false;
				break;
			}
			cx_ite1 = cx_ite1.next;
		}
		return retvar1;
	} else {
		var retvar2;
		retvar2 = true;
		var cx_ite2 = s1.polygon.edges.head;
		while(cx_ite2 != null) {
			var a1 = cx_ite2.elt;
			if((function($this) {
				var $r;
				var max = -1e+100;
				{
					var cx_ite3 = s2.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v = cx_ite3;
						var k = a1.gnormx * v.x + a1.gnormy * v.y;
						if(k > max) max = k;
						cx_ite3 = cx_ite3.next;
					}
				}
				$r = max <= a1.gprojection;
				return $r;
			}(this))) {
				cx_ite2 = cx_ite2.next;
				continue;
			} else {
				retvar2 = false;
				break;
			}
			cx_ite2 = cx_ite2.next;
		}
		return retvar2;
	} else return false;
};
zpp_$nape_geom_ZPP_$Collide.contactCollide = function(s1,s2,arb,rev) {
	if(s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
		if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
			var cont = true;
			var max = -1e+100;
			var maxmin = -1e+100;
			var maxi = -1;
			var axis1 = null;
			var axis2 = null;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) min = k;
					if(min - ax.gprojection <= max) break;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min >= 0) {
					cont = false;
					break;
				}
				if(min > max) {
					max = min;
					axis1 = ax;
					maxi = 1;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite2 = s2.polygon.edges.head;
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elt;
					var min1 = 1e100;
					var cx_ite3 = s1.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v1 = cx_ite3;
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) min1 = k1;
						if(min1 - ax1.gprojection <= max) break;
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 >= 0) {
						cont = false;
						break;
					}
					if(min1 > max) {
						max = min1;
						axis2 = ax1;
						maxi = 2;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(!cont) return false; else {
					var q1;
					var q2;
					var ax2;
					var scale;
					if(maxi == 1) {
						q1 = s1.polygon;
						q2 = s2.polygon;
						ax2 = axis1;
						scale = 1.0;
					} else {
						q1 = s2.polygon;
						q2 = s1.polygon;
						ax2 = axis2;
						scale = -1.0;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite4 = q2.edges.head;
					while(cx_ite4 != null) {
						var axis = cx_ite4.elt;
						var k2 = ax2.gnormx * axis.gnormx + ax2.gnormy * axis.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = axis;
						}
						cx_ite4 = cx_ite4.next;
					}
					var c0x = 0.0;
					var c0y = 0.0;
					c0x = ay.gp0.x;
					c0y = ay.gp0.y;
					var c1x = 0.0;
					var c1y = 0.0;
					c1x = ay.gp1.x;
					c1y = ay.gp1.y;
					var dvx = 0.0;
					var dvy = 0.0;
					dvx = c1x - c0x;
					dvy = c1y - c0y;
					var d0 = ax2.gnormy * c0x - ax2.gnormx * c0y;
					var d1 = ax2.gnormy * c1x - ax2.gnormx * c1y;
					var den = 1 / (d1 - d0);
					var t = (-ax2.tp1 - d0) * den;
					if(t > nape_Config.epsilon) {
						var t2 = t;
						c0x += dvx * t2;
						c0y += dvy * t2;
					}
					var t1 = (-ax2.tp0 - d1) * den;
					if(t1 < -nape_Config.epsilon) {
						var t3 = t1;
						c1x += dvx * t3;
						c1y += dvy * t3;
					}
					var nx = 0.0;
					var ny = 0.0;
					var t4 = scale;
					nx = ax2.gnormx * t4;
					ny = ax2.gnormy * t4;
					arb.lnormx = ax2.lnormx;
					arb.lnormy = ax2.lnormy;
					arb.lproj = ax2.lprojection;
					arb.radius = 0;
					arb.rev = rev != (scale == -1);
					if(arb.rev) arb.ptype = 1; else arb.ptype = 0;
					var c0d = c0x * ax2.gnormx + c0y * ax2.gnormy - ax2.gprojection;
					var c1d = c1x * ax2.gnormx + c1y * ax2.gnormy - ax2.gprojection;
					if(c0d > 0 && c1d > 0) return false; else {
						if(rev) {
							nx = -nx;
							ny = -ny;
						}
						var con = arb.injectContact(c0x - ax2.gnormx * c0d * 0.5,c0y - ax2.gnormy * c0d * 0.5,nx,ny,c0d,arb.rev?1:0,c0d > 0);
						var t5 = 1.0;
						c0x -= q2.body.posx * t5;
						c0y -= q2.body.posy * t5;
						con.inner.lr1x = c0x * q2.body.axisy + c0y * q2.body.axisx;
						con.inner.lr1y = c0y * q2.body.axisy - c0x * q2.body.axisx;
						con = arb.injectContact(c1x - ax2.gnormx * c1d * 0.5,c1y - ax2.gnormy * c1d * 0.5,nx,ny,c1d,arb.rev?0:1,c1d > 0);
						var t6 = 1.0;
						c1x -= q2.body.posx * t6;
						c1y -= q2.body.posy * t6;
						con.inner.lr1x = c1x * q2.body.axisy + c1y * q2.body.axisx;
						con.inner.lr1y = c1y * q2.body.axisy - c1x * q2.body.axisx;
						if(maxi == 1) {
							arb.__ref_edge1 = ax2;
							arb.__ref_edge2 = ay;
						} else {
							arb.__ref_edge2 = ax2;
							arb.__ref_edge1 = ay;
						}
						return true;
					}
				}
			} else return false;
		} else {
			var max1 = -1e+100;
			var minmax = -1e+100;
			var cont1 = true;
			var a0 = null;
			var vi = null;
			var vite = s2.polygon.gverts.next;
			var cx_ite5 = s2.polygon.edges.head;
			while(cx_ite5 != null) {
				var a = cx_ite5.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont1 = false;
					break;
				}
				if(dist > max1) {
					max1 = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite5 = cx_ite5.next;
			}
			if(cont1) {
				var v0 = vi;
				var v11;
				if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var co;
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
					var distSqr = px * px + py * py;
					if(distSqr > minDist * minDist) co = null; else if(distSqr < nape_Config.epsilon * nape_Config.epsilon) co = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist,0,null); else {
						var invDist = 1.0 / Math.sqrt(distSqr);
						var dist1;
						if(invDist < nape_Config.epsilon) dist1 = 1e100; else dist1 = 1.0 / invDist;
						var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
						if(rev) co = arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,-px * invDist,-py * invDist,dist1 - minDist,0,null); else co = arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,px * invDist,py * invDist,dist1 - minDist,0,null);
					}
					if(co != null) {
						var con1 = co.inner;
						arb.ptype = 2;
						var vx = 0.0;
						var vy = 0.0;
						vx = v0.x - s2.polygon.body.posx;
						vy = v0.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = -1;
						if(rev) {
							con1.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr2x = s1.circle.localCOMx;
							con1.lr2y = s1.circle.localCOMy;
						} else {
							con1.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr1x = s1.circle.localCOMx;
							con1.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co != null;
				} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
					var co1;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					px1 = v11.x - s1.circle.worldCOMx;
					py1 = v11.y - s1.circle.worldCOMy;
					var distSqr1 = px1 * px1 + py1 * py1;
					if(distSqr1 > minDist1 * minDist1) co1 = null; else if(distSqr1 < nape_Config.epsilon * nape_Config.epsilon) co1 = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist1,0,null); else {
						var invDist1 = 1.0 / Math.sqrt(distSqr1);
						var dist2;
						if(invDist1 < nape_Config.epsilon) dist2 = 1e100; else dist2 = 1.0 / invDist1;
						var df1 = 0.5 + (s1.circle.radius - 0.5 * minDist1) * invDist1;
						if(rev) co1 = arb.injectContact(s1.circle.worldCOMx + px1 * df1,s1.circle.worldCOMy + py1 * df1,-px1 * invDist1,-py1 * invDist1,dist2 - minDist1,0,null); else co1 = arb.injectContact(s1.circle.worldCOMx + px1 * df1,s1.circle.worldCOMy + py1 * df1,px1 * invDist1,py1 * invDist1,dist2 - minDist1,0,null);
					}
					if(co1 != null) {
						var con2 = co1.inner;
						arb.ptype = 2;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = v11.x - s2.polygon.body.posx;
						vy1 = v11.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = 1;
						if(rev) {
							con2.lr1x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr1y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr2x = s1.circle.localCOMx;
							con2.lr2y = s1.circle.localCOMy;
						} else {
							con2.lr2x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr2y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr1x = s1.circle.localCOMx;
							con2.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co1 != null;
				} else {
					var nx1 = 0.0;
					var ny1 = 0.0;
					var t7 = s1.circle.radius + max1 * 0.5;
					nx1 = a0.gnormx * t7;
					ny1 = a0.gnormy * t7;
					var px2 = 0.0;
					var py2 = 0.0;
					px2 = s1.circle.worldCOMx - nx1;
					py2 = s1.circle.worldCOMy - ny1;
					var con3;
					if(rev) con3 = arb.injectContact(px2,py2,a0.gnormx,a0.gnormy,max1,0,null); else con3 = arb.injectContact(px2,py2,-a0.gnormx,-a0.gnormy,max1,0,null);
					if(rev) arb.ptype = 0; else arb.ptype = 1;
					arb.lnormx = a0.lnormx;
					arb.lnormy = a0.lnormy;
					arb.rev = !rev;
					arb.lproj = a0.lprojection;
					arb.radius = s1.circle.radius;
					con3.inner.lr1x = s1.circle.localCOMx;
					con3.inner.lr1y = s1.circle.localCOMy;
					arb.__ref_edge1 = a0;
					arb.__ref_vertex = 0;
					return true;
				}
			} else return false;
		}
	} else {
		var co2;
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px3 = 0.0;
		var py3 = 0.0;
		px3 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py3 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px3 * px3 + py3 * py3;
		if(distSqr2 > minDist2 * minDist2) co2 = null; else if(distSqr2 < nape_Config.epsilon * nape_Config.epsilon) co2 = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist2,0,null); else {
			var invDist2 = 1.0 / Math.sqrt(distSqr2);
			var dist3;
			if(invDist2 < nape_Config.epsilon) dist3 = 1e100; else dist3 = 1.0 / invDist2;
			var df2 = 0.5 + (s1.circle.radius - 0.5 * minDist2) * invDist2;
			if(rev) co2 = arb.injectContact(s1.circle.worldCOMx + px3 * df2,s1.circle.worldCOMy + py3 * df2,-px3 * invDist2,-py3 * invDist2,dist3 - minDist2,0,null); else co2 = arb.injectContact(s1.circle.worldCOMx + px3 * df2,s1.circle.worldCOMy + py3 * df2,px3 * invDist2,py3 * invDist2,dist3 - minDist2,0,null);
		}
		if(co2 != null) {
			var con4 = co2.inner;
			if(rev) {
				con4.lr1x = s2.circle.localCOMx;
				con4.lr1y = s2.circle.localCOMy;
				con4.lr2x = s1.circle.localCOMx;
				con4.lr2y = s1.circle.localCOMy;
			} else {
				con4.lr1x = s1.circle.localCOMx;
				con4.lr1y = s1.circle.localCOMy;
				con4.lr2x = s2.circle.localCOMx;
				con4.lr2y = s2.circle.localCOMy;
			}
			arb.radius = s1.circle.radius + s2.circle.radius;
			arb.ptype = 2;
			return true;
		} else return false;
	}
};
zpp_$nape_geom_ZPP_$Collide.testCollide_safe = function(s1,s2) {
	if(s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
		var t = s1;
		s1 = s2;
		s2 = t;
	}
	return zpp_$nape_geom_ZPP_$Collide.testCollide(s1,s2);
};
zpp_$nape_geom_ZPP_$Collide.testCollide = function(s1,s2) {
	if(s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
		var cont = true;
		var cx_ite = s1.polygon.edges.head;
		while(cx_ite != null) {
			var ax = cx_ite.elt;
			var min = 1e100;
			var cx_ite1 = s2.polygon.gverts.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var k = ax.gnormx * v.x + ax.gnormy * v.y;
				if(k < min) min = k;
				cx_ite1 = cx_ite1.next;
			}
			min -= ax.gprojection;
			if(min > 0) {
				cont = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(cont) {
			var cx_ite2 = s2.polygon.edges.head;
			while(cx_ite2 != null) {
				var ax1 = cx_ite2.elt;
				var min1 = 1e100;
				var cx_ite3 = s1.polygon.gverts.next;
				while(cx_ite3 != null) {
					var v1 = cx_ite3;
					var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
					if(k1 < min1) min1 = k1;
					cx_ite3 = cx_ite3.next;
				}
				min1 -= ax1.gprojection;
				if(min1 > 0) {
					cont = false;
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
			return cont;
		} else return false;
	} else {
		var a0 = null;
		var vi = null;
		var cont1 = true;
		var max = -1e+100;
		var vite = s2.polygon.gverts.next;
		var cx_ite4 = s2.polygon.edges.head;
		while(cx_ite4 != null) {
			var a = cx_ite4.elt;
			var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
			if(dist > 0) {
				cont1 = false;
				break;
			}
			if(dist > max) {
				max = dist;
				a0 = a;
				vi = vite;
			}
			vite = vite.next;
			cx_ite4 = cx_ite4.next;
		}
		if(cont1) {
			var v0 = vi;
			var v11;
			if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
			var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
			if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
				var minDist = s1.circle.radius;
				var px = 0.0;
				var py = 0.0;
				px = v0.x - s1.circle.worldCOMx;
				py = v0.y - s1.circle.worldCOMy;
				var distSqr = px * px + py * py;
				return distSqr <= minDist * minDist;
			} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
				var minDist1 = s1.circle.radius;
				var px1 = 0.0;
				var py1 = 0.0;
				px1 = v11.x - s1.circle.worldCOMx;
				py1 = v11.y - s1.circle.worldCOMy;
				var distSqr1 = px1 * px1 + py1 * py1;
				return distSqr1 <= minDist1 * minDist1;
			} else return true;
		} else return false;
	} else {
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px2 = 0.0;
		var py2 = 0.0;
		px2 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py2 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px2 * px2 + py2 * py2;
		return distSqr2 <= minDist2 * minDist2;
	}
};
zpp_$nape_geom_ZPP_$Collide.flowCollide = function(s1,s2,arb) {
	if(s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
		var out1 = [];
		var out2 = [];
		var cont = true;
		var total = true;
		var cx_ite = s1.polygon.edges.head;
		while(cx_ite != null) {
			var ax = cx_ite.elt;
			var min = 1e100;
			var ind = 0;
			var cx_ite1 = s2.polygon.gverts.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var k = ax.gnormx * v.x + ax.gnormy * v.y;
				if(k < min) min = k;
				if(k >= ax.gprojection + nape_Config.epsilon) {
					out2[ind] = true;
					total = false;
				}
				ind++;
				cx_ite1 = cx_ite1.next;
			}
			min -= ax.gprojection;
			if(min > 0) {
				cont = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(total) {
			s2.polygon.validate_worldCOM();
			arb.overlap = s2.polygon.area;
			arb.centroidx = s2.polygon.worldCOMx;
			arb.centroidy = s2.polygon.worldCOMy;
			null;
			return true;
		} else if(cont) {
			total = true;
			var cx_ite2 = s2.polygon.edges.head;
			while(cx_ite2 != null) {
				var ax1 = cx_ite2.elt;
				var min1 = 1e100;
				var ind1 = 0;
				var cx_ite3 = s1.polygon.gverts.next;
				while(cx_ite3 != null) {
					var v1 = cx_ite3;
					var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
					if(k1 < min1) min1 = k1;
					if(k1 >= ax1.gprojection + nape_Config.epsilon) {
						out1[ind1] = true;
						total = false;
					}
					ind1++;
					cx_ite3 = cx_ite3.next;
				}
				min1 -= ax1.gprojection;
				if(min1 > 0) {
					cont = false;
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
			if(total) {
				s1.polygon.validate_worldCOM();
				arb.overlap = s1.polygon.area;
				arb.centroidx = s1.polygon.worldCOMx;
				arb.centroidy = s1.polygon.worldCOMy;
				null;
				return true;
			} else if(cont) {
				while(!(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null)) {
					var p = zpp_$nape_geom_ZPP_$Collide.flowpoly.pop_unsafe();
					if(!p._inuse) {
						var o = p;
						if(o.outer != null) {
							o.outer.zpp_inner = null;
							o.outer = null;
						}
						o._isimmutable = null;
						o._validate = null;
						o._invalidate = null;
						o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
					}
				}
				var fst_vert = null;
				var poly1 = false;
				var ite1 = s1.polygon.gverts.next;
				var ind11 = 0;
				var ite2 = s2.polygon.gverts.next;
				var ind2 = 0;
				var _g1 = 0;
				var _g = s2.polygon.edgeCnt;
				while(_g1 < _g) {
					var i = _g1++;
					if(!out2[i]) {
						ind2 = i;
						break;
					} else ite2 = ite2.next;
				}
				if(ite2 == null) {
					ite2 = s2.polygon.gverts.next;
					poly1 = true;
					var _g11 = 0;
					var _g2 = s1.polygon.edgeCnt;
					while(_g11 < _g2) {
						var i1 = _g11++;
						if(!out1[i1]) {
							ind11 = i1;
							break;
						} else ite1 = ite1.next;
					}
					if(ite1 == null) ite1 = s1.polygon.gverts.next; else {
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ite1);
						fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
					}
				} else {
					zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ite2);
					fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
				}
				var cnt = 1;
				if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null) {
					var cx_cont = true;
					var cx_itei = s1.polygon.gverts.next;
					var u = cx_itei;
					var cx_itej = cx_itei.next;
					while(cx_itej != null) {
						var v2 = cx_itej;
						var min2 = 2.0;
						var cx_cont1 = true;
						var cx_itei1 = s2.polygon.gverts.next;
						var a = cx_itei1;
						var cx_itej1 = cx_itei1.next;
						while(cx_itej1 != null) {
							var b = cx_itej1;
							var t = 0.0;
							if((function($this) {
								var $r;
								var _sx = 0.0;
								var _sy = 0.0;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx = 0.0;
								var _vy = 0.0;
								{
									_vx = v2.x - u.x;
									_vy = v2.y - u.y;
								}
								var _qx = 0.0;
								var _qy = 0.0;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > nape_Config.epsilon && txx < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > nape_Config.epsilon && sxx < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t < min2) {
									min2 = t;
									ite2 = cx_itei1;
								}
							}
							cx_itei1 = cx_itej1;
							a = b;
							cx_itej1 = cx_itej1.next;
						}
						if(cx_cont1) do {
							cx_itej1 = s2.polygon.gverts.next;
							var b1 = cx_itej1;
							var t1 = 0.0;
							if((function($this) {
								var $r;
								var _sx1 = 0.0;
								var _sy1 = 0.0;
								{
									_sx1 = u.x - a.x;
									_sy1 = u.y - a.y;
								}
								var _vx1 = 0.0;
								var _vy1 = 0.0;
								{
									_vx1 = v2.x - u.x;
									_vy1 = v2.y - u.y;
								}
								var _qx1 = 0.0;
								var _qy1 = 0.0;
								{
									_qx1 = b1.x - a.x;
									_qy1 = b1.y - a.y;
								}
								var den1 = _vy1 * _qx1 - _vx1 * _qy1;
								$r = den1 * den1 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den1 = 1 / den1;
									var txx1 = (_qy1 * _sx1 - _qx1 * _sy1) * den1;
									$r = txx1 > nape_Config.epsilon && txx1 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
										$r = sxx1 > nape_Config.epsilon && sxx1 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t1 = txx1;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t1 < min2) {
									min2 = t1;
									ite2 = cx_itei1;
								}
							}
						} while(false);
						if(min2 != 2.0) {
							var cx = 0.0;
							var cy = 0.0;
							var T = min2;
							cx = u.x + (v2.x - u.x) * T;
							cy = u.y + (v2.y - u.y) * T;
							fst_vert = zpp_$nape_geom_ZPP_$Vec2.get(cx,cy,null);
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							cx_cont = false;
							break;
						}
						cx_itei = cx_itej;
						u = v2;
						cx_itej = cx_itej.next;
					}
					if(cx_cont) do {
						cx_itej = s1.polygon.gverts.next;
						var v3 = cx_itej;
						var min3 = 2.0;
						var cx_cont2 = true;
						var cx_itei2 = s2.polygon.gverts.next;
						var a1 = cx_itei2;
						var cx_itej2 = cx_itei2.next;
						while(cx_itej2 != null) {
							var b2 = cx_itej2;
							var t2 = 0.0;
							if((function($this) {
								var $r;
								var _sx2 = 0.0;
								var _sy2 = 0.0;
								{
									_sx2 = u.x - a1.x;
									_sy2 = u.y - a1.y;
								}
								var _vx2 = 0.0;
								var _vy2 = 0.0;
								{
									_vx2 = v3.x - u.x;
									_vy2 = v3.y - u.y;
								}
								var _qx2 = 0.0;
								var _qy2 = 0.0;
								{
									_qx2 = b2.x - a1.x;
									_qy2 = b2.y - a1.y;
								}
								var den2 = _vy2 * _qx2 - _vx2 * _qy2;
								$r = den2 * den2 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den2 = 1 / den2;
									var txx2 = (_qy2 * _sx2 - _qx2 * _sy2) * den2;
									$r = txx2 > nape_Config.epsilon && txx2 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx2 = (_vy2 * _sx2 - _vx2 * _sy2) * den2;
										$r = sxx2 > nape_Config.epsilon && sxx2 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t2 = txx2;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t2 < min3) {
									min3 = t2;
									ite2 = cx_itei2;
								}
							}
							cx_itei2 = cx_itej2;
							a1 = b2;
							cx_itej2 = cx_itej2.next;
						}
						if(cx_cont2) do {
							cx_itej2 = s2.polygon.gverts.next;
							var b3 = cx_itej2;
							var t3 = 0.0;
							if((function($this) {
								var $r;
								var _sx3 = 0.0;
								var _sy3 = 0.0;
								{
									_sx3 = u.x - a1.x;
									_sy3 = u.y - a1.y;
								}
								var _vx3 = 0.0;
								var _vy3 = 0.0;
								{
									_vx3 = v3.x - u.x;
									_vy3 = v3.y - u.y;
								}
								var _qx3 = 0.0;
								var _qy3 = 0.0;
								{
									_qx3 = b3.x - a1.x;
									_qy3 = b3.y - a1.y;
								}
								var den3 = _vy3 * _qx3 - _vx3 * _qy3;
								$r = den3 * den3 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den3 = 1 / den3;
									var txx3 = (_qy3 * _sx3 - _qx3 * _sy3) * den3;
									$r = txx3 > nape_Config.epsilon && txx3 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx3 = (_vy3 * _sx3 - _vx3 * _sy3) * den3;
										$r = sxx3 > nape_Config.epsilon && sxx3 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t3 = txx3;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t3 < min3) {
									min3 = t3;
									ite2 = cx_itei2;
								}
							}
						} while(false);
						if(min3 != 2.0) {
							var cx1 = 0.0;
							var cy1 = 0.0;
							var T1 = min3;
							cx1 = u.x + (v3.x - u.x) * T1;
							cy1 = u.y + (v3.y - u.y) * T1;
							fst_vert = zpp_$nape_geom_ZPP_$Vec2.get(cx1,cy1,null);
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							break;
						}
					} while(false);
					cnt = 2;
				}
				while(true) if(poly1) {
					ite1 = ite1.next;
					ind11++;
					if(ite1 == null) {
						ite1 = s1.polygon.gverts.next;
						ind11 = 0;
					}
					if(!out1[ind11]) {
						var ex = ite1;
						if(fst_vert != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(ex.x,ex.y,fst_vert.x,fst_vert.y) < nape_Config.epsilon) break;
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ex);
						if(fst_vert == null) fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a2 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						var b4 = ite1;
						var u1 = ite2;
						var itm = ite2.next;
						if(itm == null) itm = s2.polygon.gverts.next;
						var max = -1.0;
						var itmo = null;
						var indo = 0;
						var icnt = 0;
						var beg_ite = itm;
						var cx_ite4 = itm;
						do {
							var v5 = cx_ite4;
							var t4 = 0.0;
							if((function($this) {
								var $r;
								var _sx4 = 0.0;
								var _sy4 = 0.0;
								{
									_sx4 = u1.x - a2.x;
									_sy4 = u1.y - a2.y;
								}
								var _vx4 = 0.0;
								var _vy4 = 0.0;
								{
									_vx4 = v5.x - u1.x;
									_vy4 = v5.y - u1.y;
								}
								var _qx4 = 0.0;
								var _qy4 = 0.0;
								{
									_qx4 = b4.x - a2.x;
									_qy4 = b4.y - a2.y;
								}
								var den4 = _vy4 * _qx4 - _vx4 * _qy4;
								$r = den4 * den4 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den4 = 1 / den4;
									var txx4 = (_qy4 * _sx4 - _qx4 * _sy4) * den4;
									$r = txx4 > nape_Config.epsilon && txx4 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx4 = (_vy4 * _sx4 - _vx4 * _sy4) * den4;
										$r = sxx4 > nape_Config.epsilon && sxx4 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t4 = txx4;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t4 >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t4;
										cx_ite4 = beg_ite;
										break;
									} else max = t4;
								}
							}
							u1 = v5;
							ite2 = cx_ite4;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite4 = cx_ite4.next;
							if(cx_ite4 == null) cx_ite4 = s2.polygon.gverts.next;
						} while(false);
						while(cx_ite4 != beg_ite) {
							var v6 = cx_ite4;
							var t5 = 0.0;
							if((function($this) {
								var $r;
								var _sx5 = 0.0;
								var _sy5 = 0.0;
								{
									_sx5 = u1.x - a2.x;
									_sy5 = u1.y - a2.y;
								}
								var _vx5 = 0.0;
								var _vy5 = 0.0;
								{
									_vx5 = v6.x - u1.x;
									_vy5 = v6.y - u1.y;
								}
								var _qx5 = 0.0;
								var _qy5 = 0.0;
								{
									_qx5 = b4.x - a2.x;
									_qy5 = b4.y - a2.y;
								}
								var den5 = _vy5 * _qx5 - _vx5 * _qy5;
								$r = den5 * den5 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den5 = 1 / den5;
									var txx5 = (_qy5 * _sx5 - _qx5 * _sy5) * den5;
									$r = txx5 > nape_Config.epsilon && txx5 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx5 = (_vy5 * _sx5 - _vx5 * _sy5) * den5;
										$r = sxx5 > nape_Config.epsilon && sxx5 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t5 = txx5;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t5 >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t5;
										cx_ite4 = beg_ite;
										break;
									} else max = t5;
								}
							}
							u1 = v6;
							ite2 = cx_ite4;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite4 = cx_ite4.next;
							if(cx_ite4 == null) cx_ite4 = s2.polygon.gverts.next;
						}
						if(itmo == null) break;
						var u2 = itmo;
						var itm2 = itmo.next;
						if(itm2 == null) itm2 = s2.polygon.gverts.next;
						var v4 = itm2;
						var cx2 = 0.0;
						var cy2 = 0.0;
						var T2 = max;
						cx2 = u2.x + (v4.x - u2.x) * T2;
						cy2 = u2.y + (v4.y - u2.y) * T2;
						if(fst_vert != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(cx2,cy2,fst_vert.x,fst_vert.y) < nape_Config.epsilon) break;
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx2,cy2,null));
						if(fst_vert == null) fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						ite2 = itmo;
						ind2 = indo;
						poly1 = !poly1;
						cnt = 2;
					}
				} else {
					ite2 = ite2.next;
					ind2++;
					if(ite2 == null) {
						ite2 = s2.polygon.gverts.next;
						ind2 = 0;
					}
					if(!out2[ind2]) {
						var ex1 = ite2;
						if(fst_vert != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(ex1.x,ex1.y,fst_vert.x,fst_vert.y) < nape_Config.epsilon) break;
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ex1);
						if(fst_vert == null) fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a3 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						var b5 = ite2;
						var u3 = ite1;
						var itm1 = ite1.next;
						if(itm1 == null) itm1 = s1.polygon.gverts.next;
						var max1 = -1.0;
						var itmo1 = null;
						var indo1 = 0;
						var icnt1 = 0;
						var beg_ite1 = itm1;
						var cx_ite5 = itm1;
						do {
							var v8 = cx_ite5;
							var t6 = 0.0;
							if((function($this) {
								var $r;
								var _sx6 = 0.0;
								var _sy6 = 0.0;
								{
									_sx6 = u3.x - a3.x;
									_sy6 = u3.y - a3.y;
								}
								var _vx6 = 0.0;
								var _vy6 = 0.0;
								{
									_vx6 = v8.x - u3.x;
									_vy6 = v8.y - u3.y;
								}
								var _qx6 = 0.0;
								var _qy6 = 0.0;
								{
									_qx6 = b5.x - a3.x;
									_qy6 = b5.y - a3.y;
								}
								var den6 = _vy6 * _qx6 - _vx6 * _qy6;
								$r = den6 * den6 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den6 = 1 / den6;
									var txx6 = (_qy6 * _sx6 - _qx6 * _sy6) * den6;
									$r = txx6 > nape_Config.epsilon && txx6 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx6 = (_vy6 * _sx6 - _vx6 * _sy6) * den6;
										$r = sxx6 > nape_Config.epsilon && sxx6 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t6 = txx6;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t6 >= max1) {
									itmo1 = ite1;
									indo1 = ind11;
									if(++icnt1 == cnt) {
										max1 = t6;
										cx_ite5 = beg_ite1;
										break;
									} else max1 = t6;
								}
							}
							u3 = v8;
							ite1 = cx_ite5;
							ind11++;
							if(ind11 >= s1.polygon.edgeCnt) ind11 = 0;
							cx_ite5 = cx_ite5.next;
							if(cx_ite5 == null) cx_ite5 = s1.polygon.gverts.next;
						} while(false);
						while(cx_ite5 != beg_ite1) {
							var v9 = cx_ite5;
							var t7 = 0.0;
							if((function($this) {
								var $r;
								var _sx7 = 0.0;
								var _sy7 = 0.0;
								{
									_sx7 = u3.x - a3.x;
									_sy7 = u3.y - a3.y;
								}
								var _vx7 = 0.0;
								var _vy7 = 0.0;
								{
									_vx7 = v9.x - u3.x;
									_vy7 = v9.y - u3.y;
								}
								var _qx7 = 0.0;
								var _qy7 = 0.0;
								{
									_qx7 = b5.x - a3.x;
									_qy7 = b5.y - a3.y;
								}
								var den7 = _vy7 * _qx7 - _vx7 * _qy7;
								$r = den7 * den7 > nape_Config.epsilon * nape_Config.epsilon?(function($this) {
									var $r;
									den7 = 1 / den7;
									var txx7 = (_qy7 * _sx7 - _qx7 * _sy7) * den7;
									$r = txx7 > nape_Config.epsilon && txx7 < 1 - nape_Config.epsilon?(function($this) {
										var $r;
										var sxx7 = (_vy7 * _sx7 - _vx7 * _sy7) * den7;
										$r = sxx7 > nape_Config.epsilon && sxx7 < 1 - nape_Config.epsilon?(function($this) {
											var $r;
											t7 = txx7;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}(this))) {
								if(t7 >= max1) {
									itmo1 = ite1;
									indo1 = ind11;
									if(++icnt1 == cnt) {
										max1 = t7;
										cx_ite5 = beg_ite1;
										break;
									} else max1 = t7;
								}
							}
							u3 = v9;
							ite1 = cx_ite5;
							ind11++;
							if(ind11 >= s1.polygon.edgeCnt) ind11 = 0;
							cx_ite5 = cx_ite5.next;
							if(cx_ite5 == null) cx_ite5 = s1.polygon.gverts.next;
						}
						if(itmo1 == null) break;
						var u4 = itmo1;
						var itm21 = itmo1.next;
						if(itm21 == null) itm21 = s1.polygon.gverts.next;
						var v7 = itm21;
						var cx3 = 0.0;
						var cy3 = 0.0;
						var T3 = max1;
						cx3 = u4.x + (v7.x - u4.x) * T3;
						cy3 = u4.y + (v7.y - u4.y) * T3;
						if(fst_vert != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(cx3,cy3,fst_vert.x,fst_vert.y) < nape_Config.epsilon) break;
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx3,cy3,null));
						if(fst_vert == null) fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						ite1 = itmo1;
						ind11 = indo1;
						poly1 = !poly1;
						cnt = 2;
					}
				}
				if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null && zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next != null && zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.next != null) {
					var area = 0.0;
					var COMx = 0.0;
					var COMy = 0.0;
					COMx = 0;
					COMy = 0;
					area = 0.0;
					var cx_ite6 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
					var u5 = cx_ite6.elt;
					cx_ite6 = cx_ite6.next;
					var v10 = cx_ite6.elt;
					cx_ite6 = cx_ite6.next;
					while(cx_ite6 != null) {
						var w2 = cx_ite6.elt;
						area += v10.x * (w2.y - u5.y);
						var cf = w2.y * v10.x - w2.x * v10.y;
						COMx += (v10.x + w2.x) * cf;
						COMy += (v10.y + w2.y) * cf;
						u5 = v10;
						v10 = w2;
						cx_ite6 = cx_ite6.next;
					}
					cx_ite6 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
					var w = cx_ite6.elt;
					area += v10.x * (w.y - u5.y);
					var cf1 = w.y * v10.x - w.x * v10.y;
					COMx += (v10.x + w.x) * cf1;
					COMy += (v10.y + w.y) * cf1;
					u5 = v10;
					v10 = w;
					cx_ite6 = cx_ite6.next;
					var w1 = cx_ite6.elt;
					area += v10.x * (w1.y - u5.y);
					var cf2 = w1.y * v10.x - w1.x * v10.y;
					COMx += (v10.x + w1.x) * cf2;
					COMy += (v10.y + w1.y) * cf2;
					area *= 0.5;
					var ia = 1 / (6 * area);
					var t8 = ia;
					COMx *= t8;
					COMy *= t8;
					arb.overlap = -area;
					arb.centroidx = COMx;
					arb.centroidy = COMy;
					null;
					return true;
				} else return false;
			} else return false;
		} else return false;
	} else {
		var inte = [];
		var total1 = true;
		var a0 = null;
		var vi = null;
		var max2 = -1e+100;
		var cont1 = true;
		var vite = s2.polygon.gverts.next;
		var ind3 = 0;
		var cx_ite7 = s2.polygon.edges.head;
		while(cx_ite7 != null) {
			var a4 = cx_ite7.elt;
			var dist = a4.gnormx * s1.circle.worldCOMx + a4.gnormy * s1.circle.worldCOMy;
			if(dist > a4.gprojection + s1.circle.radius) {
				cont1 = false;
				break;
			} else if(dist + s1.circle.radius > a4.gprojection + nape_Config.epsilon) {
				total1 = false;
				inte[ind3] = true;
			}
			dist -= a4.gprojection + s1.circle.radius;
			if(dist > max2) {
				max2 = dist;
				a0 = a4;
				vi = vite;
			}
			vite = vite.next;
			ind3++;
			cx_ite7 = cx_ite7.next;
		}
		if(cont1) {
			if(total1) {
				arb.overlap = s1.circle.area;
				arb.centroidx = s1.circle.worldCOMx;
				arb.centroidy = s1.circle.worldCOMy;
				null;
				return true;
			} else {
				var v0 = vi;
				var v11;
				if(vi.next == null) v11 = s2.polygon.gverts.next; else v11 = vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy?(function($this) {
					var $r;
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					{
						px = v0.x - s1.circle.worldCOMx;
						py = v0.y - s1.circle.worldCOMy;
					}
					var distSqr = px * px + py * py;
					$r = distSqr <= minDist * minDist;
					return $r;
				}(this)):dt >= v11.y * a0.gnormx - v11.x * a0.gnormy?(function($this) {
					var $r;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					{
						px1 = v11.x - s1.circle.worldCOMx;
						py1 = v11.y - s1.circle.worldCOMy;
					}
					var distSqr1 = px1 * px1 + py1 * py1;
					$r = distSqr1 <= minDist1 * minDist1;
					return $r;
				}(this)):true) {
					var ins = [];
					var ind4 = 0;
					var total2 = true;
					var vi1 = null;
					var vind = 0;
					var cx_ite8 = s2.polygon.gverts.next;
					while(cx_ite8 != null) {
						var v12 = cx_ite8;
						var dist1 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(v12.x,v12.y,s1.circle.worldCOMx,s1.circle.worldCOMy);
						if(!(ins[ind4] = dist1 <= s1.circle.radius * s1.circle.radius)) total2 = false; else {
							vind = ind4;
							vi1 = cx_ite8;
						}
						ind4++;
						cx_ite8 = cx_ite8.next;
					}
					if(total2) {
						s2.polygon.validate_worldCOM();
						arb.overlap = s2.polygon.area;
						arb.centroidx = s2.polygon.worldCOMx;
						arb.centroidy = s2.polygon.worldCOMy;
						null;
						return true;
					} else {
						while(!(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null)) {
							var p1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.pop_unsafe();
							if(!p1._inuse) {
								var o1 = p1;
								if(o1.outer != null) {
									o1.outer.zpp_inner = null;
									o1.outer = null;
								}
								o1._isimmutable = null;
								o1._validate = null;
								o1._invalidate = null;
								o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
								zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
							}
						}
						zpp_$nape_geom_ZPP_$Collide.flowsegs.clear();
						var fst_vert1 = null;
						var state = 1;
						if(vi1 == null) {
							vi1 = s2.polygon.gverts.next;
							state = 2;
						} else zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert1 = vi1);
						while(state != 0) if(state == 1) {
							vi1 = vi1.next;
							if(vi1 == null) vi1 = s2.polygon.gverts.next;
							vind++;
							if(vind >= s2.polygon.edgeCnt) vind = 0;
							if(ins[vind]) {
								if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,vi1.x,vi1.y) < nape_Config.epsilon) break;
								zpp_$nape_geom_ZPP_$Collide.flowpoly.add(vi1);
							} else {
								var u6 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
								var v13 = vi1;
								var tval;
								var vx = 0.0;
								var vy = 0.0;
								vx = v13.x - u6.x;
								vy = v13.y - u6.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = u6.x - s1.circle.worldCOMx;
								qy = u6.y - s1.circle.worldCOMy;
								var A = vx * vx + vy * vy;
								var B = 2 * (qx * vx + qy * vy);
								var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
								var D = Math.sqrt(B * B - 4 * A * C);
								A = 1 / (2 * A);
								var t9 = (-B - D) * A;
								if(t9 < nape_Config.epsilon) tval = (-B + D) * A; else tval = t9;
								var cx4 = 0.0;
								var cy4 = 0.0;
								var T4 = tval;
								cx4 = u6.x + (v13.x - u6.x) * T4;
								cy4 = u6.y + (v13.y - u6.y) * T4;
								if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx4,cy4) < nape_Config.epsilon) break;
								zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx4,cy4,null));
								state = 2;
							}
						} else if(state == 2) {
							var vi2 = vi1.next;
							if(vi2 == null) vi2 = s2.polygon.gverts.next;
							var u7 = vi1;
							state = 0;
							var beg_ite2 = vi2;
							var cx_ite9 = vi2;
							do {
								var v14 = cx_ite9;
								var vind2 = vind + 1;
								if(vind2 == s2.polygon.edgeCnt) vind2 = 0;
								if(inte[vind]) {
									if(ins[vind2]) {
										var tval1;
										var vx1 = 0.0;
										var vy1 = 0.0;
										vx1 = v14.x - u7.x;
										vy1 = v14.y - u7.y;
										var qx1 = 0.0;
										var qy1 = 0.0;
										qx1 = u7.x - s1.circle.worldCOMx;
										qy1 = u7.y - s1.circle.worldCOMy;
										var A1 = vx1 * vx1 + vy1 * vy1;
										var B1 = 2 * (qx1 * vx1 + qy1 * vy1);
										var C1 = qx1 * qx1 + qy1 * qy1 - s1.circle.radius * s1.circle.radius;
										var D1 = Math.sqrt(B1 * B1 - 4 * A1 * C1);
										A1 = 1 / (2 * A1);
										var t10 = (-B1 - D1) * A1;
										if(t10 < nape_Config.epsilon) tval1 = (-B1 + D1) * A1; else tval1 = t10;
										var cx5 = 0.0;
										var cy5 = 0.0;
										var T5 = tval1;
										cx5 = u7.x + (v14.x - u7.x) * T5;
										cy5 = u7.y + (v14.y - u7.y) * T5;
										if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx5,cy5) < nape_Config.epsilon) {
											state = 0;
											cx_ite9 = beg_ite2;
											break;
										}
										var cp = zpp_$nape_geom_ZPP_$Vec2.get(cx5,cy5,null);
										zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
										zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp);
										zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp);
										state = 1;
										cx_ite9 = beg_ite2;
										break;
									} else {
										var t0 = 0.0;
										var t11 = 0.0;
										var two;
										var vx2 = 0.0;
										var vy2 = 0.0;
										vx2 = v14.x - u7.x;
										vy2 = v14.y - u7.y;
										var qx2 = 0.0;
										var qy2 = 0.0;
										qx2 = u7.x - s1.circle.worldCOMx;
										qy2 = u7.y - s1.circle.worldCOMy;
										var A2 = vx2 * vx2 + vy2 * vy2;
										var B2 = 2 * (qx2 * vx2 + qy2 * vy2);
										var C2 = qx2 * qx2 + qy2 * qy2 - s1.circle.radius * s1.circle.radius;
										var D2 = B2 * B2 - 4 * A2 * C2;
										if(D2 * D2 < nape_Config.epsilon) {
											if(D2 < 0) t0 = 10.0; else t0 = t11 = -B2 / (2 * A2);
											two = false;
										} else {
											D2 = Math.sqrt(D2);
											A2 = 1 / (2 * A2);
											t0 = (-B2 - D2) * A2;
											t11 = (-B2 + D2) * A2;
											two = true;
										}
										if(t0 < 1 - nape_Config.epsilon && t11 > nape_Config.epsilon) {
											var cx6 = 0.0;
											var cy6 = 0.0;
											var T6 = t0;
											cx6 = u7.x + (v14.x - u7.x) * T6;
											cy6 = u7.y + (v14.y - u7.y) * T6;
											if(fst_vert1 != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx6,cy6) < nape_Config.epsilon) {
												state = 0;
												cx_ite9 = beg_ite2;
												break;
											}
											var cp1 = zpp_$nape_geom_ZPP_$Vec2.get(cx6,cy6,null);
											if(!(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null)) {
												zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
												zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp1);
											}
											zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp1);
											if(fst_vert1 == null) fst_vert1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
											if(two) {
												var cx7 = 0.0;
												var cy7 = 0.0;
												var T7 = t11;
												cx7 = u7.x + (v14.x - u7.x) * T7;
												cy7 = u7.y + (v14.y - u7.y) * T7;
												zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx7,cy7,null));
											}
										}
									}
								}
								u7 = v14;
								vi1 = cx_ite9;
								vind = vind2;
								cx_ite9 = cx_ite9.next;
								if(cx_ite9 == null) cx_ite9 = s2.polygon.gverts.next;
							} while(false);
							while(cx_ite9 != beg_ite2) {
								var v15 = cx_ite9;
								var vind21 = vind + 1;
								if(vind21 == s2.polygon.edgeCnt) vind21 = 0;
								if(inte[vind]) {
									if(ins[vind21]) {
										var tval2;
										var vx3 = 0.0;
										var vy3 = 0.0;
										vx3 = v15.x - u7.x;
										vy3 = v15.y - u7.y;
										var qx3 = 0.0;
										var qy3 = 0.0;
										qx3 = u7.x - s1.circle.worldCOMx;
										qy3 = u7.y - s1.circle.worldCOMy;
										var A3 = vx3 * vx3 + vy3 * vy3;
										var B3 = 2 * (qx3 * vx3 + qy3 * vy3);
										var C3 = qx3 * qx3 + qy3 * qy3 - s1.circle.radius * s1.circle.radius;
										var D3 = Math.sqrt(B3 * B3 - 4 * A3 * C3);
										A3 = 1 / (2 * A3);
										var t12 = (-B3 - D3) * A3;
										if(t12 < nape_Config.epsilon) tval2 = (-B3 + D3) * A3; else tval2 = t12;
										var cx8 = 0.0;
										var cy8 = 0.0;
										var T8 = tval2;
										cx8 = u7.x + (v15.x - u7.x) * T8;
										cy8 = u7.y + (v15.y - u7.y) * T8;
										if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx8,cy8) < nape_Config.epsilon) {
											state = 0;
											cx_ite9 = beg_ite2;
											break;
										}
										var cp2 = zpp_$nape_geom_ZPP_$Vec2.get(cx8,cy8,null);
										zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
										zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp2);
										zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp2);
										state = 1;
										cx_ite9 = beg_ite2;
										break;
									} else {
										var t01 = 0.0;
										var t13 = 0.0;
										var two1;
										var vx4 = 0.0;
										var vy4 = 0.0;
										vx4 = v15.x - u7.x;
										vy4 = v15.y - u7.y;
										var qx4 = 0.0;
										var qy4 = 0.0;
										qx4 = u7.x - s1.circle.worldCOMx;
										qy4 = u7.y - s1.circle.worldCOMy;
										var A4 = vx4 * vx4 + vy4 * vy4;
										var B4 = 2 * (qx4 * vx4 + qy4 * vy4);
										var C4 = qx4 * qx4 + qy4 * qy4 - s1.circle.radius * s1.circle.radius;
										var D4 = B4 * B4 - 4 * A4 * C4;
										if(D4 * D4 < nape_Config.epsilon) {
											if(D4 < 0) t01 = 10.0; else t01 = t13 = -B4 / (2 * A4);
											two1 = false;
										} else {
											D4 = Math.sqrt(D4);
											A4 = 1 / (2 * A4);
											t01 = (-B4 - D4) * A4;
											t13 = (-B4 + D4) * A4;
											two1 = true;
										}
										if(t01 < 1 - nape_Config.epsilon && t13 > nape_Config.epsilon) {
											var cx9 = 0.0;
											var cy9 = 0.0;
											var T9 = t01;
											cx9 = u7.x + (v15.x - u7.x) * T9;
											cy9 = u7.y + (v15.y - u7.y) * T9;
											if(fst_vert1 != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx9,cy9) < nape_Config.epsilon) {
												state = 0;
												cx_ite9 = beg_ite2;
												break;
											}
											var cp3 = zpp_$nape_geom_ZPP_$Vec2.get(cx9,cy9,null);
											if(!(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null)) {
												zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
												zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp3);
											}
											zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp3);
											if(fst_vert1 == null) fst_vert1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
											if(two1) {
												var cx10 = 0.0;
												var cy10 = 0.0;
												var T10 = t13;
												cx10 = u7.x + (v15.x - u7.x) * T10;
												cy10 = u7.y + (v15.y - u7.y) * T10;
												zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx10,cy10,null));
											}
										}
									}
								}
								u7 = v15;
								vi1 = cx_ite9;
								vind = vind21;
								cx_ite9 = cx_ite9.next;
								if(cx_ite9 == null) cx_ite9 = s2.polygon.gverts.next;
							}
						}
						if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null) return false; else if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next == null) {
							var all = true;
							var cx_ite10 = s2.polygon.edges.head;
							while(cx_ite10 != null) {
								var e = cx_ite10.elt;
								var dist2 = e.gnormx * s1.circle.worldCOMx + e.gnormy * s1.circle.worldCOMy;
								if(dist2 > e.gprojection) {
									all = false;
									break;
								}
								cx_ite10 = cx_ite10.next;
							}
							if(all) {
								arb.overlap = s1.circle.area;
								arb.centroidx = s1.circle.worldCOMx;
								arb.centroidy = s1.circle.worldCOMy;
								null;
								return true;
							} else return false;
						} else {
							var COMx1 = 0;
							var COMy1 = 0;
							var area1 = 0.0;
							if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.next != null) {
								var parea = 0.0;
								var pCOMx = 0.0;
								var pCOMy = 0.0;
								pCOMx = 0;
								pCOMy = 0;
								parea = 0.0;
								var cx_ite11 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
								var u8 = cx_ite11.elt;
								cx_ite11 = cx_ite11.next;
								var v16 = cx_ite11.elt;
								cx_ite11 = cx_ite11.next;
								while(cx_ite11 != null) {
									var w5 = cx_ite11.elt;
									parea += v16.x * (w5.y - u8.y);
									var cf3 = w5.y * v16.x - w5.x * v16.y;
									pCOMx += (v16.x + w5.x) * cf3;
									pCOMy += (v16.y + w5.y) * cf3;
									u8 = v16;
									v16 = w5;
									cx_ite11 = cx_ite11.next;
								}
								cx_ite11 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
								var w3 = cx_ite11.elt;
								parea += v16.x * (w3.y - u8.y);
								var cf4 = w3.y * v16.x - w3.x * v16.y;
								pCOMx += (v16.x + w3.x) * cf4;
								pCOMy += (v16.y + w3.y) * cf4;
								u8 = v16;
								v16 = w3;
								cx_ite11 = cx_ite11.next;
								var w4 = cx_ite11.elt;
								parea += v16.x * (w4.y - u8.y);
								var cf5 = w4.y * v16.x - w4.x * v16.y;
								pCOMx += (v16.x + w4.x) * cf5;
								pCOMy += (v16.y + w4.y) * cf5;
								parea *= 0.5;
								var ia1 = 1 / (6 * parea);
								var t14 = ia1;
								pCOMx *= t14;
								pCOMy *= t14;
								var t15 = -parea;
								COMx1 += pCOMx * t15;
								COMy1 += pCOMy * t15;
								area1 -= parea;
							} else {
								zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
								zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.elt);
							}
							while(!(zpp_$nape_geom_ZPP_$Collide.flowsegs.head == null)) {
								var u9 = zpp_$nape_geom_ZPP_$Collide.flowsegs.pop_unsafe();
								var v17 = zpp_$nape_geom_ZPP_$Collide.flowsegs.pop_unsafe();
								var dx = 0.0;
								var dy = 0.0;
								dx = v17.x - u9.x;
								dy = v17.y - u9.y;
								var nx = 0.0;
								var ny = 0.0;
								nx = dx;
								ny = dy;
								var d = nx * nx + ny * ny;
								var imag = 1.0 / Math.sqrt(d);
								var t16 = imag;
								nx *= t16;
								ny *= t16;
								var t17 = nx;
								nx = -ny;
								ny = t17;
								var cx11 = 0.0;
								var cy11 = 0.0;
								cx11 = u9.x + v17.x;
								cy11 = u9.y + v17.y;
								var t18 = 0.5;
								cx11 *= t18;
								cy11 *= t18;
								var t19 = 1.0;
								cx11 -= s1.circle.worldCOMx * t19;
								cy11 -= s1.circle.worldCOMy * t19;
								var xd = nx * cx11 + ny * cy11;
								var carea = 0.0;
								var ccom = 0.0;
								var X = xd;
								var cos = X / s1.circle.radius;
								var sin = Math.sqrt(1 - cos * cos);
								var theta = Math.acos(cos);
								carea = s1.circle.radius * (s1.circle.radius * theta - X * sin);
								ccom = 0.66666666666666663 * s1.circle.radius * sin * sin * sin / (theta - cos * sin);
								cx11 = s1.circle.worldCOMx;
								cy11 = s1.circle.worldCOMy;
								var t20 = ccom;
								cx11 += nx * t20;
								cy11 += ny * t20;
								var t21 = carea;
								COMx1 += cx11 * t21;
								COMy1 += cy11 * t21;
								area1 += carea;
							}
							var t22 = 1.0 / area1;
							COMx1 *= t22;
							COMy1 *= t22;
							arb.overlap = area1;
							arb.centroidx = COMx1;
							arb.centroidy = COMy1;
							null;
							return true;
						}
					}
				} else return false;
			}
		} else return false;
	} else {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var deltax = 0.0;
		var deltay = 0.0;
		deltax = c2.worldCOMx - c1.worldCOMx;
		deltay = c2.worldCOMy - c1.worldCOMy;
		var cr = c1.radius + c2.radius;
		var ds = deltax * deltax + deltay * deltay;
		if(ds > cr * cr) return false; else if(ds < nape_Config.epsilon * nape_Config.epsilon) {
			if(c1.radius < c2.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				arb.overlap = c2.area;
				arb.centroidx = c2.worldCOMx;
				arb.centroidy = c2.worldCOMy;
				null;
			}
			return true;
		} else {
			var d1 = Math.sqrt(ds);
			var id = 1 / d1;
			var x1 = 0.5 * (d1 - (c2.radius * c2.radius - c1.radius * c1.radius) * id);
			if(x1 <= -c1.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				var x2 = d1 - x1;
				if(x2 <= -c2.radius) {
					arb.overlap = c2.area;
					arb.centroidx = c2.worldCOMx;
					arb.centroidy = c2.worldCOMy;
					null;
				} else {
					var area11 = 0.0;
					var y1 = 0.0;
					var area2 = 0.0;
					var y2 = 0.0;
					var X1 = x1;
					var cos1 = X1 / c1.radius;
					var sin1 = Math.sqrt(1 - cos1 * cos1);
					var theta1 = Math.acos(cos1);
					area11 = c1.radius * (c1.radius * theta1 - X1 * sin1);
					y1 = 0.66666666666666663 * c1.radius * sin1 * sin1 * sin1 / (theta1 - cos1 * sin1);
					var X2 = x2;
					var cos2 = X2 / c2.radius;
					var sin2 = Math.sqrt(1 - cos2 * cos2);
					var theta2 = Math.acos(cos2);
					area2 = c2.radius * (c2.radius * theta2 - X2 * sin2);
					y2 = 0.66666666666666663 * c2.radius * sin2 * sin2 * sin2 / (theta2 - cos2 * sin2);
					var tarea = area11 + area2;
					var ya = (y1 * area11 + (d1 - y2) * area2) / tarea * id;
					arb.overlap = tarea;
					arb.centroidx = c1.worldCOMx + deltax * ya;
					arb.centroidy = c1.worldCOMy + deltay * ya;
					null;
				}
			}
			return true;
		}
	}
};
var zpp_$nape_geom_ZPP_$Convex = function() { };
$hxClasses["zpp_nape.geom.ZPP_Convex"] = zpp_$nape_geom_ZPP_$Convex;
zpp_$nape_geom_ZPP_$Convex.__name__ = ["zpp_nape","geom","ZPP_Convex"];
zpp_$nape_geom_ZPP_$Convex.isinner = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = a.x - b.x;
	uy = a.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	return vy * ux - vx * uy >= 0;
};
zpp_$nape_geom_ZPP_$Convex.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			p.sort();
			nite = nite.next;
		} while(nite != L);
	}
	var F1 = P.vertices;
	var L1 = P.vertices;
	if(F1 != null) {
		var nite1 = F1;
		do {
			var p1 = nite1;
			var pright = p1.prev;
			var ppre = null;
			var cx_ite = p1.diagonals.head;
			while(cx_ite != null) {
				var pdiag = cx_ite.elt;
				var pleft;
				if(cx_ite.next == null) pleft = p1.next; else pleft = cx_ite.next.elt;
				if(!zpp_$nape_geom_ZPP_$Convex.isinner(pleft,p1,pright)) {
					ppre = cx_ite;
					pright = pdiag;
					cx_ite = cx_ite.next;
					continue;
				}
				var removable = true;
				var q = pdiag;
				var qright = q.prev;
				var qpre = null;
				var cx_ite1 = q.diagonals.head;
				while(cx_ite1 != null) {
					var qdiag = cx_ite1.elt;
					if(qdiag == p1) {
						var qleft;
						if(cx_ite1.next == null) qleft = q.next; else qleft = cx_ite1.next.elt;
						removable = zpp_$nape_geom_ZPP_$Convex.isinner(qleft,q,qright);
						break;
					}
					qright = qdiag;
					qpre = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				if(removable) {
					cx_ite = p1.diagonals.erase(ppre);
					q.diagonals.erase(qpre);
					continue;
				}
				pright = pdiag;
				ppre = cx_ite;
				cx_ite = cx_ite.next;
			}
			nite1 = nite1.next;
		} while(nite1 != L1);
	}
};
var zpp_$nape_geom_ZPP_$ConvexRayResult = function() {
	this.toiDistance = 0.0;
	this.next = null;
	this.inner = false;
	this.ray = null;
	this.position = null;
	this.convex = null;
	this.shape = null;
	this.normal = null;
};
$hxClasses["zpp_nape.geom.ZPP_ConvexRayResult"] = zpp_$nape_geom_ZPP_$ConvexRayResult;
zpp_$nape_geom_ZPP_$ConvexRayResult.__name__ = ["zpp_nape","geom","ZPP_ConvexRayResult"];
zpp_$nape_geom_ZPP_$ConvexRayResult.getRay = function(normal,time,inner,shape) {
	var ret;
	if(zpp_$nape_geom_ZPP_$ConvexRayResult.rayPool == null) {
		zpp_$nape_geom_ZPP_$ConvexRayResult.internal = true;
		ret = new nape_geom_RayResult();
		ret.zpp_inner = new zpp_$nape_geom_ZPP_$ConvexRayResult();
		ret.zpp_inner.ray = ret;
		zpp_$nape_geom_ZPP_$ConvexRayResult.internal = false;
	} else {
		ret = zpp_$nape_geom_ZPP_$ConvexRayResult.rayPool.ray;
		zpp_$nape_geom_ZPP_$ConvexRayResult.rayPool = zpp_$nape_geom_ZPP_$ConvexRayResult.rayPool.next;
		ret.zpp_inner.next = null;
	}
	var zinner = ret.zpp_inner;
	zinner.normal = normal;
	normal.zpp_inner._immutable = true;
	zinner.toiDistance = time;
	zinner.inner = inner;
	zinner.shape = shape;
	return ret;
};
zpp_$nape_geom_ZPP_$ConvexRayResult.getConvex = function(normal,position,toiDistance,shape) {
	var ret;
	if(zpp_$nape_geom_ZPP_$ConvexRayResult.convexPool == null) {
		zpp_$nape_geom_ZPP_$ConvexRayResult.internal = true;
		ret = new nape_geom_ConvexResult();
		ret.zpp_inner = new zpp_$nape_geom_ZPP_$ConvexRayResult();
		ret.zpp_inner.convex = ret;
		zpp_$nape_geom_ZPP_$ConvexRayResult.internal = false;
	} else {
		ret = zpp_$nape_geom_ZPP_$ConvexRayResult.convexPool.convex;
		zpp_$nape_geom_ZPP_$ConvexRayResult.convexPool = zpp_$nape_geom_ZPP_$ConvexRayResult.convexPool.next;
		ret.zpp_inner.next = null;
	}
	var inner = ret.zpp_inner;
	inner.normal = normal;
	inner.position = position;
	normal.zpp_inner._immutable = true;
	position.zpp_inner._immutable = true;
	inner.toiDistance = toiDistance;
	inner.shape = shape;
	return ret;
};
zpp_$nape_geom_ZPP_$ConvexRayResult.prototype = {
	normal: null
	,shape: null
	,convex: null
	,position: null
	,ray: null
	,inner: null
	,next: null
	,toiDistance: null
	,disposed: function() {
	}
	,free: function() {
		this.normal.zpp_inner._immutable = false;
		this.normal.dispose();
		if(this.position != null) {
			this.position.zpp_inner._immutable = false;
			this.position.dispose();
		}
		this.shape = null;
		this.toiDistance = 0.0;
		if(this.convex != null) {
			this.next = zpp_$nape_geom_ZPP_$ConvexRayResult.convexPool;
			zpp_$nape_geom_ZPP_$ConvexRayResult.convexPool = this;
		} else {
			this.next = zpp_$nape_geom_ZPP_$ConvexRayResult.rayPool;
			zpp_$nape_geom_ZPP_$ConvexRayResult.rayPool = this;
		}
	}
	,__class__: zpp_$nape_geom_ZPP_$ConvexRayResult
};
var zpp_$nape_geom_ZPP_$CutVert = function() {
	this.used = false;
	this.rank = 0;
	this.parent = null;
	this.positive = false;
	this.value = 0.0;
	this.vert = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.next = null;
	this.prev = null;
};
$hxClasses["zpp_nape.geom.ZPP_CutVert"] = zpp_$nape_geom_ZPP_$CutVert;
zpp_$nape_geom_ZPP_$CutVert.__name__ = ["zpp_nape","geom","ZPP_CutVert"];
zpp_$nape_geom_ZPP_$CutVert.path = function(poly) {
	var ret;
	if(zpp_$nape_geom_ZPP_$CutVert.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$CutVert(); else {
		ret = zpp_$nape_geom_ZPP_$CutVert.zpp_pool;
		zpp_$nape_geom_ZPP_$CutVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.vert = poly;
	ret.parent = ret;
	ret.rank = 0;
	ret.used = false;
	return ret;
};
zpp_$nape_geom_ZPP_$CutVert.prototype = {
	prev: null
	,next: null
	,posx: null
	,posy: null
	,vert: null
	,value: null
	,positive: null
	,parent: null
	,rank: null
	,used: null
	,alloc: function() {
	}
	,free: function() {
		this.vert = null;
		this.parent = null;
	}
	,__class__: zpp_$nape_geom_ZPP_$CutVert
};
var zpp_$nape_geom_ZPP_$CutInt = function() {
	this.path1 = null;
	this.start = null;
	this.end = null;
	this.path0 = null;
	this.vertex = false;
	this.virtualint = false;
	this.time = 0.0;
	this.next = null;
};
$hxClasses["zpp_nape.geom.ZPP_CutInt"] = zpp_$nape_geom_ZPP_$CutInt;
zpp_$nape_geom_ZPP_$CutInt.__name__ = ["zpp_nape","geom","ZPP_CutInt"];
zpp_$nape_geom_ZPP_$CutInt.get = function(time,end,start,path0,path1,virtualint,vertex) {
	if(vertex == null) vertex = false;
	if(virtualint == null) virtualint = false;
	var ret;
	if(zpp_$nape_geom_ZPP_$CutInt.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$CutInt(); else {
		ret = zpp_$nape_geom_ZPP_$CutInt.zpp_pool;
		zpp_$nape_geom_ZPP_$CutInt.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.virtualint = virtualint;
	ret.end = end;
	ret.start = start;
	ret.path0 = path0;
	ret.path1 = path1;
	ret.time = time;
	ret.vertex = vertex;
	return ret;
};
zpp_$nape_geom_ZPP_$CutInt.prototype = {
	next: null
	,time: null
	,virtualint: null
	,vertex: null
	,path0: null
	,end: null
	,start: null
	,path1: null
	,alloc: function() {
	}
	,free: function() {
		this.end = this.start = null;
		this.path0 = this.path1 = null;
	}
	,__class__: zpp_$nape_geom_ZPP_$CutInt
};
var zpp_$nape_geom_ZPP_$Cutter = function() { };
$hxClasses["zpp_nape.geom.ZPP_Cutter"] = zpp_$nape_geom_ZPP_$Cutter;
zpp_$nape_geom_ZPP_$Cutter.__name__ = ["zpp_nape","geom","ZPP_Cutter"];
zpp_$nape_geom_ZPP_$Cutter.run = function(P,_start,_end,bstart,bend,output) {
	var px = 0.0;
	var py = 0.0;
	_start.zpp_inner.validate();
	px = _start.zpp_inner.x;
	_start.zpp_inner.validate();
	py = _start.zpp_inner.y;
	var dx = 0.0;
	var dy = 0.0;
	dx = (function($this) {
		var $r;
		_end.zpp_inner.validate();
		$r = _end.zpp_inner.x;
		return $r;
	}(this)) - px;
	dy = (function($this) {
		var $r;
		_end.zpp_inner.validate();
		$r = _end.zpp_inner.y;
		return $r;
	}(this)) - py;
	var min;
	if(bstart) min = 0; else min = -Infinity;
	var max;
	if(bend) max = 1; else {
		max = Infinity;
	}
	var crx = -(py * dx - px * dy);
	var verts = null;
	var clashes = false;
	var p = P;
	do {
		var c;
		if(zpp_$nape_geom_ZPP_$CutVert.zpp_pool == null) c = new zpp_$nape_geom_ZPP_$CutVert(); else {
			c = zpp_$nape_geom_ZPP_$CutVert.zpp_pool;
			zpp_$nape_geom_ZPP_$CutVert.zpp_pool = c.next;
			c.next = null;
		}
		null;
		c.vert = p;
		c.posx = c.vert.x;
		c.posy = c.vert.y;
		c.value = c.posy * dx - c.posx * dy + crx;
		c.positive = c.value > 0;
		if(c.value == 0) clashes = true;
		var obj = c;
		if(verts == null) verts = obj.prev = obj.next = obj; else {
			obj.prev = verts;
			obj.next = verts.next;
			verts.next.prev = obj;
			verts.next = obj;
		}
		verts = obj;
		p = p.next;
	} while(p != P);
	if(clashes) {
		var start1 = null;
		var F = verts;
		var L = verts;
		if(F != null) {
			var nite = F;
			do {
				var p2 = nite;
				if(p2.value != 0.0) {
					start1 = p2;
					break;
				}
				nite = nite.next;
			} while(nite != L);
		}
		var nx = 0.0;
		var ny = 0.0;
		nx = dx;
		ny = dy;
		var d = nx * nx + ny * ny;
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		nx *= t;
		ny *= t;
		var t1 = nx;
		nx = -ny;
		ny = t1;
		var pre = null;
		var p1 = start1;
		do {
			if(p1.value != 0.0 && (pre == null || p1 == pre.next)) {
				pre = p1;
				p1 = p1.next;
				continue;
			}
			var prod = pre.value * p1.value;
			if(prod == 0) {
				p1 = p1.next;
				continue;
			}
			var a = pre.next;
			var positive;
			if(prod > 0) positive = pre.positive; else {
				var b = a.next;
				var midx = 0.0;
				var midy = 0.0;
				midx = a.posx + b.posx;
				midy = a.posy + b.posy;
				var t2 = 0.5;
				midx *= t2;
				midy *= t2;
				var x = midx + nx * 1e-8;
				var y = midy + ny * 1e-8;
				var ret1 = false;
				var F1 = P;
				var L1 = P;
				if(F1 != null) {
					var nite1 = F1;
					do {
						var p3 = nite1;
						var q = p3.prev;
						if((p3.y < y && q.y >= y || q.y < y && p3.y >= y) && (p3.x <= x || q.x <= x)) {
							if(p3.x + (y - p3.y) / (q.y - p3.y) * (q.x - p3.x) < x) ret1 = !ret1;
						}
						nite1 = nite1.next;
					} while(nite1 != L1);
				}
				positive = ret1;
			}
			var F2 = a;
			var L2 = p1;
			if(F2 != null) {
				var nite2 = F2;
				do {
					var q1 = nite2;
					q1.positive = positive;
					nite2 = nite2.next;
				} while(nite2 != L2);
			}
			pre = p1;
			p1 = p1.next;
		} while(p1 != start1);
		do {
			if(p1.value != 0.0 && (pre == null || p1 == pre.next)) {
				pre = p1;
				p1 = p1.next;
				continue;
			}
			var prod1 = pre.value * p1.value;
			if(prod1 == 0) {
				p1 = p1.next;
				continue;
			}
			var a1 = pre.next;
			var positive1;
			if(prod1 > 0) positive1 = pre.positive; else {
				var b1 = a1.next;
				var midx1 = 0.0;
				var midy1 = 0.0;
				midx1 = a1.posx + b1.posx;
				midy1 = a1.posy + b1.posy;
				var t3 = 0.5;
				midx1 *= t3;
				midy1 *= t3;
				var x1 = midx1 + nx * 1e-8;
				var y1 = midy1 + ny * 1e-8;
				var ret2 = false;
				var F3 = P;
				var L3 = P;
				if(F3 != null) {
					var nite3 = F3;
					do {
						var p4 = nite3;
						var q2 = p4.prev;
						if((p4.y < y1 && q2.y >= y1 || q2.y < y1 && p4.y >= y1) && (p4.x <= x1 || q2.x <= x1)) {
							if(p4.x + (y1 - p4.y) / (q2.y - p4.y) * (q2.x - p4.x) < x1) ret2 = !ret2;
						}
						nite3 = nite3.next;
					} while(nite3 != L3);
				}
				positive1 = ret2;
			}
			var F4 = a1;
			var L4 = p1;
			if(F4 != null) {
				var nite4 = F4;
				do {
					var q3 = nite4;
					q3.positive = positive1;
					nite4 = nite4.next;
				} while(nite4 != L4);
			}
			pre = p1;
			p1 = p1.next;
		} while(false);
	}
	if(zpp_$nape_geom_ZPP_$Cutter.ints == null) zpp_$nape_geom_ZPP_$Cutter.ints = new zpp_$nape_util_ZNPList_$ZPP_$CutInt();
	if(zpp_$nape_geom_ZPP_$Cutter.paths == null) zpp_$nape_geom_ZPP_$Cutter.paths = new zpp_$nape_util_ZNPList_$ZPP_$CutVert();
	var start = null;
	var obj1 = zpp_$nape_geom_ZPP_$GeomVert.get(verts.posx,verts.posy);
	if(start == null) start = obj1.prev = obj1.next = obj1; else {
		obj1.next = start;
		obj1.prev = start.prev;
		start.prev.next = obj1;
		start.prev = obj1;
	}
	obj1;
	var origin = start;
	var firstpath = zpp_$nape_geom_ZPP_$CutVert.path(start);
	zpp_$nape_geom_ZPP_$Cutter.paths.add(firstpath);
	var i = verts;
	do {
		var j = i.next;
		var pj = zpp_$nape_geom_ZPP_$GeomVert.get(j.posx,j.posy);
		if(i.positive == j.positive) {
			var obj2 = pj;
			if(start == null) start = obj2.prev = obj2.next = obj2; else {
				obj2.next = start;
				obj2.prev = start.prev;
				start.prev.next = obj2;
				start.prev = obj2;
			}
			obj2;
		} else {
			var ux = 0.0;
			var uy = 0.0;
			ux = j.posx - i.posx;
			uy = j.posy - i.posy;
			var denom = dy * ux - dx * uy;
			denom = 1 / denom;
			var pax = 0.0;
			var pay = 0.0;
			pax = px - i.posx;
			pay = py - i.posy;
			var s = (uy * pax - ux * pay) * denom;
			if(s < min || s > max) {
				zpp_$nape_geom_ZPP_$Cutter.ints.add(zpp_$nape_geom_ZPP_$CutInt.get(s,null,null,null,null,true,null));
				var obj3 = pj;
				if(start == null) start = obj3.prev = obj3.next = obj3; else {
					obj3.next = start;
					obj3.prev = start.prev;
					start.prev.next = obj3;
					start.prev = obj3;
				}
				obj3;
			} else if(i.value == 0) {
				var endof1 = start.prev;
				start = null;
				var obj4 = zpp_$nape_geom_ZPP_$GeomVert.get(endof1.x,endof1.y);
				if(start == null) start = obj4.prev = obj4.next = obj4; else {
					obj4.next = start;
					obj4.prev = start.prev;
					start.prev.next = obj4;
					start.prev = obj4;
				}
				obj4;
				var obj5 = pj;
				if(start == null) start = obj5.prev = obj5.next = obj5; else {
					obj5.next = start;
					obj5.prev = start.prev;
					start.prev.next = obj5;
					start.prev = obj5;
				}
				obj5;
				var prepath = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
				zpp_$nape_geom_ZPP_$Cutter.paths.add(zpp_$nape_geom_ZPP_$CutVert.path(start));
				var postpath = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
				zpp_$nape_geom_ZPP_$Cutter.ints.add(zpp_$nape_geom_ZPP_$CutInt.get(s,endof1,start,prepath,postpath,true,null));
			} else if(j.value == 0) {
				var obj6 = pj;
				if(start == null) start = obj6.prev = obj6.next = obj6; else {
					obj6.next = start;
					obj6.prev = start.prev;
					start.prev.next = obj6;
					start.prev = obj6;
				}
				obj6;
				var endof2 = start.prev;
				start = null;
				var obj7 = zpp_$nape_geom_ZPP_$GeomVert.get(j.posx,j.posy);
				if(start == null) start = obj7.prev = obj7.next = obj7; else {
					obj7.next = start;
					obj7.prev = start.prev;
					start.prev.next = obj7;
					start.prev = obj7;
				}
				obj7;
				var prepath1 = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
				zpp_$nape_geom_ZPP_$Cutter.paths.add(zpp_$nape_geom_ZPP_$CutVert.path(start));
				var postpath1 = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
				zpp_$nape_geom_ZPP_$Cutter.ints.add(zpp_$nape_geom_ZPP_$CutInt.get(s,endof2,start,prepath1,postpath1,true,null));
			} else {
				var t4 = (dy * pax - dx * pay) * denom;
				var qx = 0.0;
				var qy = 0.0;
				qx = i.posx;
				qy = i.posy;
				var t5 = t4;
				qx += ux * t5;
				qy += uy * t5;
				var obj8 = zpp_$nape_geom_ZPP_$GeomVert.get(qx,qy);
				if(start == null) start = obj8.prev = obj8.next = obj8; else {
					obj8.next = start;
					obj8.prev = start.prev;
					start.prev.next = obj8;
					start.prev = obj8;
				}
				obj8;
				var endof3 = start.prev;
				start = null;
				var obj9 = zpp_$nape_geom_ZPP_$GeomVert.get(qx,qy);
				if(start == null) start = obj9.prev = obj9.next = obj9; else {
					obj9.next = start;
					obj9.prev = start.prev;
					start.prev.next = obj9;
					start.prev = obj9;
				}
				obj9;
				var obj10 = pj;
				if(start == null) start = obj10.prev = obj10.next = obj10; else {
					obj10.next = start;
					obj10.prev = start.prev;
					start.prev.next = obj10;
					start.prev = obj10;
				}
				obj10;
				var prepath2 = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
				zpp_$nape_geom_ZPP_$Cutter.paths.add(zpp_$nape_geom_ZPP_$CutVert.path(start));
				var postpath2 = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
				zpp_$nape_geom_ZPP_$Cutter.ints.add(zpp_$nape_geom_ZPP_$CutInt.get(s,endof3,start,prepath2,postpath2,false,null));
			}
		}
		i = i.next;
	} while(i != verts);
	var endof = start.prev;
	endof.next.prev = origin.prev;
	origin.prev.next = endof.next;
	endof.next = origin;
	origin.prev = endof;
	var lastpath = zpp_$nape_geom_ZPP_$Cutter.paths.head.elt;
	var xr;
	if(firstpath == firstpath.parent) xr = firstpath; else {
		var obj11 = firstpath;
		var stack = null;
		while(obj11 != obj11.parent) {
			var nxt = obj11.parent;
			obj11.parent = stack;
			stack = obj11;
			obj11 = nxt;
		}
		while(stack != null) {
			var nxt1 = stack.parent;
			stack.parent = obj11;
			stack = nxt1;
		}
		xr = obj11;
	}
	var yr;
	if(lastpath == lastpath.parent) yr = lastpath; else {
		var obj12 = lastpath;
		var stack1 = null;
		while(obj12 != obj12.parent) {
			var nxt2 = obj12.parent;
			obj12.parent = stack1;
			stack1 = obj12;
			obj12 = nxt2;
		}
		while(stack1 != null) {
			var nxt3 = stack1.parent;
			stack1.parent = obj12;
			stack1 = nxt3;
		}
		yr = obj12;
	}
	if(xr != yr) {
		if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
			yr.parent = xr;
			xr.rank++;
		}
	}
	var xxlist = zpp_$nape_geom_ZPP_$Cutter.ints;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt4 = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt4 = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt4 = left;
						left = left.next;
						leftSize--;
					} else if(left.elt.time < right.elt.time) {
						nxt4 = left;
						left = left.next;
						leftSize--;
					} else {
						nxt4 = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt4; else head = nxt4;
					tail = nxt4;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	while(!(zpp_$nape_geom_ZPP_$Cutter.ints.head == null)) {
		var i1 = zpp_$nape_geom_ZPP_$Cutter.ints.pop_unsafe();
		var j1 = zpp_$nape_geom_ZPP_$Cutter.ints.pop_unsafe();
		if(!i1.virtualint && !j1.virtualint) {
			i1.end.next.prev = j1.start.prev;
			j1.start.prev.next = i1.end.next;
			i1.end.next = j1.start;
			j1.start.prev = i1.end;
			j1.end.next.prev = i1.start.prev;
			i1.start.prev.next = j1.end.next;
			j1.end.next = i1.start;
			i1.start.prev = j1.end;
			var xr1;
			if(i1.path0 == i1.path0.parent) xr1 = i1.path0; else {
				var obj13 = i1.path0;
				var stack2 = null;
				while(obj13 != obj13.parent) {
					var nxt5 = obj13.parent;
					obj13.parent = stack2;
					stack2 = obj13;
					obj13 = nxt5;
				}
				while(stack2 != null) {
					var nxt6 = stack2.parent;
					stack2.parent = obj13;
					stack2 = nxt6;
				}
				xr1 = obj13;
			}
			var yr1;
			if(j1.path1 == j1.path1.parent) yr1 = j1.path1; else {
				var obj14 = j1.path1;
				var stack3 = null;
				while(obj14 != obj14.parent) {
					var nxt7 = obj14.parent;
					obj14.parent = stack3;
					stack3 = obj14;
					obj14 = nxt7;
				}
				while(stack3 != null) {
					var nxt8 = stack3.parent;
					stack3.parent = obj14;
					stack3 = nxt8;
				}
				yr1 = obj14;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
			var xr2;
			if(i1.path1 == i1.path1.parent) xr2 = i1.path1; else {
				var obj15 = i1.path1;
				var stack4 = null;
				while(obj15 != obj15.parent) {
					var nxt9 = obj15.parent;
					obj15.parent = stack4;
					stack4 = obj15;
					obj15 = nxt9;
				}
				while(stack4 != null) {
					var nxt10 = stack4.parent;
					stack4.parent = obj15;
					stack4 = nxt10;
				}
				xr2 = obj15;
			}
			var yr2;
			if(j1.path0 == j1.path0.parent) yr2 = j1.path0; else {
				var obj16 = j1.path0;
				var stack5 = null;
				while(obj16 != obj16.parent) {
					var nxt11 = obj16.parent;
					obj16.parent = stack5;
					stack5 = obj16;
					obj16 = nxt11;
				}
				while(stack5 != null) {
					var nxt12 = stack5.parent;
					stack5.parent = obj16;
					stack5 = nxt12;
				}
				yr2 = obj16;
			}
			if(xr2 != yr2) {
				if(xr2.rank < yr2.rank) xr2.parent = yr2; else if(xr2.rank > yr2.rank) yr2.parent = xr2; else {
					yr2.parent = xr2;
					xr2.rank++;
				}
			}
		} else if(i1.virtualint && !j1.virtualint) {
			if(j1.end != null && j1.end.prev == j1.end) {
				j1.end.next = j1.end.prev = null;
				var o = j1.end;
				if(o.wrap != null) {
					o.wrap.zpp_inner._inuse = false;
					o.wrap.dispose();
					o.wrap = null;
				}
				o.prev = o.next = null;
				o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
				zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
				j1.end = null;
			} else {
				var retnodes = j1.end.prev;
				j1.end.prev.next = j1.end.next;
				j1.end.next.prev = j1.end.prev;
				j1.end.next = j1.end.prev = null;
				var o1 = j1.end;
				if(o1.wrap != null) {
					o1.wrap.zpp_inner._inuse = false;
					o1.wrap.dispose();
					o1.wrap = null;
				}
				o1.prev = o1.next = null;
				o1.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
				zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o1;
				j1.end = null;
				j1.end = retnodes;
			}
			if(!j1.vertex) {
				if(j1.end != j1.path0.vert) {
					j1.start.x = j1.end.x;
					j1.start.y = j1.end.y;
					if(j1.end != null && j1.end.prev == j1.end) {
						j1.end.next = j1.end.prev = null;
						var o2 = j1.end;
						if(o2.wrap != null) {
							o2.wrap.zpp_inner._inuse = false;
							o2.wrap.dispose();
							o2.wrap = null;
						}
						o2.prev = o2.next = null;
						o2.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o2;
						j1.end = null;
					} else {
						var retnodes1 = j1.end.prev;
						j1.end.prev.next = j1.end.next;
						j1.end.next.prev = j1.end.prev;
						j1.end.next = j1.end.prev = null;
						var o3 = j1.end;
						if(o3.wrap != null) {
							o3.wrap.zpp_inner._inuse = false;
							o3.wrap.dispose();
							o3.wrap = null;
						}
						o3.prev = o3.next = null;
						o3.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o3;
						j1.end = null;
						j1.end = retnodes1;
					}
				} else {
					var n = j1.start.next;
					j1.start.x = n.x;
					j1.start.y = n.y;
					if(n != null && n.prev == n) {
						n.next = n.prev = null;
						var o4 = n;
						if(o4.wrap != null) {
							o4.wrap.zpp_inner._inuse = false;
							o4.wrap.dispose();
							o4.wrap = null;
						}
						o4.prev = o4.next = null;
						o4.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o4;
						n = null;
					} else {
						n.prev.next = n.next;
						n.next.prev = n.prev;
						n.next = n.prev = null;
						var o5 = n;
						if(o5.wrap != null) {
							o5.wrap.zpp_inner._inuse = false;
							o5.wrap.dispose();
							o5.wrap = null;
						}
						o5.prev = o5.next = null;
						o5.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o5;
					}
				}
			}
			j1.end.next.prev = j1.start.prev;
			j1.start.prev.next = j1.end.next;
			j1.end.next = j1.start;
			j1.start.prev = j1.end;
			var xr3;
			if(j1.path0 == j1.path0.parent) xr3 = j1.path0; else {
				var obj17 = j1.path0;
				var stack6 = null;
				while(obj17 != obj17.parent) {
					var nxt13 = obj17.parent;
					obj17.parent = stack6;
					stack6 = obj17;
					obj17 = nxt13;
				}
				while(stack6 != null) {
					var nxt14 = stack6.parent;
					stack6.parent = obj17;
					stack6 = nxt14;
				}
				xr3 = obj17;
			}
			var yr3;
			if(j1.path1 == j1.path1.parent) yr3 = j1.path1; else {
				var obj18 = j1.path1;
				var stack7 = null;
				while(obj18 != obj18.parent) {
					var nxt15 = obj18.parent;
					obj18.parent = stack7;
					stack7 = obj18;
					obj18 = nxt15;
				}
				while(stack7 != null) {
					var nxt16 = stack7.parent;
					stack7.parent = obj18;
					stack7 = nxt16;
				}
				yr3 = obj18;
			}
			if(xr3 != yr3) {
				if(xr3.rank < yr3.rank) xr3.parent = yr3; else if(xr3.rank > yr3.rank) yr3.parent = xr3; else {
					yr3.parent = xr3;
					xr3.rank++;
				}
			}
		} else if(j1.virtualint && !i1.virtualint) {
			if(i1.end != null && i1.end.prev == i1.end) {
				i1.end.next = i1.end.prev = null;
				var o6 = i1.end;
				if(o6.wrap != null) {
					o6.wrap.zpp_inner._inuse = false;
					o6.wrap.dispose();
					o6.wrap = null;
				}
				o6.prev = o6.next = null;
				o6.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
				zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o6;
				i1.end = null;
			} else {
				var retnodes2 = i1.end.prev;
				i1.end.prev.next = i1.end.next;
				i1.end.next.prev = i1.end.prev;
				i1.end.next = i1.end.prev = null;
				var o7 = i1.end;
				if(o7.wrap != null) {
					o7.wrap.zpp_inner._inuse = false;
					o7.wrap.dispose();
					o7.wrap = null;
				}
				o7.prev = o7.next = null;
				o7.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
				zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o7;
				i1.end = null;
				i1.end = retnodes2;
			}
			if(!i1.vertex) {
				if(i1.end != i1.path0.vert) {
					i1.start.x = i1.end.x;
					i1.start.y = i1.end.y;
					if(i1.end != null && i1.end.prev == i1.end) {
						i1.end.next = i1.end.prev = null;
						var o8 = i1.end;
						if(o8.wrap != null) {
							o8.wrap.zpp_inner._inuse = false;
							o8.wrap.dispose();
							o8.wrap = null;
						}
						o8.prev = o8.next = null;
						o8.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o8;
						i1.end = null;
					} else {
						var retnodes3 = i1.end.prev;
						i1.end.prev.next = i1.end.next;
						i1.end.next.prev = i1.end.prev;
						i1.end.next = i1.end.prev = null;
						var o9 = i1.end;
						if(o9.wrap != null) {
							o9.wrap.zpp_inner._inuse = false;
							o9.wrap.dispose();
							o9.wrap = null;
						}
						o9.prev = o9.next = null;
						o9.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o9;
						i1.end = null;
						i1.end = retnodes3;
					}
				} else {
					var n1 = i1.start.next;
					i1.start.x = n1.x;
					i1.start.y = n1.y;
					if(n1 != null && n1.prev == n1) {
						n1.next = n1.prev = null;
						var o10 = n1;
						if(o10.wrap != null) {
							o10.wrap.zpp_inner._inuse = false;
							o10.wrap.dispose();
							o10.wrap = null;
						}
						o10.prev = o10.next = null;
						o10.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o10;
						n1 = null;
					} else {
						n1.prev.next = n1.next;
						n1.next.prev = n1.prev;
						n1.next = n1.prev = null;
						var o11 = n1;
						if(o11.wrap != null) {
							o11.wrap.zpp_inner._inuse = false;
							o11.wrap.dispose();
							o11.wrap = null;
						}
						o11.prev = o11.next = null;
						o11.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o11;
					}
				}
			}
			i1.end.next.prev = i1.start.prev;
			i1.start.prev.next = i1.end.next;
			i1.end.next = i1.start;
			i1.start.prev = i1.end;
			var xr4;
			if(i1.path0 == i1.path0.parent) xr4 = i1.path0; else {
				var obj19 = i1.path0;
				var stack8 = null;
				while(obj19 != obj19.parent) {
					var nxt17 = obj19.parent;
					obj19.parent = stack8;
					stack8 = obj19;
					obj19 = nxt17;
				}
				while(stack8 != null) {
					var nxt18 = stack8.parent;
					stack8.parent = obj19;
					stack8 = nxt18;
				}
				xr4 = obj19;
			}
			var yr4;
			if(i1.path1 == i1.path1.parent) yr4 = i1.path1; else {
				var obj20 = i1.path1;
				var stack9 = null;
				while(obj20 != obj20.parent) {
					var nxt19 = obj20.parent;
					obj20.parent = stack9;
					stack9 = obj20;
					obj20 = nxt19;
				}
				while(stack9 != null) {
					var nxt20 = stack9.parent;
					stack9.parent = obj20;
					stack9 = nxt20;
				}
				yr4 = obj20;
			}
			if(xr4 != yr4) {
				if(xr4.rank < yr4.rank) xr4.parent = yr4; else if(xr4.rank > yr4.rank) yr4.parent = xr4; else {
					yr4.parent = xr4;
					xr4.rank++;
				}
			}
		}
		var o12 = i1;
		o12.end = o12.start = null;
		o12.path0 = o12.path1 = null;
		o12.next = zpp_$nape_geom_ZPP_$CutInt.zpp_pool;
		zpp_$nape_geom_ZPP_$CutInt.zpp_pool = o12;
		var o13 = j1;
		o13.end = o13.start = null;
		o13.path0 = o13.path1 = null;
		o13.next = zpp_$nape_geom_ZPP_$CutInt.zpp_pool;
		zpp_$nape_geom_ZPP_$CutInt.zpp_pool = o13;
	}
	var ret;
	if(output == null) ret = new nape_geom_GeomPolyList(); else ret = output;
	var cx_ite = zpp_$nape_geom_ZPP_$Cutter.paths.head;
	while(cx_ite != null) {
		var p5 = cx_ite.elt;
		var poly;
		if(p5 == p5.parent) poly = p5; else {
			var obj21 = p5;
			var stack10 = null;
			while(obj21 != obj21.parent) {
				var nxt21 = obj21.parent;
				obj21.parent = stack10;
				stack10 = obj21;
				obj21 = nxt21;
			}
			while(stack10 != null) {
				var nxt22 = stack10.parent;
				stack10.parent = obj21;
				stack10 = nxt22;
			}
			poly = obj21;
		}
		if(poly.used) {
			cx_ite = cx_ite.next;
			continue;
		}
		poly.used = true;
		var p6 = poly.vert;
		var skip = true;
		while(poly.vert != null && (skip || p6 != poly.vert)) {
			skip = false;
			if(p6.x == p6.next.x && p6.y == p6.next.y) {
				if(p6 == poly.vert) {
					if(p6.next == p6) poly.vert = null; else poly.vert = p6.next;
					skip = true;
				}
				if(p6 != null && p6.prev == p6) {
					p6.next = p6.prev = null;
					p6 = p6 = null;
				} else {
					var retnodes4 = p6.next;
					p6.prev.next = p6.next;
					p6.next.prev = p6.prev;
					p6.next = p6.prev = null;
					p6 = null;
					p6 = retnodes4;
				}
			} else p6 = p6.next;
		}
		if(poly.vert != null) {
			var gp = nape_geom_GeomPoly.get();
			gp.zpp_inner.vertices = poly.vert;
			if(ret.zpp_inner.reverse_flag) ret.push(gp); else ret.unshift(gp);
		}
		cx_ite = cx_ite.next;
	}
	while(!(zpp_$nape_geom_ZPP_$Cutter.paths.head == null)) {
		var p7 = zpp_$nape_geom_ZPP_$Cutter.paths.pop_unsafe();
		var o14 = p7;
		o14.vert = null;
		o14.parent = null;
		o14.next = zpp_$nape_geom_ZPP_$CutVert.zpp_pool;
		zpp_$nape_geom_ZPP_$CutVert.zpp_pool = o14;
	}
	while(!(verts == null)) if(verts != null && verts.prev == verts) {
		verts.next = verts.prev = null;
		var o15 = verts;
		o15.vert = null;
		o15.parent = null;
		o15.next = zpp_$nape_geom_ZPP_$CutVert.zpp_pool;
		zpp_$nape_geom_ZPP_$CutVert.zpp_pool = o15;
		verts = verts = null;
	} else {
		var retnodes5 = verts.next;
		verts.prev.next = verts.next;
		verts.next.prev = verts.prev;
		verts.next = verts.prev = null;
		var o16 = verts;
		o16.vert = null;
		o16.parent = null;
		o16.next = zpp_$nape_geom_ZPP_$CutVert.zpp_pool;
		zpp_$nape_geom_ZPP_$CutVert.zpp_pool = o16;
		verts = null;
		verts = retnodes5;
	}
	return ret;
};
var zpp_$nape_geom_ZPP_$Geom = function() { };
$hxClasses["zpp_nape.geom.ZPP_Geom"] = zpp_$nape_geom_ZPP_$Geom;
zpp_$nape_geom_ZPP_$Geom.__name__ = ["zpp_nape","geom","ZPP_Geom"];
zpp_$nape_geom_ZPP_$Geom.validateShape = function(s) {
	if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) s.polygon.validate_gaxi();
	if(s.zip_aabb) {
		if(s.body != null) {
			s.zip_aabb = false;
			if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
		}
	}
	if(s.zip_worldCOM) {
		if(s.body != null) {
			s.zip_worldCOM = false;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			s.body.validate_axis();
			s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
			s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
		}
	}
};
var zpp_$nape_geom_ZPP_$GeomVert = function() {
	this.forced = false;
	this.wrap = null;
	this.next = null;
	this.prev = null;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["zpp_nape.geom.ZPP_GeomVert"] = zpp_$nape_geom_ZPP_$GeomVert;
zpp_$nape_geom_ZPP_$GeomVert.__name__ = ["zpp_nape","geom","ZPP_GeomVert"];
zpp_$nape_geom_ZPP_$GeomVert.get = function(x,y) {
	var ret;
	if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$GeomVert(); else {
		ret = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.forced = false;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_$nape_geom_ZPP_$GeomVert.prototype = {
	x: null
	,y: null
	,prev: null
	,next: null
	,wrap: null
	,forced: null
	,free: function() {
		if(this.wrap != null) {
			this.wrap.zpp_inner._inuse = false;
			this.wrap.dispose();
			this.wrap = null;
		}
		this.prev = this.next = null;
	}
	,alloc: function() {
		this.forced = false;
	}
	,wrapper: function() {
		if(this.wrap == null) {
			this.wrap = nape_geom_Vec2.get(this.x,this.y,null);
			this.wrap.zpp_inner._inuse = true;
			this.wrap.zpp_inner._invalidate = $bind(this,this.modwrap);
			this.wrap.zpp_inner._validate = $bind(this,this.getwrap);
		}
		return this.wrap;
	}
	,modwrap: function(n) {
		this.x = n.x;
		this.y = n.y;
	}
	,getwrap: function() {
		this.wrap.zpp_inner.x = this.x;
		this.wrap.zpp_inner.y = this.y;
	}
	,__class__: zpp_$nape_geom_ZPP_$GeomVert
};
var zpp_$nape_geom_ZPP_$GeomPoly = function(outer) {
	this.vertices = null;
	this.outer = null;
	this.outer = outer;
};
$hxClasses["zpp_nape.geom.ZPP_GeomPoly"] = zpp_$nape_geom_ZPP_$GeomPoly;
zpp_$nape_geom_ZPP_$GeomPoly.__name__ = ["zpp_nape","geom","ZPP_GeomPoly"];
zpp_$nape_geom_ZPP_$GeomPoly.prototype = {
	outer: null
	,vertices: null
	,__class__: zpp_$nape_geom_ZPP_$GeomPoly
};
var zpp_$nape_geom_ZPP_$GeomVertexIterator = function() {
	this.next = null;
	this.outer = null;
	this.forward = false;
	this.first = false;
	this.start = null;
	this.ptr = null;
	this.outer = new nape_geom_GeomVertexIterator();
};
$hxClasses["zpp_nape.geom.ZPP_GeomVertexIterator"] = zpp_$nape_geom_ZPP_$GeomVertexIterator;
zpp_$nape_geom_ZPP_$GeomVertexIterator.__name__ = ["zpp_nape","geom","ZPP_GeomVertexIterator"];
zpp_$nape_geom_ZPP_$GeomVertexIterator.get = function(poly,forward) {
	var ret;
	if(zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$GeomVertexIterator(); else {
		ret = zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.outer.zpp_inner = ret;
	ret.ptr = poly;
	ret.forward = forward;
	ret.start = poly;
	ret.first = poly != null;
	return ret.outer;
};
zpp_$nape_geom_ZPP_$GeomVertexIterator.prototype = {
	ptr: null
	,start: null
	,first: null
	,forward: null
	,outer: null
	,next: null
	,free: function() {
		this.outer.zpp_inner = null;
		this.ptr = this.start = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$GeomVertexIterator
};
var zpp_$nape_geom_ZPP_$MarchSpan = function() {
	this.next = null;
	this.out = false;
	this.rank = 0;
	this.parent = null;
	this.parent = this;
};
$hxClasses["zpp_nape.geom.ZPP_MarchSpan"] = zpp_$nape_geom_ZPP_$MarchSpan;
zpp_$nape_geom_ZPP_$MarchSpan.__name__ = ["zpp_nape","geom","ZPP_MarchSpan"];
zpp_$nape_geom_ZPP_$MarchSpan.prototype = {
	parent: null
	,rank: null
	,out: null
	,next: null
	,free: function() {
		this.parent = this;
	}
	,alloc: function() {
		this.out = false;
		this.rank = 0;
	}
	,__class__: zpp_$nape_geom_ZPP_$MarchSpan
};
var zpp_$nape_geom_ZPP_$MarchPair = function() {
	this.next = null;
	this.spanr = null;
	this.span2 = null;
	this.span1 = null;
	this.pd = null;
	this.okeyr = 0;
	this.keyr = 0;
	this.pr = null;
	this.okey2 = 0;
	this.key2 = 0;
	this.p2 = null;
	this.okey1 = 0;
	this.key1 = 0;
	this.p1 = null;
};
$hxClasses["zpp_nape.geom.ZPP_MarchPair"] = zpp_$nape_geom_ZPP_$MarchPair;
zpp_$nape_geom_ZPP_$MarchPair.__name__ = ["zpp_nape","geom","ZPP_MarchPair"];
zpp_$nape_geom_ZPP_$MarchPair.prototype = {
	p1: null
	,key1: null
	,okey1: null
	,p2: null
	,key2: null
	,okey2: null
	,pr: null
	,keyr: null
	,okeyr: null
	,pd: null
	,span1: null
	,span2: null
	,spanr: null
	,next: null
	,free: function() {
		this.p1 = this.p2 = this.pr = this.pd = null;
		this.span1 = this.span2 = this.spanr = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$MarchPair
};
var zpp_$nape_geom_ZPP_$MarchingSquares = function() {
};
$hxClasses["zpp_nape.geom.ZPP_MarchingSquares"] = zpp_$nape_geom_ZPP_$MarchingSquares;
zpp_$nape_geom_ZPP_$MarchingSquares.__name__ = ["zpp_nape","geom","ZPP_MarchingSquares"];
zpp_$nape_geom_ZPP_$MarchingSquares.isos = null;
zpp_$nape_geom_ZPP_$MarchingSquares.ints = null;
zpp_$nape_geom_ZPP_$MarchingSquares.map = null;
zpp_$nape_geom_ZPP_$MarchingSquares.run = function(iso,bx0,by0,bx1,by1,cell,quality,combine,ret) {
	var xp;
	xp = (bx1 - bx0) / (function($this) {
		var $r;
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.x;
		return $r;
	}(this));
	var xn = xp | 0;
	var yp;
	yp = (by1 - by0) / (function($this) {
		var $r;
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.y;
		return $r;
	}(this));
	var yn = yp | 0;
	if(xp != xn) xn++;
	if(yp != yn) yn++;
	if(combine) {
		if(zpp_$nape_geom_ZPP_$MarchingSquares.map == null) zpp_$nape_geom_ZPP_$MarchingSquares.map = new zpp_$nape_util_ZNPArray2_$ZPP_$MarchPair(xn,yn); else zpp_$nape_geom_ZPP_$MarchingSquares.map.resize(xn,yn,null);
	}
	if(zpp_$nape_geom_ZPP_$MarchingSquares.isos == null) zpp_$nape_geom_ZPP_$MarchingSquares.isos = new zpp_$nape_util_ZNPArray2_$Float(xn + 1,yn + 1); else zpp_$nape_geom_ZPP_$MarchingSquares.isos.resize(xn + 1,yn + 1,0);
	var _g1 = 0;
	var _g = yn + 1;
	while(_g1 < _g) {
		var y = _g1++;
		var yc;
		if(y == 0) yc = by0; else if(y <= yn) yc = by0 + (function($this) {
			var $r;
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * y; else yc = by1;
		var _g3 = 0;
		var _g2 = xn + 1;
		while(_g3 < _g2) {
			var x = _g3++;
			var xc;
			if(x == 0) xc = bx0; else if(x <= xn) xc = bx0 + (function($this) {
				var $r;
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * x; else xc = bx1;
			zpp_$nape_geom_ZPP_$MarchingSquares.isos.set(x,y,iso(xc,yc));
		}
	}
	if(zpp_$nape_geom_ZPP_$MarchingSquares.ints == null) zpp_$nape_geom_ZPP_$MarchingSquares.ints = new zpp_$nape_util_ZNPArray2_$ZPP_$GeomVert(xn + 1,(yn << 1) + 1); else zpp_$nape_geom_ZPP_$MarchingSquares.ints.resize(xn + 1,(yn << 1) + 1,null);
	var spans = null;
	if(combine) {
		if(zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool == null) spans = new zpp_$nape_geom_ZPP_$MarchSpan(); else {
			spans = zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool;
			zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool = spans.next;
			spans.next = null;
		}
		spans.out = false;
		spans.rank = 0;
	}
	var py = by0;
	var _g4 = 0;
	while(_g4 < yn) {
		var y1 = _g4++;
		var y0 = py;
		var y11;
		if(y1 == yn - 1) y11 = by1; else y11 = by0 + (function($this) {
			var $r;
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * (y1 + 1);
		py = y11;
		var px = bx0;
		var pre = null;
		var _g11 = 0;
		while(_g11 < xn) {
			var x1 = _g11++;
			var x0 = px;
			var x11;
			if(x1 == xn - 1) x11 = bx1; else x11 = bx0 + (function($this) {
				var $r;
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * (x1 + 1);
			px = x11;
			var fstx = x1 == 0 || !combine;
			var fsty = y1 == 0 || !combine;
			var sndx = x1 == xn - 1 || !combine;
			var sndy = y1 == yn - 1 || !combine;
			var pp = zpp_$nape_geom_ZPP_$MarchingSquares.me.marchSquare(iso,zpp_$nape_geom_ZPP_$MarchingSquares.isos,zpp_$nape_geom_ZPP_$MarchingSquares.ints,x0,y0,x11,y11,x1,y1,fstx,fsty,sndx,sndy,quality);
			if(pp == null) {
				pre = null;
				continue;
			}
			if(combine) {
				var pd;
				if(pp.p2 != null && pp.okey2 != 14) pd = pp.p2; else pd = pp.p1;
				if(((pd == pp.p2?pp.okey2:pp.okey1) & 128) == 0) pp.pd = pd.prev; else pp.pd = pd.prev.prev;
				zpp_$nape_geom_ZPP_$MarchingSquares.map.set(x1,y1,pp);
				if(pre != null && zpp_$nape_geom_ZPP_$MarchingSquares.me.combLeft(pp.key1)) {
					zpp_$nape_geom_ZPP_$MarchingSquares.me.combLR(pre,pp);
					pp.span1 = pre.spanr;
				} else {
					if(zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool == null) pp.span1 = new zpp_$nape_geom_ZPP_$MarchSpan(); else {
						pp.span1 = zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool;
						zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool = pp.span1.next;
						pp.span1.next = null;
					}
					pp.span1.alloc();
					pp.span1.next = spans;
					spans = pp.span1;
				}
				if(pp.p2 != null) {
					if(zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool == null) pp.span2 = new zpp_$nape_geom_ZPP_$MarchSpan(); else {
						pp.span2 = zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool;
						zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool = pp.span2.next;
						pp.span2.next = null;
					}
					pp.span2.alloc();
					pp.span2.next = spans;
					spans = pp.span2;
					pp.spanr = pp.span2;
				} else pp.spanr = pp.span1;
				if(zpp_$nape_geom_ZPP_$MarchingSquares.me.combRight(pp.keyr)) pre = pp; else pre = null;
			} else {
				zpp_$nape_geom_ZPP_$MarchingSquares.me.output(ret,pp.p1);
				if(pp.p2 != null) zpp_$nape_geom_ZPP_$MarchingSquares.me.output(ret,pp.p2);
				var o = pp;
				o.p1 = o.p2 = o.pr = o.pd = null;
				o.span1 = o.span2 = o.spanr = null;
				o.next = zpp_$nape_geom_ZPP_$MarchPair.zpp_pool;
				zpp_$nape_geom_ZPP_$MarchPair.zpp_pool = o;
			}
		}
	}
	if(!combine) return;
	var _g5 = 1;
	while(_g5 < yn) {
		var y2 = _g5++;
		var pre1 = null;
		var _g12 = 0;
		while(_g12 < xn) {
			var x2 = _g12++;
			var b = zpp_$nape_geom_ZPP_$MarchingSquares.map.get(x2,y2);
			if(b == null) {
				pre1 = null;
				continue;
			}
			var bkey;
			if(b.p2 != null && b.okey2 == 14) bkey = b.okey2; else bkey = b.okey1;
			if(!zpp_$nape_geom_ZPP_$MarchingSquares.me.combUp(bkey)) {
				pre1 = null;
				continue;
			}
			var a = zpp_$nape_geom_ZPP_$MarchingSquares.map.get(x2,y2 - 1);
			if(a == null) {
				pre1 = null;
				continue;
			}
			var akey;
			if(a.p2 != null && a.okey2 == 56) akey = a.okey2; else akey = a.okey1;
			if(!zpp_$nape_geom_ZPP_$MarchingSquares.me.combDown(akey)) {
				pre1 = null;
				continue;
			}
			var ad;
			if(a.p2 != null && a.okey2 == 56) ad = a.span2; else ad = a.span1;
			var bu;
			if(b.p2 != null && b.okey2 == 14) bu = b.span2; else bu = b.span1;
			if((ad == ad.parent?ad:(function($this) {
				var $r;
				var obj = ad;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				$r = obj;
				return $r;
			}(this))) == (bu == bu.parent?bu:(function($this) {
				var $r;
				var obj1 = bu;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				$r = obj1;
				return $r;
			}(this)))) {
				if(pre1 != bu) zpp_$nape_geom_ZPP_$MarchingSquares.me.combUD_virtual(a,b);
			} else {
				var xr;
				if(ad == ad.parent) xr = ad; else {
					var obj2 = ad;
					var stack2 = null;
					while(obj2 != obj2.parent) {
						var nxt4 = obj2.parent;
						obj2.parent = stack2;
						stack2 = obj2;
						obj2 = nxt4;
					}
					while(stack2 != null) {
						var nxt5 = stack2.parent;
						stack2.parent = obj2;
						stack2 = nxt5;
					}
					xr = obj2;
				}
				var yr;
				if(bu == bu.parent) yr = bu; else {
					var obj3 = bu;
					var stack3 = null;
					while(obj3 != obj3.parent) {
						var nxt6 = obj3.parent;
						obj3.parent = stack3;
						stack3 = obj3;
						obj3 = nxt6;
					}
					while(stack3 != null) {
						var nxt7 = stack3.parent;
						stack3.parent = obj3;
						stack3 = nxt7;
					}
					yr = obj3;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
				zpp_$nape_geom_ZPP_$MarchingSquares.me.combUD(a,b);
			}
			var key;
			if(bu == b.span2) key = b.okey2; else key = b.okey1;
			if((key & 4) != 0) pre1 = bu; else pre1 = null;
		}
	}
	var _g6 = 0;
	while(_g6 < yn) {
		var y3 = _g6++;
		var _g13 = 0;
		while(_g13 < xn) {
			var x3 = _g13++;
			var p = zpp_$nape_geom_ZPP_$MarchingSquares.map.get(x3,y3);
			if(p == null) continue;
			var root;
			if(p.span1 == p.span1.parent) root = p.span1; else {
				var obj4 = p.span1;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				root = obj4;
			}
			if(!root.out) {
				root.out = true;
				zpp_$nape_geom_ZPP_$MarchingSquares.me.output(ret,p.p1);
			}
			if(p.p2 != null) {
				if(p.span2 == p.span2.parent) root = p.span2; else {
					var obj5 = p.span2;
					var stack5 = null;
					while(obj5 != obj5.parent) {
						var nxt10 = obj5.parent;
						obj5.parent = stack5;
						stack5 = obj5;
						obj5 = nxt10;
					}
					while(stack5 != null) {
						var nxt11 = stack5.parent;
						stack5.parent = obj5;
						stack5 = nxt11;
					}
					root = obj5;
				}
				if(!root.out) {
					root.out = true;
					zpp_$nape_geom_ZPP_$MarchingSquares.me.output(ret,p.p2);
				}
			}
			var o1 = p;
			o1.p1 = o1.p2 = o1.pr = o1.pd = null;
			o1.span1 = o1.span2 = o1.spanr = null;
			o1.next = zpp_$nape_geom_ZPP_$MarchPair.zpp_pool;
			zpp_$nape_geom_ZPP_$MarchPair.zpp_pool = o1;
			zpp_$nape_geom_ZPP_$MarchingSquares.map.set(x3,y3,null);
		}
	}
	while(spans != null) {
		var t = spans;
		spans = t.next;
		var o2 = t;
		o2.parent = o2;
		o2.next = zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool;
		zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool = o2;
	}
};
zpp_$nape_geom_ZPP_$MarchingSquares.ISO = function(iso,x,y) {
	return iso(x,y);
};
zpp_$nape_geom_ZPP_$MarchingSquares.prototype = {
	output: function(ret,poly) {
		if(poly == null || poly.next == poly || poly.next == poly.prev?true:(function($this) {
			var $r;
			var a;
			{
				var area = 0.0;
				var F = poly;
				var L = poly;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
				a = area * 0.5;
			}
			$r = a * a < nape_Config.epsilon * nape_Config.epsilon;
			return $r;
		}(this))) {
			while(!(poly == null)) if(poly != null && poly.prev == poly) {
				poly.next = poly.prev = null;
				poly = poly = null;
			} else {
				var retnodes = poly.next;
				poly.prev.next = poly.next;
				poly.next.prev = poly.prev;
				poly.next = poly.prev = null;
				poly = null;
				poly = retnodes;
			}
			return;
		}
		var gp = nape_geom_GeomPoly.get();
		gp.zpp_inner.vertices = poly;
		if(ret.zpp_inner.reverse_flag) ret.push(gp); else ret.unshift(gp);
	}
	,linkright: function(poly,key) {
		var kind = key & 7;
		if(kind == 0) return poly; else if(kind == 3) return poly.next.next; else return poly.next;
	}
	,linkleft: function(poly,key) {
		if((key & 1) == 0) return poly.prev; else return poly;
	}
	,linkdown: function(poly,key) {
		if((key & 128) == 0) return poly.prev; else return poly.prev.prev;
	}
	,linkup: function(poly,key) {
		return poly;
	}
	,combLR: function(a,b) {
		var ap = this.linkright(a.pr,a.okeyr);
		var bp = this.linkleft(b.p1,b.okey1);
		var ap2 = ap.next;
		var bp2 = bp.prev;
		if((a.keyr & 4) != 0) {
			if(b.pr == b.p1) b.pr = ap.prev;
			b.p1 = ap.prev;
			ap.prev.next = bp.next;
			bp.next.prev = ap.prev;
			var o = ap;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
			zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
		} else {
			ap.next = bp.next;
			bp.next.prev = ap;
		}
		var o1 = bp;
		if(o1.wrap != null) {
			o1.wrap.zpp_inner._inuse = false;
			o1.wrap.dispose();
			o1.wrap = null;
		}
		o1.prev = o1.next = null;
		o1.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o1;
		if((a.keyr & 16) != 0) {
			b.pd = ap2.next;
			ap2.next.prev = bp2.prev;
			bp2.prev.next = ap2.next;
			var o2 = ap2;
			if(o2.wrap != null) {
				o2.wrap.zpp_inner._inuse = false;
				o2.wrap.dispose();
				o2.wrap = null;
			}
			o2.prev = o2.next = null;
			o2.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
			zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o2;
		} else {
			ap2.prev = bp2.prev;
			bp2.prev.next = ap2;
		}
		var o3 = bp2;
		if(o3.wrap != null) {
			o3.wrap.zpp_inner._inuse = false;
			o3.wrap.dispose();
			o3.wrap = null;
		}
		o3.prev = o3.next = null;
		o3.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o3;
	}
	,combUD: function(a,b) {
		var ad;
		if(a.p2 != null && a.key2 == 56) ad = a.p2; else ad = a.p1;
		var bu;
		if(b.p2 != null && b.key2 == 14) bu = b.p2; else bu = b.p1;
		var ap = a.pd;
		var bp = bu;
		var ap2 = ap.prev;
		var bp2 = bp.next;
		bp.next = ap.next;
		ap.next.prev = bp;
		var o = ap;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o;
		bp2.prev = ap2.prev;
		ap2.prev.next = bp2;
		if(ap2 == a.p1) a.p1 = bp2;
		var o1 = ap2;
		if(o1.wrap != null) {
			o1.wrap.zpp_inner._inuse = false;
			o1.wrap.dispose();
			o1.wrap = null;
		}
		o1.prev = o1.next = null;
		o1.next = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = o1;
	}
	,combUD_virtual: function(a,b) {
		var ad;
		if(a.p2 != null && a.key2 == 56) ad = a.p2; else ad = a.p1;
		var bu;
		if(b.p2 != null && b.key2 == 14) bu = b.p2; else bu = b.p1;
		var ap = a.pd;
		var bp = bu;
		var ap2 = ap.prev;
		var bp2 = bp.next;
		ap.forced = bp.forced = ap2.forced = bp2.forced = true;
	}
	,combLeft: function(key) {
		var flag = key & 1 | (key & 192) >> 5;
		return this.comb(flag);
	}
	,combRight: function(key) {
		var flag = (key & 28) >> 2;
		return this.comb(flag);
	}
	,combUp: function(key) {
		var flag = key & 7;
		return this.comb(flag);
	}
	,combDown: function(key) {
		var flag = (key & 112) >> 4;
		return this.comb(flag);
	}
	,comb: function(flag) {
		var cnt = 0;
		if((flag & 1) != 0) cnt++;
		if((flag & 2) != 0) cnt++;
		if((flag & 4) != 0) cnt++;
		return cnt >= 2;
	}
	,marchSquare: function(iso,isos,ints,x0,y0,x1,y1,xn,yn,fstx,fsty,sndx,sndy,quality) {
		var key = 0;
		var v0 = isos.list[yn * isos.width + xn];
		if(v0 < 0) key |= 8;
		var v1 = isos.list[yn * isos.width + (xn + 1)];
		if(v1 < 0) key |= 4;
		var v2 = isos.list[(yn + 1) * isos.width + (xn + 1)];
		if(v2 < 0) key |= 2;
		var v3 = isos.list[(yn + 1) * isos.width + xn];
		if(v3 < 0) key |= 1;
		if(key == 0) return null; else {
			var ret;
			if(zpp_$nape_geom_ZPP_$MarchPair.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$MarchPair(); else {
				ret = zpp_$nape_geom_ZPP_$MarchPair.zpp_pool;
				zpp_$nape_geom_ZPP_$MarchPair.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			if(key != 10 && key != 5) {
				var val = zpp_$nape_geom_ZPP_$MarchingSquares.look_march[key];
				ret.okey1 = val;
				var _g = 0;
				while(_g < 8) {
					var i = _g++;
					if((val & 1 << i) != 0) {
						var p = null;
						if(i == 0) {
							p = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
							if(fstx || fsty) p.forced = true;
						} else if(i == 2) {
							p = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
							if(sndx || fsty) p.forced = true;
						} else if(i == 4) {
							p = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
							if(sndx || sndy) p.forced = true;
						} else if(i == 6) {
							p = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
							if(fstx || sndy) p.forced = true;
						} else if(i == 1) {
							p = ints.list[(yn << 1) * ints.width + xn];
							if(p == null) {
								p = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
								ints.list[(yn << 1) * ints.width + xn] = p;
							} else p = zpp_$nape_geom_ZPP_$GeomVert.get(p.x,p.y);
							if(fsty) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
							}
						} else if(i == 5) {
							p = ints.list[((yn << 1) + 2) * ints.width + xn];
							if(p == null) {
								p = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
								ints.list[((yn << 1) + 2) * ints.width + xn] = p;
							} else p = zpp_$nape_geom_ZPP_$GeomVert.get(p.x,p.y);
							if(sndy) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
							}
						} else if(i == 3) {
							p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
							if(p == null) {
								p = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
							} else p = zpp_$nape_geom_ZPP_$GeomVert.get(p.x,p.y);
							if(sndx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
							}
						} else {
							p = ints.list[((yn << 1) + 1) * ints.width + xn];
							if(p == null) {
								p = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + xn] = p;
							} else p = zpp_$nape_geom_ZPP_$GeomVert.get(p.x,p.y);
							if(fstx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
							}
						}
						var obj = p;
						if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
							obj.prev = ret.p1;
							obj.next = ret.p1.next;
							ret.p1.next.prev = obj;
							ret.p1.next = obj;
						}
						ret.p1 = obj;
					}
				}
				ret.p1 = ret.p1.next;
				ret.key1 = val;
				if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
					val = 0;
					ret.key1 = 0;
					ret.p1 = null;
				}
				if(val == 0) ret = null; else {
					ret.pr = ret.p1;
					ret.okeyr = ret.okey1;
					ret.keyr = ret.key1;
				}
			} else {
				var mid = iso(0.5 * (x0 + x1),0.5 * (y0 + y1)) < 0;
				if(key == 10) {
					if(mid) {
						var val1 = 187;
						ret.okey1 = val1;
						var _g1 = 0;
						while(_g1 < 8) {
							var i1 = _g1++;
							if((val1 & 1 << i1) != 0) {
								var p1 = null;
								if(i1 == 0) {
									p1 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
									if(fstx || fsty) p1.forced = true;
								} else if(i1 == 2) {
									p1 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
									if(sndx || fsty) p1.forced = true;
								} else if(i1 == 4) {
									p1 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
									if(sndx || sndy) p1.forced = true;
								} else if(i1 == 6) {
									p1 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
									if(fstx || sndy) p1.forced = true;
								} else if(i1 == 1) {
									p1 = ints.list[(yn << 1) * ints.width + xn];
									if(p1 == null) {
										p1 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p1;
									} else p1 = zpp_$nape_geom_ZPP_$GeomVert.get(p1.x,p1.y);
									if(fsty) p1.forced = true;
									if(p1.x == x0 || p1.x == x1) {
										if(p1.x == x0 && (val1 & 1) != 0 || p1.x == x1 && (val1 & 4) != 0) val1 ^= 2;
									}
								} else if(i1 == 5) {
									p1 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p1 == null) {
										p1 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p1;
									} else p1 = zpp_$nape_geom_ZPP_$GeomVert.get(p1.x,p1.y);
									if(sndy) p1.forced = true;
									if(p1.x == x0 || p1.x == x1) {
										if(p1.x == x0 && (val1 & 64) != 0 || p1.x == x1 && (val1 & 16) != 0) val1 ^= 32;
									}
								} else if(i1 == 3) {
									p1 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p1 == null) {
										p1 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p1;
									} else p1 = zpp_$nape_geom_ZPP_$GeomVert.get(p1.x,p1.y);
									if(sndx) p1.forced = true;
									if(p1.y == y0 || p1.y == y1) {
										if(p1.y == y0 && (val1 & 4) != 0 || p1.y == y1 && (val1 & 16) != 0) val1 ^= 8;
									}
								} else {
									p1 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p1 == null) {
										p1 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p1;
									} else p1 = zpp_$nape_geom_ZPP_$GeomVert.get(p1.x,p1.y);
									if(fstx) p1.forced = true;
									if(p1.y == y0 || p1.y == y1) {
										if(p1.y == y0 && (val1 & 1) != 0 || p1.y == y1 && (val1 & 64) != 0) val1 ^= 128;
									}
								}
								var obj1 = p1;
								if(ret.p1 == null) ret.p1 = obj1.prev = obj1.next = obj1; else {
									obj1.prev = ret.p1;
									obj1.next = ret.p1.next;
									ret.p1.next.prev = obj1;
									ret.p1.next = obj1;
								}
								ret.p1 = obj1;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val1;
						if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
							val1 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val1 == 0) ret = null; else {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						}
					} else {
						var val2 = 131;
						ret.okey1 = val2;
						var _g2 = 0;
						while(_g2 < 8) {
							var i2 = _g2++;
							if((val2 & 1 << i2) != 0) {
								var p2 = null;
								if(i2 == 0) {
									p2 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
									if(fstx || fsty) p2.forced = true;
								} else if(i2 == 2) {
									p2 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
									if(sndx || fsty) p2.forced = true;
								} else if(i2 == 4) {
									p2 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
									if(sndx || sndy) p2.forced = true;
								} else if(i2 == 6) {
									p2 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
									if(fstx || sndy) p2.forced = true;
								} else if(i2 == 1) {
									p2 = ints.list[(yn << 1) * ints.width + xn];
									if(p2 == null) {
										p2 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p2;
									} else p2 = zpp_$nape_geom_ZPP_$GeomVert.get(p2.x,p2.y);
									if(fsty) p2.forced = true;
									if(p2.x == x0 || p2.x == x1) {
										if(p2.x == x0 && (val2 & 1) != 0 || p2.x == x1 && (val2 & 4) != 0) val2 ^= 2;
									}
								} else if(i2 == 5) {
									p2 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p2 == null) {
										p2 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p2;
									} else p2 = zpp_$nape_geom_ZPP_$GeomVert.get(p2.x,p2.y);
									if(sndy) p2.forced = true;
									if(p2.x == x0 || p2.x == x1) {
										if(p2.x == x0 && (val2 & 64) != 0 || p2.x == x1 && (val2 & 16) != 0) val2 ^= 32;
									}
								} else if(i2 == 3) {
									p2 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p2 == null) {
										p2 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p2;
									} else p2 = zpp_$nape_geom_ZPP_$GeomVert.get(p2.x,p2.y);
									if(sndx) p2.forced = true;
									if(p2.y == y0 || p2.y == y1) {
										if(p2.y == y0 && (val2 & 4) != 0 || p2.y == y1 && (val2 & 16) != 0) val2 ^= 8;
									}
								} else {
									p2 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p2 == null) {
										p2 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p2;
									} else p2 = zpp_$nape_geom_ZPP_$GeomVert.get(p2.x,p2.y);
									if(fstx) p2.forced = true;
									if(p2.y == y0 || p2.y == y1) {
										if(p2.y == y0 && (val2 & 1) != 0 || p2.y == y1 && (val2 & 64) != 0) val2 ^= 128;
									}
								}
								var obj2 = p2;
								if(ret.p1 == null) ret.p1 = obj2.prev = obj2.next = obj2; else {
									obj2.prev = ret.p1;
									obj2.next = ret.p1.next;
									ret.p1.next.prev = obj2;
									ret.p1.next = obj2;
								}
								ret.p1 = obj2;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val2;
						if(val2 == 1 || val2 == 4 || val2 == 16 || val2 == 64 || val2 == 3 || val2 == 12 || val2 == 48 || val2 == 192 || val2 == 129 || val2 == 6 || val2 == 24 || val2 == 96 || val2 == 5 || val2 == 20 || val2 == 80 || val2 == 65 || val2 == 17 || val2 == 68) {
							val2 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val2 != 0) {
							var val3 = 56;
							ret.okey2 = val3;
							var _g3 = 0;
							while(_g3 < 8) {
								var i3 = _g3++;
								if((val3 & 1 << i3) != 0) {
									var p3 = null;
									if(i3 == 0) {
										p3 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
										if(fstx || fsty) p3.forced = true;
									} else if(i3 == 2) {
										p3 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
										if(sndx || fsty) p3.forced = true;
									} else if(i3 == 4) {
										p3 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
										if(sndx || sndy) p3.forced = true;
									} else if(i3 == 6) {
										p3 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
										if(fstx || sndy) p3.forced = true;
									} else if(i3 == 1) {
										p3 = ints.list[(yn << 1) * ints.width + xn];
										if(p3 == null) {
											p3 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
											ints.list[(yn << 1) * ints.width + xn] = p3;
										} else p3 = zpp_$nape_geom_ZPP_$GeomVert.get(p3.x,p3.y);
										if(fsty) p3.forced = true;
										if(p3.x == x0 || p3.x == x1) {
											if(p3.x == x0 && (val3 & 1) != 0 || p3.x == x1 && (val3 & 4) != 0) val3 ^= 2;
										}
									} else if(i3 == 5) {
										p3 = ints.list[((yn << 1) + 2) * ints.width + xn];
										if(p3 == null) {
											p3 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
											ints.list[((yn << 1) + 2) * ints.width + xn] = p3;
										} else p3 = zpp_$nape_geom_ZPP_$GeomVert.get(p3.x,p3.y);
										if(sndy) p3.forced = true;
										if(p3.x == x0 || p3.x == x1) {
											if(p3.x == x0 && (val3 & 64) != 0 || p3.x == x1 && (val3 & 16) != 0) val3 ^= 32;
										}
									} else if(i3 == 3) {
										p3 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
										if(p3 == null) {
											p3 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p3;
										} else p3 = zpp_$nape_geom_ZPP_$GeomVert.get(p3.x,p3.y);
										if(sndx) p3.forced = true;
										if(p3.y == y0 || p3.y == y1) {
											if(p3.y == y0 && (val3 & 4) != 0 || p3.y == y1 && (val3 & 16) != 0) val3 ^= 8;
										}
									} else {
										p3 = ints.list[((yn << 1) + 1) * ints.width + xn];
										if(p3 == null) {
											p3 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + xn] = p3;
										} else p3 = zpp_$nape_geom_ZPP_$GeomVert.get(p3.x,p3.y);
										if(fstx) p3.forced = true;
										if(p3.y == y0 || p3.y == y1) {
											if(p3.y == y0 && (val3 & 1) != 0 || p3.y == y1 && (val3 & 64) != 0) val3 ^= 128;
										}
									}
									var obj3 = p3;
									if(ret.p2 == null) ret.p2 = obj3.prev = obj3.next = obj3; else {
										obj3.prev = ret.p2;
										obj3.next = ret.p2.next;
										ret.p2.next.prev = obj3;
										ret.p2.next = obj3;
									}
									ret.p2 = obj3;
								}
							}
							ret.p2 = ret.p2.next;
							ret.key2 = val3;
							if(val3 == 1 || val3 == 4 || val3 == 16 || val3 == 64 || val3 == 3 || val3 == 12 || val3 == 48 || val3 == 192 || val3 == 129 || val3 == 6 || val3 == 24 || val3 == 96 || val3 == 5 || val3 == 20 || val3 == 80 || val3 == 65 || val3 == 17 || val3 == 68) {
								val3 = 0;
								ret.key2 = 0;
								ret.p2 = null;
							}
							if(val3 == 0) {
								ret.pr = ret.p1;
								ret.okeyr = ret.okey1;
								ret.keyr = ret.key1;
							} else {
								ret.pr = ret.p2;
								ret.okeyr = ret.okey2;
								ret.keyr = ret.key2;
							}
						} else {
							var val4 = 56;
							ret.okey1 = val4;
							var _g4 = 0;
							while(_g4 < 8) {
								var i4 = _g4++;
								if((val4 & 1 << i4) != 0) {
									var p4 = null;
									if(i4 == 0) {
										p4 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
										if(fstx || fsty) p4.forced = true;
									} else if(i4 == 2) {
										p4 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
										if(sndx || fsty) p4.forced = true;
									} else if(i4 == 4) {
										p4 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
										if(sndx || sndy) p4.forced = true;
									} else if(i4 == 6) {
										p4 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
										if(fstx || sndy) p4.forced = true;
									} else if(i4 == 1) {
										p4 = ints.list[(yn << 1) * ints.width + xn];
										if(p4 == null) {
											p4 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
											ints.list[(yn << 1) * ints.width + xn] = p4;
										} else p4 = zpp_$nape_geom_ZPP_$GeomVert.get(p4.x,p4.y);
										if(fsty) p4.forced = true;
										if(p4.x == x0 || p4.x == x1) {
											if(p4.x == x0 && (val4 & 1) != 0 || p4.x == x1 && (val4 & 4) != 0) val4 ^= 2;
										}
									} else if(i4 == 5) {
										p4 = ints.list[((yn << 1) + 2) * ints.width + xn];
										if(p4 == null) {
											p4 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
											ints.list[((yn << 1) + 2) * ints.width + xn] = p4;
										} else p4 = zpp_$nape_geom_ZPP_$GeomVert.get(p4.x,p4.y);
										if(sndy) p4.forced = true;
										if(p4.x == x0 || p4.x == x1) {
											if(p4.x == x0 && (val4 & 64) != 0 || p4.x == x1 && (val4 & 16) != 0) val4 ^= 32;
										}
									} else if(i4 == 3) {
										p4 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
										if(p4 == null) {
											p4 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p4;
										} else p4 = zpp_$nape_geom_ZPP_$GeomVert.get(p4.x,p4.y);
										if(sndx) p4.forced = true;
										if(p4.y == y0 || p4.y == y1) {
											if(p4.y == y0 && (val4 & 4) != 0 || p4.y == y1 && (val4 & 16) != 0) val4 ^= 8;
										}
									} else {
										p4 = ints.list[((yn << 1) + 1) * ints.width + xn];
										if(p4 == null) {
											p4 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + xn] = p4;
										} else p4 = zpp_$nape_geom_ZPP_$GeomVert.get(p4.x,p4.y);
										if(fstx) p4.forced = true;
										if(p4.y == y0 || p4.y == y1) {
											if(p4.y == y0 && (val4 & 1) != 0 || p4.y == y1 && (val4 & 64) != 0) val4 ^= 128;
										}
									}
									var obj4 = p4;
									if(ret.p1 == null) ret.p1 = obj4.prev = obj4.next = obj4; else {
										obj4.prev = ret.p1;
										obj4.next = ret.p1.next;
										ret.p1.next.prev = obj4;
										ret.p1.next = obj4;
									}
									ret.p1 = obj4;
								}
							}
							ret.p1 = ret.p1.next;
							ret.key1 = val4;
							if(val4 == 1 || val4 == 4 || val4 == 16 || val4 == 64 || val4 == 3 || val4 == 12 || val4 == 48 || val4 == 192 || val4 == 129 || val4 == 6 || val4 == 24 || val4 == 96 || val4 == 5 || val4 == 20 || val4 == 80 || val4 == 65 || val4 == 17 || val4 == 68) {
								val4 = 0;
								ret.key1 = 0;
								ret.p1 = null;
							}
							if(val4 == 0) ret = null; else {
								ret.pr = ret.p1;
								ret.okeyr = ret.okey1;
								ret.keyr = ret.key1;
							}
						}
					}
				} else if(mid) {
					var val5 = 238;
					ret.okey1 = val5;
					var _g5 = 0;
					while(_g5 < 8) {
						var i5 = _g5++;
						if((val5 & 1 << i5) != 0) {
							var p5 = null;
							if(i5 == 0) {
								p5 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
								if(fstx || fsty) p5.forced = true;
							} else if(i5 == 2) {
								p5 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
								if(sndx || fsty) p5.forced = true;
							} else if(i5 == 4) {
								p5 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
								if(sndx || sndy) p5.forced = true;
							} else if(i5 == 6) {
								p5 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
								if(fstx || sndy) p5.forced = true;
							} else if(i5 == 1) {
								p5 = ints.list[(yn << 1) * ints.width + xn];
								if(p5 == null) {
									p5 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p5;
								} else p5 = zpp_$nape_geom_ZPP_$GeomVert.get(p5.x,p5.y);
								if(fsty) p5.forced = true;
								if(p5.x == x0 || p5.x == x1) {
									if(p5.x == x0 && (val5 & 1) != 0 || p5.x == x1 && (val5 & 4) != 0) val5 ^= 2;
								}
							} else if(i5 == 5) {
								p5 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p5 == null) {
									p5 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p5;
								} else p5 = zpp_$nape_geom_ZPP_$GeomVert.get(p5.x,p5.y);
								if(sndy) p5.forced = true;
								if(p5.x == x0 || p5.x == x1) {
									if(p5.x == x0 && (val5 & 64) != 0 || p5.x == x1 && (val5 & 16) != 0) val5 ^= 32;
								}
							} else if(i5 == 3) {
								p5 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p5 == null) {
									p5 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p5;
								} else p5 = zpp_$nape_geom_ZPP_$GeomVert.get(p5.x,p5.y);
								if(sndx) p5.forced = true;
								if(p5.y == y0 || p5.y == y1) {
									if(p5.y == y0 && (val5 & 4) != 0 || p5.y == y1 && (val5 & 16) != 0) val5 ^= 8;
								}
							} else {
								p5 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p5 == null) {
									p5 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p5;
								} else p5 = zpp_$nape_geom_ZPP_$GeomVert.get(p5.x,p5.y);
								if(fstx) p5.forced = true;
								if(p5.y == y0 || p5.y == y1) {
									if(p5.y == y0 && (val5 & 1) != 0 || p5.y == y1 && (val5 & 64) != 0) val5 ^= 128;
								}
							}
							var obj5 = p5;
							if(ret.p1 == null) ret.p1 = obj5.prev = obj5.next = obj5; else {
								obj5.prev = ret.p1;
								obj5.next = ret.p1.next;
								ret.p1.next.prev = obj5;
								ret.p1.next = obj5;
							}
							ret.p1 = obj5;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val5;
					if(val5 == 1 || val5 == 4 || val5 == 16 || val5 == 64 || val5 == 3 || val5 == 12 || val5 == 48 || val5 == 192 || val5 == 129 || val5 == 6 || val5 == 24 || val5 == 96 || val5 == 5 || val5 == 20 || val5 == 80 || val5 == 65 || val5 == 17 || val5 == 68) {
						val5 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val5 == 0) ret = null; else {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					}
				} else {
					var val6 = 224;
					ret.okey1 = val6;
					var _g6 = 0;
					while(_g6 < 8) {
						var i6 = _g6++;
						if((val6 & 1 << i6) != 0) {
							var p6 = null;
							if(i6 == 0) {
								p6 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
								if(fstx || fsty) p6.forced = true;
							} else if(i6 == 2) {
								p6 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
								if(sndx || fsty) p6.forced = true;
							} else if(i6 == 4) {
								p6 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
								if(sndx || sndy) p6.forced = true;
							} else if(i6 == 6) {
								p6 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
								if(fstx || sndy) p6.forced = true;
							} else if(i6 == 1) {
								p6 = ints.list[(yn << 1) * ints.width + xn];
								if(p6 == null) {
									p6 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p6;
								} else p6 = zpp_$nape_geom_ZPP_$GeomVert.get(p6.x,p6.y);
								if(fsty) p6.forced = true;
								if(p6.x == x0 || p6.x == x1) {
									if(p6.x == x0 && (val6 & 1) != 0 || p6.x == x1 && (val6 & 4) != 0) val6 ^= 2;
								}
							} else if(i6 == 5) {
								p6 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p6 == null) {
									p6 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p6;
								} else p6 = zpp_$nape_geom_ZPP_$GeomVert.get(p6.x,p6.y);
								if(sndy) p6.forced = true;
								if(p6.x == x0 || p6.x == x1) {
									if(p6.x == x0 && (val6 & 64) != 0 || p6.x == x1 && (val6 & 16) != 0) val6 ^= 32;
								}
							} else if(i6 == 3) {
								p6 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p6 == null) {
									p6 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p6;
								} else p6 = zpp_$nape_geom_ZPP_$GeomVert.get(p6.x,p6.y);
								if(sndx) p6.forced = true;
								if(p6.y == y0 || p6.y == y1) {
									if(p6.y == y0 && (val6 & 4) != 0 || p6.y == y1 && (val6 & 16) != 0) val6 ^= 8;
								}
							} else {
								p6 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p6 == null) {
									p6 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p6;
								} else p6 = zpp_$nape_geom_ZPP_$GeomVert.get(p6.x,p6.y);
								if(fstx) p6.forced = true;
								if(p6.y == y0 || p6.y == y1) {
									if(p6.y == y0 && (val6 & 1) != 0 || p6.y == y1 && (val6 & 64) != 0) val6 ^= 128;
								}
							}
							var obj6 = p6;
							if(ret.p1 == null) ret.p1 = obj6.prev = obj6.next = obj6; else {
								obj6.prev = ret.p1;
								obj6.next = ret.p1.next;
								ret.p1.next.prev = obj6;
								ret.p1.next = obj6;
							}
							ret.p1 = obj6;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val6;
					if(val6 == 1 || val6 == 4 || val6 == 16 || val6 == 64 || val6 == 3 || val6 == 12 || val6 == 48 || val6 == 192 || val6 == 129 || val6 == 6 || val6 == 24 || val6 == 96 || val6 == 5 || val6 == 20 || val6 == 80 || val6 == 65 || val6 == 17 || val6 == 68) {
						val6 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val6 != 0) {
						var val7 = 14;
						ret.okey2 = val7;
						var _g7 = 0;
						while(_g7 < 8) {
							var i7 = _g7++;
							if((val7 & 1 << i7) != 0) {
								var p7 = null;
								if(i7 == 0) {
									p7 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
									if(fstx || fsty) p7.forced = true;
								} else if(i7 == 2) {
									p7 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
									if(sndx || fsty) p7.forced = true;
								} else if(i7 == 4) {
									p7 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
									if(sndx || sndy) p7.forced = true;
								} else if(i7 == 6) {
									p7 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
									if(fstx || sndy) p7.forced = true;
								} else if(i7 == 1) {
									p7 = ints.list[(yn << 1) * ints.width + xn];
									if(p7 == null) {
										p7 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p7;
									} else p7 = zpp_$nape_geom_ZPP_$GeomVert.get(p7.x,p7.y);
									if(fsty) p7.forced = true;
									if(p7.x == x0 || p7.x == x1) {
										if(p7.x == x0 && (val7 & 1) != 0 || p7.x == x1 && (val7 & 4) != 0) val7 ^= 2;
									}
								} else if(i7 == 5) {
									p7 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p7 == null) {
										p7 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p7;
									} else p7 = zpp_$nape_geom_ZPP_$GeomVert.get(p7.x,p7.y);
									if(sndy) p7.forced = true;
									if(p7.x == x0 || p7.x == x1) {
										if(p7.x == x0 && (val7 & 64) != 0 || p7.x == x1 && (val7 & 16) != 0) val7 ^= 32;
									}
								} else if(i7 == 3) {
									p7 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p7 == null) {
										p7 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p7;
									} else p7 = zpp_$nape_geom_ZPP_$GeomVert.get(p7.x,p7.y);
									if(sndx) p7.forced = true;
									if(p7.y == y0 || p7.y == y1) {
										if(p7.y == y0 && (val7 & 4) != 0 || p7.y == y1 && (val7 & 16) != 0) val7 ^= 8;
									}
								} else {
									p7 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p7 == null) {
										p7 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p7;
									} else p7 = zpp_$nape_geom_ZPP_$GeomVert.get(p7.x,p7.y);
									if(fstx) p7.forced = true;
									if(p7.y == y0 || p7.y == y1) {
										if(p7.y == y0 && (val7 & 1) != 0 || p7.y == y1 && (val7 & 64) != 0) val7 ^= 128;
									}
								}
								var obj7 = p7;
								if(ret.p2 == null) ret.p2 = obj7.prev = obj7.next = obj7; else {
									obj7.prev = ret.p2;
									obj7.next = ret.p2.next;
									ret.p2.next.prev = obj7;
									ret.p2.next = obj7;
								}
								ret.p2 = obj7;
							}
						}
						ret.p2 = ret.p2.next;
						ret.key2 = val7;
						if(val7 == 1 || val7 == 4 || val7 == 16 || val7 == 64 || val7 == 3 || val7 == 12 || val7 == 48 || val7 == 192 || val7 == 129 || val7 == 6 || val7 == 24 || val7 == 96 || val7 == 5 || val7 == 20 || val7 == 80 || val7 == 65 || val7 == 17 || val7 == 68) {
							val7 = 0;
							ret.key2 = 0;
							ret.p2 = null;
						}
						if(val7 == 0) {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						} else {
							ret.pr = ret.p2;
							ret.okeyr = ret.okey2;
							ret.keyr = ret.key2;
						}
					} else {
						var val8 = 14;
						ret.okey1 = val8;
						var _g8 = 0;
						while(_g8 < 8) {
							var i8 = _g8++;
							if((val8 & 1 << i8) != 0) {
								var p8 = null;
								if(i8 == 0) {
									p8 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y0);
									if(fstx || fsty) p8.forced = true;
								} else if(i8 == 2) {
									p8 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y0);
									if(sndx || fsty) p8.forced = true;
								} else if(i8 == 4) {
									p8 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,y1);
									if(sndx || sndy) p8.forced = true;
								} else if(i8 == 6) {
									p8 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,y1);
									if(fstx || sndy) p8.forced = true;
								} else if(i8 == 1) {
									p8 = ints.list[(yn << 1) * ints.width + xn];
									if(p8 == null) {
										p8 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p8;
									} else p8 = zpp_$nape_geom_ZPP_$GeomVert.get(p8.x,p8.y);
									if(fsty) p8.forced = true;
									if(p8.x == x0 || p8.x == x1) {
										if(p8.x == x0 && (val8 & 1) != 0 || p8.x == x1 && (val8 & 4) != 0) val8 ^= 2;
									}
								} else if(i8 == 5) {
									p8 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p8 == null) {
										p8 = zpp_$nape_geom_ZPP_$GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p8;
									} else p8 = zpp_$nape_geom_ZPP_$GeomVert.get(p8.x,p8.y);
									if(sndy) p8.forced = true;
									if(p8.x == x0 || p8.x == x1) {
										if(p8.x == x0 && (val8 & 64) != 0 || p8.x == x1 && (val8 & 16) != 0) val8 ^= 32;
									}
								} else if(i8 == 3) {
									p8 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p8 == null) {
										p8 = zpp_$nape_geom_ZPP_$GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p8;
									} else p8 = zpp_$nape_geom_ZPP_$GeomVert.get(p8.x,p8.y);
									if(sndx) p8.forced = true;
									if(p8.y == y0 || p8.y == y1) {
										if(p8.y == y0 && (val8 & 4) != 0 || p8.y == y1 && (val8 & 16) != 0) val8 ^= 8;
									}
								} else {
									p8 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p8 == null) {
										p8 = zpp_$nape_geom_ZPP_$GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p8;
									} else p8 = zpp_$nape_geom_ZPP_$GeomVert.get(p8.x,p8.y);
									if(fstx) p8.forced = true;
									if(p8.y == y0 || p8.y == y1) {
										if(p8.y == y0 && (val8 & 1) != 0 || p8.y == y1 && (val8 & 64) != 0) val8 ^= 128;
									}
								}
								var obj8 = p8;
								if(ret.p1 == null) ret.p1 = obj8.prev = obj8.next = obj8; else {
									obj8.prev = ret.p1;
									obj8.next = ret.p1.next;
									ret.p1.next.prev = obj8;
									ret.p1.next = obj8;
								}
								ret.p1 = obj8;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val8;
						if(val8 == 1 || val8 == 4 || val8 == 16 || val8 == 64 || val8 == 3 || val8 == 12 || val8 == 48 || val8 == 192 || val8 == 129 || val8 == 6 || val8 == 24 || val8 == 96 || val8 == 5 || val8 == 20 || val8 == 80 || val8 == 65 || val8 == 17 || val8 == 68) {
							val8 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val8 == 0) ret = null; else {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						}
					}
				}
			}
			return ret;
		}
	}
	,lerp: function(x0,x1,v0,v1) {
		if(v0 == 0) return x0; else if(v1 == 0) return x1; else {
			var dv = v0 - v1;
			var t;
			if(dv * dv < nape_Config.epsilon * nape_Config.epsilon) t = 0.5; else t = v0 / dv;
			if(t < 0) t = 0; else if(t > 1) t = 1;
			return x0 + t * (x1 - x0);
		}
	}
	,xlerp: function(x0,x1,y,v0,v1,iso,quality) {
		var xm = this.lerp(x0,x1,v0,v1);
		while(quality-- != 0 && x0 < xm && xm < x1) {
			var vm = iso(xm,y);
			if(vm == 0) break;
			if(v0 * vm < 0) {
				x1 = xm;
				v1 = vm;
			} else {
				x0 = xm;
				v0 = vm;
			}
			xm = this.lerp(x0,x1,v0,v1);
		}
		return xm;
	}
	,ylerp: function(y0,y1,x,v0,v1,iso,quality) {
		var ym = this.lerp(y0,y1,v0,v1);
		while(quality-- != 0 && y0 < ym && ym < y1) {
			var vm = iso(x,ym);
			if(vm == 0) break;
			if(v0 * vm < 0) {
				y1 = ym;
				v1 = vm;
			} else {
				y0 = ym;
				v0 = vm;
			}
			ym = this.lerp(y0,y1,v0,v1);
		}
		return ym;
	}
	,__class__: zpp_$nape_geom_ZPP_$MarchingSquares
};
var zpp_$nape_geom_ZPP_$Mat23 = function() {
	this.next = null;
	this._invalidate = null;
	this.ty = 0.0;
	this.tx = 0.0;
	this.d = 0.0;
	this.c = 0.0;
	this.b = 0.0;
	this.a = 0.0;
	this.outer = null;
};
$hxClasses["zpp_nape.geom.ZPP_Mat23"] = zpp_$nape_geom_ZPP_$Mat23;
zpp_$nape_geom_ZPP_$Mat23.__name__ = ["zpp_nape","geom","ZPP_Mat23"];
zpp_$nape_geom_ZPP_$Mat23.get = function() {
	var ret;
	if(zpp_$nape_geom_ZPP_$Mat23.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$Mat23(); else {
		ret = zpp_$nape_geom_ZPP_$Mat23.zpp_pool;
		zpp_$nape_geom_ZPP_$Mat23.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	return ret;
};
zpp_$nape_geom_ZPP_$Mat23.identity = function() {
	var ret = zpp_$nape_geom_ZPP_$Mat23.get();
	ret.setas(1,0,0,1,0,0);
	return ret;
};
zpp_$nape_geom_ZPP_$Mat23.prototype = {
	outer: null
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_geom_Mat23();
			var o = this.outer.zpp_inner;
			o.next = zpp_$nape_geom_ZPP_$Mat23.zpp_pool;
			zpp_$nape_geom_ZPP_$Mat23.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,_invalidate: null
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate();
	}
	,set: function(m) {
		this.setas(m.a,m.b,m.c,m.d,m.tx,m.ty);
	}
	,setas: function(a,b,c,d,tx,ty) {
		this.tx = tx;
		this.ty = ty;
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
	}
	,next: null
	,free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$Mat23
};
var zpp_$nape_geom_ZPP_$MatMN = function(m,n) {
	this.x = null;
	this.n = 0;
	this.m = 0;
	this.outer = null;
	this.m = m;
	this.n = n;
	this.x = [];
	var _g1 = 0;
	var _g = m * n;
	while(_g1 < _g) {
		var i = _g1++;
		this.x.push(0.0);
	}
};
$hxClasses["zpp_nape.geom.ZPP_MatMN"] = zpp_$nape_geom_ZPP_$MatMN;
zpp_$nape_geom_ZPP_$MatMN.__name__ = ["zpp_nape","geom","ZPP_MatMN"];
zpp_$nape_geom_ZPP_$MatMN.prototype = {
	outer: null
	,m: null
	,n: null
	,x: null
	,__class__: zpp_$nape_geom_ZPP_$MatMN
};
var zpp_$nape_geom_ZPP_$Monotone = function() { };
$hxClasses["zpp_nape.geom.ZPP_Monotone"] = zpp_$nape_geom_ZPP_$Monotone;
zpp_$nape_geom_ZPP_$Monotone.__name__ = ["zpp_nape","geom","ZPP_Monotone"];
zpp_$nape_geom_ZPP_$Monotone.bisector = function(b) {
	var a = b.prev;
	var c = b.next;
	var ux = 0.0;
	var uy = 0.0;
	ux = b.x - a.x;
	uy = b.y - a.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	var ret = zpp_$nape_geom_ZPP_$Vec2.get(-uy - vy,ux + vx,null);
	var d = ret.x * ret.x + ret.y * ret.y;
	var imag = 1.0 / Math.sqrt(d);
	var t = imag;
	ret.x *= t;
	ret.y *= t;
	if(vy * ux - vx * uy < 0) {
		ret.x = -ret.x;
		ret.y = -ret.y;
	}
	return ret;
};
zpp_$nape_geom_ZPP_$Monotone.below = function(p,q) {
	if(p.y < q.y) return true; else if(p.y > q.y) return false; else if(p.x < q.x) return true; else if(p.x > q.x) return false; else {
		var po = zpp_$nape_geom_ZPP_$Monotone.bisector(p);
		var qo = zpp_$nape_geom_ZPP_$Monotone.bisector(q);
		var t = 1.0;
		po.x += p.x * t;
		po.y += p.y * t;
		var t1 = 1.0;
		qo.x += q.x * t1;
		qo.y += q.y * t1;
		var ret = po.x < qo.x || po.x == qo.x && po.y < qo.y;
		var o = po;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		var o1 = qo;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1._isimmutable = null;
		o1._validate = null;
		o1._invalidate = null;
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
		return ret;
	}
};
zpp_$nape_geom_ZPP_$Monotone.above = function(p,q) {
	return zpp_$nape_geom_ZPP_$Monotone.below(q,p);
};
zpp_$nape_geom_ZPP_$Monotone.left_vertex = function(p) {
	var pre = p.prev;
	return pre.y > p.y || pre.y == p.y && p.next.y < p.y;
};
zpp_$nape_geom_ZPP_$Monotone.isMonotone = function(P) {
	var min = P;
	var max = P;
	var F = P.next;
	var L = P;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			if(p.y < min.y) min = p;
			if(p.y > max.y) max = p;
			nite = nite.next;
		} while(nite != L);
	}
	var ret = true;
	var pre = min;
	if(max != min.next) {
		var F1 = min.next;
		var L1 = max;
		if(F1 != null) {
			var nite1 = F1;
			do {
				var p1 = nite1;
				if(p1.y < pre.y) {
					ret = false;
					break;
				}
				pre = p1;
				nite1 = nite1.next;
			} while(nite1 != L1);
		}
	}
	if(!ret) return false;
	pre = min;
	if(max != min.prev) {
		var F2 = min.prev;
		var L2 = max;
		if(F2 != null) {
			var nite2 = F2;
			do {
				var p2 = nite2;
				if(p2.y < pre.y) {
					ret = false;
					break;
				}
				pre = p2;
				nite2 = nite2.prev;
			} while(nite2 != L2);
		}
	}
	return ret;
};
zpp_$nape_geom_ZPP_$Monotone.sharedPPoly = null;
zpp_$nape_geom_ZPP_$Monotone.getShared = function() {
	if(zpp_$nape_geom_ZPP_$Monotone.sharedPPoly == null) zpp_$nape_geom_ZPP_$Monotone.sharedPPoly = new zpp_$nape_geom_ZPP_$PartitionedPoly();
	return zpp_$nape_geom_ZPP_$Monotone.sharedPPoly;
};
zpp_$nape_geom_ZPP_$Monotone.decompose = function(P,poly) {
	if(poly == null) poly = new zpp_$nape_geom_ZPP_$PartitionedPoly(P); else poly.init(P);
	if(poly.vertices == null) return poly;
	if(zpp_$nape_geom_ZPP_$Monotone.queue == null) zpp_$nape_geom_ZPP_$Monotone.queue = new zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex();
	var F = poly.vertices;
	var L = poly.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			zpp_$nape_geom_ZPP_$Monotone.queue.add(p);
			var ux = 0.0;
			var uy = 0.0;
			ux = p.next.x - p.x;
			uy = p.next.y - p.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = p.prev.x - p.x;
			vy = p.prev.y - p.y;
			var cx = vy * ux - vx * uy > 0.0;
			if(zpp_$nape_geom_ZPP_$Monotone.below(p.prev,p)) {
				if(zpp_$nape_geom_ZPP_$Monotone.below(p.next,p)) {
					if(cx) p.type = 0; else p.type = 3;
				} else p.type = 4;
			} else if(zpp_$nape_geom_ZPP_$Monotone.below(p,p.next)) {
				if(cx) p.type = 1; else p.type = 2;
			} else p.type = 4;
			nite = nite.next;
		} while(nite != L);
	}
	var xxlist = zpp_$nape_geom_ZPP_$Monotone.queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_$nape_geom_ZPP_$Monotone.above(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	if(zpp_$nape_geom_ZPP_$Monotone.edges == null) {
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) zpp_$nape_geom_ZPP_$Monotone.edges = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
			zpp_$nape_geom_ZPP_$Monotone.edges = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = zpp_$nape_geom_ZPP_$Monotone.edges.next;
			zpp_$nape_geom_ZPP_$Monotone.edges.next = null;
		}
		null;
		zpp_$nape_geom_ZPP_$Monotone.edges.lt = zpp_$nape_geom_ZPP_$PartitionVertex.edge_lt;
		zpp_$nape_geom_ZPP_$Monotone.edges.swapped = zpp_$nape_geom_ZPP_$PartitionVertex.edge_swap;
	}
	while(!(zpp_$nape_geom_ZPP_$Monotone.queue.head == null)) {
		var v = zpp_$nape_geom_ZPP_$Monotone.queue.pop_unsafe();
		var _g = v.type;
		switch(_g) {
		case 0:
			v.helper = v;
			v.node = zpp_$nape_geom_ZPP_$Monotone.edges.insert(v);
			break;
		case 1:
			var e = v.prev;
			if(e.helper.type == 2) poly.add_diagonal(v,e.helper);
			zpp_$nape_geom_ZPP_$Monotone.edges.remove_node(e.node);
			break;
		case 3:
			var e1;
			var ret = null;
			if(!zpp_$nape_geom_ZPP_$Monotone.edges.empty()) {
				var set_ite = zpp_$nape_geom_ZPP_$Monotone.edges.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!zpp_$nape_geom_ZPP_$PartitionVertex.vert_lt(elt,v)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			e1 = ret;
			if(e1 != null) {
				poly.add_diagonal(v,e1.helper);
				e1.helper = v;
			}
			v.node = zpp_$nape_geom_ZPP_$Monotone.edges.insert(v);
			v.helper = v;
			break;
		case 2:
			var e2 = v.prev;
			if(e2.helper.type == 2) poly.add_diagonal(v,e2.helper);
			zpp_$nape_geom_ZPP_$Monotone.edges.remove_node(e2.node);
			var e3;
			var ret1 = null;
			if(!zpp_$nape_geom_ZPP_$Monotone.edges.empty()) {
				var set_ite1 = zpp_$nape_geom_ZPP_$Monotone.edges.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var elt1 = set_ite1.data;
					if(!zpp_$nape_geom_ZPP_$PartitionVertex.vert_lt(elt1,v)) {
						ret1 = elt1;
						break;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			e3 = ret1;
			if(e3 != null) {
				if(e3.helper.type == 2) poly.add_diagonal(v,e3.helper);
				e3.helper = v;
			}
			break;
		case 4:
			var pre = v.prev;
			if(zpp_$nape_geom_ZPP_$Monotone.left_vertex(v)) {
				if(pre.helper.type == 2) poly.add_diagonal(v,pre.helper);
				zpp_$nape_geom_ZPP_$Monotone.edges.remove_node(pre.node);
				v.node = zpp_$nape_geom_ZPP_$Monotone.edges.insert(v);
				v.helper = v;
			} else {
				var e4;
				var ret2 = null;
				if(!zpp_$nape_geom_ZPP_$Monotone.edges.empty()) {
					var set_ite2 = zpp_$nape_geom_ZPP_$Monotone.edges.parent;
					while(set_ite2.prev != null) set_ite2 = set_ite2.prev;
					while(set_ite2 != null) {
						var elt2 = set_ite2.data;
						if(!zpp_$nape_geom_ZPP_$PartitionVertex.vert_lt(elt2,v)) {
							ret2 = elt2;
							break;
						}
						if(set_ite2.next != null) {
							set_ite2 = set_ite2.next;
							while(set_ite2.prev != null) set_ite2 = set_ite2.prev;
						} else {
							while(set_ite2.parent != null && set_ite2 == set_ite2.parent.next) set_ite2 = set_ite2.parent;
							set_ite2 = set_ite2.parent;
						}
					}
				}
				e4 = ret2;
				if(e4.helper.type == 2) poly.add_diagonal(v,e4.helper);
				e4.helper = v;
			}
			break;
		}
	}
	return poly;
};
var zpp_$nape_geom_ZPP_$PartitionVertex = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.rightchain = false;
	this.helper = null;
	this.type = 0;
	this.diagonals = null;
	this.forced = false;
	this.y = 0.0;
	this.x = 0.0;
	this.mag = 0;
	this.id = 0;
	this.id = zpp_$nape_geom_ZPP_$PartitionVertex.nextId++;
	this.diagonals = new zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex();
};
$hxClasses["zpp_nape.geom.ZPP_PartitionVertex"] = zpp_$nape_geom_ZPP_$PartitionVertex;
zpp_$nape_geom_ZPP_$PartitionVertex.__name__ = ["zpp_nape","geom","ZPP_PartitionVertex"];
zpp_$nape_geom_ZPP_$PartitionVertex.get = function(x) {
	var ret;
	if(zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$PartitionVertex(); else {
		ret = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
		zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = x.x;
	ret.y = x.y;
	return ret;
};
zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance = function(edge,vert) {
	var flip = edge.next.y > edge.y;
	var ux = 0.0;
	var uy = 0.0;
	ux = edge.next.x - edge.x;
	uy = edge.next.y - edge.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = vert.x - edge.x;
	vy = vert.y - edge.y;
	return (flip?-1.0:1.0) * (vy * ux - vx * uy);
};
zpp_$nape_geom_ZPP_$PartitionVertex.vert_lt = function(edge,vert) {
	if(vert == edge || vert == edge.next) return true; else if(edge.y == edge.next.y) return (function($this) {
		var $r;
		var x = edge.x;
		var y = edge.next.x;
		$r = x < y?x:y;
		return $r;
	}(this)) <= vert.x; else return zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(edge,vert) <= 0.0;
};
zpp_$nape_geom_ZPP_$PartitionVertex.edge_swap = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
zpp_$nape_geom_ZPP_$PartitionVertex.edge_lt = function(p,q) {
	if(p == q && p.next == q.next) return false;
	if(p == q.next) return !zpp_$nape_geom_ZPP_$PartitionVertex.vert_lt(p,q); else if(q == p.next) return zpp_$nape_geom_ZPP_$PartitionVertex.vert_lt(q,p); else if(p.y == p.next.y) if(q.y == q.next.y) return (function($this) {
		var $r;
		var x = p.x;
		var y = p.next.x;
		$r = x > y?x:y;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var x1 = q.x;
		var y1 = q.next.x;
		$r = x1 > y1?x1:y1;
		return $r;
	}(this)); else return zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(q,p) > 0.0 || zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(q,p.next) > 0.0; else {
		var qRight = zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(p,q);
		var qNextRight = zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(p,q.next);
		if(qRight == 0 && qNextRight == 0) return (function($this) {
			var $r;
			var x2 = p.x;
			var y2 = p.next.x;
			$r = x2 > y2?x2:y2;
			return $r;
		}(this)) > (function($this) {
			var $r;
			var x3 = q.x;
			var y3 = q.next.x;
			$r = x3 > y3?x3:y3;
			return $r;
		}(this));
		if(qRight * qNextRight >= 0) return qRight < 0 || qNextRight < 0;
		var pRight = zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(q,p);
		var pNextRight = zpp_$nape_geom_ZPP_$PartitionVertex.rightdistance(q,p.next);
		if(pRight * pNextRight >= 0) return pRight > 0 || pNextRight > 0;
		return false;
	}
};
zpp_$nape_geom_ZPP_$PartitionVertex.prototype = {
	id: null
	,mag: null
	,x: null
	,y: null
	,forced: null
	,diagonals: null
	,type: null
	,helper: null
	,rightchain: null
	,next: null
	,prev: null
	,alloc: function() {
	}
	,free: function() {
		this.helper = null;
	}
	,copy: function() {
		var ret;
		if(zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$PartitionVertex(); else {
			ret = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
			zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.x = this.x;
		ret.y = this.y;
		ret.forced = this.forced;
		return ret;
	}
	,sort: function() {
		var ux = 0.0;
		var uy = 0.0;
		var vx = 0.0;
		var vy = 0.0;
		var vorient;
		ux = this.prev.x - this.x;
		uy = this.prev.y - this.y;
		vx = this.next.x - this.x;
		vy = this.next.y - this.y;
		var ret = vy * ux - vx * uy;
		if(ret > 0) vorient = -1; else if(ret == 0) vorient = 0; else vorient = 1;
		var xxlist = this.diagonals;
		if(!(xxlist.head == null) && xxlist.head.next != null) {
			var head = xxlist.head;
			var tail = null;
			var left = null;
			var right = null;
			var nxt = null;
			var listSize = 1;
			var numMerges;
			var leftSize;
			var rightSize;
			do {
				numMerges = 0;
				left = head;
				tail = head = null;
				while(left != null) {
					numMerges++;
					right = left;
					leftSize = 0;
					rightSize = listSize;
					while(right != null && leftSize < listSize) {
						leftSize++;
						right = right.next;
					}
					while(leftSize > 0 || rightSize > 0 && right != null) {
						if(leftSize == 0) {
							nxt = right;
							right = right.next;
							rightSize--;
						} else if(rightSize == 0 || right == null) {
							nxt = left;
							left = left.next;
							leftSize--;
						} else if(vorient == 1?(function($this) {
							var $r;
							{
								ux = left.elt.x - $this.x;
								uy = left.elt.y - $this.y;
							}
							{
								vx = right.elt.x - $this.x;
								vy = right.elt.y - $this.y;
							}
							var ret1 = vy * ux - vx * uy;
							$r = ret1 > 0?-1:ret1 == 0?0:1;
							return $r;
						}(this)) == 1:(function($this) {
							var $r;
							var d1;
							{
								ux = $this.prev.x - $this.x;
								uy = $this.prev.y - $this.y;
								vx = left.elt.x - $this.x;
								vy = left.elt.y - $this.y;
								var ret2 = vy * ux - vx * uy;
								if(ret2 > 0) d1 = -1; else if(ret2 == 0) d1 = 0; else d1 = 1;
							}
							var d2;
							{
								ux = $this.prev.x - $this.x;
								uy = $this.prev.y - $this.y;
								vx = right.elt.x - $this.x;
								vy = right.elt.y - $this.y;
								var ret3 = vy * ux - vx * uy;
								if(ret3 > 0) d2 = -1; else if(ret3 == 0) d2 = 0; else d2 = 1;
							}
							$r = d1 * d2 == 1 || d1 * d2 == 0 && (d1 == 1 || d2 == 1)?(function($this) {
								var $r;
								{
									ux = left.elt.x - $this.x;
									uy = left.elt.y - $this.y;
								}
								{
									vx = right.elt.x - $this.x;
									vy = right.elt.y - $this.y;
								}
								var ret4 = vy * ux - vx * uy;
								$r = ret4 > 0?-1:ret4 == 0?0:1;
								return $r;
							}($this)) == 1:d1 == -1 || d2 == -1?d2 == -1:d1 == 0 && d2 == 0?(function($this) {
								var $r;
								{
									ux = $this.x - $this.prev.x;
									uy = $this.y - $this.prev.y;
								}
								{
									vx = left.elt.x - $this.x;
									vy = left.elt.y - $this.y;
								}
								var d11 = ux * vx + uy * vy;
								{
									vx = right.elt.x - $this.x;
									vy = right.elt.y - $this.y;
								}
								var d21 = ux * vx + uy * vy;
								$r = d11 < 0 && d21 > 0?true:d21 < 0 && d11 > 0?false:true;
								return $r;
							}($this)):true;
							return $r;
						}(this))) {
							nxt = left;
							left = left.next;
							leftSize--;
						} else {
							nxt = right;
							right = right.next;
							rightSize--;
						}
						if(tail != null) tail.next = nxt; else head = nxt;
						tail = nxt;
					}
					left = right;
				}
				tail.next = null;
				listSize <<= 1;
			} while(numMerges > 1);
			xxlist.head = head;
			xxlist.modified = true;
			xxlist.pushmod = true;
		}
	}
	,node: null
	,__class__: zpp_$nape_geom_ZPP_$PartitionVertex
};
var zpp_$nape_geom_ZPP_$PartitionedPoly = function(P) {
	this.next = null;
	this.vertices = null;
	this.init(P);
};
$hxClasses["zpp_nape.geom.ZPP_PartitionedPoly"] = zpp_$nape_geom_ZPP_$PartitionedPoly;
zpp_$nape_geom_ZPP_$PartitionedPoly.__name__ = ["zpp_nape","geom","ZPP_PartitionedPoly"];
zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList = null;
zpp_$nape_geom_ZPP_$PartitionedPoly.getSharedPP = function() {
	if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList = new zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly();
	return zpp_$nape_geom_ZPP_$PartitionedPoly.sharedPPList;
};
zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList = null;
zpp_$nape_geom_ZPP_$PartitionedPoly.getShared = function() {
	if(zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList == null) zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
	return zpp_$nape_geom_ZPP_$PartitionedPoly.sharedGVList;
};
zpp_$nape_geom_ZPP_$PartitionedPoly.prototype = {
	vertices: null
	,eq: function(a,b) {
		return zpp_$nape_geom_ZPP_$VecMath.vec_dsq(a.x,a.y,b.x,b.y) < nape_Config.epsilon * nape_Config.epsilon;
	}
	,next: null
	,alloc: function() {
	}
	,free: function() {
	}
	,init: function(P) {
		if(P == null) return;
		var cw;
		cw = (function($this) {
			var $r;
			var area = 0.0;
			{
				var F = P;
				var L = P;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area * 0.5;
			return $r;
		}(this)) > 0.0;
		var p = P;
		do {
			if(cw) {
				var obj = zpp_$nape_geom_ZPP_$PartitionVertex.get(p);
				if(this.vertices == null) this.vertices = obj.prev = obj.next = obj; else {
					obj.prev = this.vertices;
					obj.next = this.vertices.next;
					this.vertices.next.prev = obj;
					this.vertices.next = obj;
				}
				this.vertices = obj;
			} else {
				var obj1 = zpp_$nape_geom_ZPP_$PartitionVertex.get(p);
				if(this.vertices == null) this.vertices = obj1.prev = obj1.next = obj1; else {
					obj1.next = this.vertices;
					obj1.prev = this.vertices.prev;
					this.vertices.prev.next = obj1;
					this.vertices.prev = obj1;
				}
				this.vertices = obj1;
			}
			this.vertices.forced = p.forced;
			p = p.next;
		} while(p != P);
		this.remove_collinear_vertices();
	}
	,remove_collinear_vertices: function() {
		var p = this.vertices;
		var skip = true;
		while(skip || p != this.vertices) {
			skip = false;
			if(this.eq(p,p.next)) {
				if(p == this.vertices) {
					this.vertices = p.next;
					skip = true;
				}
				if(p.forced) p.next.forced = true;
				if(p != null && p.prev == p) {
					p.next = p.prev = null;
					var o = p;
					o.helper = null;
					null;
					o.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
					zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o;
					p = p = null;
				} else {
					var retnodes = p.next;
					p.prev.next = p.next;
					p.next.prev = p.prev;
					p.next = p.prev = null;
					var o1 = p;
					o1.helper = null;
					null;
					o1.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
					zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o1;
					p = null;
					p = retnodes;
				}
				if(p == null) {
					this.vertices = null;
					break;
				}
			} else p = p.next;
		}
		if(this.vertices == null) return true;
		var removed;
		do {
			removed = false;
			p = this.vertices;
			skip = true;
			while(skip || p != this.vertices) {
				skip = false;
				var pre = p.prev;
				var ux = 0.0;
				var uy = 0.0;
				ux = p.x - pre.x;
				uy = p.y - pre.y;
				var vx = 0.0;
				var vy = 0.0;
				vx = p.next.x - p.x;
				vy = p.next.y - p.y;
				var crs = vy * ux - vx * uy;
				if(crs * crs >= nape_Config.epsilon * nape_Config.epsilon) p = p.next; else {
					if(p == this.vertices) {
						this.vertices = p.next;
						skip = true;
					}
					if(p != null && p.prev == p) {
						p.next = p.prev = null;
						var o2 = p;
						o2.helper = null;
						null;
						o2.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
						zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o2;
						p = p = null;
					} else {
						var retnodes1 = p.next;
						p.prev.next = p.next;
						p.next.prev = p.prev;
						p.next = p.prev = null;
						var o3 = p;
						o3.helper = null;
						null;
						o3.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
						zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o3;
						p = null;
						p = retnodes1;
					}
					removed = true;
					if(p == null) {
						removed = false;
						this.vertices = null;
						break;
					}
				}
			}
		} while(removed);
		return this.vertices == null;
	}
	,add_diagonal: function(p,q) {
		p.diagonals.add(q);
		q.diagonals.add(p);
		p.forced = q.forced = true;
	}
	,extract_partitions: function(ret) {
		if(ret == null) ret = new zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly();
		if(this.vertices != null) {
			var F = this.vertices;
			var L = this.vertices;
			if(F != null) {
				var nite = F;
				do {
					var c = nite;
					c.sort();
					nite = nite.next;
				} while(nite != L);
			}
			this.pull_partitions(this.vertices,ret);
			while(!(this.vertices == null)) if(this.vertices != null && this.vertices.prev == this.vertices) {
				this.vertices.next = this.vertices.prev = null;
				var o = this.vertices;
				o.helper = null;
				null;
				o.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
				zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o;
				this.vertices = this.vertices = null;
			} else {
				var retnodes = this.vertices.next;
				this.vertices.prev.next = this.vertices.next;
				this.vertices.next.prev = this.vertices.prev;
				this.vertices.next = this.vertices.prev = null;
				var o1 = this.vertices;
				o1.helper = null;
				null;
				o1.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
				zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o1;
				this.vertices = null;
				this.vertices = retnodes;
			}
			var pre = null;
			var cx_ite = ret.head;
			while(cx_ite != null) {
				var p = cx_ite.elt;
				if(p.remove_collinear_vertices()) {
					ret.erase(pre);
					continue;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
		}
		return ret;
	}
	,pull_partitions: function(start,ret) {
		var poly;
		if(zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool == null) poly = new zpp_$nape_geom_ZPP_$PartitionedPoly(); else {
			poly = zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool;
			zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool = poly.next;
			poly.next = null;
		}
		null;
		var next = start;
		do {
			var obj = next.copy();
			if(poly.vertices == null) poly.vertices = obj.prev = obj.next = obj; else {
				obj.prev = poly.vertices;
				obj.next = poly.vertices.next;
				poly.vertices.next.prev = obj;
				poly.vertices.next = obj;
			}
			poly.vertices = obj;
			poly.vertices.forced = next.forced;
			if(!(next.diagonals.head == null)) {
				var diag = next.diagonals.inlined_pop_unsafe();
				if(diag == start) break; else next = this.pull_partitions(next,ret);
			} else next = next.next;
		} while(next != start);
		if((function($this) {
			var $r;
			var area = 0.0;
			{
				var F = poly.vertices;
				var L = poly.vertices;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area * 0.5;
			return $r;
		}(this)) != 0) ret.add(poly);
		return next;
	}
	,extract: function(ret) {
		if(ret == null) ret = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
		if(this.vertices != null) {
			var F = this.vertices;
			var L = this.vertices;
			if(F != null) {
				var nite = F;
				do {
					var c = nite;
					c.sort();
					nite = nite.next;
				} while(nite != L);
			}
			this.pull(this.vertices,ret);
			while(!(this.vertices == null)) if(this.vertices != null && this.vertices.prev == this.vertices) {
				this.vertices.next = this.vertices.prev = null;
				var o = this.vertices;
				o.helper = null;
				null;
				o.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
				zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o;
				this.vertices = this.vertices = null;
			} else {
				var retnodes = this.vertices.next;
				this.vertices.prev.next = this.vertices.next;
				this.vertices.next.prev = this.vertices.prev;
				this.vertices.next = this.vertices.prev = null;
				var o1 = this.vertices;
				o1.helper = null;
				null;
				o1.next = zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool;
				zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = o1;
				this.vertices = null;
				this.vertices = retnodes;
			}
		}
		return ret;
	}
	,pull: function(start,ret) {
		var poly = null;
		var next = start;
		do {
			var obj = zpp_$nape_geom_ZPP_$GeomVert.get(next.x,next.y);
			if(poly == null) poly = obj.prev = obj.next = obj; else {
				obj.prev = poly;
				obj.next = poly.next;
				poly.next.prev = obj;
				poly.next = obj;
			}
			poly = obj;
			poly.forced = next.forced;
			if(!(next.diagonals.head == null)) {
				var diag = next.diagonals.inlined_pop_unsafe();
				if(diag == start) break; else next = this.pull(next,ret);
			} else next = next.next;
		} while(next != start);
		var area;
		var area1 = 0.0;
		var F = poly;
		var L = poly;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				area1 += v.x * (v.next.y - v.prev.y);
				nite = nite.next;
			} while(nite != L);
		}
		area = area1 * 0.5;
		if(area * area >= nape_Config.epsilon * nape_Config.epsilon) {
			if(!(function($this) {
				var $r;
				var p = poly;
				var skip = true;
				while(skip || p != poly) {
					skip = false;
					if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(p.x,p.y,p.next.x,p.next.y) < nape_Config.epsilon * nape_Config.epsilon) {
						if(p == poly) {
							poly = p.next;
							skip = true;
						}
						if(p.forced) p.next.forced = true;
						if(p != null && p.prev == p) {
							p.next = p.prev = null;
							p = p = null;
						} else {
							var retnodes = p.next;
							p.prev.next = p.next;
							p.next.prev = p.prev;
							p.next = p.prev = null;
							p = null;
							p = retnodes;
						}
						if(p == null) {
							poly = null;
							break;
						}
					} else p = p.next;
				}
				if(poly != null) {
					var removed;
					do {
						removed = false;
						p = poly;
						skip = true;
						while(skip || p != poly) {
							skip = false;
							var pre = p.prev;
							var ux = 0.0;
							var uy = 0.0;
							ux = p.x - pre.x;
							uy = p.y - pre.y;
							var vx = 0.0;
							var vy = 0.0;
							vx = p.next.x - p.x;
							vy = p.next.y - p.y;
							var crs = vy * ux - vx * uy;
							if(crs * crs >= nape_Config.epsilon * nape_Config.epsilon) p = p.next; else {
								if(p == poly) {
									poly = p.next;
									skip = true;
								}
								if(p != null && p.prev == p) {
									p.next = p.prev = null;
									p = p = null;
								} else {
									var retnodes1 = p.next;
									p.prev.next = p.next;
									p.next.prev = p.prev;
									p.next = p.prev = null;
									p = null;
									p = retnodes1;
								}
								removed = true;
								if(p == null) {
									removed = false;
									poly = null;
									break;
								}
							}
						}
					} while(removed);
				}
				$r = poly == null;
				return $r;
			}(this))) ret.add(poly);
		}
		return next;
	}
	,__class__: zpp_$nape_geom_ZPP_$PartitionedPoly
};
var zpp_$nape_geom_ZPP_$Ray = function() {
	this.zip_dir = false;
	this.absnormaly = 0.0;
	this.absnormalx = 0.0;
	this.normaly = 0.0;
	this.normalx = 0.0;
	this.idiry = 0.0;
	this.idirx = 0.0;
	this.diry = 0.0;
	this.dirx = 0.0;
	this.originy = 0.0;
	this.originx = 0.0;
	this.userData = null;
	this.maxdist = 0.0;
	this.direction = null;
	this.origin = null;
	this.origin = nape_geom_Vec2.get(null,null,null);
	this.origin.zpp_inner._invalidate = $bind(this,this.origin_invalidate);
	this.direction = nape_geom_Vec2.get(null,null,null);
	this.direction.zpp_inner._invalidate = $bind(this,this.direction_invalidate);
	this.originx = 0;
	this.originy = 0;
	this.dirx = 0;
	this.diry = 0;
	this.zip_dir = false;
};
$hxClasses["zpp_nape.geom.ZPP_Ray"] = zpp_$nape_geom_ZPP_$Ray;
zpp_$nape_geom_ZPP_$Ray.__name__ = ["zpp_nape","geom","ZPP_Ray"];
zpp_$nape_geom_ZPP_$Ray.prototype = {
	origin: null
	,direction: null
	,maxdist: null
	,userData: null
	,originx: null
	,originy: null
	,dirx: null
	,diry: null
	,idirx: null
	,idiry: null
	,normalx: null
	,normaly: null
	,absnormalx: null
	,absnormaly: null
	,origin_invalidate: function(x) {
		this.originx = x.x;
		this.originy = x.y;
	}
	,direction_invalidate: function(x) {
		this.dirx = x.x;
		this.diry = x.y;
		this.zip_dir = true;
	}
	,zip_dir: null
	,invalidate_dir: function() {
		this.zip_dir = true;
	}
	,validate_dir: function() {
		if(this.zip_dir) {
			this.zip_dir = false;
			var d = this.dirx * this.dirx + this.diry * this.diry;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			this.dirx *= t;
			this.diry *= t;
			this.idirx = 1 / this.dirx;
			this.idiry = 1 / this.diry;
			this.normalx = -this.diry;
			this.normaly = this.dirx;
			var x = this.normalx;
			if(x < 0) this.absnormalx = -x; else this.absnormalx = x;
			var x1 = this.normaly;
			if(x1 < 0) this.absnormaly = -x1; else this.absnormaly = x1;
		}
	}
	,rayAABB: function() {
		var x0 = this.originx;
		var x1 = x0;
		var y0 = this.originy;
		var y1 = y0;
		if(this.maxdist >= Infinity) {
			if(this.dirx > 0) x1 = Infinity; else if(this.dirx < 0) x1 = -Infinity;
			if(this.diry > 0) y1 = Infinity; else if(this.diry < 0) y1 = -Infinity;
		} else {
			x1 += this.maxdist * this.dirx;
			y1 += this.maxdist * this.diry;
		}
		if(x1 < x0) {
			var t = x0;
			x0 = x1;
			x1 = t;
		}
		if(y1 < y0) {
			var t1 = y0;
			y0 = y1;
			y1 = t1;
		}
		var rayab = zpp_$nape_geom_ZPP_$AABB.get(x0,y0,x1,y1);
		return rayab;
	}
	,aabbtest: function(a) {
		var dot1 = this.normalx * (this.originx - 0.5 * (a.minx + a.maxx)) + this.normaly * (this.originy - 0.5 * (a.miny + a.maxy));
		var dot2 = this.absnormalx * 0.5 * (a.maxx - a.minx) + this.absnormaly * 0.5 * (a.maxy - a.miny);
		return (function($this) {
			var $r;
			var x = dot1;
			$r = x < 0?-x:x;
			return $r;
		}(this)) < dot2;
	}
	,aabbsect: function(a) {
		var cx = this.originx >= a.minx && this.originx <= a.maxx;
		var cy = this.originy >= a.miny && this.originy <= a.maxy;
		if(cx && cy) return 0.0; else {
			var ret = -1.0;
			do {
				if(this.dirx >= 0 && this.originx >= a.maxx) break;
				if(this.dirx <= 0 && this.originx <= a.minx) break;
				if(this.diry >= 0 && this.originy >= a.maxy) break;
				if(this.diry <= 0 && this.originy <= a.miny) break;
				if(this.dirx > 0) {
					var t = (a.minx - this.originx) * this.idirx;
					if(t >= 0 && t <= this.maxdist) {
						var y = this.originy + t * this.diry;
						if(y >= a.miny && y <= a.maxy) {
							ret = t;
							break;
						}
					}
				} else if(this.dirx < 0) {
					var t1 = (a.maxx - this.originx) * this.idirx;
					if(t1 >= 0 && t1 <= this.maxdist) {
						var y1 = this.originy + t1 * this.diry;
						if(y1 >= a.miny && y1 <= a.maxy) {
							ret = t1;
							break;
						}
					}
				}
				if(this.diry > 0) {
					var t2 = (a.miny - this.originy) * this.idiry;
					if(t2 >= 0 && t2 <= this.maxdist) {
						var x = this.originx + t2 * this.dirx;
						if(x >= a.minx && x <= a.maxx) {
							ret = t2;
							break;
						}
					}
				} else if(this.diry < 0) {
					var t3 = (a.maxy - this.originy) * this.idiry;
					if(t3 >= 0 && t3 <= this.maxdist) {
						var x1 = this.originx + t3 * this.dirx;
						if(x1 >= a.minx && x1 <= a.maxx) {
							ret = t3;
							break;
						}
					}
				}
			} while(false);
			return ret;
		}
	}
	,circlesect: function(c,inner,mint) {
		if(c.zip_worldCOM) {
			if(c.body != null) {
				c.zip_worldCOM = false;
				if(c.zip_localCOM) {
					c.zip_localCOM = false;
					if(c.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) c.polygon.__validate_localCOM();
					if(c.wrap_localCOM != null) {
						c.wrap_localCOM.zpp_inner.x = c.localCOMx;
						c.wrap_localCOM.zpp_inner.y = c.localCOMy;
					}
				}
				c.body.validate_axis();
				c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
				c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
			}
		}
		var acx = 0.0;
		var acy = 0.0;
		acx = this.originx - c.worldCOMx;
		acy = this.originy - c.worldCOMy;
		var A = this.dirx * this.dirx + this.diry * this.diry;
		var B = 2 * (acx * this.dirx + acy * this.diry);
		var C = acx * acx + acy * acy - c.radius * c.radius;
		var det = B * B - 4 * A * C;
		if(det == 0) {
			var t = -B / 2 * A;
			if((!inner || C > 0) && t > 0 && t < mint && t <= this.maxdist) {
				var nx = 0.0;
				var ny = 0.0;
				nx = this.originx;
				ny = this.originy;
				var t1 = t;
				nx += this.dirx * t1;
				ny += this.diry * t1;
				var t2 = 1.0;
				nx -= c.worldCOMx * t2;
				ny -= c.worldCOMy * t2;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t3 = imag;
				nx *= t3;
				ny *= t3;
				if(C <= 0) {
					nx = -nx;
					ny = -ny;
				}
				return zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx,ny,null),t,C <= 0,c.outer);
			} else return null;
		} else {
			det = Math.sqrt(det);
			A = 1 / (2 * A);
			var t0 = (-B - det) * A;
			var t11 = (-B + det) * A;
			if(t0 > 0) {
				if(t0 < mint && t0 <= this.maxdist) {
					var nx1 = 0.0;
					var ny1 = 0.0;
					nx1 = this.originx;
					ny1 = this.originy;
					var t4 = t0;
					nx1 += this.dirx * t4;
					ny1 += this.diry * t4;
					var t5 = 1.0;
					nx1 -= c.worldCOMx * t5;
					ny1 -= c.worldCOMy * t5;
					var d1 = nx1 * nx1 + ny1 * ny1;
					var imag1 = 1.0 / Math.sqrt(d1);
					var t6 = imag1;
					nx1 *= t6;
					ny1 *= t6;
					return zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx1,ny1,null),t0,false,c.outer);
				} else return null;
			} else if(t11 > 0 && inner) {
				if(t11 < mint && t11 <= this.maxdist) {
					var nx2 = 0.0;
					var ny2 = 0.0;
					nx2 = this.originx;
					ny2 = this.originy;
					var t7 = t11;
					nx2 += this.dirx * t7;
					ny2 += this.diry * t7;
					var t8 = 1.0;
					nx2 -= c.worldCOMx * t8;
					ny2 -= c.worldCOMy * t8;
					var d2 = nx2 * nx2 + ny2 * ny2;
					var imag2 = 1.0 / Math.sqrt(d2);
					var t9 = imag2;
					nx2 *= t9;
					ny2 *= t9;
					nx2 = -nx2;
					ny2 = -ny2;
					return zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx2,ny2,null),t11,true,c.outer);
				} else return null;
			} else return null;
		}
	}
	,circlesect2: function(c,inner,list) {
		if(c.zip_worldCOM) {
			if(c.body != null) {
				c.zip_worldCOM = false;
				if(c.zip_localCOM) {
					c.zip_localCOM = false;
					if(c.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) c.polygon.__validate_localCOM();
					if(c.wrap_localCOM != null) {
						c.wrap_localCOM.zpp_inner.x = c.localCOMx;
						c.wrap_localCOM.zpp_inner.y = c.localCOMy;
					}
				}
				c.body.validate_axis();
				c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
				c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
			}
		}
		var acx = 0.0;
		var acy = 0.0;
		acx = this.originx - c.worldCOMx;
		acy = this.originy - c.worldCOMy;
		var A = this.dirx * this.dirx + this.diry * this.diry;
		var B = 2 * (acx * this.dirx + acy * this.diry);
		var C = acx * acx + acy * acy - c.radius * c.radius;
		var det = B * B - 4 * A * C;
		if(det == 0) {
			var t = -B / 2 * A;
			if((!inner || C > 0) && t > 0 && t <= this.maxdist) {
				var nx = 0.0;
				var ny = 0.0;
				nx = this.originx;
				ny = this.originy;
				var t1 = t;
				nx += this.dirx * t1;
				ny += this.diry * t1;
				var t2 = 1.0;
				nx -= c.worldCOMx * t2;
				ny -= c.worldCOMy * t2;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t3 = imag;
				nx *= t3;
				ny *= t3;
				if(C <= 0) {
					nx = -nx;
					ny = -ny;
				}
				var res = zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx,ny,null),t,C <= 0,c.outer);
				var pre = null;
				var cx_ite = list.zpp_inner.inner.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(res.zpp_inner.toiDistance < j.zpp_inner.toiDistance) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				list.zpp_inner.inner.inlined_insert(pre,res);
			}
		} else {
			det = Math.sqrt(det);
			A = 1 / (2 * A);
			var t0 = (-B - det) * A;
			var t11 = (-B + det) * A;
			if(t0 > 0 && t0 <= this.maxdist) {
				var nx1 = 0.0;
				var ny1 = 0.0;
				nx1 = this.originx;
				ny1 = this.originy;
				var t4 = t0;
				nx1 += this.dirx * t4;
				ny1 += this.diry * t4;
				var t5 = 1.0;
				nx1 -= c.worldCOMx * t5;
				ny1 -= c.worldCOMy * t5;
				var d1 = nx1 * nx1 + ny1 * ny1;
				var imag1 = 1.0 / Math.sqrt(d1);
				var t6 = imag1;
				nx1 *= t6;
				ny1 *= t6;
				var res1 = zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx1,ny1,null),t0,false,c.outer);
				var pre1 = null;
				var cx_ite1 = list.zpp_inner.inner.head;
				while(cx_ite1 != null) {
					var j1 = cx_ite1.elt;
					if(res1.zpp_inner.toiDistance < j1.zpp_inner.toiDistance) break;
					pre1 = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				list.zpp_inner.inner.inlined_insert(pre1,res1);
			}
			if(t11 > 0 && t11 <= this.maxdist && inner) {
				var nx2 = 0.0;
				var ny2 = 0.0;
				nx2 = this.originx;
				ny2 = this.originy;
				var t7 = t11;
				nx2 += this.dirx * t7;
				ny2 += this.diry * t7;
				var t8 = 1.0;
				nx2 -= c.worldCOMx * t8;
				ny2 -= c.worldCOMy * t8;
				var d2 = nx2 * nx2 + ny2 * ny2;
				var imag2 = 1.0 / Math.sqrt(d2);
				var t9 = imag2;
				nx2 *= t9;
				ny2 *= t9;
				nx2 = -nx2;
				ny2 = -ny2;
				var res2 = zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx2,ny2,null),t11,true,c.outer);
				var pre2 = null;
				var cx_ite2 = list.zpp_inner.inner.head;
				while(cx_ite2 != null) {
					var j2 = cx_ite2.elt;
					if(res2.zpp_inner.toiDistance < j2.zpp_inner.toiDistance) break;
					pre2 = cx_ite2;
					cx_ite2 = cx_ite2.next;
				}
				list.zpp_inner.inner.inlined_insert(pre2,res2);
			}
		}
	}
	,polysect: function(p,inner,mint) {
		var min = mint;
		var edge = null;
		var ei = p.edges.head;
		var cx_cont = true;
		var cx_itei = p.gverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var e = ei.elt;
			if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
				var _vx = 0.0;
				var _vy = 0.0;
				_vx = v.x - u.x;
				_vy = v.y - u.y;
				var _sx = 0.0;
				var _sy = 0.0;
				_sx = u.x - this.originx;
				_sy = u.y - this.originy;
				var den = _vy * this.dirx - _vx * this.diry;
				if(den * den > nape_Config.epsilon) {
					den = 1 / den;
					var sxx = (_vy * _sx - _vx * _sy) * den;
					if(sxx > 0 && sxx < min && sxx <= this.maxdist) {
						var txx = (this.diry * _sx - this.dirx * _sy) * den;
						if(txx > -nape_Config.epsilon && txx < 1 + nape_Config.epsilon) {
							min = sxx;
							edge = ei.elt;
						}
					}
				}
			}
			ei = ei.next;
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = p.gverts.next;
			var v1 = cx_itej;
			var e1 = ei.elt;
			if(inner || e1.gnormx * this.dirx + e1.gnormy * this.diry < 0) {
				var _vx1 = 0.0;
				var _vy1 = 0.0;
				_vx1 = v1.x - u.x;
				_vy1 = v1.y - u.y;
				var _sx1 = 0.0;
				var _sy1 = 0.0;
				_sx1 = u.x - this.originx;
				_sy1 = u.y - this.originy;
				var den1 = _vy1 * this.dirx - _vx1 * this.diry;
				if(den1 * den1 > nape_Config.epsilon) {
					den1 = 1 / den1;
					var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
					if(sxx1 > 0 && sxx1 < min && sxx1 <= this.maxdist) {
						var txx1 = (this.diry * _sx1 - this.dirx * _sy1) * den1;
						if(txx1 > -nape_Config.epsilon && txx1 < 1 + nape_Config.epsilon) {
							min = sxx1;
							edge = ei.elt;
						}
					}
				}
			}
			ei = ei.next;
		} while(false);
		if(edge != null) {
			var nx = 0.0;
			var ny = 0.0;
			nx = edge.gnormx;
			ny = edge.gnormy;
			var inner1 = nx * this.dirx + ny * this.diry > 0;
			if(inner1) {
				nx = -nx;
				ny = -ny;
			}
			return zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx,ny,null),min,inner1,p.outer);
		} else return null;
	}
	,polysect2: function(p,inner,list) {
		var min = Infinity;
		var max = -1.0;
		var edge = null;
		var edgemax = null;
		var ei = p.edges.head;
		var cx_cont = true;
		var cx_itei = p.gverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var e = ei.elt;
			if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
				var _vx = 0.0;
				var _vy = 0.0;
				_vx = v.x - u.x;
				_vy = v.y - u.y;
				var _sx = 0.0;
				var _sy = 0.0;
				_sx = u.x - this.originx;
				_sy = u.y - this.originy;
				var den = _vy * this.dirx - _vx * this.diry;
				if(den * den > nape_Config.epsilon) {
					den = 1 / den;
					var sxx = (_vy * _sx - _vx * _sy) * den;
					if(sxx > 0 && sxx <= this.maxdist && (sxx < min || sxx > max)) {
						var txx = (this.diry * _sx - this.dirx * _sy) * den;
						if(txx > -nape_Config.epsilon && txx < 1 + nape_Config.epsilon) {
							if(sxx < min) {
								min = sxx;
								edge = ei.elt;
							}
							if(sxx > max) {
								max = sxx;
								edgemax = ei.elt;
							}
						}
					}
				}
			}
			ei = ei.next;
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = p.gverts.next;
			var v1 = cx_itej;
			var e1 = ei.elt;
			if(inner || e1.gnormx * this.dirx + e1.gnormy * this.diry < 0) {
				var _vx1 = 0.0;
				var _vy1 = 0.0;
				_vx1 = v1.x - u.x;
				_vy1 = v1.y - u.y;
				var _sx1 = 0.0;
				var _sy1 = 0.0;
				_sx1 = u.x - this.originx;
				_sy1 = u.y - this.originy;
				var den1 = _vy1 * this.dirx - _vx1 * this.diry;
				if(den1 * den1 > nape_Config.epsilon) {
					den1 = 1 / den1;
					var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
					if(sxx1 > 0 && sxx1 <= this.maxdist && (sxx1 < min || sxx1 > max)) {
						var txx1 = (this.diry * _sx1 - this.dirx * _sy1) * den1;
						if(txx1 > -nape_Config.epsilon && txx1 < 1 + nape_Config.epsilon) {
							if(sxx1 < min) {
								min = sxx1;
								edge = ei.elt;
							}
							if(sxx1 > max) {
								max = sxx1;
								edgemax = ei.elt;
							}
						}
					}
				}
			}
			ei = ei.next;
		} while(false);
		if(edge != null) {
			var nx = 0.0;
			var ny = 0.0;
			nx = edge.gnormx;
			ny = edge.gnormy;
			var inner1 = nx * this.dirx + ny * this.diry > 0;
			if(inner1) {
				nx = -nx;
				ny = -ny;
			}
			var ret = zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx,ny,null),min,inner1,p.outer);
			var pre = null;
			var cx_ite = list.zpp_inner.inner.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(ret.zpp_inner.toiDistance < j.zpp_inner.toiDistance) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			list.zpp_inner.inner.inlined_insert(pre,ret);
		}
		if(edgemax != null && edge != edgemax) {
			var nx1 = 0.0;
			var ny1 = 0.0;
			nx1 = edgemax.gnormx;
			ny1 = edgemax.gnormy;
			var inner2 = nx1 * this.dirx + ny1 * this.diry > 0;
			if(inner2) {
				nx1 = -nx1;
				ny1 = -ny1;
			}
			var ret1 = zpp_$nape_geom_ZPP_$ConvexRayResult.getRay(nape_geom_Vec2.get(nx1,ny1,null),max,inner2,p.outer);
			var pre1 = null;
			var cx_ite1 = list.zpp_inner.inner.head;
			while(cx_ite1 != null) {
				var j1 = cx_ite1.elt;
				if(ret1.zpp_inner.toiDistance < j1.zpp_inner.toiDistance) break;
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			list.zpp_inner.inner.inlined_insert(pre1,ret1);
		}
	}
	,__class__: zpp_$nape_geom_ZPP_$Ray
};
var zpp_$nape_geom_ZPP_$SimpleVert = function() {
	this.node = null;
	this.next = null;
	this.id = 0;
	this.links = null;
	this.y = 0.0;
	this.x = 0.0;
	this.forced = false;
	this.id = zpp_$nape_ZPP_$ID.ZPP_SimpleVert();
	if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) this.links = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
		this.links = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = this.links.next;
		this.links.next = null;
	}
	null;
	this.links.lt = zpp_$nape_geom_ZPP_$SimpleVert.less_xy;
};
$hxClasses["zpp_nape.geom.ZPP_SimpleVert"] = zpp_$nape_geom_ZPP_$SimpleVert;
zpp_$nape_geom_ZPP_$SimpleVert.__name__ = ["zpp_nape","geom","ZPP_SimpleVert"];
zpp_$nape_geom_ZPP_$SimpleVert.less_xy = function(p,q) {
	return p.y < q.y || p.y == q.y && p.x < q.x;
};
zpp_$nape_geom_ZPP_$SimpleVert.swap_nodes = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
zpp_$nape_geom_ZPP_$SimpleVert.get = function(x,y) {
	var ret;
	if(zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$SimpleVert(); else {
		ret = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_$nape_geom_ZPP_$SimpleVert.prototype = {
	forced: null
	,x: null
	,y: null
	,links: null
	,id: null
	,next: null
	,node: null
	,free: function() {
		this.links.clear();
		this.node = null;
		this.forced = false;
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$SimpleVert
};
var zpp_$nape_geom_ZPP_$SimpleSeg = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.id = 0;
	this.vertices = null;
	this.right = null;
	this.left = null;
	this.id = zpp_$nape_ZPP_$ID.ZPP_SimpleSeg();
	if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) this.vertices = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
		this.vertices = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = this.vertices.next;
		this.vertices.next = null;
	}
	null;
	this.vertices.lt = $bind(this,this.less_xy);
};
$hxClasses["zpp_nape.geom.ZPP_SimpleSeg"] = zpp_$nape_geom_ZPP_$SimpleSeg;
zpp_$nape_geom_ZPP_$SimpleSeg.__name__ = ["zpp_nape","geom","ZPP_SimpleSeg"];
zpp_$nape_geom_ZPP_$SimpleSeg.get = function(left,right) {
	var ret;
	if(zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$SimpleSeg(); else {
		ret = zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.left = left;
	ret.right = right;
	ret.vertices.insert(left);
	ret.vertices.insert(right);
	return ret;
};
zpp_$nape_geom_ZPP_$SimpleSeg.prototype = {
	left: null
	,right: null
	,vertices: null
	,id: null
	,next: null
	,free: function() {
		this.left = this.right = null;
		this.prev = null;
		this.node = null;
		this.vertices.clear();
	}
	,alloc: function() {
	}
	,prev: null
	,node: null
	,less_xy: function(a,b) {
		return a.x < b.x || a.x == b.x && a.y < b.y;
	}
	,__class__: zpp_$nape_geom_ZPP_$SimpleSeg
};
var zpp_$nape_geom_ZPP_$SimpleEvent = function() {
	this.next = null;
	this.node = null;
	this.segment2 = null;
	this.segment = null;
	this.vertex = null;
	this.type = 0;
};
$hxClasses["zpp_nape.geom.ZPP_SimpleEvent"] = zpp_$nape_geom_ZPP_$SimpleEvent;
zpp_$nape_geom_ZPP_$SimpleEvent.__name__ = ["zpp_nape","geom","ZPP_SimpleEvent"];
zpp_$nape_geom_ZPP_$SimpleEvent.swap_nodes = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
};
zpp_$nape_geom_ZPP_$SimpleEvent.less_xy = function(a,b) {
	if(a.vertex.x < b.vertex.x) return true; else if(a.vertex.x > b.vertex.x) return false; else if(a.vertex.y < b.vertex.y) return true; else if(a.vertex.y > b.vertex.y) return false; else return a.type < b.type;
};
zpp_$nape_geom_ZPP_$SimpleEvent.get = function(v) {
	var ret;
	if(zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$SimpleEvent(); else {
		ret = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.vertex = v;
	return ret;
};
zpp_$nape_geom_ZPP_$SimpleEvent.prototype = {
	type: null
	,vertex: null
	,segment: null
	,segment2: null
	,node: null
	,next: null
	,free: function() {
		this.vertex = null;
		this.segment = this.segment2 = null;
		this.node = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$SimpleEvent
};
var zpp_$nape_geom_ZPP_$SimpleSweep = function() {
	this.tree = null;
	this.sweepx = 0.0;
	if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) this.tree = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
		this.tree = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = this.tree.next;
		this.tree.next = null;
	}
	null;
	this.tree.lt = $bind(this,this.edge_lt);
	this.tree.swapped = $bind(this,this.swap_nodes);
};
$hxClasses["zpp_nape.geom.ZPP_SimpleSweep"] = zpp_$nape_geom_ZPP_$SimpleSweep;
zpp_$nape_geom_ZPP_$SimpleSweep.__name__ = ["zpp_nape","geom","ZPP_SimpleSweep"];
zpp_$nape_geom_ZPP_$SimpleSweep.prototype = {
	sweepx: null
	,tree: null
	,swap_nodes: function(p,q) {
		var t = p.node;
		p.node = q.node;
		q.node = t;
	}
	,edge_lt: function(p,q) {
		var ux = 0.0;
		var uy = 0.0;
		var vx = 0.0;
		var vy = 0.0;
		var flip;
		if(p.left == q.left && p.right == q.right) return false; else if(p.left == q.right) if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) return p.left.y > q.left.y; else return p.right.y > q.left.y;
		} else return (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.left.x - p.left.x;
				vy = q.left.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0; else if(p.right == q.left) return !(q.left.x == q.right.x?q.left.y < q.right.y?q.left.y > p.left.y:q.right.y > p.left.y:(function($this) {
			var $r;
			flip = q.right.x < q.left.x;
			{
				ux = q.right.x - q.left.x;
				uy = q.right.y - q.left.y;
			}
			{
				vx = p.left.x - q.left.x;
				vy = p.left.y - q.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0); else if(p.left == q.left) if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) return p.left.y > q.right.y; else return p.right.y > q.right.y;
		} else return (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.right.x - p.left.x;
				vy = q.right.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0; else if(p.right == q.right) if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) return p.left.y > q.left.y; else return p.right.y > q.left.y;
		} else return (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.left.x - p.left.x;
				vy = q.left.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0;
		if(p.left.x == p.right.x) {
			if(q.left.x == q.right.x) {
				var pmax;
				if(p.left.y < p.right.y) pmax = p.right; else pmax = p.left;
				var qmax;
				if(q.left.y < q.right.y) qmax = q.right; else qmax = q.left;
				return pmax.y > qmax.y;
			} else {
				var plrg;
				flip = q.right.x < q.left.x;
				ux = q.right.x - q.left.x;
				uy = q.right.y - q.left.y;
				vx = p.left.x - q.left.x;
				vy = p.left.y - q.left.y;
				if(flip) plrg = uy * vx - ux * vy; else plrg = vy * ux - vx * uy;
				var aplrg;
				flip = q.right.x < q.left.x;
				ux = q.right.x - q.left.x;
				uy = q.right.y - q.left.y;
				vx = p.right.x - q.left.x;
				vy = p.right.y - q.left.y;
				if(flip) aplrg = uy * vx - ux * vy; else aplrg = vy * ux - vx * uy;
				if(plrg * aplrg >= 0) return plrg >= 0.0; else return this.sweepx >= p.left.x;
			}
		} else if(q.left.x == q.right.x) {
			var qlrg;
			flip = p.right.x < p.left.x;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			vx = q.left.x - p.left.x;
			vy = q.left.y - p.left.y;
			if(flip) qlrg = uy * vx - ux * vy; else qlrg = vy * ux - vx * uy;
			var aqlrg;
			flip = p.right.x < p.left.x;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			vx = q.right.x - p.left.x;
			vy = q.right.y - p.left.y;
			if(flip) aqlrg = uy * vx - ux * vy; else aqlrg = vy * ux - vx * uy;
			if(qlrg * aqlrg >= 0) return qlrg < 0.0; else return this.sweepx < q.left.x;
		} else {
			var qlrg1;
			qlrg1 = (function($this) {
				var $r;
				flip = p.right.x < p.left.x;
				{
					ux = p.right.x - p.left.x;
					uy = p.right.y - p.left.y;
				}
				{
					vx = q.left.x - p.left.x;
					vy = q.left.y - p.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) < 0.0;
			var aqlrg1;
			aqlrg1 = (function($this) {
				var $r;
				flip = p.right.x < p.left.x;
				{
					ux = p.right.x - p.left.x;
					uy = p.right.y - p.left.y;
				}
				{
					vx = q.right.x - p.left.x;
					vy = q.right.y - p.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) < 0.0;
			if(qlrg1 == aqlrg1) return qlrg1; else {
				var plrg1;
				plrg1 = (function($this) {
					var $r;
					flip = q.right.x < q.left.x;
					{
						ux = q.right.x - q.left.x;
						uy = q.right.y - q.left.y;
					}
					{
						vx = p.left.x - q.left.x;
						vy = p.left.y - q.left.y;
					}
					$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
					return $r;
				}(this)) >= 0.0;
				var aplrg1;
				aplrg1 = (function($this) {
					var $r;
					flip = q.right.x < q.left.x;
					{
						ux = q.right.x - q.left.x;
						uy = q.right.y - q.left.y;
					}
					{
						vx = p.right.x - q.left.x;
						vy = p.right.y - q.left.y;
					}
					$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
					return $r;
				}(this)) >= 0.0;
				if(plrg1 == aplrg1) return plrg1;
				var py = (this.sweepx - p.left.x) / (p.right.x - p.left.x) * (p.right.y - p.left.y) + p.left.y;
				var qy = (this.sweepx - q.left.x) / (q.right.x - q.left.x) * (q.right.y - q.left.y) + q.left.y;
				return py > qy;
			}
		}
	}
	,clear: function() {
		this.tree.clear();
	}
	,add: function(e) {
		e.node = this.tree.insert(e);
		var nxt = this.tree.successor_node(e.node);
		var pre = this.tree.predecessor_node(e.node);
		if(nxt != null) {
			e.next = nxt.data;
			nxt.data.prev = e;
		}
		if(pre != null) {
			e.prev = pre.data;
			pre.data.next = e;
		}
		return e;
	}
	,remove: function(e) {
		var nxt = this.tree.successor_node(e.node);
		var pre = this.tree.predecessor_node(e.node);
		if(nxt != null) nxt.data.prev = e.prev;
		if(pre != null) pre.data.next = e.next;
		this.tree.remove_node(e.node);
		e.node = null;
	}
	,intersect: function(p,q) {
		if(p == null || q == null) return false; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return false; else {
			var lsign = (q.left.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.left.y - p.left.y);
			var rsign = (q.right.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.right.y - p.left.y);
			if(lsign * rsign > 0) return false; else {
				var lsign2 = (p.left.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.left.y - q.left.y);
				var rsign2 = (p.right.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.right.y - q.left.y);
				if(lsign2 * rsign2 > 0) return false; else if(lsign * rsign >= 0 && lsign2 * rsign2 >= 0) return true; else return true;
			}
		}
	}
	,intersection: function(p,q) {
		if(p == null || q == null) return null; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return null; else {
			var ux = 0.0;
			var uy = 0.0;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = q.right.x - q.left.x;
			vy = q.right.y - q.left.y;
			var denom = vy * ux - vx * uy;
			if(denom == 0.0) return null;
			denom = 1 / denom;
			var cx = 0.0;
			var cy = 0.0;
			cx = q.left.x - p.left.x;
			cy = q.left.y - p.left.y;
			var t = (vy * cx - vx * cy) * denom;
			if(t < 0 || t > 1) return null;
			var s = (uy * cx - ux * cy) * denom;
			if(s < 0 || s > 1) return null;
			var vet;
			if(s == 0 || s == 1 || t == 0 || t == 1) if(s == 0) vet = q.left; else if(s == 1) vet = q.right; else if(t == 0) vet = p.left; else vet = p.right; else vet = zpp_$nape_geom_ZPP_$SimpleVert.get(0.5 * (p.left.x + ux * t + q.left.x + vx * s),0.5 * (p.left.y + uy * t + q.left.y + vy * s));
			var ret = zpp_$nape_geom_ZPP_$SimpleEvent.get(vet);
			ret.type = 0;
			ret.segment = p;
			ret.segment2 = q;
			return ret;
		}
	}
	,__class__: zpp_$nape_geom_ZPP_$SimpleSweep
};
var zpp_$nape_geom_ZPP_$Simple = function() { };
$hxClasses["zpp_nape.geom.ZPP_Simple"] = zpp_$nape_geom_ZPP_$Simple;
zpp_$nape_geom_ZPP_$Simple.__name__ = ["zpp_nape","geom","ZPP_Simple"];
zpp_$nape_geom_ZPP_$Simple.decompose = function(poly,rets) {
	if(zpp_$nape_geom_ZPP_$Simple.sweep == null) {
		zpp_$nape_geom_ZPP_$Simple.sweep = new zpp_$nape_geom_ZPP_$SimpleSweep();
		zpp_$nape_geom_ZPP_$Simple.inthash = new zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse();
	}
	if(zpp_$nape_geom_ZPP_$Simple.vertices == null) {
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) zpp_$nape_geom_ZPP_$Simple.vertices = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
			zpp_$nape_geom_ZPP_$Simple.vertices = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = zpp_$nape_geom_ZPP_$Simple.vertices.next;
			zpp_$nape_geom_ZPP_$Simple.vertices.next = null;
		}
		null;
		zpp_$nape_geom_ZPP_$Simple.vertices.lt = zpp_$nape_geom_ZPP_$SimpleVert.less_xy;
		zpp_$nape_geom_ZPP_$Simple.vertices.swapped = zpp_$nape_geom_ZPP_$SimpleVert.swap_nodes;
	}
	if(zpp_$nape_geom_ZPP_$Simple.queue == null) {
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) zpp_$nape_geom_ZPP_$Simple.queue = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
			zpp_$nape_geom_ZPP_$Simple.queue = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = zpp_$nape_geom_ZPP_$Simple.queue.next;
			zpp_$nape_geom_ZPP_$Simple.queue.next = null;
		}
		null;
		zpp_$nape_geom_ZPP_$Simple.queue.lt = zpp_$nape_geom_ZPP_$SimpleEvent.less_xy;
		zpp_$nape_geom_ZPP_$Simple.queue.swapped = zpp_$nape_geom_ZPP_$SimpleEvent.swap_nodes;
	}
	var fst = null;
	var pre = null;
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			var vert = zpp_$nape_geom_ZPP_$SimpleVert.get(v.x,v.y);
			var vx;
			var cur = zpp_$nape_geom_ZPP_$Simple.vertices.parent;
			while(cur != null) if(zpp_$nape_geom_ZPP_$Simple.vertices.lt(vert,cur.data)) cur = cur.prev; else if(zpp_$nape_geom_ZPP_$Simple.vertices.lt(cur.data,vert)) cur = cur.next; else break;
			vx = cur;
			if(vx != null) {
				var o = vert;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
				zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o;
				vert = vx.data;
			} else vert.node = zpp_$nape_geom_ZPP_$Simple.vertices.insert(vert);
			if(pre != null) {
				var e1 = zpp_$nape_geom_ZPP_$SimpleEvent.get(pre);
				var e2 = zpp_$nape_geom_ZPP_$SimpleEvent.get(vert);
				var seg;
				if(zpp_$nape_geom_ZPP_$SimpleEvent.less_xy(e1,e2)) {
					e1.type = 1;
					e2.type = 2;
					seg = zpp_$nape_geom_ZPP_$SimpleSeg.get(pre,vert);
				} else {
					e1.type = 2;
					e2.type = 1;
					seg = zpp_$nape_geom_ZPP_$SimpleSeg.get(vert,pre);
				}
				e1.segment = e2.segment = seg;
				zpp_$nape_geom_ZPP_$Simple.queue.insert(e1);
				zpp_$nape_geom_ZPP_$Simple.queue.insert(e2);
				pre.links.insert(vert);
				vert.links.insert(pre);
			}
			pre = vert;
			if(fst == null) fst = vert;
			nite = nite.next;
		} while(nite != L);
	}
	var e11 = zpp_$nape_geom_ZPP_$SimpleEvent.get(pre);
	var e21 = zpp_$nape_geom_ZPP_$SimpleEvent.get(fst);
	var seg1;
	if(zpp_$nape_geom_ZPP_$SimpleEvent.less_xy(e11,e21)) {
		e11.type = 1;
		e21.type = 2;
		seg1 = zpp_$nape_geom_ZPP_$SimpleSeg.get(pre,fst);
	} else {
		e11.type = 2;
		e21.type = 1;
		seg1 = zpp_$nape_geom_ZPP_$SimpleSeg.get(fst,pre);
	}
	e11.segment = e21.segment = seg1;
	zpp_$nape_geom_ZPP_$Simple.queue.insert(e11);
	zpp_$nape_geom_ZPP_$Simple.queue.insert(e21);
	pre.links.insert(fst);
	fst.links.insert(pre);
	if(zpp_$nape_geom_ZPP_$Simple.ints == null) {
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) zpp_$nape_geom_ZPP_$Simple.ints = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
			zpp_$nape_geom_ZPP_$Simple.ints = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = zpp_$nape_geom_ZPP_$Simple.ints.next;
			zpp_$nape_geom_ZPP_$Simple.ints.next = null;
		}
		null;
		zpp_$nape_geom_ZPP_$Simple.ints.lt = zpp_$nape_geom_ZPP_$SimpleEvent.less_xy;
	}
	while(!zpp_$nape_geom_ZPP_$Simple.queue.empty()) {
		var e = zpp_$nape_geom_ZPP_$Simple.queue.pop_front();
		zpp_$nape_geom_ZPP_$Simple.sweep.sweepx = e.vertex.x;
		if(e.type == 1) {
			var s = e.segment;
			zpp_$nape_geom_ZPP_$Simple.sweep.add(s);
			if(s.next != null && s != null && !(s.next.id < s.id?zpp_$nape_geom_ZPP_$Simple.inthash.has(s.next.id,s.id):zpp_$nape_geom_ZPP_$Simple.inthash.has(s.id,s.next.id))) {
				var intx = zpp_$nape_geom_ZPP_$Simple.sweep.intersection(s.next,s);
				if(intx != null) {
					if(intx.vertex.x >= zpp_$nape_geom_ZPP_$Simple.sweep.sweepx) {
						var ex;
						var cur1 = zpp_$nape_geom_ZPP_$Simple.queue.parent;
						while(cur1 != null) if(zpp_$nape_geom_ZPP_$Simple.queue.lt(intx,cur1.data)) cur1 = cur1.prev; else if(zpp_$nape_geom_ZPP_$Simple.queue.lt(cur1.data,intx)) cur1 = cur1.next; else break;
						ex = cur1;
						if(ex == null) {
							var vx1;
							var cur2 = zpp_$nape_geom_ZPP_$Simple.ints.parent;
							while(cur2 != null) if(zpp_$nape_geom_ZPP_$Simple.ints.lt(intx,cur2.data)) cur2 = cur2.prev; else if(zpp_$nape_geom_ZPP_$Simple.ints.lt(cur2.data,intx)) cur2 = cur2.next; else break;
							vx1 = cur2;
							if(vx1 != null) {
								var o1 = intx.vertex;
								o1.links.clear();
								o1.node = null;
								o1.forced = false;
								o1.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
								zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o1;
								intx.vertex = vx1.data.vertex;
								vx1.data = intx;
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx);
							} else {
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx);
								zpp_$nape_geom_ZPP_$Simple.ints.insert(intx);
							}
							if(s.next.id < s.id) zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(s.next.id,s.id,true)); else zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(s.id,s.next.id,true));
						} else {
							var x = ex.data;
							var o2 = intx.vertex;
							o2.links.clear();
							o2.node = null;
							o2.forced = false;
							o2.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o2;
							var o3 = intx;
							o3.vertex = null;
							o3.segment = o3.segment2 = null;
							o3.node = null;
							o3.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o3;
						}
					} else {
						var o4 = intx.vertex;
						o4.links.clear();
						o4.node = null;
						o4.forced = false;
						o4.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o4;
						var o5 = intx;
						o5.vertex = null;
						o5.segment = o5.segment2 = null;
						o5.node = null;
						o5.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o5;
					}
				}
			}
			if(s != null && s.prev != null && !(s.id < s.prev.id?zpp_$nape_geom_ZPP_$Simple.inthash.has(s.id,s.prev.id):zpp_$nape_geom_ZPP_$Simple.inthash.has(s.prev.id,s.id))) {
				var intx1 = zpp_$nape_geom_ZPP_$Simple.sweep.intersection(s,s.prev);
				if(intx1 != null) {
					if(intx1.vertex.x >= zpp_$nape_geom_ZPP_$Simple.sweep.sweepx) {
						var ex1;
						var cur3 = zpp_$nape_geom_ZPP_$Simple.queue.parent;
						while(cur3 != null) if(zpp_$nape_geom_ZPP_$Simple.queue.lt(intx1,cur3.data)) cur3 = cur3.prev; else if(zpp_$nape_geom_ZPP_$Simple.queue.lt(cur3.data,intx1)) cur3 = cur3.next; else break;
						ex1 = cur3;
						if(ex1 == null) {
							var vx2;
							var cur4 = zpp_$nape_geom_ZPP_$Simple.ints.parent;
							while(cur4 != null) if(zpp_$nape_geom_ZPP_$Simple.ints.lt(intx1,cur4.data)) cur4 = cur4.prev; else if(zpp_$nape_geom_ZPP_$Simple.ints.lt(cur4.data,intx1)) cur4 = cur4.next; else break;
							vx2 = cur4;
							if(vx2 != null) {
								var o6 = intx1.vertex;
								o6.links.clear();
								o6.node = null;
								o6.forced = false;
								o6.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
								zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o6;
								intx1.vertex = vx2.data.vertex;
								vx2.data = intx1;
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx1);
							} else {
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx1);
								zpp_$nape_geom_ZPP_$Simple.ints.insert(intx1);
							}
							if(s.id < s.prev.id) zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(s.id,s.prev.id,true)); else zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(s.prev.id,s.id,true));
						} else {
							var x1 = ex1.data;
							var o7 = intx1.vertex;
							o7.links.clear();
							o7.node = null;
							o7.forced = false;
							o7.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o7;
							var o8 = intx1;
							o8.vertex = null;
							o8.segment = o8.segment2 = null;
							o8.node = null;
							o8.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o8;
						}
					} else {
						var o9 = intx1.vertex;
						o9.links.clear();
						o9.node = null;
						o9.forced = false;
						o9.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o9;
						var o10 = intx1;
						o10.vertex = null;
						o10.segment = o10.segment2 = null;
						o10.node = null;
						o10.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o10;
					}
				}
			}
		} else if(e.type == 2) {
			var s1 = e.segment;
			if(s1.node != null) {
				var nxt = s1.next;
				var pre1 = s1.prev;
				zpp_$nape_geom_ZPP_$Simple.sweep.remove(s1);
				var o11 = s1;
				o11.left = o11.right = null;
				o11.prev = null;
				o11.node = null;
				o11.vertices.clear();
				o11.next = zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool;
				zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool = o11;
				if(nxt != null && pre1 != null && !(nxt.id < pre1.id?zpp_$nape_geom_ZPP_$Simple.inthash.has(nxt.id,pre1.id):zpp_$nape_geom_ZPP_$Simple.inthash.has(pre1.id,nxt.id))) {
					var intx2 = zpp_$nape_geom_ZPP_$Simple.sweep.intersection(nxt,pre1);
					if(intx2 != null) {
						if(intx2.vertex.x >= zpp_$nape_geom_ZPP_$Simple.sweep.sweepx) {
							var ex2;
							var cur5 = zpp_$nape_geom_ZPP_$Simple.queue.parent;
							while(cur5 != null) if(zpp_$nape_geom_ZPP_$Simple.queue.lt(intx2,cur5.data)) cur5 = cur5.prev; else if(zpp_$nape_geom_ZPP_$Simple.queue.lt(cur5.data,intx2)) cur5 = cur5.next; else break;
							ex2 = cur5;
							if(ex2 == null) {
								var vx3;
								var cur6 = zpp_$nape_geom_ZPP_$Simple.ints.parent;
								while(cur6 != null) if(zpp_$nape_geom_ZPP_$Simple.ints.lt(intx2,cur6.data)) cur6 = cur6.prev; else if(zpp_$nape_geom_ZPP_$Simple.ints.lt(cur6.data,intx2)) cur6 = cur6.next; else break;
								vx3 = cur6;
								if(vx3 != null) {
									var o12 = intx2.vertex;
									o12.links.clear();
									o12.node = null;
									o12.forced = false;
									o12.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
									zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o12;
									intx2.vertex = vx3.data.vertex;
									vx3.data = intx2;
									zpp_$nape_geom_ZPP_$Simple.queue.insert(intx2);
								} else {
									zpp_$nape_geom_ZPP_$Simple.queue.insert(intx2);
									zpp_$nape_geom_ZPP_$Simple.ints.insert(intx2);
								}
								if(nxt.id < pre1.id) zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(nxt.id,pre1.id,true)); else zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(pre1.id,nxt.id,true));
							} else {
								var x2 = ex2.data;
								var o13 = intx2.vertex;
								o13.links.clear();
								o13.node = null;
								o13.forced = false;
								o13.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
								zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o13;
								var o14 = intx2;
								o14.vertex = null;
								o14.segment = o14.segment2 = null;
								o14.node = null;
								o14.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
								zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o14;
							}
						} else {
							var o15 = intx2.vertex;
							o15.links.clear();
							o15.node = null;
							o15.forced = false;
							o15.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o15;
							var o16 = intx2;
							o16.vertex = null;
							o16.segment = o16.segment2 = null;
							o16.node = null;
							o16.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o16;
						}
					}
				}
			}
		} else {
			var intx3 = e.vertex;
			var pnull = intx3.node == null;
			var a = e.segment;
			var b = e.segment2;
			if(b.next != a) {
				var t = a;
				a = b;
				b = t;
			}
			var anew;
			anew = (function($this) {
				var $r;
				var cur7 = a.vertices.parent;
				while(cur7 != null) if(a.vertices.lt(intx3,cur7.data)) cur7 = cur7.prev; else if(a.vertices.lt(cur7.data,intx3)) cur7 = cur7.next; else break;
				$r = cur7;
				return $r;
			}(this)) == null;
			var bnew;
			bnew = (function($this) {
				var $r;
				var cur8 = b.vertices.parent;
				while(cur8 != null) if(b.vertices.lt(intx3,cur8.data)) cur8 = cur8.prev; else if(b.vertices.lt(cur8.data,intx3)) cur8 = cur8.next; else break;
				$r = cur8;
				return $r;
			}(this)) == null;
			if(anew) {
				var aint = a.vertices.insert(intx3);
				var naleft;
				if(intx3 == a.left) naleft = intx3; else naleft = a.vertices.predecessor_node(aint).data;
				var naright;
				if(intx3 == a.right) naright = intx3; else naright = a.vertices.successor_node(aint).data;
				naleft.links.remove(naright);
				if(intx3 != naleft) naleft.links.insert(intx3);
				naright.links.remove(naleft);
				if(intx3 != naright) naright.links.insert(intx3);
				if(intx3 != naleft) intx3.links.insert(naleft);
				if(intx3 != naright) intx3.links.insert(naright);
			}
			if(bnew) {
				var bint = b.vertices.insert(intx3);
				var nbleft;
				if(intx3 == b.left) nbleft = intx3; else nbleft = b.vertices.predecessor_node(bint).data;
				var nbright;
				if(intx3 == b.right) nbright = intx3; else nbright = b.vertices.successor_node(bint).data;
				nbleft.links.remove(nbright);
				if(intx3 != nbleft) nbleft.links.insert(intx3);
				nbright.links.remove(nbleft);
				if(intx3 != nbright) nbright.links.insert(intx3);
				if(intx3 != nbleft) intx3.links.insert(nbleft);
				if(intx3 != nbright) intx3.links.insert(nbright);
			}
			if(pnull) intx3.node = zpp_$nape_geom_ZPP_$Simple.vertices.insert(intx3);
			intx3.forced = true;
			if(pnull) {
				var an = a.node;
				var bn = b.node;
				an.data = b;
				bn.data = a;
				a.node = bn;
				b.node = an;
				b.next = a.next;
				a.next = b;
				a.prev = b.prev;
				b.prev = a;
				if(a.prev != null) a.prev.next = a;
				if(b.next != null) b.next.prev = b;
			}
			if(b.next != null && b != null && !(b.next.id < b.id?zpp_$nape_geom_ZPP_$Simple.inthash.has(b.next.id,b.id):zpp_$nape_geom_ZPP_$Simple.inthash.has(b.id,b.next.id))) {
				var intx4 = zpp_$nape_geom_ZPP_$Simple.sweep.intersection(b.next,b);
				if(intx4 != null) {
					if(intx4.vertex.x >= zpp_$nape_geom_ZPP_$Simple.sweep.sweepx) {
						var ex3;
						var cur9 = zpp_$nape_geom_ZPP_$Simple.queue.parent;
						while(cur9 != null) if(zpp_$nape_geom_ZPP_$Simple.queue.lt(intx4,cur9.data)) cur9 = cur9.prev; else if(zpp_$nape_geom_ZPP_$Simple.queue.lt(cur9.data,intx4)) cur9 = cur9.next; else break;
						ex3 = cur9;
						if(ex3 == null) {
							var vx4;
							var cur10 = zpp_$nape_geom_ZPP_$Simple.ints.parent;
							while(cur10 != null) if(zpp_$nape_geom_ZPP_$Simple.ints.lt(intx4,cur10.data)) cur10 = cur10.prev; else if(zpp_$nape_geom_ZPP_$Simple.ints.lt(cur10.data,intx4)) cur10 = cur10.next; else break;
							vx4 = cur10;
							if(vx4 != null) {
								var o17 = intx4.vertex;
								o17.links.clear();
								o17.node = null;
								o17.forced = false;
								o17.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
								zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o17;
								intx4.vertex = vx4.data.vertex;
								vx4.data = intx4;
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx4);
							} else {
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx4);
								zpp_$nape_geom_ZPP_$Simple.ints.insert(intx4);
							}
							if(b.next.id < b.id) zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(b.next.id,b.id,true)); else zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(b.id,b.next.id,true));
						} else {
							var x3 = ex3.data;
							var o18 = intx4.vertex;
							o18.links.clear();
							o18.node = null;
							o18.forced = false;
							o18.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o18;
							var o19 = intx4;
							o19.vertex = null;
							o19.segment = o19.segment2 = null;
							o19.node = null;
							o19.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o19;
						}
					} else {
						var o20 = intx4.vertex;
						o20.links.clear();
						o20.node = null;
						o20.forced = false;
						o20.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o20;
						var o21 = intx4;
						o21.vertex = null;
						o21.segment = o21.segment2 = null;
						o21.node = null;
						o21.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o21;
					}
				}
			}
			if(a != null && a.prev != null && !(a.id < a.prev.id?zpp_$nape_geom_ZPP_$Simple.inthash.has(a.id,a.prev.id):zpp_$nape_geom_ZPP_$Simple.inthash.has(a.prev.id,a.id))) {
				var intx5 = zpp_$nape_geom_ZPP_$Simple.sweep.intersection(a,a.prev);
				if(intx5 != null) {
					if(intx5.vertex.x >= zpp_$nape_geom_ZPP_$Simple.sweep.sweepx) {
						var ex4;
						var cur11 = zpp_$nape_geom_ZPP_$Simple.queue.parent;
						while(cur11 != null) if(zpp_$nape_geom_ZPP_$Simple.queue.lt(intx5,cur11.data)) cur11 = cur11.prev; else if(zpp_$nape_geom_ZPP_$Simple.queue.lt(cur11.data,intx5)) cur11 = cur11.next; else break;
						ex4 = cur11;
						if(ex4 == null) {
							var vx5;
							var cur12 = zpp_$nape_geom_ZPP_$Simple.ints.parent;
							while(cur12 != null) if(zpp_$nape_geom_ZPP_$Simple.ints.lt(intx5,cur12.data)) cur12 = cur12.prev; else if(zpp_$nape_geom_ZPP_$Simple.ints.lt(cur12.data,intx5)) cur12 = cur12.next; else break;
							vx5 = cur12;
							if(vx5 != null) {
								var o22 = intx5.vertex;
								o22.links.clear();
								o22.node = null;
								o22.forced = false;
								o22.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
								zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o22;
								intx5.vertex = vx5.data.vertex;
								vx5.data = intx5;
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx5);
							} else {
								zpp_$nape_geom_ZPP_$Simple.queue.insert(intx5);
								zpp_$nape_geom_ZPP_$Simple.ints.insert(intx5);
							}
							if(a.id < a.prev.id) zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(a.id,a.prev.id,true)); else zpp_$nape_geom_ZPP_$Simple.inthash.add(zpp_$nape_util_Hashable2_$Boolfalse.get(a.prev.id,a.id,true));
						} else {
							var x4 = ex4.data;
							var o23 = intx5.vertex;
							o23.links.clear();
							o23.node = null;
							o23.forced = false;
							o23.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o23;
							var o24 = intx5;
							o24.vertex = null;
							o24.segment = o24.segment2 = null;
							o24.node = null;
							o24.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o24;
						}
					} else {
						var o25 = intx5.vertex;
						o25.links.clear();
						o25.node = null;
						o25.forced = false;
						o25.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o25;
						var o26 = intx5;
						o26.vertex = null;
						o26.segment = o26.segment2 = null;
						o26.node = null;
						o26.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o26;
					}
				}
			}
			zpp_$nape_geom_ZPP_$Simple.ints.remove(e);
		}
		var o27 = e;
		o27.vertex = null;
		o27.segment = o27.segment2 = null;
		o27.node = null;
		o27.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o27;
	}
	var _g1 = 0;
	var _g = zpp_$nape_geom_ZPP_$Simple.inthash.table.length;
	while(_g1 < _g) {
		var i = _g1++;
		var n = zpp_$nape_geom_ZPP_$Simple.inthash.table[i];
		if(n == null) continue;
		while(n != null) {
			var t1 = n.hnext;
			n.hnext = null;
			var o28 = n;
			o28.next = zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool;
			zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool = o28;
			n = t1;
		}
		zpp_$nape_geom_ZPP_$Simple.inthash.table[i] = null;
	}
	if(rets == null) rets = new zpp_$nape_util_ZNPList_$ZPP_$GeomVert();
	while(!zpp_$nape_geom_ZPP_$Simple.vertices.empty()) zpp_$nape_geom_ZPP_$Simple.clip_polygon(zpp_$nape_geom_ZPP_$Simple.vertices,rets);
	return rets;
};
zpp_$nape_geom_ZPP_$Simple.clip_polygon = function(vertices,rets) {
	var ret = null;
	var cur = vertices.first();
	var fst = cur;
	var pren = cur.links.parent;
	var nxtn;
	if(pren.prev == null) nxtn = pren.next; else nxtn = pren.prev;
	var pre = pren.data;
	var nxt = nxtn.data;
	if((function($this) {
		var $r;
		var ux = 0.0;
		var uy = 0.0;
		{
			ux = cur.x - pre.x;
			uy = cur.y - pre.y;
		}
		var vx = 0.0;
		var vy = 0.0;
		{
			vx = nxt.x - cur.x;
			vy = nxt.y - cur.y;
		}
		$r = vy * ux - vx * uy;
		return $r;
	}(this)) < 0) nxt = pre;
	var obj = zpp_$nape_geom_ZPP_$GeomVert.get(cur.x,cur.y);
	if(ret == null) ret = obj.prev = obj.next = obj; else {
		obj.prev = ret;
		obj.next = ret.next;
		ret.next.prev = obj;
		ret.next = obj;
	}
	ret = obj;
	ret.forced = cur.forced;
	while(true) {
		cur.links.remove(nxt);
		nxt.links.remove(cur);
		if(nxt == fst) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o = cur;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
				zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o;
			}
			break;
		}
		var obj1 = zpp_$nape_geom_ZPP_$GeomVert.get(nxt.x,nxt.y);
		if(ret == null) ret = obj1.prev = obj1.next = obj1; else {
			obj1.prev = ret;
			obj1.next = ret.next;
			ret.next.prev = obj1;
			ret.next = obj1;
		}
		ret = obj1;
		ret.forced = nxt.forced;
		if(nxt.links.singular()) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o1 = cur;
				o1.links.clear();
				o1.node = null;
				o1.forced = false;
				o1.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
				zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o1;
			}
			cur = nxt;
			nxt = nxt.links.parent.data;
		} else {
			var min = null;
			var minl = 0.0;
			if(!nxt.links.empty()) {
				var set_ite = nxt.links.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var p = set_ite.data;
					if(min == null) {
						min = p;
						var ux1 = 0.0;
						var uy1 = 0.0;
						ux1 = nxt.x - cur.x;
						uy1 = nxt.y - cur.y;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = p.x - nxt.x;
						vy1 = p.y - nxt.y;
						minl = vy1 * ux1 - vx1 * uy1;
					} else {
						var nleft;
						var ux2 = 0.0;
						var uy2 = 0.0;
						ux2 = nxt.x - cur.x;
						uy2 = nxt.y - cur.y;
						var vx2 = 0.0;
						var vy2 = 0.0;
						vx2 = p.x - nxt.x;
						vy2 = p.y - nxt.y;
						nleft = vy2 * ux2 - vx2 * uy2;
						if(nleft > 0 && minl <= 0) {
							min = p;
							minl = nleft;
						} else if(minl * nleft >= 0) {
							var pleft;
							var ux3 = 0.0;
							var uy3 = 0.0;
							ux3 = nxt.x - p.x;
							uy3 = nxt.y - p.y;
							var vx3 = 0.0;
							var vy3 = 0.0;
							vx3 = min.x - nxt.x;
							vy3 = min.y - nxt.y;
							pleft = vy3 * ux3 - vx3 * uy3;
							if(pleft > 0) {
								min = p;
								minl = nleft;
							}
						}
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o2 = cur;
				o2.links.clear();
				o2.node = null;
				o2.forced = false;
				o2.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
				zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o2;
			}
			cur = nxt;
			nxt = min;
		}
	}
	vertices.remove(fst);
	var o3 = fst;
	o3.links.clear();
	o3.node = null;
	o3.forced = false;
	o3.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
	zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o3;
	rets.add(ret);
};
zpp_$nape_geom_ZPP_$Simple.isSimple = function(poly) {
	if(zpp_$nape_geom_ZPP_$Simple.sweep == null) {
		zpp_$nape_geom_ZPP_$Simple.sweep = new zpp_$nape_geom_ZPP_$SimpleSweep();
		zpp_$nape_geom_ZPP_$Simple.inthash = new zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse();
	}
	var vertices = zpp_$nape_geom_ZPP_$Simple.list_vertices;
	if(vertices == null) vertices = zpp_$nape_geom_ZPP_$Simple.list_vertices = new zpp_$nape_util_ZNPList_$ZPP_$SimpleVert();
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			vertices.add(zpp_$nape_geom_ZPP_$SimpleVert.get(v.x,v.y));
			nite = nite.next;
		} while(nite != L);
	}
	var queue = zpp_$nape_geom_ZPP_$Simple.list_queue;
	if(queue == null) queue = zpp_$nape_geom_ZPP_$Simple.list_queue = new zpp_$nape_util_ZNPList_$ZPP_$SimpleEvent();
	var cx_ite = vertices.head;
	var u = cx_ite.elt;
	cx_ite = cx_ite.next;
	while(cx_ite != null) {
		var v2 = cx_ite.elt;
		var e1 = queue.add(zpp_$nape_geom_ZPP_$SimpleEvent.get(u));
		var e2 = queue.add(zpp_$nape_geom_ZPP_$SimpleEvent.get(v2));
		e1.segment = zpp_$nape_geom_ZPP_$SimpleEvent.less_xy(e1,e2)?(function($this) {
			var $r;
			e1.type = 1;
			e2.type = 2;
			$r = e2.segment = zpp_$nape_geom_ZPP_$SimpleSeg.get(u,v2);
			return $r;
		}(this)):(function($this) {
			var $r;
			e1.type = 2;
			e2.type = 1;
			$r = e2.segment = zpp_$nape_geom_ZPP_$SimpleSeg.get(v2,u);
			return $r;
		}(this));
		u = v2;
		cx_ite = cx_ite.next;
	}
	var v1 = vertices.head.elt;
	var e11 = queue.add(zpp_$nape_geom_ZPP_$SimpleEvent.get(u));
	var e21 = queue.add(zpp_$nape_geom_ZPP_$SimpleEvent.get(v1));
	e11.segment = zpp_$nape_geom_ZPP_$SimpleEvent.less_xy(e11,e21)?(function($this) {
		var $r;
		e11.type = 1;
		e21.type = 2;
		$r = e21.segment = zpp_$nape_geom_ZPP_$SimpleSeg.get(u,v1);
		return $r;
	}(this)):(function($this) {
		var $r;
		e11.type = 2;
		e21.type = 1;
		$r = e21.segment = zpp_$nape_geom_ZPP_$SimpleSeg.get(v1,u);
		return $r;
	}(this));
	var xxlist = queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_$nape_geom_ZPP_$SimpleEvent.less_xy(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	var ret = true;
	while(!(queue.head == null)) {
		var e = queue.pop_unsafe();
		var seg = e.segment;
		if(e.type == 1) {
			zpp_$nape_geom_ZPP_$Simple.sweep.add(seg);
			if(zpp_$nape_geom_ZPP_$Simple.sweep.intersect(seg,seg.next) || zpp_$nape_geom_ZPP_$Simple.sweep.intersect(seg,seg.prev)) {
				ret = false;
				break;
			}
		} else if(e.type == 2) {
			if(zpp_$nape_geom_ZPP_$Simple.sweep.intersect(seg.prev,seg.next)) {
				ret = false;
				break;
			}
			zpp_$nape_geom_ZPP_$Simple.sweep.remove(seg);
			var o = seg;
			o.left = o.right = null;
			o.prev = null;
			o.node = null;
			o.vertices.clear();
			o.next = zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool;
			zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool = o;
		}
		var o1 = e;
		o1.vertex = null;
		o1.segment = o1.segment2 = null;
		o1.node = null;
		o1.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o1;
	}
	while(!(queue.head == null)) {
		var e3 = queue.pop_unsafe();
		if(e3.type == 2) {
			var o2 = e3.segment;
			o2.left = o2.right = null;
			o2.prev = null;
			o2.node = null;
			o2.vertices.clear();
			o2.next = zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool;
			zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool = o2;
		}
		var o3 = e3;
		o3.vertex = null;
		o3.segment = o3.segment2 = null;
		o3.node = null;
		o3.next = zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = o3;
	}
	zpp_$nape_geom_ZPP_$Simple.sweep.clear();
	while(!(vertices.head == null)) {
		var o4 = vertices.pop_unsafe();
		o4.links.clear();
		o4.node = null;
		o4.forced = false;
		o4.next = zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = o4;
	}
	return ret;
};
var zpp_$nape_geom_ZPP_$SimplifyV = function() {
	this.forced = false;
	this.flag = false;
	this.prev = null;
	this.next = null;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["zpp_nape.geom.ZPP_SimplifyV"] = zpp_$nape_geom_ZPP_$SimplifyV;
zpp_$nape_geom_ZPP_$SimplifyV.__name__ = ["zpp_nape","geom","ZPP_SimplifyV"];
zpp_$nape_geom_ZPP_$SimplifyV.get = function(v) {
	var ret;
	if(zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$SimplifyV(); else {
		ret = zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool;
		zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = v.x;
	ret.y = v.y;
	ret.flag = false;
	return ret;
};
zpp_$nape_geom_ZPP_$SimplifyV.prototype = {
	x: null
	,y: null
	,next: null
	,prev: null
	,flag: null
	,forced: null
	,free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$SimplifyV
};
var zpp_$nape_geom_ZPP_$SimplifyP = function() {
	this.max = null;
	this.min = null;
	this.next = null;
};
$hxClasses["zpp_nape.geom.ZPP_SimplifyP"] = zpp_$nape_geom_ZPP_$SimplifyP;
zpp_$nape_geom_ZPP_$SimplifyP.__name__ = ["zpp_nape","geom","ZPP_SimplifyP"];
zpp_$nape_geom_ZPP_$SimplifyP.get = function(min,max) {
	var ret;
	if(zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$SimplifyP(); else {
		ret = zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool;
		zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.min = min;
	ret.max = max;
	return ret;
};
zpp_$nape_geom_ZPP_$SimplifyP.prototype = {
	next: null
	,min: null
	,max: null
	,free: function() {
		this.min = this.max = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$SimplifyP
};
var zpp_$nape_geom_ZPP_$Simplify = function() { };
$hxClasses["zpp_nape.geom.ZPP_Simplify"] = zpp_$nape_geom_ZPP_$Simplify;
zpp_$nape_geom_ZPP_$Simplify.__name__ = ["zpp_nape","geom","ZPP_Simplify"];
zpp_$nape_geom_ZPP_$Simplify.lessval = function(a,b) {
	return a.x - b.x + (a.y - b.y);
};
zpp_$nape_geom_ZPP_$Simplify.less = function(a,b) {
	return a.x - b.x + (a.y - b.y) < 0.0;
};
zpp_$nape_geom_ZPP_$Simplify.distance = function(v,a,b) {
	var nx = 0.0;
	var ny = 0.0;
	nx = b.x - a.x;
	ny = b.y - a.y;
	var cx = 0.0;
	var cy = 0.0;
	cx = v.x - a.x;
	cy = v.y - a.y;
	var den = nx * nx + ny * ny;
	if(den == 0.0) return cx * cx + cy * cy; else {
		var t = (cx * nx + cy * ny) / (nx * nx + ny * ny);
		if(t <= 0) return cx * cx + cy * cy; else if(t >= 1) return zpp_$nape_geom_ZPP_$VecMath.vec_dsq(v.x,v.y,b.x,b.y); else {
			var t1 = t;
			cx -= nx * t1;
			cy -= ny * t1;
			return cx * cx + cy * cy;
		}
	}
};
zpp_$nape_geom_ZPP_$Simplify.simplify = function(P,epsilon) {
	var ret = null;
	var min = null;
	var max = null;
	epsilon *= epsilon;
	if(zpp_$nape_geom_ZPP_$Simplify.stack == null) zpp_$nape_geom_ZPP_$Simplify.stack = new zpp_$nape_util_ZNPList_$ZPP_$SimplifyP();
	var pre = null;
	var fst = null;
	var cur = P;
	do {
		var v = zpp_$nape_geom_ZPP_$SimplifyV.get(cur);
		v.forced = cur.forced;
		if(v.forced) {
			v.flag = true;
			if(pre != null) zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(pre,v)); else fst = v;
			pre = v;
		}
		var obj = v;
		if(ret == null) ret = obj.prev = obj.next = obj; else {
			obj.prev = ret;
			obj.next = ret.next;
			ret.next.prev = obj;
			ret.next = obj;
		}
		ret = obj;
		if(min == null) {
			min = ret;
			max = ret;
		} else {
			if(ret.x - min.x + (ret.y - min.y) < 0.0) min = ret;
			if(max.x - ret.x + (max.y - ret.y) < 0.0) max = ret;
		}
		cur = cur.next;
	} while(cur != P);
	if(zpp_$nape_geom_ZPP_$Simplify.stack.head == null) {
		if(fst == null) {
			min.flag = max.flag = true;
			zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(min,max));
			zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(max,min));
		} else {
			var d1 = min.x - fst.x + (min.y - fst.y);
			if(d1 < 0) d1 = -d1;
			var d2 = max.x - fst.x + (max.y - fst.y);
			if(d2 < 0) d2 = -d2;
			if(d1 > d2) {
				min.flag = fst.flag = true;
				zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(min,fst));
				zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(fst,min));
			} else {
				max.flag = fst.flag = true;
				zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(max,fst));
				zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(fst,max));
			}
		}
	} else zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(pre,fst));
	while(!(zpp_$nape_geom_ZPP_$Simplify.stack.head == null)) {
		var cur1 = zpp_$nape_geom_ZPP_$Simplify.stack.pop_unsafe();
		var min1 = cur1.min;
		var max1 = cur1.max;
		var o = cur1;
		o.min = o.max = null;
		o.next = zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool;
		zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool = o;
		var dmax = epsilon;
		var dv = null;
		var ite = min1.next;
		while(ite != max1) {
			var dist = zpp_$nape_geom_ZPP_$Simplify.distance(ite,min1,max1);
			if(dist > dmax) {
				dmax = dist;
				dv = ite;
			}
			ite = ite.next;
		}
		if(dv != null) {
			dv.flag = true;
			zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(min1,dv));
			zpp_$nape_geom_ZPP_$Simplify.stack.add(zpp_$nape_geom_ZPP_$SimplifyP.get(dv,max1));
		}
	}
	var retp = null;
	while(ret != null) {
		if(ret.flag) {
			var obj1 = zpp_$nape_geom_ZPP_$GeomVert.get(ret.x,ret.y);
			if(retp == null) retp = obj1.prev = obj1.next = obj1; else {
				obj1.prev = retp;
				obj1.next = retp.next;
				retp.next.prev = obj1;
				retp.next = obj1;
			}
			retp = obj1;
			retp.forced = ret.forced;
		}
		if(ret != null && ret.prev == ret) {
			ret.next = ret.prev = null;
			var o1 = ret;
			o1.next = zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool;
			zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool = o1;
			ret = ret = null;
		} else {
			var retnodes = ret.next;
			ret.prev.next = ret.next;
			ret.next.prev = ret.prev;
			ret.next = ret.prev = null;
			var o2 = ret;
			o2.next = zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool;
			zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool = o2;
			ret = null;
			ret = retnodes;
		}
	}
	return retp;
};
var zpp_$nape_geom_ZPP_$ToiEvent = function() {
	this.kinematic = false;
	this.failed = false;
	this.slipped = false;
	this.axis = null;
	this.c2 = null;
	this.c1 = null;
	this.frozen2 = false;
	this.frozen1 = false;
	this.arbiter = null;
	this.s2 = null;
	this.s1 = null;
	this.toi = 0.0;
	this.next = null;
	this.c1 = new zpp_$nape_geom_ZPP_$Vec2();
	this.c2 = new zpp_$nape_geom_ZPP_$Vec2();
	this.axis = new zpp_$nape_geom_ZPP_$Vec2();
};
$hxClasses["zpp_nape.geom.ZPP_ToiEvent"] = zpp_$nape_geom_ZPP_$ToiEvent;
zpp_$nape_geom_ZPP_$ToiEvent.__name__ = ["zpp_nape","geom","ZPP_ToiEvent"];
zpp_$nape_geom_ZPP_$ToiEvent.prototype = {
	next: null
	,alloc: function() {
		this.failed = false;
		this.s1 = this.s2 = null;
		this.arbiter = null;
	}
	,free: function() {
	}
	,toi: null
	,s1: null
	,s2: null
	,arbiter: null
	,frozen1: null
	,frozen2: null
	,c1: null
	,c2: null
	,axis: null
	,slipped: null
	,failed: null
	,kinematic: null
	,__class__: zpp_$nape_geom_ZPP_$ToiEvent
};
var zpp_$nape_geom_ZPP_$SweepDistance = function() { };
$hxClasses["zpp_nape.geom.ZPP_SweepDistance"] = zpp_$nape_geom_ZPP_$SweepDistance;
zpp_$nape_geom_ZPP_$SweepDistance.__name__ = ["zpp_nape","geom","ZPP_SweepDistance"];
zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep = function(toi,timeStep,lowerBound,negRadius,userAPI) {
	if(userAPI == null) userAPI = false;
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = b2.velx - b1.velx;
	deltay = b2.vely - b1.vely;
	var ang1 = b1.angvel;
	if(ang1 < 0) ang1 = -ang1;
	var ang2 = b2.angvel;
	if(ang2 < 0) ang2 = -ang2;
	var angBias = s1.sweepCoef * ang1 + s2.sweepCoef * ang2;
	if(!userAPI && !toi.kinematic && deltax * deltax + deltay * deltay < nape_Config.dynamicSweepLinearThreshold * nape_Config.dynamicSweepLinearThreshold && angBias < nape_Config.dynamicSweepAngularThreshold) {
		toi.toi = -1;
		toi.failed = true;
		return;
	}
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		b2.sweepIntegrate(curTOI * timeStep);
		b2.sweepValidate(s2);
		var sep = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape_Config.distanceThresholdCCD) {
			if(userAPI) break;
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var d2x = 0.0;
			var d2y = 0.0;
			d2x = c2.x - b2.posx;
			d2y = c2.y - b2.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y) + b2.sweep_angvel * (axis.y * d2x - axis.x * d2y);
			if(proj > 0) toi.slipped = true;
			if(proj <= 0 || sep < nape_Config.distanceThresholdCCD * 0.5) break;
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) delta = 1e-6;
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			b2.sweepIntegrate(curTOI * timeStep);
			b2.sweepValidate(s2);
			var sep1 = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape_Config.distanceThresholdCCD) {
				if(userAPI) break;
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var d2x1 = 0.0;
				var d2y1 = 0.0;
				d2x1 = c2.x - b2.posx;
				d2y1 = c2.y - b2.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1) + b2.sweep_angvel * (axis.y * d2x1 - axis.x * d2y1);
				if(proj1 > 0) toi.slipped = true;
				if(proj1 <= 0 || sep1 < nape_Config.distanceThresholdCCD * 0.5) break;
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) toi.failed = true;
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_$nape_geom_ZPP_$SweepDistance.staticSweep = function(toi,timeStep,lowerBound,negRadius) {
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = -b1.velx;
	deltay = -b1.vely;
	var ang1 = b1.sweep_angvel;
	if(ang1 < 0) ang1 = -ang1;
	var angBias = s1.sweepCoef * ang1;
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		var sep = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape_Config.distanceThresholdCCD) {
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y);
			if(proj > 0) toi.slipped = true;
			if(proj <= 0 || sep < nape_Config.distanceThresholdCCD * 0.5) break;
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) delta = 1e-6;
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			var sep1 = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape_Config.distanceThresholdCCD) {
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1);
				if(proj1 > 0) toi.slipped = true;
				if(proj1 <= 0 || sep1 < nape_Config.distanceThresholdCCD * 0.5) break;
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) toi.failed = true;
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_$nape_geom_ZPP_$SweepDistance.distanceBody = function(b1,b2,w1,w2) {
	var t1;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) t1 = new zpp_$nape_geom_ZPP_$Vec2(); else {
		t1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = t1.next;
		t1.next = null;
	}
	t1.weak = false;
	var t2;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) t2 = new zpp_$nape_geom_ZPP_$Vec2(); else {
		t2 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = t2.next;
		t2.next = null;
	}
	t2.weak = false;
	var ax;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) ax = new zpp_$nape_geom_ZPP_$Vec2(); else {
		ax = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ax.next;
		ax.next = null;
	}
	ax.weak = false;
	var min = 1e100;
	var cx_ite = b1.shapes.head;
	while(cx_ite != null) {
		var s1 = cx_ite.elt;
		var cx_ite1 = b2.shapes.head;
		while(cx_ite1 != null) {
			var s2 = cx_ite1.elt;
			var dist = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,t1,t2,ax,min);
			if(dist < min) {
				min = dist;
				w1.x = t1.x;
				w1.y = t1.y;
				w2.x = t2.x;
				w2.y = t2.y;
			}
			cx_ite1 = cx_ite1.next;
		}
		cx_ite = cx_ite.next;
	}
	var o = t1;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
	zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	var o1 = t2;
	if(o1.outer != null) {
		o1.outer.zpp_inner = null;
		o1.outer = null;
	}
	o1._isimmutable = null;
	o1._validate = null;
	o1._invalidate = null;
	o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
	zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	var o2 = ax;
	if(o2.outer != null) {
		o2.outer.zpp_inner = null;
		o2.outer = null;
	}
	o2._isimmutable = null;
	o2._validate = null;
	o2._invalidate = null;
	o2.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
	zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o2;
	return min;
};
zpp_$nape_geom_ZPP_$SweepDistance.distance = function(s1,s2,w1,w2,axis,upperBound) {
	if(upperBound == null) upperBound = 1e100;
	if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE && s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var dist;
		var nx = 0.0;
		var ny = 0.0;
		nx = c2.worldCOMx - c1.worldCOMx;
		ny = c2.worldCOMy - c1.worldCOMy;
		var len = Math.sqrt(nx * nx + ny * ny);
		dist = len - (c1.radius + c2.radius);
		if(dist < upperBound) {
			if(len == 0) {
				nx = 1;
				ny = 0;
			} else {
				var t = 1.0 / len;
				nx *= t;
				ny *= t;
			}
			var t1 = c1.radius;
			w1.x = c1.worldCOMx + nx * t1;
			w1.y = c1.worldCOMy + ny * t1;
			var t2 = -c2.radius;
			w2.x = c2.worldCOMx + nx * t2;
			w2.y = c2.worldCOMy + ny * t2;
			axis.x = nx;
			axis.y = ny;
		}
		return dist;
	} else {
		var swapped = false;
		if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE && s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
			var tmp = s1;
			s1 = s2;
			s2 = tmp;
			var tmp2 = w1;
			w1 = w2;
			w2 = tmp2;
			swapped = true;
		}
		if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON && s2.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
			var poly = s1.polygon;
			var circle = s2.circle;
			var best = -1e+100;
			var a0 = null;
			var cx_ite = poly.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
				if(dist1 > upperBound) {
					best = dist1;
					break;
				}
				if(dist1 > 0) {
					if(dist1 > best) {
						best = dist1;
						a0 = a;
					}
				} else if(best < 0 && dist1 > best) {
					best = dist1;
					a0 = a;
				}
				cx_ite = cx_ite.next;
			}
			if(best < upperBound) {
				var v0 = a0.gp0;
				var v1 = a0.gp1;
				var dt = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var nx1 = 0.0;
					var ny1 = 0.0;
					nx1 = circle.worldCOMx - v0.x;
					ny1 = circle.worldCOMy - v0.y;
					var len1 = Math.sqrt(nx1 * nx1 + ny1 * ny1);
					best = len1 - circle.radius;
					if(best < upperBound) {
						if(len1 == 0) {
							nx1 = 1;
							ny1 = 0;
						} else {
							var t3 = 1.0 / len1;
							nx1 *= t3;
							ny1 *= t3;
						}
						var t4 = 0;
						w1.x = v0.x + nx1 * t4;
						w1.y = v0.y + ny1 * t4;
						var t5 = -circle.radius;
						w2.x = circle.worldCOMx + nx1 * t5;
						w2.y = circle.worldCOMy + ny1 * t5;
						axis.x = nx1;
						axis.y = ny1;
					}
				} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
					var nx2 = 0.0;
					var ny2 = 0.0;
					nx2 = circle.worldCOMx - v1.x;
					ny2 = circle.worldCOMy - v1.y;
					var len2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);
					best = len2 - circle.radius;
					if(best < upperBound) {
						if(len2 == 0) {
							nx2 = 1;
							ny2 = 0;
						} else {
							var t6 = 1.0 / len2;
							nx2 *= t6;
							ny2 *= t6;
						}
						var t7 = 0;
						w1.x = v1.x + nx2 * t7;
						w1.y = v1.y + ny2 * t7;
						var t8 = -circle.radius;
						w2.x = circle.worldCOMx + nx2 * t8;
						w2.y = circle.worldCOMy + ny2 * t8;
						axis.x = nx2;
						axis.y = ny2;
					}
				} else {
					var t9 = -circle.radius;
					w2.x = circle.worldCOMx + a0.gnormx * t9;
					w2.y = circle.worldCOMy + a0.gnormy * t9;
					var t10 = -best;
					w1.x = w2.x + a0.gnormx * t10;
					w1.y = w2.y + a0.gnormy * t10;
					axis.x = a0.gnormx;
					axis.y = a0.gnormy;
				}
			}
			if(swapped) {
				axis.x = -axis.x;
				axis.y = -axis.y;
			}
			return best;
		} else {
			var p1 = s1.polygon;
			var p2 = s2.polygon;
			var best1 = -1e+100;
			var a1 = null;
			var a2 = null;
			var besti = 0;
			var cx_ite1 = p1.edges.head;
			while(cx_ite1 != null) {
				var a3 = cx_ite1.elt;
				var min = 1e100;
				var cx_ite2 = p2.gverts.next;
				while(cx_ite2 != null) {
					var v = cx_ite2;
					var k = a3.gnormx * v.x + a3.gnormy * v.y;
					if(k < min) min = k;
					cx_ite2 = cx_ite2.next;
				}
				min -= a3.gprojection;
				if(min > upperBound) {
					best1 = min;
					break;
				}
				if(min > 0) {
					if(min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
				} else if(best1 < 0 && min > best1) {
					best1 = min;
					a1 = a3;
					besti = 1;
				}
				cx_ite1 = cx_ite1.next;
			}
			if(best1 < upperBound) {
				var cx_ite3 = p2.edges.head;
				while(cx_ite3 != null) {
					var a4 = cx_ite3.elt;
					var min1 = 1e100;
					var cx_ite4 = p1.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k1 = a4.gnormx * v2.x + a4.gnormy * v2.y;
						if(k1 < min1) min1 = k1;
						cx_ite4 = cx_ite4.next;
					}
					min1 -= a4.gprojection;
					if(min1 > upperBound) {
						best1 = min1;
						break;
					}
					if(min1 > 0) {
						if(min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
					} else if(best1 < 0 && min1 > best1) {
						best1 = min1;
						a2 = a4;
						besti = 2;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(best1 < upperBound) {
					var q1;
					var q2;
					var ax;
					if(besti == 1) {
						q1 = p1;
						q2 = p2;
						ax = a1;
					} else {
						q1 = p2;
						q2 = p1;
						ax = a2;
						var tmp1 = w1;
						w1 = w2;
						w2 = tmp1;
						swapped = !swapped;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite5 = q2.edges.head;
					while(cx_ite5 != null) {
						var a5 = cx_ite5.elt;
						var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = a5;
						}
						cx_ite5 = cx_ite5.next;
					}
					if(swapped) {
						axis.x = -ax.gnormx;
						axis.y = -ax.gnormy;
					} else {
						axis.x = ax.gnormx;
						axis.y = ax.gnormy;
					}
					if(best1 >= 0) {
						var v01 = ax.gp0;
						var v11 = ax.gp1;
						var q0 = ay.gp0;
						var q11 = ay.gp1;
						var vx = 0.0;
						var vy = 0.0;
						var qx = 0.0;
						var qy = 0.0;
						vx = v11.x - v01.x;
						vy = v11.y - v01.y;
						qx = q11.x - q0.x;
						qy = q11.y - q0.y;
						var vdot = 1 / (vx * vx + vy * vy);
						var qdot = 1 / (qx * qx + qy * qy);
						var t11 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
						var t21 = -(vx * (v01.x - q11.x) + vy * (v01.y - q11.y)) * vdot;
						var s11 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
						var s21 = -(qx * (q0.x - v11.x) + qy * (q0.y - v11.y)) * qdot;
						if(t11 < 0) t11 = 0; else if(t11 > 1) t11 = 1;
						if(t21 < 0) t21 = 0; else if(t21 > 1) t21 = 1;
						if(s11 < 0) s11 = 0; else if(s11 > 1) s11 = 1;
						if(s21 < 0) s21 = 0; else if(s21 > 1) s21 = 1;
						var f1x = 0.0;
						var f1y = 0.0;
						var t12 = t11;
						f1x = v01.x + vx * t12;
						f1y = v01.y + vy * t12;
						var f2x = 0.0;
						var f2y = 0.0;
						var t13 = t21;
						f2x = v01.x + vx * t13;
						f2y = v01.y + vy * t13;
						var g1x = 0.0;
						var g1y = 0.0;
						var t14 = s11;
						g1x = q0.x + qx * t14;
						g1y = q0.y + qy * t14;
						var g2x = 0.0;
						var g2y = 0.0;
						var t15 = s21;
						g2x = q0.x + qx * t15;
						g2y = q0.y + qy * t15;
						var d1 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(f1x,f1y,q0.x,q0.y);
						var d2 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(f2x,f2y,q11.x,q11.y);
						var e1 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(g1x,g1y,v01.x,v01.y);
						var e2 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(g2x,g2y,v11.x,v11.y);
						var minfx = 0.0;
						var minfy = 0.0;
						var minq = null;
						if(d1 < d2) {
							minfx = f1x;
							minfy = f1y;
							minq = q0;
						} else {
							minfx = f2x;
							minfy = f2y;
							minq = q11;
							d1 = d2;
						}
						var mingx = 0.0;
						var mingy = 0.0;
						var minv = null;
						if(e1 < e2) {
							mingx = g1x;
							mingy = g1y;
							minv = v01;
						} else {
							mingx = g2x;
							mingy = g2y;
							minv = v11;
							e1 = e2;
						}
						if(d1 < e1) {
							w1.x = minfx;
							w1.y = minfy;
							w2.x = minq.x;
							w2.y = minq.y;
							best1 = Math.sqrt(d1);
						} else {
							w2.x = mingx;
							w2.y = mingy;
							w1.x = minv.x;
							w1.y = minv.y;
							best1 = Math.sqrt(e1);
						}
						if(best1 != 0) {
							axis.x = w2.x - w1.x;
							axis.y = w2.y - w1.y;
							var t16 = 1.0 / best1;
							axis.x *= t16;
							axis.y *= t16;
							if(swapped) {
								axis.x = -axis.x;
								axis.y = -axis.y;
							}
						}
						return best1;
					} else {
						var c0x = 0.0;
						var c0y = 0.0;
						c0x = ay.gp0.x;
						c0y = ay.gp0.y;
						var c1x = 0.0;
						var c1y = 0.0;
						c1x = ay.gp1.x;
						c1y = ay.gp1.y;
						var dvx = 0.0;
						var dvy = 0.0;
						dvx = c1x - c0x;
						dvy = c1y - c0y;
						var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
						var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
						var den = 1 / (d11 - d0);
						var t17 = (-ax.tp1 - d0) * den;
						if(t17 > nape_Config.epsilon) {
							var t19 = t17;
							c0x += dvx * t19;
							c0y += dvy * t19;
						}
						var t18 = (-ax.tp0 - d11) * den;
						if(t18 < -nape_Config.epsilon) {
							var t20 = t18;
							c1x += dvx * t20;
							c1y += dvy * t20;
						}
						var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
						var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
						if(c0d < c1d) {
							w2.x = c0x;
							w2.y = c0y;
							var t22 = -c0d;
							w1.x = w2.x + ax.gnormx * t22;
							w1.y = w2.y + ax.gnormy * t22;
							return c0d;
						} else {
							w2.x = c1x;
							w2.y = c1y;
							var t23 = -c1d;
							w1.x = w2.x + ax.gnormx * t23;
							w1.y = w2.y + ax.gnormy * t23;
							return c1d;
						}
					}
				} else return upperBound;
			} else return upperBound;
		}
	}
};
var zpp_$nape_geom_ZPP_$PartitionPair = function() {
	this.node = null;
	this.di = 0;
	this.id = 0;
	this.b = null;
	this.a = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
};
$hxClasses["zpp_nape.geom.ZPP_PartitionPair"] = zpp_$nape_geom_ZPP_$PartitionPair;
zpp_$nape_geom_ZPP_$PartitionPair.__name__ = ["zpp_nape","geom","ZPP_PartitionPair"];
zpp_$nape_geom_ZPP_$PartitionPair.get = function(a,b) {
	var ret;
	if(zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$PartitionPair(); else {
		ret = zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool;
		zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.a = a;
	ret.b = b;
	if(a.id < b.id) {
		ret.id = a.id;
		ret.di = b.id;
	} else {
		ret.id = b.id;
		ret.di = a.id;
	}
	return ret;
};
zpp_$nape_geom_ZPP_$PartitionPair.edge_swap = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
};
zpp_$nape_geom_ZPP_$PartitionPair.edge_lt = function(a,b) {
	return a.id < b.id || a.id == b.id && a.di < b.di;
};
zpp_$nape_geom_ZPP_$PartitionPair.prototype = {
	next: null
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,_inuse: null
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,free: function() {
		this.a = this.b = null;
		this.node = null;
	}
	,alloc: function() {
	}
	,a: null
	,b: null
	,id: null
	,di: null
	,node: null
	,__class__: zpp_$nape_geom_ZPP_$PartitionPair
};
var zpp_$nape_geom_ZPP_$Triangular = function() { };
$hxClasses["zpp_nape.geom.ZPP_Triangular"] = zpp_$nape_geom_ZPP_$Triangular;
zpp_$nape_geom_ZPP_$Triangular.__name__ = ["zpp_nape","geom","ZPP_Triangular"];
zpp_$nape_geom_ZPP_$Triangular.lt = function(p,q) {
	return p.y < q.y || p.y == q.y && p.x < q.x;
};
zpp_$nape_geom_ZPP_$Triangular.right_turn = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = c.x - b.x;
	uy = c.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = b.x - a.x;
	vy = b.y - a.y;
	return vy * ux - vx * uy;
};
zpp_$nape_geom_ZPP_$Triangular.delaunay = function(A,B,C,D) {
	var ux = 0.0;
	var uy = 0.0;
	var vx = 0.0;
	var vy = 0.0;
	if((function($this) {
		var $r;
		{
			ux = C.x - B.x;
			uy = C.y - B.y;
		}
		{
			vx = B.x - A.x;
			vy = B.y - A.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = D.x - C.x;
			uy = D.y - C.y;
		}
		{
			vx = C.x - B.x;
			vy = C.y - B.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = A.x - D.x;
			uy = A.y - D.y;
		}
		{
			vx = D.x - C.x;
			vy = D.y - C.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = B.x - A.x;
			uy = B.y - A.y;
		}
		{
			vx = A.x - D.x;
			vy = A.y - D.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this))) return true;
	return B.x * (C.y * D.mag - C.mag * D.y) - C.x * (B.y * D.mag - B.mag * D.y) + D.x * (B.y * C.mag - B.mag * C.y) - (A.x * (C.y * D.mag - C.mag * D.y) - C.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * C.mag - A.mag * C.y)) + (A.x * (B.y * D.mag - B.mag * D.y) - B.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * B.mag - A.mag * B.y)) - (A.x * (B.y * C.mag - B.mag * C.y) - B.x * (A.y * C.mag - A.mag * C.y) + C.x * (A.y * B.mag - A.mag * B.y)) > 0;
	return B.x * (C.y * D.mag - C.mag * D.y) + B.y * (C.mag * D.x - C.x * D.mag) + B.mag * (C.x * D.y - C.y * D.x) + A.x * (C.mag * D.y - C.y * D.mag + B.mag * (C.y - D.y) + B.y * (D.mag - C.mag)) + A.y * (C.x * D.mag - C.mag * D.x + B.mag * (D.x - C.x) + B.x * (C.mag - D.mag)) + A.mag * (C.y * D.x - C.x * D.y + B.x * (D.y - C.y) + B.y * (C.x - D.x)) > 0;
};
zpp_$nape_geom_ZPP_$Triangular.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			p.sort();
			p.mag = p.x * p.x + p.y * p.y;
			nite = nite.next;
		} while(nite != L);
	}
	if(zpp_$nape_geom_ZPP_$Triangular.edgeSet == null) {
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) zpp_$nape_geom_ZPP_$Triangular.edgeSet = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
			zpp_$nape_geom_ZPP_$Triangular.edgeSet = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = zpp_$nape_geom_ZPP_$Triangular.edgeSet.next;
			zpp_$nape_geom_ZPP_$Triangular.edgeSet.next = null;
		}
		null;
		zpp_$nape_geom_ZPP_$Triangular.edgeSet.lt = zpp_$nape_geom_ZPP_$PartitionPair.edge_lt;
		zpp_$nape_geom_ZPP_$Triangular.edgeSet.swapped = zpp_$nape_geom_ZPP_$PartitionPair.edge_swap;
	}
	var edgeStack;
	if(zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool == null) edgeStack = new zpp_$nape_geom_ZPP_$PartitionPair(); else {
		edgeStack = zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool;
		zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool = edgeStack.next;
		edgeStack.next = null;
	}
	null;
	var F1 = P.vertices;
	var L1 = P.vertices;
	if(F1 != null) {
		var nite1 = F1;
		do {
			var p1 = nite1;
			var q0 = p1.next;
			p1.diagonals.reverse();
			var cx_ite = p1.diagonals.head;
			while(cx_ite != null) {
				var q = cx_ite.elt;
				if(q.id < p1.id) {
					q0 = q;
					cx_ite = cx_ite.next;
					continue;
				}
				var q1;
				if(cx_ite.next == null) q1 = p1.prev; else q1 = cx_ite.next.elt;
				if(!zpp_$nape_geom_ZPP_$Triangular.delaunay(p1,q0,q,q1)) {
					var edge = zpp_$nape_geom_ZPP_$PartitionPair.get(p1,q);
					edgeStack.add(edge);
					edge.node = zpp_$nape_geom_ZPP_$Triangular.edgeSet.insert(edge);
				}
				q0 = q;
				cx_ite = cx_ite.next;
			}
			nite1 = nite1.next;
		} while(nite1 != L1);
	}
	while(!(edgeStack.next == null)) {
		var edge1 = edgeStack.pop_unsafe();
		var A = edge1.a;
		var C = edge1.b;
		var B = A.next;
		var D = null;
		var cx_ite1 = A.diagonals.head;
		while(cx_ite1 != null) {
			var p2 = cx_ite1.elt;
			if(p2 == C) {
				cx_ite1 = cx_ite1.next;
				if(cx_ite1 == null) D = A.prev; else D = cx_ite1.elt;
				break;
			}
			B = p2;
			cx_ite1 = cx_ite1.next;
		}
		A.diagonals.remove(C);
		C.diagonals.remove(A);
		if(C == B.next) B.diagonals.add(D); else {
			var cx_ite2 = B.diagonals.head;
			while(cx_ite2 != null) {
				var p3 = cx_ite2.elt;
				if(p3 == C) {
					B.diagonals.insert(cx_ite2,D);
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
		if(A == D.next) D.diagonals.add(B); else {
			var cx_ite3 = D.diagonals.head;
			while(cx_ite3 != null) {
				var p4 = cx_ite3.elt;
				if(p4 == A) {
					D.diagonals.insert(cx_ite3,B);
					break;
				}
				cx_ite3 = cx_ite3.next;
			}
		}
		zpp_$nape_geom_ZPP_$Triangular.edgeSet.remove_node(edge1.node);
		var o = edge1;
		o.a = o.b = null;
		o.node = null;
		o.next = zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool;
		zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool = o;
	}
	var o1 = edgeStack;
	o1.a = o1.b = null;
	o1.node = null;
	o1.next = zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool;
	zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool = o1;
};
zpp_$nape_geom_ZPP_$Triangular.triangulate = function(P) {
	var min = P.vertices;
	var max = P.vertices;
	var F = P.vertices.next;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			if(p.y < min.y || p.y == min.y && p.x < min.x) min = p;
			if(max.y < p.y || max.y == p.y && max.x < p.x) max = p;
			nite = nite.next;
		} while(nite != L);
	}
	if(zpp_$nape_geom_ZPP_$Triangular.queue == null) zpp_$nape_geom_ZPP_$Triangular.queue = new zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex();
	var rp = max.prev;
	var lp = max.next;
	zpp_$nape_geom_ZPP_$Triangular.queue.add(max);
	while(rp != min || lp != min) if(rp == min || lp != min && (rp.y < lp.y || rp.y == lp.y && rp.x < lp.x)) {
		zpp_$nape_geom_ZPP_$Triangular.queue.add(lp);
		lp.rightchain = false;
		lp = lp.next;
	} else {
		zpp_$nape_geom_ZPP_$Triangular.queue.add(rp);
		rp.rightchain = true;
		rp = rp.prev;
	}
	zpp_$nape_geom_ZPP_$Triangular.queue.add(min);
	if(zpp_$nape_geom_ZPP_$Triangular.stack == null) zpp_$nape_geom_ZPP_$Triangular.stack = new zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex();
	zpp_$nape_geom_ZPP_$Triangular.stack.add(zpp_$nape_geom_ZPP_$Triangular.queue.pop_unsafe());
	var pre = zpp_$nape_geom_ZPP_$Triangular.queue.pop_unsafe();
	zpp_$nape_geom_ZPP_$Triangular.stack.add(pre);
	while(true) {
		var p1 = zpp_$nape_geom_ZPP_$Triangular.queue.pop_unsafe();
		if(zpp_$nape_geom_ZPP_$Triangular.queue.head == null) break;
		if(p1.rightchain != zpp_$nape_geom_ZPP_$Triangular.stack.head.elt.rightchain) {
			while(true) {
				var s = zpp_$nape_geom_ZPP_$Triangular.stack.pop_unsafe();
				if(zpp_$nape_geom_ZPP_$Triangular.stack.head == null) break;
				P.add_diagonal(s,p1);
			}
			zpp_$nape_geom_ZPP_$Triangular.stack.add(pre);
		} else {
			var q = zpp_$nape_geom_ZPP_$Triangular.stack.pop_unsafe();
			while(!(zpp_$nape_geom_ZPP_$Triangular.stack.head == null)) {
				var s1 = zpp_$nape_geom_ZPP_$Triangular.stack.head.elt;
				var right = zpp_$nape_geom_ZPP_$Triangular.right_turn(s1,q,p1);
				if(p1.rightchain && right >= 0 || !p1.rightchain && right <= 0) break;
				P.add_diagonal(s1,p1);
				q = s1;
				zpp_$nape_geom_ZPP_$Triangular.stack.pop();
			}
			zpp_$nape_geom_ZPP_$Triangular.stack.add(q);
		}
		zpp_$nape_geom_ZPP_$Triangular.stack.add(p1);
		pre = p1;
	}
	if(!(zpp_$nape_geom_ZPP_$Triangular.stack.head == null)) {
		zpp_$nape_geom_ZPP_$Triangular.stack.pop();
		while(!(zpp_$nape_geom_ZPP_$Triangular.stack.head == null)) {
			var s2 = zpp_$nape_geom_ZPP_$Triangular.stack.pop_unsafe();
			if(zpp_$nape_geom_ZPP_$Triangular.stack.head == null) break;
			P.add_diagonal(max,s2);
		}
	}
	return P;
};
var zpp_$nape_geom_ZPP_$Vec2 = function() {
	this.y = 0.0;
	this.x = 0.0;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.weak = false;
	this.outer = null;
	this._isimmutable = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
$hxClasses["zpp_nape.geom.ZPP_Vec2"] = zpp_$nape_geom_ZPP_$Vec2;
zpp_$nape_geom_ZPP_$Vec2.__name__ = ["zpp_nape","geom","ZPP_Vec2"];
zpp_$nape_geom_ZPP_$Vec2.get = function(x,y,immutable) {
	if(immutable == null) immutable = false;
	var ret;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) ret = new zpp_$nape_geom_ZPP_$Vec2(); else {
		ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = immutable;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_$nape_geom_ZPP_$Vec2.prototype = {
	_invalidate: null
	,_validate: null
	,validate: function() {
		if(this._validate != null) this._validate();
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate(this);
	}
	,_immutable: null
	,_isimmutable: null
	,immutable: function() {
	}
	,outer: null
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_geom_Vec2();
			var o = this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,weak: null
	,free: function() {
		if(this.outer != null) {
			this.outer.zpp_inner = null;
			this.outer = null;
		}
		this._isimmutable = null;
		this._validate = null;
		this._invalidate = null;
	}
	,alloc: function() {
		this.weak = false;
	}
	,next: null
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,_inuse: null
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,x: null
	,y: null
	,copy: function() {
		return zpp_$nape_geom_ZPP_$Vec2.get(this.x,this.y,null);
	}
	,toString: function() {
		return "{ x: " + this.x + " y: " + this.y + " }";
	}
	,__class__: zpp_$nape_geom_ZPP_$Vec2
};
var zpp_$nape_geom_ZPP_$Vec3 = function() {
	this._validate = null;
	this.immutable = false;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.outer = null;
	this.immutable = false;
	this._validate = null;
};
$hxClasses["zpp_nape.geom.ZPP_Vec3"] = zpp_$nape_geom_ZPP_$Vec3;
zpp_$nape_geom_ZPP_$Vec3.__name__ = ["zpp_nape","geom","ZPP_Vec3"];
zpp_$nape_geom_ZPP_$Vec3.prototype = {
	outer: null
	,x: null
	,y: null
	,z: null
	,immutable: null
	,_validate: null
	,validate: function() {
		if(this._validate != null) this._validate();
	}
	,__class__: zpp_$nape_geom_ZPP_$Vec3
};
var zpp_$nape_geom_ZPP_$VecMath = function() { };
$hxClasses["zpp_nape.geom.ZPP_VecMath"] = zpp_$nape_geom_ZPP_$VecMath;
zpp_$nape_geom_ZPP_$VecMath.__name__ = ["zpp_nape","geom","ZPP_VecMath"];
zpp_$nape_geom_ZPP_$VecMath.vec_dsq = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return dx * dx + dy * dy;
};
zpp_$nape_geom_ZPP_$VecMath.vec_distance = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return Math.sqrt(dx * dx + dy * dy);
};
var zpp_$nape_phys_ZPP_$Interactor = function() {
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.group = null;
	this.cbsets = null;
	this.icompound = null;
	this.ibody = null;
	this.ishape = null;
	this.userData = null;
	this.id = 0;
	this.outer_i = null;
	this.id = zpp_$nape_ZPP_$ID.Interactor();
	this.cbsets = new zpp_$nape_util_ZNPList_$ZPP_$CallbackSet();
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
$hxClasses["zpp_nape.phys.ZPP_Interactor"] = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Interactor.__name__ = ["zpp_nape","phys","ZPP_Interactor"];
zpp_$nape_phys_ZPP_$Interactor.get = function(i1,i2) {
	var id;
	if(i1.id < i2.id) id = i1.id; else id = i2.id;
	var di;
	if(i1.id < i2.id) di = i2.id; else di = i1.id;
	var xs;
	if(i1.cbsets.length < i2.cbsets.length) xs = i1.cbsets; else xs = i2.cbsets;
	var ret = null;
	var cx_ite = xs.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x.id == id && x.di == di) {
			ret = x;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_$nape_phys_ZPP_$Interactor.int_callback = function(set,x,cb) {
	var o1 = set.int1;
	var o2 = set.int2;
	if(x.options1.compatible(o1.cbTypes) && x.options2.compatible(o2.cbTypes)) {
		cb.int1 = o1;
		cb.int2 = o2;
	} else {
		cb.int1 = o2;
		cb.int2 = o1;
	}
};
zpp_$nape_phys_ZPP_$Interactor.prototype = {
	outer_i: null
	,id: null
	,userData: null
	,ishape: null
	,ibody: null
	,icompound: null
	,isShape: function() {
		return this.ishape != null;
	}
	,isBody: function() {
		return this.ibody != null;
	}
	,isCompound: function() {
		return this.icompound != null;
	}
	,__iaddedToSpace: function() {
		if(this.group != null) this.group.interactors.add(this);
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.add(this);
			cx_ite = cx_ite.next;
		}
		this.alloc_cbSet();
	}
	,__iremovedFromSpace: function() {
		if(this.group != null) this.group.interactors.remove(this);
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.remove(this);
			cx_ite = cx_ite.next;
		}
		this.dealloc_cbSet();
	}
	,wake: function() {
		if(this.ishape != null) {
			var body = this.ishape.body;
			if(body != null && body.space != null) body.space.non_inlined_wake(body);
			true;
		} else if(this.ibody != null) {
			if(this.ibody.space != null) this.ibody.space.non_inlined_wake(this.ibody); else false;
		} else {
			if(this.icompound.space != null) this.icompound.space.wakeCompound(this.icompound);
			true;
		}
	}
	,cbsets: null
	,getSpace: function() {
		if(this.ishape != null) {
			if(this.ishape.body == null) return null; else return this.ishape.body.space;
		} else if(this.ibody != null) return this.ibody.space; else return this.icompound.space;
	}
	,group: null
	,cbTypes: null
	,cbSet: null
	,wrap_cbTypes: null
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_$nape_util_ZPP_$CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			var space;
			if(this.ishape != null) {
				if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
			} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.remove(this);
			}
			this.cbTypes.remove(cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			var space;
			if(this.ishape != null) {
				if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
			} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.cbTypes.inlined_insert(pre,cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		var space;
		if(this.ishape != null) {
			if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
		} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
		if((this.cbSet = space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.interactors.add(this);
			this.cbSet.validate();
			space.freshInteractorType(this);
		}
	}
	,dealloc_cbSet: function() {
		var space;
		if(this.ishape != null) {
			if(this.ishape.body == null) space = null; else space = this.ishape.body.space;
		} else if(this.ibody != null) space = this.ibody.space; else space = this.icompound.space;
		if(this.cbSet != null) {
			this.cbSet.interactors.remove(this);
			space.nullInteractorType(this);
			if(--this.cbSet.count == 0) {
				space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.free();
				o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,setGroup: function(group) {
		if(this.group != group) {
			var inspace;
			inspace = (this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space) != null;
			if(inspace && this.group != null) this.group.interactors.remove(this);
			this.group = group;
			if(inspace && group != null) group.interactors.add(this);
			if(inspace) {
				if(this.ishape != null) this.ishape.body.wake(); else if(this.ibody != null) this.ibody.wake(); else this.icompound.wake();
			}
		}
	}
	,immutable_midstep: function(n) {
		if(this.ibody != null) null; else if(this.ishape != null) this.ishape.__immutable_midstep(n); else this.icompound.__imutable_midstep(n);
	}
	,lookup_group: function() {
		var cur = this;
		while(cur != null && cur.group == null) if(cur.ishape != null) cur = cur.ishape.body; else if(cur.icompound != null) cur = cur.icompound.compound; else cur = cur.ibody.compound;
		if(cur == null) return null; else return cur.group;
	}
	,copyto: function(ret) {
		ret.zpp_inner_i.group = this.group;
		var _g = this.outer_i.get_cbTypes().iterator();
		while(_g.hasNext()) {
			var cb;
			_g.zpp_critical = false;
			cb = _g.zpp_inner.at(_g.zpp_i++);
			((function($this) {
				var $r;
				if(ret.zpp_inner_i.wrap_cbTypes == null) ret.zpp_inner_i.setupcbTypes();
				$r = ret.zpp_inner_i.wrap_cbTypes;
				return $r;
			}(this))).add(cb);
		}
		if(this.userData != null) ret.zpp_inner_i.userData = Reflect.copy(this.userData);
	}
	,__class__: zpp_$nape_phys_ZPP_$Interactor
};
var zpp_$nape_phys_ZPP_$Body = function() {
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_aabb = false;
	this.aabb = null;
	this.norotate = false;
	this.sinertia = 0.0;
	this.iinertia = 0.0;
	this.cinertia = 0.0;
	this.zip_inertia = false;
	this.inertia = 0.0;
	this.inertiaMode = 0;
	this.zip_gravMassScale = false;
	this.gravMassScale = 0.0;
	this.gravMassMode = 0;
	this.zip_gravMass = false;
	this.gravMass = 0.0;
	this.nomove = false;
	this.cmass = 0.0;
	this.smass = 0.0;
	this.imass = 0.0;
	this.massMode = 0;
	this.zip_mass = false;
	this.mass = 0.0;
	this.zip_axis = false;
	this.axisy = 0.0;
	this.axisx = 0.0;
	this.rot = 0.0;
	this.pre_rot = 0.0;
	this.kinangvel = 0.0;
	this.torque = 0.0;
	this.angvel = 0.0;
	this.wrapcvel = null;
	this.wrap_svel = null;
	this.svely = 0.0;
	this.svelx = 0.0;
	this.wrap_kinvel = null;
	this.kinvely = 0.0;
	this.kinvelx = 0.0;
	this.wrap_force = null;
	this.forcey = 0.0;
	this.forcex = 0.0;
	this.wrap_vel = null;
	this.vely = 0.0;
	this.velx = 0.0;
	this.wrap_pos = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.pre_posy = 0.0;
	this.pre_posx = 0.0;
	this.disableCCD = false;
	this.bulletEnabled = false;
	this.bullet = false;
	this.sweepRadius = 0.0;
	this.sweepFrozen = false;
	this.sweep_angvel = 0.0;
	this.sweepTime = 0.0;
	this.graph_depth = 0;
	this.component = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_arbiters = null;
	this.arbiters = null;
	this.space = null;
	this.wrap_shapes = null;
	this.shapes = null;
	this.compound = null;
	this.type = 0;
	this.world = false;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.ibody = this;
	this.world = false;
	this.bulletEnabled = false;
	this.sweepTime = 0;
	this.sweep_angvel = 0;
	this.norotate = this.nomove = false;
	this.disableCCD = false;
	this.posx = 0;
	this.posy = 0;
	this.rot = 0;
	this.axisx = 0;
	this.axisy = 1;
	this.svelx = 0;
	this.svely = 0;
	this.velx = 0;
	this.vely = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.torque = this.angvel = this.kinangvel = 0;
	this.pre_posx = Infinity;
	this.pre_posy = Infinity;
	this.pre_rot = Infinity;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.zip_aabb = true;
	this.aabb = zpp_$nape_geom_ZPP_$AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.massMode = zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT;
	this.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_DEFAULT;
	this.gravMassScale = 1.0;
	this.inertiaMode = zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT;
	this.arbiters = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.wrap_shapes = zpp_$nape_util_ZPP_$ShapeList.get(this.shapes);
	this.wrap_shapes.zpp_inner.adder = $bind(this,this.shapes_adder);
	this.wrap_shapes.zpp_inner.subber = $bind(this,this.shapes_subber);
	this.wrap_shapes.zpp_inner._invalidate = $bind(this,this.shapes_invalidate);
	this.kinematicDelaySleep = false;
};
$hxClasses["zpp_nape.phys.ZPP_Body"] = zpp_$nape_phys_ZPP_$Body;
zpp_$nape_phys_ZPP_$Body.__name__ = ["zpp_nape","phys","ZPP_Body"];
zpp_$nape_phys_ZPP_$Body.bodysetlt = function(a,b) {
	return a.id < b.id;
};
zpp_$nape_phys_ZPP_$Body.__static = function() {
	var ret = new nape_phys_Body((function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
		return $r;
	}(this)));
	var si = ret.zpp_inner;
	si.world = true;
	si.wrap_shapes.zpp_inner.immutable = true;
	si.smass = si.imass = si.cmass = si.mass = si.gravMass = 0.0;
	si.sinertia = si.iinertia = si.cinertia = si.inertia = 0.0;
	si.cbTypes.clear();
	return ret;
};
zpp_$nape_phys_ZPP_$Body.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Body.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	outer: null
	,world: null
	,type: null
	,isStatic: function() {
		return this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC;
	}
	,isDynamic: function() {
		return this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC;
	}
	,isKinematic: function() {
		return this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC;
	}
	,invalidate_type: function() {
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,compound: null
	,shapes: null
	,wrap_shapes: null
	,invalidate_shapes: function() {
		this.zip_aabb = true;
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,space: null
	,arbiters: null
	,wrap_arbiters: null
	,constraints: null
	,wrap_constraints: null
	,component: null
	,graph_depth: null
	,init_bodysetlist: function() {
		if(zpp_$nape_phys_ZPP_$Body.bodyset == null) {
			zpp_$nape_phys_ZPP_$Body.bodyset = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body();
			zpp_$nape_phys_ZPP_$Body.bodyset.lt = zpp_$nape_phys_ZPP_$Body.bodysetlt;
			zpp_$nape_phys_ZPP_$Body.bodystack = new zpp_$nape_util_ZNPList_$ZPP_$Body();
		}
	}
	,connectedBodies_cont: function(b) {
		if(zpp_$nape_phys_ZPP_$Body.bodyset.try_insert_bool(b.zpp_inner)) {
			zpp_$nape_phys_ZPP_$Body.bodystack.add(b.zpp_inner);
			b.zpp_inner.graph_depth = zpp_$nape_phys_ZPP_$Body.cur_graph_depth + 1;
		}
	}
	,connectedBodies: function(depth,output) {
		var _g = this;
		if(zpp_$nape_phys_ZPP_$Body.bodyset == null) {
			zpp_$nape_phys_ZPP_$Body.bodyset = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body();
			zpp_$nape_phys_ZPP_$Body.bodyset.lt = zpp_$nape_phys_ZPP_$Body.bodysetlt;
			zpp_$nape_phys_ZPP_$Body.bodystack = new zpp_$nape_util_ZNPList_$ZPP_$Body();
		}
		null;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		zpp_$nape_phys_ZPP_$Body.bodystack.add(this);
		zpp_$nape_phys_ZPP_$Body.bodyset.insert(this);
		this.graph_depth = 0;
		while(!(zpp_$nape_phys_ZPP_$Body.bodystack.head == null)) {
			var cur = zpp_$nape_phys_ZPP_$Body.bodystack.pop_unsafe();
			if(cur.graph_depth == depth) continue;
			zpp_$nape_phys_ZPP_$Body.cur_graph_depth = cur.graph_depth;
			var cx_ite = cur.constraints.head;
			while(cx_ite != null) {
				var c = cx_ite.elt;
				c.outer.visitBodies($bind(this,this.connectedBodies_cont));
				cx_ite = cx_ite.next;
			}
		}
		zpp_$nape_phys_ZPP_$Body.bodyset.clear_with(function(b) {
			if(b != _g) ret.add(b.outer);
		});
		return ret;
	}
	,interactingBodies: function(arbiter_type,depth,output) {
		var _g = this;
		if(zpp_$nape_phys_ZPP_$Body.bodyset == null) {
			zpp_$nape_phys_ZPP_$Body.bodyset = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body();
			zpp_$nape_phys_ZPP_$Body.bodyset.lt = zpp_$nape_phys_ZPP_$Body.bodysetlt;
			zpp_$nape_phys_ZPP_$Body.bodystack = new zpp_$nape_util_ZNPList_$ZPP_$Body();
		}
		null;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		zpp_$nape_phys_ZPP_$Body.bodyset.insert(this);
		zpp_$nape_phys_ZPP_$Body.bodystack.add(this);
		this.graph_depth = 0;
		while(!(zpp_$nape_phys_ZPP_$Body.bodystack.head == null)) {
			var cur = zpp_$nape_phys_ZPP_$Body.bodystack.pop_unsafe();
			if(cur.graph_depth == depth) continue;
			var cx_ite = cur.arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if((arb.type & arbiter_type) != 0) {
					var other;
					if(arb.b1 == cur) other = arb.b2; else other = arb.b1;
					if(zpp_$nape_phys_ZPP_$Body.bodyset.try_insert_bool(other)) {
						zpp_$nape_phys_ZPP_$Body.bodystack.add(other);
						other.graph_depth = cur.graph_depth + 1;
					}
				}
				cx_ite = cx_ite.next;
			}
		}
		zpp_$nape_phys_ZPP_$Body.bodyset.clear_with(function(b) {
			if(b != _g) ret.add(b.outer);
		});
		return ret;
	}
	,atRest: function(dt) {
		if(!(this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) return this.component.sleeping; else {
			var linSq = nape_Config.linearSleepThreshold;
			linSq *= linSq;
			var cansleep;
			if(this.velx * this.velx + this.vely * this.vely > linSq) cansleep = false; else if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(this.posx,this.posy,this.pre_posx,this.pre_posy) > 0.25 * linSq * dt * dt) cansleep = false; else {
				var dx = 0.0;
				var dy = 0.0;
				dx = this.aabb.maxx - this.aabb.minx;
				dy = this.aabb.maxy - this.aabb.miny;
				var idl = dx * dx + dy * dy;
				var angSq = nape_Config.angularSleepThreshold;
				angSq *= angSq;
				if(4 * this.angvel * this.angvel * idl > angSq) cansleep = false; else {
					var dr = this.rot - this.pre_rot;
					if(dr * dr * idl > angSq * dt * dt) cansleep = false; else cansleep = true;
				}
			}
			if(!cansleep) this.component.waket = this.space.stamp;
			return this.component.waket + nape_Config.sleepDelay < this.space.stamp;
		}
	}
	,refreshArbiters: function() {
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			arb.invalidated = true;
			cx_ite = cx_ite.next;
		}
	}
	,sweepTime: null
	,sweep_angvel: null
	,sweepFrozen: null
	,sweepRadius: null
	,bullet: null
	,bulletEnabled: null
	,disableCCD: null
	,sweepIntegrate: function(dt) {
		var delta = dt - this.sweepTime;
		if(delta != 0) {
			this.sweepTime = dt;
			var t = delta;
			this.posx += this.velx * t;
			this.posy += this.vely * t;
			if(this.angvel != 0) this.delta_rot(this.sweep_angvel * delta);
		}
	}
	,sweepValidate: function(s) {
		if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
			s.worldCOMx = this.posx + (this.axisy * s.localCOMx - this.axisx * s.localCOMy);
			s.worldCOMy = this.posy + (s.localCOMx * this.axisx + s.localCOMy * this.axisy);
		} else {
			var p = s.polygon;
			var li = p.lverts.next;
			var cx_ite = p.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = this.posx + (this.axisy * l.x - this.axisx * l.y);
				g.y = this.posy + (l.x * this.axisx + l.y * this.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p.edges.head;
			var cx_ite1 = p.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v1 = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gnormx = this.axisy * e.lnormx - this.axisx * e.lnormy;
				e.gnormy = e.lnormx * this.axisx + e.lnormy * this.axisy;
				e.gprojection = this.posx * e.gnormx + this.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v1.y * e.gnormx - v1.x * e.gnormy;
				u = v1;
				cx_ite1 = cx_ite1.next;
			}
			var v = p.gverts.next;
			var e1 = ite.elt;
			ite = ite.next;
			e1.gnormx = this.axisy * e1.lnormx - this.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * this.axisx + e1.lnormy * this.axisy;
			e1.gprojection = this.posx * e1.gnormx + this.posy * e1.gnormy + e1.lprojection;
			e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
			e1.tp1 = v.y * e1.gnormx - v.x * e1.gnormy;
		}
	}
	,pre_posx: null
	,pre_posy: null
	,posx: null
	,posy: null
	,wrap_pos: null
	,velx: null
	,vely: null
	,wrap_vel: null
	,forcex: null
	,forcey: null
	,wrap_force: null
	,kinvelx: null
	,kinvely: null
	,wrap_kinvel: null
	,svelx: null
	,svely: null
	,wrap_svel: null
	,invalidate_pos: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		this.zip_worldCOM = true;
	}
	,pos_invalidate: function(pos) {
		this.immutable_midstep("Body::position");
		if(!(this.posx == pos.x && this.posy == pos.y)) {
			this.posx = pos.x;
			this.posy = pos.y;
			this.invalidate_pos();
			this.wake();
		}
	}
	,pos_validate: function() {
		this.wrap_pos.zpp_inner.x = this.posx;
		this.wrap_pos.zpp_inner.y = this.posy;
	}
	,vel_invalidate: function(vel) {
		this.velx = vel.x;
		this.vely = vel.y;
		this.wake();
	}
	,vel_validate: function() {
		this.wrap_vel.zpp_inner.x = this.velx;
		this.wrap_vel.zpp_inner.y = this.vely;
	}
	,kinvel_invalidate: function(vel) {
		this.kinvelx = vel.x;
		this.kinvely = vel.y;
		this.wake();
	}
	,kinvel_validate: function() {
		this.wrap_kinvel.zpp_inner.x = this.kinvelx;
		this.wrap_kinvel.zpp_inner.y = this.kinvely;
	}
	,svel_invalidate: function(vel) {
		this.svelx = vel.x;
		this.svely = vel.y;
		this.wake();
	}
	,svel_validate: function() {
		this.wrap_svel.zpp_inner.x = this.svelx;
		this.wrap_svel.zpp_inner.y = this.svely;
	}
	,force_invalidate: function(force) {
		this.forcex = force.x;
		this.forcey = force.y;
		this.wake();
	}
	,force_validate: function() {
		this.wrap_force.zpp_inner.x = this.forcex;
		this.wrap_force.zpp_inner.y = this.forcey;
	}
	,setupPosition: function() {
		this.wrap_pos = nape_geom_Vec2.get(this.posx,this.posy,null);
		this.wrap_pos.zpp_inner._inuse = true;
		if(this.world) this.wrap_pos.zpp_inner._immutable = true; else {
			this.wrap_pos.zpp_inner._invalidate = $bind(this,this.pos_invalidate);
			this.wrap_pos.zpp_inner._validate = $bind(this,this.pos_validate);
		}
	}
	,setupVelocity: function() {
		this.wrap_vel = nape_geom_Vec2.get(this.velx,this.vely,null);
		this.wrap_vel.zpp_inner._inuse = true;
		if(this.world) this.wrap_vel.zpp_inner._immutable = true; else {
			this.wrap_vel.zpp_inner._invalidate = $bind(this,this.vel_invalidate);
			this.wrap_vel.zpp_inner._validate = $bind(this,this.vel_validate);
		}
	}
	,setupkinvel: function() {
		this.wrap_kinvel = nape_geom_Vec2.get(this.kinvelx,this.kinvely,null);
		this.wrap_kinvel.zpp_inner._inuse = true;
		if(this.world) this.wrap_kinvel.zpp_inner._immutable = true; else {
			this.wrap_kinvel.zpp_inner._invalidate = $bind(this,this.kinvel_invalidate);
			this.wrap_kinvel.zpp_inner._validate = $bind(this,this.kinvel_validate);
		}
	}
	,setupsvel: function() {
		this.wrap_svel = nape_geom_Vec2.get(this.svelx,this.svely,null);
		this.wrap_svel.zpp_inner._inuse = true;
		if(this.world) this.wrap_svel.zpp_inner._immutable = true; else {
			this.wrap_svel.zpp_inner._invalidate = $bind(this,this.svel_invalidate);
			this.wrap_svel.zpp_inner._validate = $bind(this,this.svel_validate);
		}
	}
	,setupForce: function() {
		this.wrap_force = nape_geom_Vec2.get(this.forcex,this.forcey,null);
		this.wrap_force.zpp_inner._inuse = true;
		if(this.world) this.wrap_force.zpp_inner._immutable = true; else {
			this.wrap_force.zpp_inner._invalidate = $bind(this,this.force_invalidate);
			this.wrap_force.zpp_inner._validate = $bind(this,this.force_validate);
		}
	}
	,cvel_validate: function() {
		this.wrapcvel.zpp_inner.x = this.velx + this.kinvelx;
		this.wrapcvel.zpp_inner.y = this.vely + this.kinvely;
		this.wrapcvel.zpp_inner.z = this.angvel + this.kinangvel;
	}
	,wrapcvel: null
	,setup_cvel: function() {
		var me = this;
		this.wrapcvel = nape_geom_Vec3.get();
		this.wrapcvel.zpp_inner.immutable = true;
		this.wrapcvel.zpp_inner._validate = $bind(this,this.cvel_validate);
	}
	,angvel: null
	,torque: null
	,kinangvel: null
	,pre_rot: null
	,rot: null
	,invalidate_rot: function() {
		this.zip_axis = true;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		this.zip_worldCOM = true;
	}
	,axisx: null
	,axisy: null
	,zip_axis: null
	,validate_axis: function() {
		if(this.zip_axis) {
			this.zip_axis = false;
			this.axisx = Math.sin(this.rot);
			this.axisy = Math.cos(this.rot);
			null;
		}
	}
	,quick_validate_axis: function() {
		this.axisx = Math.sin(this.rot);
		this.axisy = Math.cos(this.rot);
	}
	,delta_rot: function(dr) {
		this.rot += dr;
		if(dr * dr > 0.0001) {
			this.axisx = Math.sin(this.rot);
			this.axisy = Math.cos(this.rot);
			null;
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx = (p * this.axisx + dr * this.axisy) * m;
			this.axisy = (p * this.axisy - dr * this.axisx) * m;
			this.axisx = nx;
		}
	}
	,kinematicDelaySleep: null
	,mass: null
	,zip_mass: null
	,massMode: null
	,imass: null
	,smass: null
	,cmass: null
	,nomove: null
	,invalidate_mass: function() {
		this.zip_mass = true;
		this.invalidate_gravMass();
	}
	,validate_mass: function() {
		var exist = false;
		if(this.zip_mass || this.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT && exist) {
			this.zip_mass = false;
			if(this.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT) {
				this.cmass = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cmass += s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && !this.nomove) {
				this.mass = this.cmass;
				this.imass = this.smass = 1.0 / this.mass;
			} else {
				this.mass = Infinity;
				this.imass = this.smass = 0.0;
			}
			if(exist) this.invalidate_inertia();
		}
	}
	,gravMass: null
	,zip_gravMass: null
	,gravMassMode: null
	,gravMassScale: null
	,zip_gravMassScale: null
	,invalidate_gravMass: function() {
		if(this.gravMassMode != zpp_$nape_util_ZPP_$Flags.id_GravMassMode_FIXED) this.zip_gravMass = true;
		if(this.gravMassMode != zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED) this.zip_gravMassScale = true;
		this.wake();
	}
	,validate_gravMass: function() {
		if(this.zip_gravMass) {
			this.zip_gravMass = false;
			this.validate_mass();
			if(this.gravMassMode == zpp_$nape_util_ZPP_$Flags.id_GravMassMode_DEFAULT) {
				this.validate_mass();
				this.gravMass = this.cmass;
			} else if(this.gravMassMode == zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED) {
				this.validate_mass();
				this.gravMass = this.cmass * this.gravMassScale;
			}
		}
	}
	,invalidate_gravMassScale: function() {
		if(this.gravMassMode != zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED) this.zip_gravMassScale = true; else this.invalidate_gravMass();
	}
	,validate_gravMassScale: function() {
		if(this.zip_gravMassScale) {
			this.zip_gravMassScale = false;
			if(this.gravMassMode == zpp_$nape_util_ZPP_$Flags.id_GravMassMode_DEFAULT) this.gravMassScale = 1.0; else if(this.gravMassMode == zpp_$nape_util_ZPP_$Flags.id_GravMassMode_FIXED) {
				this.validate_mass();
				this.gravMassScale = this.gravMass / this.cmass;
			}
		}
	}
	,inertiaMode: null
	,inertia: null
	,zip_inertia: null
	,cinertia: null
	,iinertia: null
	,sinertia: null
	,norotate: null
	,invalidate_inertia: function() {
		this.zip_inertia = true;
		this.wake();
	}
	,validate_inertia: function() {
		var exist = false;
		if(this.zip_inertia || this.inertiaMode == zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT && exist) {
			this.zip_inertia = false;
			if(this.inertiaMode == zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT) {
				this.cinertia = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cinertia += s.inertia * s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && !this.norotate) {
				this.inertia = this.cinertia;
				this.sinertia = this.iinertia = 1.0 / this.inertia;
			} else {
				this.inertia = Infinity;
				this.sinertia = this.iinertia = 0;
			}
			if(exist) this.invalidate_inertia();
		}
	}
	,invalidate_wake: function() {
		this.wake();
	}
	,aabb: null
	,zip_aabb: null
	,validate_aabb: function() {
		if(this.zip_aabb) {
			this.zip_aabb = false;
			this.aabb.minx = Infinity;
			this.aabb.miny = Infinity;
			this.aabb.maxx = -Infinity;
			this.aabb.maxy = -Infinity;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_aabb) {
					if(s.body != null) {
						s.zip_aabb = false;
						if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
					}
				}
				this.aabb.combine(s.aabb);
				cx_ite = cx_ite.next;
			}
		}
	}
	,invalidate_aabb: function() {
		this.zip_aabb = true;
	}
	,localCOMx: null
	,localCOMy: null
	,zip_localCOM: null
	,worldCOMx: null
	,worldCOMy: null
	,zip_worldCOM: null
	,wrap_localCOM: null
	,wrap_worldCOM: null
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			var tempx = 0;
			var tempy = 0;
			var msum = 0.0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_localCOM) {
					s.zip_localCOM = false;
					if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
					if(s.wrap_localCOM != null) {
						s.wrap_localCOM.zpp_inner.x = s.localCOMx;
						s.wrap_localCOM.zpp_inner.y = s.localCOMy;
					}
				}
				s.validate_area_inertia();
				var t = s.area * s.material.density;
				tempx += s.localCOMx * t;
				tempy += s.localCOMy * t;
				msum += s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
			if(msum != 0) {
				var t1 = 1.0 / msum;
				this.localCOMx = tempx * t1;
				this.localCOMy = tempy * t1;
			}
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
			if(this.zip_mass && this.massMode == zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT) {
				this.zip_mass = false;
				this.cmass = msum;
				if(this.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
					this.mass = this.cmass;
					this.imass = this.smass = 1.0 / this.mass;
				} else {
					this.mass = Infinity;
					this.imass = this.smass = 0.0;
				}
			}
		}
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			this.zip_worldCOM = false;
			this.validate_localCOM();
			if(this.zip_axis) {
				this.zip_axis = false;
				this.axisx = Math.sin(this.rot);
				this.axisy = Math.cos(this.rot);
				null;
			}
			this.worldCOMx = this.posx + (this.axisy * this.localCOMx - this.axisx * this.localCOMy);
			this.worldCOMy = this.posy + (this.localCOMx * this.axisx + this.localCOMy * this.axisy);
			if(this.wrap_worldCOM != null) {
				this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
				this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
			}
		}
	}
	,getlocalCOM: function() {
		this.validate_localCOM();
	}
	,getworldCOM: function() {
		this.validate_worldCOM();
	}
	,__immutable_midstep: function(name) {
	}
	,clear: function() {
		while(!(this.shapes.head == null)) {
			var s = this.shapes.pop_unsafe();
			s.removedFromBody();
			s.body = null;
		}
		this.invalidate_shapes();
		this.pre_posx = 0;
		this.pre_posy = 0;
		this.posx = 0;
		this.posy = 0;
		this.velx = 0;
		this.vely = 0;
		this.forcex = 0;
		this.forcey = 0;
		this.kinvelx = 0;
		this.kinvely = 0;
		this.svelx = 0;
		this.svely = 0;
		this.angvel = this.torque = this.kinangvel = this.pre_rot = this.rot = 0;
		this.invalidate_pos();
		this.invalidate_rot();
		this.axisx = 0;
		this.axisy = 1;
		this.zip_axis = false;
		this.massMode = zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT;
		this.gravMassMode = zpp_$nape_util_ZPP_$Flags.id_GravMassMode_DEFAULT;
		this.gravMassScale = 1.0;
		this.inertiaMode = zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT;
		this.norotate = false;
		this.nomove = false;
	}
	,aabb_validate: function() {
		this.validate_aabb();
	}
	,shapes_adder: function(s) {
		if(s.zpp_inner.body != this) {
			if(s.zpp_inner.body != null) s.zpp_inner.body.wrap_shapes.remove(s);
			s.zpp_inner.body = this;
			s.zpp_inner.addedToBody();
			if(this.space != null) this.space.added_shape(s.zpp_inner,null);
			if(s.zpp_inner.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
				s.zpp_inner.polygon.invalidate_gaxi();
				s.zpp_inner.polygon.invalidate_gverts();
			}
			return true;
		} else return false;
	}
	,shapes_subber: function(s) {
		if(this.space != null) this.space.removed_shape(s.zpp_inner);
		s.zpp_inner.body = null;
		s.zpp_inner.removedFromBody();
	}
	,shapes_invalidate: function(_) {
		this.invalidate_shapes();
	}
	,addedToSpace: function() {
		if(zpp_$nape_space_ZPP_$Component.zpp_pool == null) this.component = new zpp_$nape_space_ZPP_$Component(); else {
			this.component = zpp_$nape_space_ZPP_$Component.zpp_pool;
			zpp_$nape_space_ZPP_$Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		null;
		this.component.isBody = true;
		this.component.body = this;
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		while(!(this.arbiters.head == null)) {
			var arb = this.arbiters.pop_unsafe();
			arb.cleared = true;
			if(arb.b2 == this) arb.b1.arbiters.inlined_try_remove(arb);
			if(arb.b1 == this) arb.b2.arbiters.inlined_try_remove(arb);
			if(arb.pair != null) {
				arb.pair.arb = null;
				arb.pair = null;
			}
			arb.active = false;
			this.space.f_arbiters.modified = true;
		}
		var o = this.component;
		o.body = null;
		o.constraint = null;
		null;
		o.next = zpp_$nape_space_ZPP_$Component.zpp_pool;
		zpp_$nape_space_ZPP_$Component.zpp_pool = o;
		this.component = null;
		this.__iremovedFromSpace();
	}
	,copy: function() {
		var ret = new nape_phys_Body().zpp_inner;
		ret.type = this.type;
		ret.bulletEnabled = this.bulletEnabled;
		ret.disableCCD = this.disableCCD;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			ret.outer.zpp_inner.wrap_shapes.add(s.outer.copy());
			cx_ite = cx_ite.next;
		}
		ret.posx = this.posx;
		ret.posy = this.posy;
		ret.velx = this.velx;
		ret.vely = this.vely;
		ret.forcex = this.forcex;
		ret.forcey = this.forcey;
		ret.rot = this.rot;
		ret.angvel = this.angvel;
		ret.torque = this.torque;
		ret.kinvelx = this.kinvelx;
		ret.kinvely = this.kinvely;
		ret.kinangvel = this.kinangvel;
		ret.svelx = this.svelx;
		ret.svely = this.svely;
		if(!this.zip_axis) {
			ret.axisx = this.axisx;
			ret.axisy = this.axisy;
		} else ret.invalidate_rot();
		ret.rot = this.rot;
		ret.massMode = this.massMode;
		ret.gravMassMode = this.gravMassMode;
		ret.inertiaMode = this.inertiaMode;
		ret.norotate = this.norotate;
		ret.nomove = this.nomove;
		ret.cmass = this.cmass;
		ret.cinertia = this.cinertia;
		if(!this.zip_mass) ret.mass = this.mass; else ret.invalidate_mass();
		if(!this.zip_gravMass) ret.gravMass = this.gravMass; else ret.invalidate_gravMass();
		if(!this.zip_gravMassScale) ret.gravMassScale = this.gravMassScale; else ret.invalidate_gravMassScale();
		if(!this.zip_inertia) ret.inertia = this.inertia; else ret.invalidate_inertia();
		if(!this.zip_aabb) {
			ret.aabb.minx = this.aabb.minx;
			ret.aabb.miny = this.aabb.miny;
			ret.aabb.maxx = this.aabb.maxx;
			ret.aabb.maxy = this.aabb.maxy;
		} else ret.zip_aabb = true;
		if(!this.zip_localCOM) {
			ret.localCOMx = this.localCOMx;
			ret.localCOMy = this.localCOMy;
		} else {
			ret.zip_localCOM = true;
			ret.zip_worldCOM = true;
		}
		if(!this.zip_worldCOM) {
			ret.worldCOMx = this.worldCOMx;
			ret.worldCOMy = this.worldCOMy;
		} else ret.zip_worldCOM = true;
		this.copyto(ret.outer);
		return ret.outer;
	}
	,__class__: zpp_$nape_phys_ZPP_$Body
});
var zpp_$nape_phys_ZPP_$Compound = function() {
	this.space = null;
	this.compound = null;
	this.depth = 0;
	this.wrap_compounds = null;
	this.wrap_constraints = null;
	this.wrap_bodies = null;
	this.compounds = null;
	this.constraints = null;
	this.bodies = null;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.icompound = this;
	this.depth = 1;
	var me = this;
	this.bodies = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_bodies = zpp_$nape_util_ZPP_$BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.compounds = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this.wrap_compounds = zpp_$nape_util_ZPP_$CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
};
$hxClasses["zpp_nape.phys.ZPP_Compound"] = zpp_$nape_phys_ZPP_$Compound;
zpp_$nape_phys_ZPP_$Compound.__name__ = ["zpp_nape","phys","ZPP_Compound"];
zpp_$nape_phys_ZPP_$Compound.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Compound.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	outer: null
	,bodies: null
	,constraints: null
	,compounds: null
	,wrap_bodies: null
	,wrap_constraints: null
	,wrap_compounds: null
	,depth: null
	,compound: null
	,space: null
	,__imutable_midstep: function(name) {
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
	}
	,breakApart: function() {
		if(this.space != null) {
			this.__iremovedFromSpace();
			this.space.nullInteractorType(this);
		}
		if(this.compound != null) this.compound.compounds.remove(this); else if(this.space != null) this.space.compounds.remove(this);
		while(!(this.bodies.head == null)) {
			var b = this.bodies.pop_unsafe();
			if((b.compound = this.compound) != null) this.compound.bodies.add(b); else if(this.space != null) this.space.bodies.add(b);
			if(this.space != null) this.space.freshInteractorType(b);
		}
		while(!(this.constraints.head == null)) {
			var c = this.constraints.pop_unsafe();
			if((c.compound = this.compound) != null) this.compound.constraints.add(c); else if(this.space != null) this.space.constraints.add(c);
		}
		while(!(this.compounds.head == null)) {
			var c1 = this.compounds.pop_unsafe();
			if((c1.compound = this.compound) != null) this.compound.compounds.add(c1); else if(this.space != null) this.space.compounds.add(c1);
			if(this.space != null) this.space.freshInteractorType(c1);
		}
		this.compound = null;
		this.space = null;
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_bodies.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_bodies.remove(x);
			x.zpp_inner.compound = this;
			if(this.space != null) this.space.addBody(x.zpp_inner);
			return true;
		} else return false;
	}
	,bodies_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) this.space.remBody(x.zpp_inner);
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_constraints.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_constraints.remove(x);
			x.zpp_inner.compound = this;
			if(this.space != null) this.space.addConstraint(x.zpp_inner);
			return true;
		} else return false;
	}
	,constraints_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) this.space.remConstraint(x.zpp_inner);
	}
	,compounds_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_compounds.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_compounds.remove(x);
			x.zpp_inner.compound = this;
			x.zpp_inner.depth = this.depth + 1;
			if(this.space != null) this.space.addCompound(x.zpp_inner);
			return true;
		} else return false;
	}
	,compounds_subber: function(x) {
		x.zpp_inner.compound = null;
		x.zpp_inner.depth = 1;
		if(this.space != null) this.space.remCompound(x.zpp_inner);
	}
	,copy: function(dict,todo) {
		var root = dict == null;
		if(dict == null) dict = [];
		if(todo == null) todo = [];
		var ret = new nape_phys_Compound();
		var cx_ite = this.compounds.head;
		while(cx_ite != null) {
			var c = cx_ite.elt;
			var cc = c.copy(dict,todo);
			cc.zpp_inner.immutable_midstep("Compound::compound");
			if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != ret) {
				if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != null) (cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(cc);
				if(ret != null) ret.zpp_inner.wrap_compounds.add(cc);
			}
			if(cc.zpp_inner.compound == null) null; else cc.zpp_inner.compound.outer;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.bodies.head;
		while(cx_ite1 != null) {
			var b = cx_ite1.elt;
			var bc = b.outer.copy();
			dict.push(zpp_$nape_constraint_ZPP_$CopyHelper.dict(b.id,bc));
			if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != ret) {
				if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != null) (bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(bc);
				if(ret != null) ret.zpp_inner.wrap_bodies.add(bc);
			}
			if(bc.zpp_inner.compound == null) null; else bc.zpp_inner.compound.outer;
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.constraints.head;
		while(cx_ite2 != null) {
			var c1 = cx_ite2.elt;
			var cc1 = c1.copy(dict,todo);
			if((cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer) != ret) {
				if((cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer) != null) (cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(cc1);
				if(ret != null) ret.zpp_inner.wrap_constraints.add(cc1);
			}
			if(cc1.zpp_inner.compound == null) null; else cc1.zpp_inner.compound.outer;
			cx_ite2 = cx_ite2.next;
		}
		if(root) while(todo.length > 0) {
			var xcb = todo.pop();
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == xcb.id) {
					xcb.cb(idc.bc);
					break;
				}
			}
		}
		this.copyto(ret);
		return ret;
	}
	,__class__: zpp_$nape_phys_ZPP_$Compound
});
var zpp_$nape_phys_ZPP_$FluidProperties = function() {
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.density = 0.0;
	this.viscosity = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.density = this.viscosity = 1;
	this.wrap_gravity = null;
	this.gravityx = 0;
	this.gravityy = 0;
};
$hxClasses["zpp_nape.phys.ZPP_FluidProperties"] = zpp_$nape_phys_ZPP_$FluidProperties;
zpp_$nape_phys_ZPP_$FluidProperties.__name__ = ["zpp_nape","phys","ZPP_FluidProperties"];
zpp_$nape_phys_ZPP_$FluidProperties.prototype = {
	next: null
	,userData: null
	,outer: null
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_phys_FluidProperties();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool;
			zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,shapes: null
	,wrap_shapes: null
	,feature_cons: function() {
		this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,copy: function() {
		var ret;
		if(zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool == null) ret = new zpp_$nape_phys_ZPP_$FluidProperties(); else {
			ret = zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool;
			zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.viscosity = this.viscosity;
		ret.density = this.density;
		return ret;
	}
	,viscosity: null
	,density: null
	,gravityx: null
	,gravityy: null
	,wrap_gravity: null
	,gravity_invalidate: function(x) {
		this.gravityx = x.x;
		this.gravityy = x.y;
		this.invalidate();
	}
	,gravity_validate: function() {
		this.wrap_gravity.zpp_inner.x = this.gravityx;
		this.wrap_gravity.zpp_inner.y = this.gravityy;
	}
	,getgravity: function() {
		this.wrap_gravity = nape_geom_Vec2.get(this.gravityx,this.gravityy,null);
		this.wrap_gravity.zpp_inner._inuse = true;
		this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
		this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
	}
	,invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			shape.invalidate_fluidprops();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_phys_ZPP_$FluidProperties
};
var zpp_$nape_phys_ZPP_$Material = function() {
	this.rollingFriction = 0.0;
	this.elasticity = 0.0;
	this.density = 0.0;
	this.staticFriction = 0.0;
	this.dynamicFriction = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.elasticity = 0;
	this.dynamicFriction = 1;
	this.staticFriction = 2;
	this.density = 0.001;
	this.rollingFriction = 0.01;
};
$hxClasses["zpp_nape.phys.ZPP_Material"] = zpp_$nape_phys_ZPP_$Material;
zpp_$nape_phys_ZPP_$Material.__name__ = ["zpp_nape","phys","ZPP_Material"];
zpp_$nape_phys_ZPP_$Material.prototype = {
	next: null
	,userData: null
	,outer: null
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_phys_Material();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,shapes: null
	,wrap_shapes: null
	,feature_cons: function() {
		this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,dynamicFriction: null
	,staticFriction: null
	,density: null
	,elasticity: null
	,rollingFriction: null
	,copy: function() {
		var ret = new zpp_$nape_phys_ZPP_$Material();
		ret.dynamicFriction = this.dynamicFriction;
		ret.staticFriction = this.staticFriction;
		ret.density = this.density;
		ret.elasticity = this.elasticity;
		ret.rollingFriction = this.rollingFriction;
		return ret;
	}
	,set: function(x) {
		this.dynamicFriction = x.dynamicFriction;
		this.staticFriction = x.staticFriction;
		this.density = x.density;
		this.elasticity = x.elasticity;
		this.rollingFriction = x.rollingFriction;
	}
	,invalidate: function(x) {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_material(x);
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_phys_ZPP_$Material
};
var zpp_$nape_shape_ZPP_$Shape = function(type) {
	this.zip_aabb = false;
	this.aabb = null;
	this.pairs = null;
	this.node = null;
	this.sweep = null;
	this.sensorEnabled = false;
	this.fluidEnabled = false;
	this.fluidProperties = null;
	this.filter = null;
	this.material = null;
	this.refmaterial = null;
	this.polygon = null;
	this.circle = null;
	this.sweepCoef = 0.0;
	this.zip_sweepRadius = false;
	this.sweepRadius = 0.0;
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_angDrag = false;
	this.angDrag = 0.0;
	this.inertia = 0.0;
	this.zip_area_inertia = false;
	this.area = 0.0;
	this.type = 0;
	this.body = null;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.pairs = new zpp_$nape_util_ZNPList_$ZPP_$AABBPair();
	this.ishape = this;
	this.type = type;
	this.aabb = zpp_$nape_geom_ZPP_$AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.zip_area_inertia = this.zip_angDrag = this.zip_localCOM = this.zip_sweepRadius = true;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.fluidEnabled = false;
	this.sensorEnabled = false;
	this.fluidProperties = null;
	this.body = null;
	this.refmaterial = new zpp_$nape_phys_ZPP_$Material();
	this.sweepRadius = this.sweepCoef = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Shape"] = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Shape.__name__ = ["zpp_nape","shape","ZPP_Shape"];
zpp_$nape_shape_ZPP_$Shape.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_shape_ZPP_$Shape.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	outer: null
	,body: null
	,type: null
	,isCircle: function() {
		return this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE;
	}
	,isPolygon: function() {
		return this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON;
	}
	,area: null
	,zip_area_inertia: null
	,inertia: null
	,angDrag: null
	,zip_angDrag: null
	,localCOMx: null
	,localCOMy: null
	,zip_localCOM: null
	,worldCOMx: null
	,worldCOMy: null
	,zip_worldCOM: null
	,wrap_localCOM: null
	,wrap_worldCOM: null
	,sweepRadius: null
	,zip_sweepRadius: null
	,sweepCoef: null
	,invalidate_sweepRadius: function() {
		this.zip_sweepRadius = true;
	}
	,validate_sweepRadius: function() {
		if(this.zip_sweepRadius) {
			this.zip_sweepRadius = false;
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle.__validate_sweepRadius(); else this.polygon.__validate_sweepRadius();
		}
	}
	,circle: null
	,polygon: null
	,refmaterial: null
	,material: null
	,filter: null
	,fluidProperties: null
	,fluidEnabled: null
	,sensorEnabled: null
	,sweep: null
	,node: null
	,pairs: null
	,clear: function() {
		if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle.__clear(); else this.polygon.__clear();
	}
	,aabb: null
	,zip_aabb: null
	,validate_aabb: function() {
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle.__validate_aabb(); else this.polygon.__validate_aabb();
			}
		}
	}
	,force_validate_aabb: function() {
		if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle._force_validate_aabb(); else this.polygon._force_validate_aabb();
	}
	,invalidate_aabb: function() {
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,validate_area_inertia: function() {
		if(this.zip_area_inertia) {
			this.zip_area_inertia = false;
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle.__validate_area_inertia(); else this.polygon.__validate_area_inertia();
		}
	}
	,validate_angDrag: function() {
		if(this.zip_angDrag || this.refmaterial.dynamicFriction != this.material.dynamicFriction) {
			this.zip_angDrag = false;
			this.refmaterial.dynamicFriction = this.material.dynamicFriction;
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle.__validate_angDrag(); else this.polygon.__validate_angDrag();
		}
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
	}
	,getworldCOM: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
		this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
		this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
	}
	,invalidate_area_inertia: function() {
		this.zip_area_inertia = true;
		if(this.body != null) {
			this.body.invalidate_localCOM();
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	,invalidate_angDrag: function() {
		this.zip_angDrag = true;
	}
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.invalidate_area_inertia();
		if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.zip_sweepRadius = true;
		this.invalidate_angDrag();
		this.invalidate_worldCOM();
		if(this.body != null) this.body.invalidate_localCOM();
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,invalidate_material: function(flags) {
		if((flags & zpp_$nape_phys_ZPP_$Material.WAKE) != 0) this.wake();
		if((flags & zpp_$nape_phys_ZPP_$Material.ARBITERS) != 0) {
			if(this.body != null) this.body.refreshArbiters();
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.PROPS) != 0) {
			if(this.body != null) {
				this.body.invalidate_localCOM();
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.ANGDRAG) != 0) this.invalidate_angDrag();
		this.refmaterial.set(this.material);
	}
	,invalidate_filter: function() {
		this.wake();
	}
	,invalidate_fluidprops: function() {
		if(this.fluidEnabled) this.wake();
	}
	,aabb_validate: function() {
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) this.circle.__validate_aabb(); else this.polygon.__validate_aabb();
			}
		}
	}
	,setMaterial: function(material) {
		if(this.material != material) {
			if(this.body != null && this.body.space != null) {
				if(this.material != null) this.material.shapes.remove(this);
			}
			this.material = material;
			if(this.body != null && this.body.space != null) material.shapes.add(this);
			this.wake();
			if(this.body != null) this.body.refreshArbiters();
		}
	}
	,setFilter: function(filter) {
		if(this.filter != filter) {
			if(this.body != null && this.body.space != null) {
				if(this.filter != null) this.filter.shapes.remove(this);
			}
			this.filter = filter;
			if(this.body != null && this.body.space != null) filter.shapes.add(this);
			this.wake();
		}
	}
	,setFluid: function(fluid) {
		if(this.fluidProperties != fluid) {
			if(this.body != null && this.body.space != null) {
				if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
			}
			this.fluidProperties = fluid;
			if(this.body != null && this.body.space != null) fluid.shapes.add(this);
			if(this.fluidEnabled) this.wake();
		}
	}
	,__immutable_midstep: function(name) {
	}
	,addedToBody: function() {
		this.invalidate_worldCOM();
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,removedFromBody: function() {
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
		this.material.shapes.add(this);
		this.filter.shapes.add(this);
		if(this.fluidProperties != null) this.fluidProperties.shapes.add(this);
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
		this.material.shapes.remove(this);
		this.filter.shapes.remove(this);
		if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
	}
	,copy: function() {
		var ret = null;
		if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) ret = this.circle.__copy(); else ret = this.polygon.__copy();
		if(!this.zip_area_inertia) {
			ret.area = this.area;
			ret.inertia = this.inertia;
		} else ret.invalidate_area_inertia();
		if(!this.zip_sweepRadius) {
			ret.sweepRadius = this.sweepRadius;
			ret.sweepCoef = this.sweepCoef;
		} else ret.zip_sweepRadius = true;
		if(!this.zip_angDrag) ret.angDrag = this.angDrag; else ret.invalidate_angDrag();
		if(!this.zip_aabb) {
			ret.aabb.minx = this.aabb.minx;
			ret.aabb.miny = this.aabb.miny;
			ret.aabb.maxx = this.aabb.maxx;
			ret.aabb.maxy = this.aabb.maxy;
		} else {
			ret.zip_aabb = true;
			if(ret.body != null) ret.body.zip_aabb = true;
		}
		var o = ret.material;
		o.outer = null;
		o.next = zpp_$nape_phys_ZPP_$Material.zpp_pool;
		zpp_$nape_phys_ZPP_$Material.zpp_pool = o;
		var o1 = ret.filter;
		o1.outer = null;
		o1.next = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = o1;
		ret.material = this.material;
		ret.filter = this.filter;
		if(this.fluidProperties != null) ret.fluidProperties = this.fluidProperties;
		ret.fluidEnabled = this.fluidEnabled;
		ret.sensorEnabled = this.sensorEnabled;
		if(this.userData != null) ret.userData = Reflect.copy(this.userData);
		this.copyto(ret.outer);
		return ret.outer;
	}
	,__class__: zpp_$nape_shape_ZPP_$Shape
});
var zpp_$nape_shape_ZPP_$Circle = function() {
	this.radius = 0.0;
	this.outer_zn = null;
	zpp_$nape_shape_ZPP_$Shape.call(this,zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE);
	this.circle = this;
	this.zip_localCOM = false;
};
$hxClasses["zpp_nape.shape.ZPP_Circle"] = zpp_$nape_shape_ZPP_$Circle;
zpp_$nape_shape_ZPP_$Circle.__name__ = ["zpp_nape","shape","ZPP_Circle"];
zpp_$nape_shape_ZPP_$Circle.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Circle.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	outer_zn: null
	,radius: null
	,__clear: function() {
	}
	,invalidate_radius: function() {
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
		if(this.body != null) this.body.wake();
	}
	,localCOM_validate: function() {
		this.wrap_localCOM.zpp_inner.x = this.localCOMx;
		this.wrap_localCOM.zpp_inner.y = this.localCOMy;
	}
	,localCOM_invalidate: function(x) {
		this.localCOMx = x.x;
		this.localCOMy = x.y;
		this.invalidate_localCOM();
		if(this.body != null) this.body.wake();
	}
	,setupLocalCOM: function() {
		var me = this;
		this.wrap_localCOM = nape_geom_Vec2.get(this.localCOMx,this.localCOMy,null);
		this.wrap_localCOM.zpp_inner._inuse = true;
		this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
		this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
	}
	,__validate_aabb: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
		var rx = this.radius;
		var ry = this.radius;
		this.aabb.minx = this.worldCOMx - rx;
		this.aabb.miny = this.worldCOMy - ry;
		this.aabb.maxx = this.worldCOMx + rx;
		this.aabb.maxy = this.worldCOMy + ry;
	}
	,_force_validate_aabb: function() {
		this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
		this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
		this.aabb.minx = this.worldCOMx - this.radius;
		this.aabb.miny = this.worldCOMy - this.radius;
		this.aabb.maxx = this.worldCOMx + this.radius;
		this.aabb.maxy = this.worldCOMy + this.radius;
	}
	,__validate_sweepRadius: function() {
		this.sweepCoef = Math.sqrt(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
		this.sweepRadius = this.sweepCoef + this.radius;
	}
	,__validate_area_inertia: function() {
		var r2 = this.radius * this.radius;
		this.area = r2 * Math.PI;
		this.inertia = r2 * 0.5 + (this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
	}
	,__validate_angDrag: function() {
		var lc = this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy;
		var r2 = this.radius * this.radius;
		var skin = this.material.dynamicFriction * nape_Config.fluidAngularDragFriction;
		this.angDrag = (lc + 2 * r2) * skin + 0.5 * nape_Config.fluidAngularDrag * (1 + nape_Config.fluidVacuumDrag) * lc;
		this.angDrag /= 2 * (lc + 0.5 * r2);
	}
	,__scale: function(sx,sy) {
		var factor;
		factor = ((sx < 0?-sx:sx) + (sy < 0?-sy:sy)) / 2;
		if(factor < 0) this.radius *= -factor; else this.radius *= factor;
		this.invalidate_radius();
		if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
			this.localCOMx *= sx;
			this.localCOMy *= sy;
			this.invalidate_localCOM();
		}
	}
	,__translate: function(x,y) {
		var t = 1.0;
		this.localCOMx += x * t;
		this.localCOMy += y * t;
		this.invalidate_localCOM();
	}
	,__rotate: function(x,y) {
		if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
			var tx = 0.0;
			var ty = 0.0;
			tx = y * this.localCOMx - x * this.localCOMy;
			ty = this.localCOMx * x + this.localCOMy * y;
			this.localCOMx = tx;
			this.localCOMy = ty;
			this.invalidate_localCOM();
		}
	}
	,__transform: function(m) {
		var det = m.zpp_inner.a * m.zpp_inner.d - m.zpp_inner.b * m.zpp_inner.c;
		if(det < 0) det = -det;
		this.radius *= Math.sqrt(det);
		var t = m.zpp_inner.a * this.localCOMx + m.zpp_inner.b * this.localCOMy + m.zpp_inner.tx;
		this.localCOMy = m.zpp_inner.c * this.localCOMx + m.zpp_inner.d * this.localCOMy + m.zpp_inner.ty;
		this.localCOMx = t;
		this.invalidate_radius();
		this.invalidate_localCOM();
	}
	,__copy: function() {
		var ret = new nape_shape_Circle(this.radius).zpp_inner_zn;
		ret.localCOMx = this.localCOMx;
		ret.localCOMy = this.localCOMy;
		ret.zip_localCOM = false;
		return ret;
	}
	,__class__: zpp_$nape_shape_ZPP_$Circle
});
var zpp_$nape_shape_ZPP_$Edge = function() {
	this.tp1 = 0.0;
	this.tp0 = 0.0;
	this.gp1 = null;
	this.lp1 = null;
	this.gp0 = null;
	this.lp0 = null;
	this.gprojection = 0.0;
	this.lprojection = 0.0;
	this.length = 0.0;
	this.wrap_gnorm = null;
	this.gnormy = 0.0;
	this.gnormx = 0.0;
	this.wrap_lnorm = null;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.outer = null;
	this.polygon = null;
	this.next = null;
	this.lnormx = 0;
	this.lnormy = 0;
	this.gnormx = 0;
	this.gnormy = 0;
	this.length = 0;
	this.lprojection = 0;
	this.gprojection = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Edge"] = zpp_$nape_shape_ZPP_$Edge;
zpp_$nape_shape_ZPP_$Edge.__name__ = ["zpp_nape","shape","ZPP_Edge"];
zpp_$nape_shape_ZPP_$Edge.prototype = {
	next: null
	,free: function() {
		this.polygon = null;
	}
	,alloc: function() {
	}
	,polygon: null
	,outer: null
	,wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_shape_ZPP_$Edge.internal = true;
			this.outer = new nape_shape_Edge();
			zpp_$nape_shape_ZPP_$Edge.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,lnormx: null
	,lnormy: null
	,wrap_lnorm: null
	,gnormx: null
	,gnormy: null
	,wrap_gnorm: null
	,length: null
	,lprojection: null
	,gprojection: null
	,lp0: null
	,gp0: null
	,lp1: null
	,gp1: null
	,tp0: null
	,tp1: null
	,lnorm_validate: function() {
		this.polygon.validate_laxi();
		this.wrap_lnorm.zpp_inner.x = this.lnormx;
		this.wrap_lnorm.zpp_inner.y = this.lnormy;
	}
	,gnorm_validate: function() {
		this.polygon.validate_gaxi();
		this.wrap_gnorm.zpp_inner.x = this.gnormx;
		this.wrap_gnorm.zpp_inner.y = this.gnormy;
	}
	,getlnorm: function() {
		this.wrap_lnorm = nape_geom_Vec2.get(this.lnormx,this.lnormy,null);
		this.wrap_lnorm.zpp_inner._immutable = true;
		this.wrap_lnorm.zpp_inner._validate = $bind(this,this.lnorm_validate);
	}
	,getgnorm: function() {
		this.wrap_gnorm = nape_geom_Vec2.get(this.gnormx,this.gnormy,null);
		this.wrap_gnorm.zpp_inner._immutable = true;
		this.wrap_gnorm.zpp_inner._validate = $bind(this,this.gnorm_validate);
	}
	,__class__: zpp_$nape_shape_ZPP_$Edge
};
var zpp_$nape_shape_ZPP_$Polygon = function() {
	this.zip_sanitation = false;
	this.zip_valid = false;
	this.zip_gaxi = false;
	this.zip_gverts = false;
	this.zip_laxi = false;
	this.zip_lverts = false;
	this.reverse_flag = false;
	this.edgeCnt = 0;
	this.wrap_edges = null;
	this.edges = null;
	this.wrap_gverts = null;
	this.gverts = null;
	this.wrap_lverts = null;
	this.lverts = null;
	this.outer_zn = null;
	zpp_$nape_shape_ZPP_$Shape.call(this,zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON);
	this.polygon = this;
	this.lverts = new zpp_$nape_geom_ZPP_$Vec2();
	this.gverts = new zpp_$nape_geom_ZPP_$Vec2();
	this.edges = new zpp_$nape_util_ZNPList_$ZPP_$Edge();
	this.edgeCnt = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Polygon"] = zpp_$nape_shape_ZPP_$Polygon;
zpp_$nape_shape_ZPP_$Polygon.__name__ = ["zpp_nape","shape","ZPP_Polygon"];
zpp_$nape_shape_ZPP_$Polygon.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Polygon.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	outer_zn: null
	,lverts: null
	,wrap_lverts: null
	,gverts: null
	,wrap_gverts: null
	,edges: null
	,wrap_edges: null
	,edgeCnt: null
	,reverse_flag: null
	,__clear: function() {
	}
	,lverts_pa_invalidate: function(x) {
		this.invalidate_lverts();
	}
	,gverts_pa_validate: function() {
		this.validate_gverts();
	}
	,lverts_post_adder: function(x) {
		x.zpp_inner._invalidate = $bind(this,this.lverts_pa_invalidate);
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x.zpp_inner) break; else {
				if(ite == null) ite = this.gverts.next; else ite = ite.next;
				if(ite2 == null) ite2 = this.edges.head; else ite2 = ite2.next;
			}
			cx_ite = cx_ite.next;
		}
		var vec = zpp_$nape_geom_ZPP_$Vec2.get(0,0,true);
		this.gverts.insert(ite,vec);
		if(this.lverts.next.next != null) {
			if(this.lverts.next.next.next == null) {
				var ed;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) ed = new zpp_$nape_shape_ZPP_$Edge(); else {
					ed = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed.next;
					ed.next = null;
				}
				null;
				ed.polygon = this;
				this.edges.add(ed);
				var ed1;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) ed1 = new zpp_$nape_shape_ZPP_$Edge(); else {
					ed1 = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed1.next;
					ed1.next = null;
				}
				null;
				ed1.polygon = this;
				this.edges.add(ed1);
				this.edgeCnt += 2;
			} else {
				var ed2;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) ed2 = new zpp_$nape_shape_ZPP_$Edge(); else {
					ed2 = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed2.next;
					ed2.next = null;
				}
				null;
				ed2.polygon = this;
				this.edges.insert(ite2,ed2);
				this.edgeCnt++;
			}
		}
		vec._validate = $bind(this,this.gverts_pa_validate);
	}
	,lverts_subber: function(x) {
		this.cleanup_lvert(x.zpp_inner);
	}
	,lverts_invalidate: function(_) {
		this.invalidate_lverts();
	}
	,lverts_validate: function() {
		this.validate_lverts();
	}
	,gverts_validate: function() {
		this.validate_gverts();
	}
	,edges_validate: function() {
		this.validate_lverts();
	}
	,getlverts: function() {
		var me = this;
		this.wrap_lverts = zpp_$nape_util_ZPP_$MixVec2List.get(this.lverts);
		this.wrap_lverts.zpp_inner.post_adder = $bind(this,this.lverts_post_adder);
		this.wrap_lverts.zpp_inner.subber = $bind(this,this.lverts_subber);
		this.wrap_lverts.zpp_inner._invalidate = $bind(this,this.lverts_invalidate);
		this.wrap_lverts.zpp_inner._validate = $bind(this,this.lverts_validate);
		this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,getgverts: function() {
		var me = this;
		this.wrap_gverts = zpp_$nape_util_ZPP_$MixVec2List.get(this.gverts,true);
		this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		this.wrap_gverts.zpp_inner._validate = $bind(this,this.gverts_validate);
	}
	,getedges: function() {
		var me = this;
		this.wrap_edges = zpp_$nape_util_ZPP_$EdgeList.get(this.edges,true);
		this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
		this.wrap_edges.zpp_inner._validate = $bind(this,this.edges_validate);
	}
	,zip_lverts: null
	,invalidate_lverts: function() {
		this.invalidate_laxi();
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.invalidate_localCOM();
		this.invalidate_gverts();
		this.zip_lverts = true;
		this.zip_valid = true;
		this.zip_sanitation = true;
		if(this.body != null) this.body.wake();
	}
	,zip_laxi: null
	,invalidate_laxi: function() {
		this.invalidate_gaxi();
		this.zip_sweepRadius = true;
		this.zip_laxi = true;
	}
	,zip_gverts: null
	,invalidate_gverts: function() {
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
		this.zip_gverts = true;
	}
	,zip_gaxi: null
	,invalidate_gaxi: function() {
		this.zip_gaxi = true;
	}
	,zip_valid: null
	,validation: null
	,valid: function() {
		if(this.zip_valid) {
			this.zip_valid = false;
			if(this.zip_sanitation) {
				this.zip_sanitation = false;
				this.splice_collinear_real();
			}
			if(this.lverts.length < 3) return (function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = $this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE;
				return $r;
			}(this)); else {
				this.validate_lverts();
				this.validate_area_inertia();
				if(this.area < nape_Config.epsilon) return (function($this) {
					var $r;
					if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					$r = $this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE;
					return $r;
				}(this)); else {
					var neg = false;
					var pos = false;
					var cx_cont = true;
					var cx_ite = this.lverts.next;
					var u = cx_ite;
					cx_ite = cx_ite.next;
					var v = cx_ite;
					cx_ite = cx_ite.next;
					while(cx_ite != null) {
						var w = cx_ite;
						var ax = 0.0;
						var ay = 0.0;
						ax = w.x - v.x;
						ay = w.y - v.y;
						var bx = 0.0;
						var by = 0.0;
						bx = v.x - u.x;
						by = v.y - u.y;
						var dot = by * ax - bx * ay;
						if(dot > nape_Config.epsilon) pos = true; else if(dot < -nape_Config.epsilon) neg = true;
						if(pos && neg) {
							cx_cont = false;
							break;
						}
						u = v;
						v = w;
						cx_ite = cx_ite.next;
					}
					if(cx_cont) {
						cx_ite = this.lverts.next;
						var w1 = cx_ite;
						do {
							var ax1 = 0.0;
							var ay1 = 0.0;
							ax1 = w1.x - v.x;
							ay1 = w1.y - v.y;
							var bx1 = 0.0;
							var by1 = 0.0;
							bx1 = v.x - u.x;
							by1 = v.y - u.y;
							var dot1 = by1 * ax1 - bx1 * ay1;
							if(dot1 > nape_Config.epsilon) pos = true; else if(dot1 < -nape_Config.epsilon) neg = true;
							if(pos && neg) {
								cx_cont = false;
								break;
							}
						} while(false);
						if(cx_cont) {
							u = v;
							v = w1;
							cx_ite = cx_ite.next;
							var w2 = cx_ite;
							do {
								var ax2 = 0.0;
								var ay2 = 0.0;
								ax2 = w2.x - v.x;
								ay2 = w2.y - v.y;
								var bx2 = 0.0;
								var by2 = 0.0;
								bx2 = v.x - u.x;
								by2 = v.y - u.y;
								var dot2 = by2 * ax2 - bx2 * ay2;
								if(dot2 > nape_Config.epsilon) pos = true; else if(dot2 < -nape_Config.epsilon) neg = true;
								if(pos && neg) break;
							} while(false);
						}
					}
					if(pos && neg) return (function($this) {
						var $r;
						if(zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE == null) {
							zpp_$nape_util_ZPP_$Flags.internal = true;
							zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = new nape_shape_ValidationResult();
							zpp_$nape_util_ZPP_$Flags.internal = false;
						}
						$r = $this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE;
						return $r;
					}(this)); else {
						var cont = true;
						var cx_cont1 = true;
						var cx_ite1 = this.lverts.next;
						var u1 = cx_ite1;
						cx_ite1 = cx_ite1.next;
						while(cx_ite1 != null) {
							var v1 = cx_ite1;
							if(!cont) {
								cx_cont1 = false;
								break;
							}
							var cx_cont2 = true;
							var cx_ite2 = this.lverts.next;
							var a = cx_ite2;
							cx_ite2 = cx_ite2.next;
							while(cx_ite2 != null) {
								var b = cx_ite2;
								if(u1 == a || u1 == b || v1 == a || v1 == b) {
									a = b;
									cx_ite2 = cx_ite2.next;
									continue;
								}
								var sx = 0.0;
								var sy = 0.0;
								sx = u1.x - a.x;
								sy = u1.y - a.y;
								var vx = 0.0;
								var vy = 0.0;
								vx = v1.x - u1.x;
								vy = v1.y - u1.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > nape_Config.epsilon) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > nape_Config.epsilon && t < 1 - nape_Config.epsilon) {
										var s = (vy * sx - vx * sy) * den;
										if(s > nape_Config.epsilon && s < 1 - nape_Config.epsilon) {
											cont = false;
											cx_cont2 = false;
											break;
										}
									}
								}
								a = b;
								cx_ite2 = cx_ite2.next;
							}
							if(cx_cont2) do {
								var b1 = this.lverts.next;
								if(u1 == a || u1 == b1 || v1 == a || v1 == b1) break;
								var sx1 = 0.0;
								var sy1 = 0.0;
								sx1 = u1.x - a.x;
								sy1 = u1.y - a.y;
								var vx1 = 0.0;
								var vy1 = 0.0;
								vx1 = v1.x - u1.x;
								vy1 = v1.y - u1.y;
								var qx1 = 0.0;
								var qy1 = 0.0;
								qx1 = b1.x - a.x;
								qy1 = b1.y - a.y;
								var den1 = vy1 * qx1 - vx1 * qy1;
								if(den1 * den1 > nape_Config.epsilon) {
									den1 = 1 / den1;
									var t1 = (qy1 * sx1 - qx1 * sy1) * den1;
									if(t1 > nape_Config.epsilon && t1 < 1 - nape_Config.epsilon) {
										var s1 = (vy1 * sx1 - vx1 * sy1) * den1;
										if(s1 > nape_Config.epsilon && s1 < 1 - nape_Config.epsilon) {
											cont = false;
											break;
										}
									}
								}
							} while(false);
							u1 = v1;
							cx_ite1 = cx_ite1.next;
						}
						if(cx_cont1) do {
							var v2 = this.lverts.next;
							if(!cont) break;
							var cx_cont3 = true;
							var cx_ite3 = this.lverts.next;
							var a1 = cx_ite3;
							cx_ite3 = cx_ite3.next;
							while(cx_ite3 != null) {
								var b2 = cx_ite3;
								if(u1 == a1 || u1 == b2 || v2 == a1 || v2 == b2) {
									a1 = b2;
									cx_ite3 = cx_ite3.next;
									continue;
								}
								var sx2 = 0.0;
								var sy2 = 0.0;
								sx2 = u1.x - a1.x;
								sy2 = u1.y - a1.y;
								var vx2 = 0.0;
								var vy2 = 0.0;
								vx2 = v2.x - u1.x;
								vy2 = v2.y - u1.y;
								var qx2 = 0.0;
								var qy2 = 0.0;
								qx2 = b2.x - a1.x;
								qy2 = b2.y - a1.y;
								var den2 = vy2 * qx2 - vx2 * qy2;
								if(den2 * den2 > nape_Config.epsilon) {
									den2 = 1 / den2;
									var t2 = (qy2 * sx2 - qx2 * sy2) * den2;
									if(t2 > nape_Config.epsilon && t2 < 1 - nape_Config.epsilon) {
										var s2 = (vy2 * sx2 - vx2 * sy2) * den2;
										if(s2 > nape_Config.epsilon && s2 < 1 - nape_Config.epsilon) {
											cont = false;
											cx_cont3 = false;
											break;
										}
									}
								}
								a1 = b2;
								cx_ite3 = cx_ite3.next;
							}
							if(cx_cont3) do {
								var b3 = this.lverts.next;
								if(u1 == a1 || u1 == b3 || v2 == a1 || v2 == b3) break;
								var sx3 = 0.0;
								var sy3 = 0.0;
								sx3 = u1.x - a1.x;
								sy3 = u1.y - a1.y;
								var vx3 = 0.0;
								var vy3 = 0.0;
								vx3 = v2.x - u1.x;
								vy3 = v2.y - u1.y;
								var qx3 = 0.0;
								var qy3 = 0.0;
								qx3 = b3.x - a1.x;
								qy3 = b3.y - a1.y;
								var den3 = vy3 * qx3 - vx3 * qy3;
								if(den3 * den3 > nape_Config.epsilon) {
									den3 = 1 / den3;
									var t3 = (qy3 * sx3 - qx3 * sy3) * den3;
									if(t3 > nape_Config.epsilon && t3 < 1 - nape_Config.epsilon) {
										var s3 = (vy3 * sx3 - vx3 * sy3) * den3;
										if(s3 > nape_Config.epsilon && s3 < 1 - nape_Config.epsilon) {
											cont = false;
											break;
										}
									}
								}
							} while(false);
						} while(false);
						if(!cont) return (function($this) {
							var $r;
							if(zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING == null) {
								zpp_$nape_util_ZPP_$Flags.internal = true;
								zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = new nape_shape_ValidationResult();
								zpp_$nape_util_ZPP_$Flags.internal = false;
							}
							$r = $this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING;
							return $r;
						}(this)); else return (function($this) {
							var $r;
							if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
								zpp_$nape_util_ZPP_$Flags.internal = true;
								zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
								zpp_$nape_util_ZPP_$Flags.internal = false;
							}
							$r = $this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
							return $r;
						}(this));
					}
				}
			}
		} else return this.validation;
	}
	,validate_lverts: function() {
		if(this.zip_lverts) {
			this.zip_lverts = false;
			if(this.lverts.length > 2) {
				this.validate_area_inertia();
				if(this.area < 0) {
					this.reverse_vertices();
					this.area = -this.area;
				}
			}
		}
	}
	,cleanup_lvert: function(x) {
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x) break; else {
				if(ite == null) ite = this.gverts.next; else ite = ite.next;
				if(ite2 == null) ite2 = this.edges.head; else ite2 = ite2.next;
			}
			cx_ite = cx_ite.next;
		}
		var rem;
		if(ite == null) rem = this.gverts.next; else rem = ite.next;
		this.gverts.erase(ite);
		var o = rem;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		if(this.edgeCnt == 2) {
			var rem1 = this.edges.pop_unsafe();
			var o1 = rem1;
			o1.polygon = null;
			o1.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o1;
			rem1 = this.edges.pop_unsafe();
			var o2 = rem1;
			o2.polygon = null;
			o2.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o2;
			this.edgeCnt = 0;
		} else if(this.edgeCnt != 0) {
			var rem2;
			if(ite2 == null) rem2 = this.edges.head.elt; else rem2 = ite2.next.elt;
			this.edges.erase(ite2);
			var o3 = rem2;
			o3.polygon = null;
			o3.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o3;
			this.edgeCnt--;
		}
	}
	,zip_sanitation: null
	,splice_collinear: function() {
		if(this.zip_sanitation) {
			this.zip_sanitation = false;
			this.splice_collinear_real();
		}
	}
	,splice_collinear_real: function() {
		if(this.lverts.next == null) return;
		if(this.lverts.next.next == null) return;
		if(this.lverts.next.next.next == null) return;
		var pre = null;
		var cur = this.lverts.next;
		while(cur != null) {
			var nxt;
			if(cur.next == null) nxt = this.lverts.next; else nxt = cur.next;
			var u = cur;
			var v = nxt;
			if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(u.x,u.y,v.x,v.y) < nape_Config.epsilon * nape_Config.epsilon) {
				this.cleanup_lvert(cur);
				cur = this.lverts.erase(pre);
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
		if(this.lverts.next == null) return;
		var removed;
		do {
			removed = false;
			var pre1 = this.lverts.next;
			while(pre1 != null) {
				var cur1;
				if(pre1.next == null) cur1 = this.lverts.next; else cur1 = pre1.next;
				var nxt1;
				if(cur1.next == null) nxt1 = this.lverts.next; else nxt1 = cur1.next;
				var u1 = pre1;
				var v1 = cur1;
				var w = nxt1;
				var ax = 0.0;
				var ay = 0.0;
				ax = v1.x - u1.x;
				ay = v1.y - u1.y;
				var bx = 0.0;
				var by = 0.0;
				bx = w.x - v1.x;
				by = w.y - v1.y;
				var crs = by * ax - bx * ay;
				if(crs * crs >= nape_Config.epsilon * nape_Config.epsilon) pre1 = pre1.next; else {
					this.cleanup_lvert(cur1);
					this.lverts.erase(pre1.next == null?null:pre1);
					removed = true;
					pre1 = pre1.next;
				}
			}
		} while(removed);
	}
	,reverse_vertices: function() {
		this.lverts.reverse();
		this.gverts.reverse();
		this.edges.reverse();
		var ite = this.edges.iterator_at(this.edgeCnt - 1);
		var elem = this.edges.pop_unsafe();
		this.edges.insert(ite,elem);
		this.reverse_flag = !this.reverse_flag;
		if(this.wrap_lverts != null) this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
		if(this.wrap_gverts != null) this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		if(this.wrap_edges != null) this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,validate_laxi: function() {
		if(this.zip_laxi) {
			this.zip_laxi = false;
			this.validate_lverts();
			var ite = this.edges.head;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var v1 = cx_ite;
				var edge = ite.elt;
				ite = ite.next;
				edge.lp0 = u;
				edge.lp1 = v1;
				var dx = 0.0;
				var dy = 0.0;
				dx = u.x - v1.x;
				dy = u.y - v1.y;
				var l = Math.sqrt(dx * dx + dy * dy);
				edge.length = l;
				var t = 1.0 / l;
				dx *= t;
				dy *= t;
				var t1 = dx;
				dx = -dy;
				dy = t1;
				edge.lprojection = dx * u.x + dy * u.y;
				edge.lnormx = dx;
				edge.lnormy = dy;
				if(edge.wrap_lnorm != null) {
					edge.wrap_lnorm.zpp_inner.x = dx;
					edge.wrap_lnorm.zpp_inner.y = dy;
				}
				u = v1;
				cx_ite = cx_ite.next;
			}
			var v = this.lverts.next;
			var edge1 = ite.elt;
			ite = ite.next;
			edge1.lp0 = u;
			edge1.lp1 = v;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = u.x - v.x;
			dy1 = u.y - v.y;
			var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			edge1.length = l1;
			var t2 = 1.0 / l1;
			dx1 *= t2;
			dy1 *= t2;
			var t3 = dx1;
			dx1 = -dy1;
			dy1 = t3;
			edge1.lprojection = dx1 * u.x + dy1 * u.y;
			edge1.lnormx = dx1;
			edge1.lnormy = dy1;
			if(edge1.wrap_lnorm != null) {
				edge1.wrap_lnorm.zpp_inner.x = dx1;
				edge1.wrap_lnorm.zpp_inner.y = dy1;
			}
		}
	}
	,validate_gverts: function() {
		if(this.zip_gverts) {
			if(this.body != null) {
				this.zip_gverts = false;
				this.validate_lverts();
				this.body.validate_axis();
				var li = this.lverts.next;
				var cx_ite = this.gverts.next;
				while(cx_ite != null) {
					var g = cx_ite;
					var l = li;
					li = li.next;
					g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
					g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
					cx_ite = cx_ite.next;
				}
			}
		}
	}
	,validate_gaxi: function() {
		if(this.zip_gaxi) {
			if(this.body != null) {
				this.zip_gaxi = false;
				this.validate_laxi();
				this.body.validate_axis();
				this.validate_gverts();
				var ite = this.edges.head;
				var cx_ite = this.gverts.next;
				var u = cx_ite;
				cx_ite = cx_ite.next;
				while(cx_ite != null) {
					var v1 = cx_ite;
					var e = ite.elt;
					ite = ite.next;
					e.gp0 = u;
					e.gp1 = v1;
					e.gnormx = this.body.axisy * e.lnormx - this.body.axisx * e.lnormy;
					e.gnormy = e.lnormx * this.body.axisx + e.lnormy * this.body.axisy;
					e.gprojection = this.body.posx * e.gnormx + this.body.posy * e.gnormy + e.lprojection;
					if(e.wrap_gnorm != null) {
						e.wrap_gnorm.zpp_inner.x = e.gnormx;
						e.wrap_gnorm.zpp_inner.y = e.gnormy;
					}
					e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
					e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
					u = v1;
					cx_ite = cx_ite.next;
				}
				var v = this.gverts.next;
				var e1 = ite.elt;
				ite = ite.next;
				e1.gp0 = u;
				e1.gp1 = v;
				e1.gnormx = this.body.axisy * e1.lnormx - this.body.axisx * e1.lnormy;
				e1.gnormy = e1.lnormx * this.body.axisx + e1.lnormy * this.body.axisy;
				e1.gprojection = this.body.posx * e1.gnormx + this.body.posy * e1.gnormy + e1.lprojection;
				if(e1.wrap_gnorm != null) {
					e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
					e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
				}
				e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
				e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
			}
		}
	}
	,__validate_aabb: function() {
		this.validate_gverts();
		var p0 = this.gverts.next;
		this.aabb.minx = p0.x;
		this.aabb.miny = p0.y;
		this.aabb.maxx = p0.x;
		this.aabb.maxy = p0.y;
		var cx_ite = this.gverts.next.next;
		while(cx_ite != null) {
			var p = cx_ite;
			if(p.x < this.aabb.minx) this.aabb.minx = p.x;
			if(p.x > this.aabb.maxx) this.aabb.maxx = p.x;
			if(p.y < this.aabb.miny) this.aabb.miny = p.y;
			if(p.y > this.aabb.maxy) this.aabb.maxy = p.y;
			cx_ite = cx_ite.next;
		}
	}
	,_force_validate_aabb: function() {
		var li = this.lverts.next;
		var p0 = this.gverts.next;
		var l = li;
		li = li.next;
		p0.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
		p0.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
		this.aabb.minx = p0.x;
		this.aabb.miny = p0.y;
		this.aabb.maxx = p0.x;
		this.aabb.maxy = p0.y;
		var cx_ite = this.gverts.next.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var l1 = li;
			li = li.next;
			p.x = this.body.posx + (this.body.axisy * l1.x - this.body.axisx * l1.y);
			p.y = this.body.posy + (l1.x * this.body.axisx + l1.y * this.body.axisy);
			if(p.x < this.aabb.minx) this.aabb.minx = p.x;
			if(p.x > this.aabb.maxx) this.aabb.maxx = p.x;
			if(p.y < this.aabb.miny) this.aabb.miny = p.y;
			if(p.y > this.aabb.maxy) this.aabb.maxy = p.y;
			cx_ite = cx_ite.next;
		}
	}
	,__validate_sweepRadius: function() {
		var maxRadius = 0.0;
		var minRadius = 0.0;
		this.validate_laxi();
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var x = cx_ite;
			var r = x.x * x.x + x.y * x.y;
			if(r > maxRadius) maxRadius = r;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.edges.head;
		while(cx_ite1 != null) {
			var e = cx_ite1.elt;
			if(e.lprojection < minRadius) {
				minRadius = e.lprojection;
				if(minRadius < 0) break;
			}
			cx_ite1 = cx_ite1.next;
		}
		if(minRadius < 0) minRadius = 0;
		this.sweepRadius = Math.sqrt(maxRadius);
		this.sweepCoef = this.sweepRadius - minRadius;
	}
	,__validate_area_inertia: function() {
		if(this.lverts.next == null || this.lverts.next.next == null || this.lverts.next.next.next == null) {
			this.area = 0;
			this.inertia = 0;
		} else {
			this.area = 0.0;
			var s1 = 0.0;
			var s2 = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w2 = cx_ite;
				var a = v.y * u.x - v.x * u.y;
				var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
				s1 += a * b;
				s2 += a;
				this.area += v.x * (w2.y - u.y);
				u = v;
				v = w2;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w = cx_ite;
			var a1 = v.y * u.x - v.x * u.y;
			var b1 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a1 * b1;
			s2 += a1;
			this.area += v.x * (w.y - u.y);
			u = v;
			v = w;
			cx_ite = cx_ite.next;
			var w1 = cx_ite;
			var a2 = v.y * u.x - v.x * u.y;
			var b2 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a2 * b2;
			s2 += a2;
			this.area += v.x * (w1.y - u.y);
			this.inertia = s1 / (6 * s2);
			this.area *= 0.5;
			if(this.area < 0) {
				this.area = -this.area;
				this.reverse_vertices();
			}
		}
	}
	,__validate_angDrag: function() {
		this.validate_area_inertia();
		this.validate_laxi();
		var accum = 0.0;
		var ei = this.edges.head;
		var perim = 0.0;
		var cx_cont = true;
		var cx_itei = this.lverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var edge = ei.elt;
			ei = ei.next;
			perim += edge.length;
			var dx = 0.0;
			var dy = 0.0;
			dx = v.x - u.x;
			dy = v.y - u.y;
			accum += edge.length * nape_Config.fluidAngularDragFriction * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
			var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
			if(t > 0) {
				var ta;
				if(t > 1) ta = 1; else ta = t;
				var cx = 0.0;
				var cy = 0.0;
				cx = u.x;
				cy = u.y;
				var t1 = ta;
				cx += dx * t1;
				cy += dy * t1;
				var dota = edge.lnormy * u.x - edge.lnormx * u.y;
				var dotb = edge.lnormy * cx - edge.lnormx * cy;
				var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
				accum += dots * ta * edge.length * nape_Config.fluidAngularDrag;
			}
			if(t < 1) {
				var tb;
				if(t < 0) tb = 0; else tb = t;
				var cx1 = 0.0;
				var cy1 = 0.0;
				cx1 = u.x;
				cy1 = u.y;
				var t2 = tb;
				cx1 += dx * t2;
				cy1 += dy * t2;
				var dota1 = edge.lnormy * cx1 - edge.lnormx * cy1;
				var dotb1 = edge.lnormy * v.x - edge.lnormx * v.y;
				var dots1 = (dotb1 * dotb1 * dotb1 - dota1 * dota1 * dota1) / (3 * (dotb1 - dota1));
				accum += dots1 * nape_Config.fluidVacuumDrag * (1 - tb) * edge.length * nape_Config.fluidAngularDrag;
			}
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = this.lverts.next;
			var v1 = cx_itej;
			var edge1 = ei.elt;
			ei = ei.next;
			perim += edge1.length;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = v1.x - u.x;
			dy1 = v1.y - u.y;
			accum += edge1.length * nape_Config.fluidAngularDragFriction * this.material.dynamicFriction * edge1.lprojection * edge1.lprojection;
			var t3 = -(u.y * edge1.lnormx - u.x * edge1.lnormy) / (dy1 * edge1.lnormx - dx1 * edge1.lnormy);
			if(t3 > 0) {
				var ta1;
				if(t3 > 1) ta1 = 1; else ta1 = t3;
				var cx2 = 0.0;
				var cy2 = 0.0;
				cx2 = u.x;
				cy2 = u.y;
				var t4 = ta1;
				cx2 += dx1 * t4;
				cy2 += dy1 * t4;
				var dota2 = edge1.lnormy * u.x - edge1.lnormx * u.y;
				var dotb2 = edge1.lnormy * cx2 - edge1.lnormx * cy2;
				var dots2 = (dotb2 * dotb2 * dotb2 - dota2 * dota2 * dota2) / (3 * (dotb2 - dota2));
				accum += dots2 * ta1 * edge1.length * nape_Config.fluidAngularDrag;
			}
			if(t3 < 1) {
				var tb1;
				if(t3 < 0) tb1 = 0; else tb1 = t3;
				var cx3 = 0.0;
				var cy3 = 0.0;
				cx3 = u.x;
				cy3 = u.y;
				var t5 = tb1;
				cx3 += dx1 * t5;
				cy3 += dy1 * t5;
				var dota3 = edge1.lnormy * cx3 - edge1.lnormx * cy3;
				var dotb3 = edge1.lnormy * v1.x - edge1.lnormx * v1.y;
				var dots3 = (dotb3 * dotb3 * dotb3 - dota3 * dota3 * dota3) / (3 * (dotb3 - dota3));
				accum += dots3 * nape_Config.fluidVacuumDrag * (1 - tb1) * edge1.length * nape_Config.fluidAngularDrag;
			}
		} while(false);
		this.angDrag = accum / (this.inertia * perim);
	}
	,__validate_localCOM: function() {
		if(this.lverts.next.next == null) {
			this.localCOMx = this.lverts.next.x;
			this.localCOMy = this.lverts.next.y;
		} else if(this.lverts.next.next.next == null) {
			this.localCOMx = this.lverts.next.x;
			this.localCOMy = this.lverts.next.y;
			var t = 1.0;
			this.localCOMx += this.lverts.next.next.x * t;
			this.localCOMy += this.lverts.next.next.y * t;
			var t1 = 0.5;
			this.localCOMx *= t1;
			this.localCOMy *= t1;
		} else {
			this.localCOMx = 0;
			this.localCOMy = 0;
			var area = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w2 = cx_ite;
				area += v.x * (w2.y - u.y);
				var cf = w2.y * v.x - w2.x * v.y;
				this.localCOMx += (v.x + w2.x) * cf;
				this.localCOMy += (v.y + w2.y) * cf;
				u = v;
				v = w2;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w = cx_ite;
			area += v.x * (w.y - u.y);
			var cf1 = w.y * v.x - w.x * v.y;
			this.localCOMx += (v.x + w.x) * cf1;
			this.localCOMy += (v.y + w.y) * cf1;
			u = v;
			v = w;
			cx_ite = cx_ite.next;
			var w1 = cx_ite;
			area += v.x * (w1.y - u.y);
			var cf2 = w1.y * v.x - w1.x * v.y;
			this.localCOMx += (v.x + w1.x) * cf2;
			this.localCOMy += (v.y + w1.y) * cf2;
			area = 1 / (3 * area);
			var t2 = area;
			this.localCOMx *= t2;
			this.localCOMy *= t2;
		}
	}
	,localCOM_validate: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
	}
	,localCOM_invalidate: function(x) {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
		var delx = 0;
		var dely = 0;
		delx = x.x - this.localCOMx;
		dely = x.y - this.localCOMy;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = 1.0;
			p.x += delx * t;
			p.y += dely * t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,setupLocalCOM: function() {
		this.wrap_localCOM = nape_geom_Vec2.get(this.localCOMx,this.localCOMy,null);
		this.wrap_localCOM.zpp_inner._inuse = true;
		this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
		this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
	}
	,__translate: function(dx,dy) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = 1.0;
			p.x += dx * t;
			p.y += dy * t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__scale: function(sx,sy) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			p.x *= sx;
			p.y *= sy;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__rotate: function(ax,ay) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var tempx = 0.0;
			var tempy = 0.0;
			tempx = ay * p.x - ax * p.y;
			tempy = p.x * ax + p.y * ay;
			p.x = tempx;
			p.y = tempy;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__transform: function(mat) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = mat.zpp_inner.a * p.x + mat.zpp_inner.b * p.y + mat.zpp_inner.tx;
			p.y = mat.zpp_inner.c * p.x + mat.zpp_inner.d * p.y + mat.zpp_inner.ty;
			p.x = t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__copy: function() {
		var ret = new nape_shape_Polygon(this.outer_zn.get_localVerts()).zpp_inner_zn;
		return ret;
	}
	,__class__: zpp_$nape_shape_ZPP_$Polygon
});
var zpp_$nape_space_ZPP_$Broadphase = function() {
	this.circShape = null;
	this.matrix = null;
	this.aabbShape = null;
	this.dynab = null;
	this.sweep = null;
	this.is_sweep = false;
	this.space = null;
};
$hxClasses["zpp_nape.space.ZPP_Broadphase"] = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$Broadphase.__name__ = ["zpp_nape","space","ZPP_Broadphase"];
zpp_$nape_space_ZPP_$Broadphase.prototype = {
	space: null
	,is_sweep: null
	,sweep: null
	,dynab: null
	,insert: function(shape) {
		if(this.is_sweep) this.sweep.__insert(shape); else this.dynab.__insert(shape);
	}
	,remove: function(shape) {
		if(this.is_sweep) this.sweep.__remove(shape); else this.dynab.__remove(shape);
	}
	,sync: function(shape) {
		if(this.is_sweep) {
			if(!this.sweep.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
		} else this.dynab.__sync(shape);
	}
	,broadphase: function(space,discrete) {
	}
	,clear: function() {
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		return null;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		return null;
	}
	,aabbShape: null
	,matrix: null
	,updateAABBShape: function(aabb) {
		if(this.aabbShape == null) {
			var body = new nape_phys_Body((function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
				return $r;
			}(this)));
			body.zpp_inner.wrap_shapes.add(this.aabbShape = new nape_shape_Polygon(nape_shape_Polygon.rect(aabb.minx,aabb.miny,aabb.maxx - aabb.minx,aabb.maxy - aabb.miny)));
		} else {
			var ab = this.aabbShape.zpp_inner.aabb;
			var sx = (aabb.maxx - aabb.minx) / (ab.maxx - ab.minx);
			var sy = (aabb.maxy - aabb.miny) / (ab.maxy - ab.miny);
			if(this.matrix == null) this.matrix = new nape_geom_Mat23();
			this.matrix.set_a(sx);
			this.matrix.set_b(this.matrix.set_c(0));
			this.matrix.set_d(sy);
			this.matrix.set_tx(aabb.minx - sx * ab.minx);
			this.matrix.set_ty(aabb.miny - sy * ab.miny);
			this.aabbShape.transform(this.matrix);
		}
		this.aabbShape.zpp_inner.validate_aabb();
		this.aabbShape.zpp_inner.polygon.validate_gaxi();
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		return null;
	}
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		return null;
	}
	,circShape: null
	,updateCircShape: function(x,y,r) {
		if(this.circShape == null) {
			var body = new nape_phys_Body((function($this) {
				var $r;
				if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				$r = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
				return $r;
			}(this)));
			body.zpp_inner.wrap_shapes.add(this.circShape = new nape_shape_Circle(r,nape_geom_Vec2.get(x,y,null)));
		} else {
			var ci = this.circShape.zpp_inner.circle;
			var ss = r / ci.radius;
			if(this.matrix == null) this.matrix = new nape_geom_Mat23();
			this.matrix.set_a(this.matrix.set_d(ss));
			this.matrix.set_b(this.matrix.set_c(0));
			this.matrix.set_tx(x - ss * ci.localCOMx);
			this.matrix.set_ty(y - ss * ci.localCOMy);
			this.circShape.transform(this.matrix);
		}
		this.circShape.zpp_inner.validate_aabb();
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		return null;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		return null;
	}
	,validateShape: function(s) {
		if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) s.polygon.validate_gaxi();
		if(s.zip_aabb) {
			if(s.body != null) {
				s.zip_aabb = false;
				if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
			}
		}
		if(s.zip_worldCOM) {
			if(s.body != null) {
				s.zip_worldCOM = false;
				if(s.zip_localCOM) {
					s.zip_localCOM = false;
					if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
					if(s.wrap_localCOM != null) {
						s.wrap_localCOM.zpp_inner.x = s.localCOMx;
						s.wrap_localCOM.zpp_inner.y = s.localCOMy;
					}
				}
				s.body.validate_axis();
				s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
				s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
			}
		}
	}
	,shapesInShape: function(shape,containment,filter,output) {
		return null;
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		return null;
	}
	,rayCast: function(ray,inner,filter) {
		return null;
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		return null;
	}
	,__class__: zpp_$nape_space_ZPP_$Broadphase
};
var zpp_$nape_space_ZPP_$AABBNode = function() {
	this.first_sync = false;
	this.synced = false;
	this.snext = null;
	this.moved = false;
	this.mnext = null;
	this.next = null;
	this.rayt = 0.0;
	this.height = 0;
	this.child2 = null;
	this.child1 = null;
	this.parent = null;
	this.dyn = false;
	this.shape = null;
	this.aabb = null;
	this.height = -1;
};
$hxClasses["zpp_nape.space.ZPP_AABBNode"] = zpp_$nape_space_ZPP_$AABBNode;
zpp_$nape_space_ZPP_$AABBNode.__name__ = ["zpp_nape","space","ZPP_AABBNode"];
zpp_$nape_space_ZPP_$AABBNode.prototype = {
	aabb: null
	,shape: null
	,dyn: null
	,parent: null
	,child1: null
	,child2: null
	,height: null
	,rayt: null
	,next: null
	,alloc: function() {
		if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) this.aabb = new zpp_$nape_geom_ZPP_$AABB(); else {
			this.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = this.aabb.next;
			this.aabb.next = null;
		}
		null;
		this.moved = false;
		this.synced = false;
		this.first_sync = false;
	}
	,free: function() {
		this.height = -1;
		var o = this.aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
		this.child1 = this.child2 = this.parent = null;
		this.next = null;
		this.snext = null;
		this.mnext = null;
	}
	,mnext: null
	,moved: null
	,snext: null
	,synced: null
	,first_sync: null
	,isLeaf: function() {
		return this.child1 == null;
	}
	,__class__: zpp_$nape_space_ZPP_$AABBNode
};
var zpp_$nape_space_ZPP_$AABBPair = function() {
	this.next = null;
	this.arb = null;
	this.di = 0;
	this.id = 0;
	this.sleeping = false;
	this.first = false;
	this.n2 = null;
	this.n1 = null;
};
$hxClasses["zpp_nape.space.ZPP_AABBPair"] = zpp_$nape_space_ZPP_$AABBPair;
zpp_$nape_space_ZPP_$AABBPair.__name__ = ["zpp_nape","space","ZPP_AABBPair"];
zpp_$nape_space_ZPP_$AABBPair.prototype = {
	n1: null
	,n2: null
	,first: null
	,sleeping: null
	,id: null
	,di: null
	,arb: null
	,next: null
	,alloc: function() {
	}
	,free: function() {
		this.n1 = this.n2 = null;
		this.sleeping = false;
	}
	,__class__: zpp_$nape_space_ZPP_$AABBPair
};
var zpp_$nape_space_ZPP_$AABBTree = function() {
	this.root = null;
};
$hxClasses["zpp_nape.space.ZPP_AABBTree"] = zpp_$nape_space_ZPP_$AABBTree;
zpp_$nape_space_ZPP_$AABBTree.__name__ = ["zpp_nape","space","ZPP_AABBTree"];
zpp_$nape_space_ZPP_$AABBTree.prototype = {
	root: null
	,clear: function() {
		if(this.root == null) return;
		var stack = null;
		this.root.next = stack;
		stack = this.root;
		while(stack != null) {
			var node;
			var ret = stack;
			stack = ret.next;
			ret.next = null;
			node = ret;
			if(node.child1 == null) {
				node.shape.node = null;
				node.shape.removedFromSpace();
				node.shape = null;
			} else {
				if(node.child1 != null) {
					node.child1.next = stack;
					stack = node.child1;
				}
				if(node.child2 != null) {
					node.child2.next = stack;
					stack = node.child2;
				}
			}
			var o = node;
			o.free();
			o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
			zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
		}
		this.root = null;
	}
	,insertLeaf: function(leaf) {
		this.inlined_insertLeaf(leaf);
	}
	,inlined_insertLeaf: function(leaf) {
		if(this.root == null) {
			this.root = leaf;
			this.root.parent = null;
		} else {
			var leafaabb = leaf.aabb;
			var node = this.root;
			while(!(node.child1 == null)) {
				var child1 = node.child1;
				var child2 = node.child2;
				var area = node.aabb.perimeter();
				zpp_$nape_space_ZPP_$AABBTree.tmpaabb.setCombine(node.aabb,leafaabb);
				var carea = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter();
				var cost = 2 * carea;
				var icost = 2 * (carea - area);
				var cost1;
				zpp_$nape_space_ZPP_$AABBTree.tmpaabb.setCombine(leafaabb,child1.aabb);
				if(child1.child1 == null) cost1 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter() + icost; else {
					var oarea = child1.aabb.perimeter();
					var narea = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter();
					cost1 = narea - oarea + icost;
				}
				var cost2;
				zpp_$nape_space_ZPP_$AABBTree.tmpaabb.setCombine(leafaabb,child2.aabb);
				if(child2.child1 == null) cost2 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter() + icost; else {
					var oarea1 = child2.aabb.perimeter();
					var narea1 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter();
					cost2 = narea1 - oarea1 + icost;
				}
				if(cost < cost1 && cost < cost2) break; else if(cost1 < cost2) node = child1; else node = child2;
			}
			var sibling = node;
			var oparent = sibling.parent;
			var nparent;
			if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) nparent = new zpp_$nape_space_ZPP_$AABBNode(); else {
				nparent = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = nparent.next;
				nparent.next = null;
			}
			if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) nparent.aabb = new zpp_$nape_geom_ZPP_$AABB(); else {
				nparent.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
				zpp_$nape_geom_ZPP_$AABB.zpp_pool = nparent.aabb.next;
				nparent.aabb.next = null;
			}
			null;
			nparent.moved = false;
			nparent.synced = false;
			nparent.first_sync = false;
			nparent.parent = oparent;
			nparent.aabb.setCombine(leafaabb,sibling.aabb);
			nparent.height = sibling.height + 1;
			if(oparent != null) {
				if(oparent.child1 == sibling) oparent.child1 = nparent; else oparent.child2 = nparent;
				nparent.child1 = sibling;
				nparent.child2 = leaf;
				sibling.parent = nparent;
				leaf.parent = nparent;
			} else {
				nparent.child1 = sibling;
				nparent.child2 = leaf;
				sibling.parent = nparent;
				leaf.parent = nparent;
				this.root = nparent;
			}
			node = leaf.parent;
			while(node != null) {
				node = this.balance(node);
				var child11 = node.child1;
				var child21 = node.child2;
				node.height = 1 + (function($this) {
					var $r;
					var x = child11.height;
					var y = child21.height;
					$r = x > y?x:y;
					return $r;
				}(this));
				node.aabb.setCombine(child11.aabb,child21.aabb);
				node = node.parent;
			}
		}
	}
	,removeLeaf: function(leaf) {
		this.inlined_removeLeaf(leaf);
	}
	,inlined_removeLeaf: function(leaf) {
		if(leaf == this.root) {
			this.root = null;
			return;
		} else {
			var parent = leaf.parent;
			var gparent = parent.parent;
			var sibling;
			if(parent.child1 == leaf) sibling = parent.child2; else sibling = parent.child1;
			if(gparent != null) {
				if(gparent.child1 == parent) gparent.child1 = sibling; else gparent.child2 = sibling;
				sibling.parent = gparent;
				var o = parent;
				o.free();
				o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
				var node = gparent;
				while(node != null) {
					node = this.balance(node);
					var child1 = node.child1;
					var child2 = node.child2;
					node.aabb.setCombine(child1.aabb,child2.aabb);
					node.height = 1 + (function($this) {
						var $r;
						var x = child1.height;
						var y = child2.height;
						$r = x > y?x:y;
						return $r;
					}(this));
					node = node.parent;
				}
			} else {
				this.root = sibling;
				sibling.parent = null;
				var o1 = parent;
				o1.free();
				o1.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o1;
			}
		}
	}
	,balance: function(a) {
		if(a.child1 == null || a.height < 2) return a; else {
			var b = a.child1;
			var c = a.child2;
			var balance = c.height - b.height;
			if(balance > 1) {
				var f = c.child1;
				var g = c.child2;
				c.child1 = a;
				c.parent = a.parent;
				a.parent = c;
				if(c.parent != null) {
					if(c.parent.child1 == a) c.parent.child1 = c; else c.parent.child2 = c;
				} else this.root = c;
				if(f.height > g.height) {
					c.child2 = f;
					a.child2 = g;
					g.parent = a;
					a.aabb.setCombine(b.aabb,g.aabb);
					c.aabb.setCombine(a.aabb,f.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x = b.height;
						var y = g.height;
						$r = x > y?x:y;
						return $r;
					}(this));
					c.height = 1 + (function($this) {
						var $r;
						var x1 = a.height;
						var y1 = f.height;
						$r = x1 > y1?x1:y1;
						return $r;
					}(this));
				} else {
					c.child2 = g;
					a.child2 = f;
					f.parent = a;
					a.aabb.setCombine(b.aabb,f.aabb);
					c.aabb.setCombine(a.aabb,g.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x2 = b.height;
						var y2 = f.height;
						$r = x2 > y2?x2:y2;
						return $r;
					}(this));
					c.height = 1 + (function($this) {
						var $r;
						var x3 = a.height;
						var y3 = g.height;
						$r = x3 > y3?x3:y3;
						return $r;
					}(this));
				}
				return c;
			} else if(balance < -1) {
				var f1 = b.child1;
				var g1 = b.child2;
				b.child1 = a;
				b.parent = a.parent;
				a.parent = b;
				if(b.parent != null) {
					if(b.parent.child1 == a) b.parent.child1 = b; else b.parent.child2 = b;
				} else this.root = b;
				if(f1.height > g1.height) {
					b.child2 = f1;
					a.child1 = g1;
					g1.parent = a;
					a.aabb.setCombine(c.aabb,g1.aabb);
					b.aabb.setCombine(a.aabb,f1.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x4 = c.height;
						var y4 = g1.height;
						$r = x4 > y4?x4:y4;
						return $r;
					}(this));
					b.height = 1 + (function($this) {
						var $r;
						var x5 = a.height;
						var y5 = f1.height;
						$r = x5 > y5?x5:y5;
						return $r;
					}(this));
				} else {
					b.child2 = g1;
					a.child1 = f1;
					f1.parent = a;
					a.aabb.setCombine(c.aabb,f1.aabb);
					b.aabb.setCombine(a.aabb,g1.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x6 = c.height;
						var y6 = f1.height;
						$r = x6 > y6?x6:y6;
						return $r;
					}(this));
					b.height = 1 + (function($this) {
						var $r;
						var x7 = a.height;
						var y7 = g1.height;
						$r = x7 > y7?x7:y7;
						return $r;
					}(this));
				}
				return b;
			} else return a;
		}
	}
	,__class__: zpp_$nape_space_ZPP_$AABBTree
};
var zpp_$nape_space_ZPP_$DynAABBPhase = function(space) {
	this.openlist = null;
	this.failed = null;
	this.treeStack2 = null;
	this.treeStack = null;
	this.moves = null;
	this.syncs = null;
	this.pairs = null;
	this.dtree = null;
	this.stree = null;
	zpp_$nape_space_ZPP_$Broadphase.call(this);
	this.space = space;
	this.is_sweep = false;
	this.dynab = this;
	this.stree = new zpp_$nape_space_ZPP_$AABBTree();
	this.dtree = new zpp_$nape_space_ZPP_$AABBTree();
};
$hxClasses["zpp_nape.space.ZPP_DynAABBPhase"] = zpp_$nape_space_ZPP_$DynAABBPhase;
zpp_$nape_space_ZPP_$DynAABBPhase.__name__ = ["zpp_nape","space","ZPP_DynAABBPhase"];
zpp_$nape_space_ZPP_$DynAABBPhase.__super__ = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$DynAABBPhase.prototype = $extend(zpp_$nape_space_ZPP_$Broadphase.prototype,{
	stree: null
	,dtree: null
	,pairs: null
	,syncs: null
	,moves: null
	,dyn: function(shape) {
		if(shape.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) return false; else return !shape.body.component.sleeping;
	}
	,__insert: function(shape) {
		var node;
		if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) node = new zpp_$nape_space_ZPP_$AABBNode(); else {
			node = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
			zpp_$nape_space_ZPP_$AABBNode.zpp_pool = node.next;
			node.next = null;
		}
		if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) node.aabb = new zpp_$nape_geom_ZPP_$AABB(); else {
			node.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = node.aabb.next;
			node.aabb.next = null;
		}
		null;
		node.moved = false;
		node.synced = false;
		node.first_sync = false;
		node.shape = shape;
		shape.node = node;
		node.synced = true;
		node.first_sync = true;
		node.snext = this.syncs;
		this.syncs = node;
	}
	,__remove: function(shape) {
		var node = shape.node;
		if(!node.first_sync) {
			if(node.dyn) this.dtree.removeLeaf(node); else this.stree.removeLeaf(node);
		}
		shape.node = null;
		if(node.synced) {
			var pre1 = null;
			var cur1 = this.syncs;
			while(cur1 != null) {
				if(cur1 == node) break;
				pre1 = cur1;
				cur1 = cur1.snext;
			}
			if(pre1 == null) this.syncs = cur1.snext; else pre1.snext = cur1.snext;
			cur1.snext = null;
			node.synced = false;
		}
		if(node.moved) {
			var pre2 = null;
			var cur2 = this.moves;
			while(cur2 != null) {
				if(cur2 == node) break;
				pre2 = cur2;
				cur2 = cur2.mnext;
			}
			if(pre2 == null) this.moves = cur2.mnext; else pre2.mnext = cur2.mnext;
			cur2.mnext = null;
			node.moved = false;
		}
		var pre = null;
		var cur = this.pairs;
		while(cur != null) {
			var nxt = cur.next;
			if(cur.n1 == node || cur.n2 == node) {
				if(pre == null) this.pairs = nxt; else pre.next = nxt;
				if(cur.arb != null) cur.arb.pair = null;
				cur.arb = null;
				cur.n1.shape.pairs.remove(cur);
				cur.n2.shape.pairs.remove(cur);
				var o = cur;
				o.n1 = o.n2 = null;
				o.sleeping = false;
				o.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
				zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o;
				cur = nxt;
				continue;
			}
			pre = cur;
			cur = nxt;
		}
		while(!(shape.pairs.head == null)) {
			var cur3 = shape.pairs.pop_unsafe();
			if(cur3.n1 == node) cur3.n2.shape.pairs.remove(cur3); else cur3.n1.shape.pairs.remove(cur3);
			if(cur3.arb != null) cur3.arb.pair = null;
			cur3.arb = null;
			var o1 = cur3;
			o1.n1 = o1.n2 = null;
			o1.sleeping = false;
			o1.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
			zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o1;
		}
		var o2 = node;
		o2.free();
		o2.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
		zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o2;
	}
	,__sync: function(shape) {
		var node = shape.node;
		if(!node.synced) {
			if(!this.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
			var sync;
			sync = node.dyn != (shape.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC?false:!shape.body.component.sleeping) || !node.aabb.contains(shape.aabb);
			if(sync) {
				node.synced = true;
				node.snext = this.syncs;
				this.syncs = node;
			}
		}
	}
	,sync_broadphase: function() {
		this.space.validation();
		if(this.syncs != null) {
			if(this.moves == null) {
				var node = this.syncs;
				while(node != null) {
					var shape = node.shape;
					if(!node.first_sync) {
						var tree1;
						if(node.dyn) tree1 = this.dtree; else tree1 = this.stree;
						tree1.inlined_removeLeaf(node);
					} else node.first_sync = false;
					var aabb = node.aabb;
					if(!this.space.continuous) {
						if(shape.zip_aabb) {
							if(shape.body != null) {
								shape.zip_aabb = false;
								if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
							}
						}
					}
					aabb.setExpand(shape.aabb,3.0);
					var tree;
					if(shape.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC?node.dyn = false:node.dyn = !shape.body.component.sleeping) tree = this.dtree; else tree = this.stree;
					tree.inlined_insertLeaf(node);
					node.synced = false;
					node.moved = true;
					node.mnext = node.snext;
					node.snext = null;
					node = node.mnext;
				}
				var t = this.syncs;
				this.syncs = this.moves;
				this.moves = t;
			} else while(this.syncs != null) {
				var node1;
				var ret = this.syncs;
				this.syncs = ret.snext;
				ret.snext = null;
				node1 = ret;
				var shape1 = node1.shape;
				if(!node1.first_sync) {
					var tree3;
					if(node1.dyn) tree3 = this.dtree; else tree3 = this.stree;
					tree3.inlined_removeLeaf(node1);
				} else node1.first_sync = false;
				var aabb1 = node1.aabb;
				if(!this.space.continuous) {
					if(shape1.zip_aabb) {
						if(shape1.body != null) {
							shape1.zip_aabb = false;
							if(shape1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape1.circle.__validate_aabb(); else shape1.polygon.__validate_aabb();
						}
					}
				}
				aabb1.setExpand(shape1.aabb,3.0);
				var tree2;
				if(shape1.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC?node1.dyn = false:node1.dyn = !shape1.body.component.sleeping) tree2 = this.dtree; else tree2 = this.stree;
				tree2.inlined_insertLeaf(node1);
				node1.synced = false;
				if(!node1.moved) {
					node1.moved = true;
					node1.mnext = this.moves;
					this.moves = node1;
				}
			}
		}
	}
	,broadphase: function(space,discrete) {
		var node = this.syncs;
		while(node != null) {
			var shape = node.shape;
			if(!node.first_sync) {
				var tree1;
				if(node.dyn) tree1 = this.dtree; else tree1 = this.stree;
				tree1.inlined_removeLeaf(node);
			} else node.first_sync = false;
			var aabb = node.aabb;
			if(!space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
			aabb.setExpand(shape.aabb,3.0);
			var tree;
			if(shape.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC?node.dyn = false:node.dyn = !shape.body.component.sleeping) tree = this.dtree; else tree = this.stree;
			tree.inlined_insertLeaf(node);
			node.synced = false;
			node = node.snext;
		}
		while(this.syncs != null) {
			var leaf;
			var ret = this.syncs;
			this.syncs = ret.snext;
			ret.snext = null;
			leaf = ret;
			if(leaf.moved) continue;
			leaf.moved = false;
			var lshape = leaf.shape;
			var lbody = lshape.body;
			if(lbody.component.sleeping) continue;
			var ab = leaf.aabb;
			var stack = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack;
				stack = this.dtree.root;
			}
			while(stack != null) {
				var node1;
				var ret1 = stack;
				stack = ret1.next;
				ret1.next = null;
				node1 = ret1;
				if(node1 == leaf) continue;
				if(node1.child1 == null) {
					var shape1 = node1.shape;
					if(shape1.body != lshape.body && !(shape1.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && lshape.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
						if(ab.intersect(node1.aabb)) {
							var id;
							var di;
							if(lshape.id < shape1.id) {
								id = lshape.id;
								di = shape1.id;
							} else {
								id = shape1.id;
								di = lshape.id;
							}
							var s;
							if(lshape.pairs.length < shape1.pairs.length) s = lshape; else s = shape1;
							var p = null;
							var cx_ite = s.pairs.head;
							while(cx_ite != null) {
								var px = cx_ite.elt;
								if(px.id == id && px.di == di) {
									p = px;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(p != null) {
								if(p.sleeping) {
									p.sleeping = false;
									p.next = this.pairs;
									this.pairs = p;
									p.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) p = new zpp_$nape_space_ZPP_$AABBPair(); else {
								p = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p.next;
								p.next = null;
							}
							null;
							p.n1 = leaf;
							p.n2 = node1;
							p.id = id;
							p.di = di;
							p.next = this.pairs;
							this.pairs = p;
							p.first = true;
							lshape.pairs.inlined_add(p);
							shape1.pairs.inlined_add(p);
						}
					}
				} else if(ab.intersect(node1.aabb)) {
					if(node1.child1 != null) {
						node1.child1.next = stack;
						stack = node1.child1;
					}
					if(node1.child2 != null) {
						node1.child2.next = stack;
						stack = node1.child2;
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack;
				stack = this.stree.root;
			}
			while(stack != null) {
				var node2;
				var ret2 = stack;
				stack = ret2.next;
				ret2.next = null;
				node2 = ret2;
				if(node2 == leaf) continue;
				if(node2.child1 == null) {
					var shape2 = node2.shape;
					if(shape2.body != lshape.body && !(shape2.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && lshape.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
						if(ab.intersect(node2.aabb)) {
							var id1;
							var di1;
							if(lshape.id < shape2.id) {
								id1 = lshape.id;
								di1 = shape2.id;
							} else {
								id1 = shape2.id;
								di1 = lshape.id;
							}
							var s1;
							if(lshape.pairs.length < shape2.pairs.length) s1 = lshape; else s1 = shape2;
							var p1 = null;
							var cx_ite1 = s1.pairs.head;
							while(cx_ite1 != null) {
								var px1 = cx_ite1.elt;
								if(px1.id == id1 && px1.di == di1) {
									p1 = px1;
									break;
								}
								cx_ite1 = cx_ite1.next;
							}
							if(p1 != null) {
								if(p1.sleeping) {
									p1.sleeping = false;
									p1.next = this.pairs;
									this.pairs = p1;
									p1.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) p1 = new zpp_$nape_space_ZPP_$AABBPair(); else {
								p1 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p1.next;
								p1.next = null;
							}
							null;
							p1.n1 = leaf;
							p1.n2 = node2;
							p1.id = id1;
							p1.di = di1;
							p1.next = this.pairs;
							this.pairs = p1;
							p1.first = true;
							lshape.pairs.inlined_add(p1);
							shape2.pairs.inlined_add(p1);
						}
					}
				} else if(ab.intersect(node2.aabb)) {
					if(node2.child1 != null) {
						node2.child1.next = stack;
						stack = node2.child1;
					}
					if(node2.child2 != null) {
						node2.child2.next = stack;
						stack = node2.child2;
					}
				}
			}
		}
		while(this.moves != null) {
			var leaf1;
			var ret3 = this.moves;
			this.moves = ret3.mnext;
			ret3.mnext = null;
			leaf1 = ret3;
			leaf1.moved = false;
			var lshape1 = leaf1.shape;
			var lbody1 = lshape1.body;
			if(lbody1.component.sleeping) continue;
			var ab1 = leaf1.aabb;
			var stack1 = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack1;
				stack1 = this.dtree.root;
			}
			while(stack1 != null) {
				var node3;
				var ret4 = stack1;
				stack1 = ret4.next;
				ret4.next = null;
				node3 = ret4;
				if(node3 == leaf1) continue;
				if(node3.child1 == null) {
					var shape3 = node3.shape;
					if(shape3.body != lshape1.body && !(shape3.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && lshape1.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
						if(ab1.intersect(node3.aabb)) {
							var id2;
							var di2;
							if(lshape1.id < shape3.id) {
								id2 = lshape1.id;
								di2 = shape3.id;
							} else {
								id2 = shape3.id;
								di2 = lshape1.id;
							}
							var s2;
							if(lshape1.pairs.length < shape3.pairs.length) s2 = lshape1; else s2 = shape3;
							var p2 = null;
							var cx_ite2 = s2.pairs.head;
							while(cx_ite2 != null) {
								var px2 = cx_ite2.elt;
								if(px2.id == id2 && px2.di == di2) {
									p2 = px2;
									break;
								}
								cx_ite2 = cx_ite2.next;
							}
							if(p2 != null) {
								if(p2.sleeping) {
									p2.sleeping = false;
									p2.next = this.pairs;
									this.pairs = p2;
									p2.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) p2 = new zpp_$nape_space_ZPP_$AABBPair(); else {
								p2 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p2.next;
								p2.next = null;
							}
							null;
							p2.n1 = leaf1;
							p2.n2 = node3;
							p2.id = id2;
							p2.di = di2;
							p2.next = this.pairs;
							this.pairs = p2;
							p2.first = true;
							lshape1.pairs.inlined_add(p2);
							shape3.pairs.inlined_add(p2);
						}
					}
				} else if(ab1.intersect(node3.aabb)) {
					if(node3.child1 != null) {
						node3.child1.next = stack1;
						stack1 = node3.child1;
					}
					if(node3.child2 != null) {
						node3.child2.next = stack1;
						stack1 = node3.child2;
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack1;
				stack1 = this.stree.root;
			}
			while(stack1 != null) {
				var node4;
				var ret5 = stack1;
				stack1 = ret5.next;
				ret5.next = null;
				node4 = ret5;
				if(node4 == leaf1) continue;
				if(node4.child1 == null) {
					var shape4 = node4.shape;
					if(shape4.body != lshape1.body && !(shape4.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && lshape1.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
						if(ab1.intersect(node4.aabb)) {
							var id3;
							var di3;
							if(lshape1.id < shape4.id) {
								id3 = lshape1.id;
								di3 = shape4.id;
							} else {
								id3 = shape4.id;
								di3 = lshape1.id;
							}
							var s3;
							if(lshape1.pairs.length < shape4.pairs.length) s3 = lshape1; else s3 = shape4;
							var p3 = null;
							var cx_ite3 = s3.pairs.head;
							while(cx_ite3 != null) {
								var px3 = cx_ite3.elt;
								if(px3.id == id3 && px3.di == di3) {
									p3 = px3;
									break;
								}
								cx_ite3 = cx_ite3.next;
							}
							if(p3 != null) {
								if(p3.sleeping) {
									p3.sleeping = false;
									p3.next = this.pairs;
									this.pairs = p3;
									p3.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) p3 = new zpp_$nape_space_ZPP_$AABBPair(); else {
								p3 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p3.next;
								p3.next = null;
							}
							null;
							p3.n1 = leaf1;
							p3.n2 = node4;
							p3.id = id3;
							p3.di = di3;
							p3.next = this.pairs;
							this.pairs = p3;
							p3.first = true;
							lshape1.pairs.inlined_add(p3);
							shape4.pairs.inlined_add(p3);
						}
					}
				} else if(ab1.intersect(node4.aabb)) {
					if(node4.child1 != null) {
						node4.child1.next = stack1;
						stack1 = node4.child1;
					}
					if(node4.child2 != null) {
						node4.child2.next = stack1;
						stack1 = node4.child2;
					}
				}
			}
		}
		var pre = null;
		var cur = this.pairs;
		while(cur != null) {
			if(!cur.first && !cur.n1.aabb.intersect(cur.n2.aabb)) {
				if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
				cur.n1.shape.pairs.inlined_try_remove(cur);
				cur.n2.shape.pairs.inlined_try_remove(cur);
				var nxt = cur.next;
				if(cur.arb != null) cur.arb.pair = null;
				cur.arb = null;
				var o = cur;
				o.n1 = o.n2 = null;
				o.sleeping = false;
				o.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
				zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o;
				cur = nxt;
				continue;
			}
			var s11 = cur.n1.shape;
			var b1 = s11.body;
			var s21 = cur.n2.shape;
			var b2 = s21.body;
			if(!cur.first) {
				if((b1.component.sleeping || b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) && (b2.component.sleeping || b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
					cur.sleeping = true;
					if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
					cur = cur.next;
					continue;
				}
			}
			cur.first = false;
			if(s11.aabb.intersect(s21.aabb)) {
				var oarb = cur.arb;
				if(discrete) cur.arb = space.narrowPhase(s11,s21,!(b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC),cur.arb,false); else cur.arb = space.continuousEvent(s11,s21,!(b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC),cur.arb,false);
				if(cur.arb == null) {
					if(oarb != null) oarb.pair = null;
				} else cur.arb.pair = cur;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.syncs != null) {
			var next = this.syncs.snext;
			this.syncs.snext = null;
			if(this.syncs.first_sync) {
				this.syncs.shape.node = null;
				this.syncs.shape.removedFromSpace();
				this.syncs.shape = null;
			}
			this.syncs = next;
		}
		while(this.moves != null) {
			var next1 = this.moves.mnext;
			this.moves.mnext = null;
			if(this.moves.first_sync) {
				this.moves.shape.node = null;
				this.moves.shape.removedFromSpace();
				this.moves.shape = null;
			}
			this.moves = next1;
		}
		while(this.pairs != null) {
			var nxt = this.pairs.next;
			if(this.pairs.arb != null) this.pairs.arb.pair = null;
			this.pairs.arb = null;
			this.pairs.n1.shape.pairs.inlined_try_remove(this.pairs);
			this.pairs.n2.shape.pairs.inlined_try_remove(this.pairs);
			var o = this.pairs;
			o.n1 = o.n2 = null;
			o.sleeping = false;
			o.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
			zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o;
			this.pairs = nxt;
		}
		this.dtree.clear();
		this.stree.clear();
	}
	,treeStack: null
	,shapesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_$nape_geom_ZPP_$Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.containsPoint(v)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(node.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
								if(zpp_$nape_geom_ZPP_$Collide.circleContains(node.shape.circle,v)) ret.push(node.shape.outer);
							} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(node.shape.polygon,v)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.containsPoint(v)) {
					if(node1.child1 == null) {
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(node1.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
								if(zpp_$nape_geom_ZPP_$Collide.circleContains(node1.shape.circle,v)) ret.push(node1.shape.outer);
							} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(node1.shape.polygon,v)) ret.push(node1.shape.outer);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		return ret;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_$nape_geom_ZPP_$Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.containsPoint(v)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(!ret.has(body)) {
							if(filter == null || node.shape.filter.shouldCollide(filter)) {
								if(node.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
									if(zpp_$nape_geom_ZPP_$Collide.circleContains(node.shape.circle,v)) ret.push(body);
								} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(node.shape.polygon,v)) ret.push(body);
							}
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.containsPoint(v)) {
					if(node1.child1 == null) {
						var body1 = node1.shape.body.outer;
						if(!ret.has(body1)) {
							if(filter == null || node1.shape.filter.shouldCollide(filter)) {
								if(node1.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
									if(zpp_$nape_geom_ZPP_$Collide.circleContains(node1.shape.circle,v)) ret.push(body1);
								} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(node1.shape.polygon,v)) ret.push(body1);
							}
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		return ret;
	}
	,treeStack2: null
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(ab.contains(node.aabb)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) ret.push(node.shape.outer);
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
						this.treeStack2.add(node);
						while(!(this.treeStack2.head == null)) {
							var node1 = this.treeStack2.pop_unsafe();
							if(node1.child1 == null) {
								if(filter == null || node1.shape.filter.shouldCollide(filter)) ret.push(node1.shape.outer);
							} else {
								if(node1.child1 != null) this.treeStack2.add(node1.child1);
								if(node1.child2 != null) this.treeStack2.add(node1.child2);
							}
						}
					}
				} else if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(zpp_$nape_geom_ZPP_$Collide.containTest(this.aabbShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
								} else if(ab.contains(node.shape.aabb)) ret.push(node.shape.outer); else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(node.shape.outer);
							} else if(!containment || ab.contains(node.shape.aabb)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node2 = this.treeStack.pop_unsafe();
				if(ab.contains(node2.aabb)) {
					if(node2.child1 == null) {
						if(filter == null || node2.shape.filter.shouldCollide(filter)) ret.push(node2.shape.outer);
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
						this.treeStack2.add(node2);
						while(!(this.treeStack2.head == null)) {
							var node3 = this.treeStack2.pop_unsafe();
							if(node3.child1 == null) {
								if(filter == null || node3.shape.filter.shouldCollide(filter)) ret.push(node3.shape.outer);
							} else {
								if(node3.child1 != null) this.treeStack2.add(node3.child1);
								if(node3.child2 != null) this.treeStack2.add(node3.child2);
							}
						}
					}
				} else if(node2.aabb.intersect(ab)) {
					if(node2.child1 == null) {
						if(filter == null || node2.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(zpp_$nape_geom_ZPP_$Collide.containTest(this.aabbShape.zpp_inner,node2.shape)) ret.push(node2.shape.outer);
								} else if(ab.contains(node2.shape.aabb)) ret.push(node2.shape.outer); else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node2.shape,this.aabbShape.zpp_inner)) ret.push(node2.shape.outer);
							} else if(!containment || ab.contains(node2.shape.aabb)) ret.push(node2.shape.outer);
						}
					} else {
						if(node2.child1 != null) this.treeStack.add(node2.child1);
						if(node2.child2 != null) this.treeStack.add(node2.child2);
					}
				}
			}
		}
		return ret;
	}
	,failed: null
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape_phys_BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(ab.contains(node.aabb)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							var body = node.shape.body.outer;
							if(!ret.has(body)) ret.push(body);
						}
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
						this.treeStack2.add(node);
						while(!(this.treeStack2.head == null)) {
							var node1 = this.treeStack2.pop_unsafe();
							if(node1.child1 == null) {
								if(filter == null || node1.shape.filter.shouldCollide(filter)) {
									var body1 = node1.shape.body.outer;
									if(!ret.has(body1)) ret.push(body1);
								}
							} else {
								if(node1.child1 != null) this.treeStack2.add(node1.child1);
								if(node1.child2 != null) this.treeStack2.add(node1.child2);
							}
						}
					}
				} else if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body2 = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(!this.failed.has(body2)) {
										var col = zpp_$nape_geom_ZPP_$Collide.containTest(this.aabbShape.zpp_inner,node.shape);
										if(!ret.has(body2) && col) ret.push(body2); else if(!col) {
											ret.remove(body2);
											this.failed.push(body2);
										}
									}
								} else if(!ret.has(body2) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(body2);
							} else if(containment) {
								if(!this.failed.has(body2)) {
									var col1 = ab.contains(node.shape.aabb);
									if(!ret.has(body2) && col1) ret.push(body2); else if(!col1) {
										ret.remove(body2);
										this.failed.push(body2);
									}
								}
							} else if(!ret.has(body2) && ab.contains(node.shape.aabb)) ret.push(body2);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node2 = this.treeStack.pop_unsafe();
				if(ab.contains(node2.aabb)) {
					if(node2.child1 == null) {
						if(filter == null || node2.shape.filter.shouldCollide(filter)) {
							var body3 = node2.shape.body.outer;
							if(!ret.has(body3)) ret.push(body3);
						}
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
						this.treeStack2.add(node2);
						while(!(this.treeStack2.head == null)) {
							var node3 = this.treeStack2.pop_unsafe();
							if(node3.child1 == null) {
								if(filter == null || node3.shape.filter.shouldCollide(filter)) {
									var body4 = node3.shape.body.outer;
									if(!ret.has(body4)) ret.push(body4);
								}
							} else {
								if(node3.child1 != null) this.treeStack2.add(node3.child1);
								if(node3.child2 != null) this.treeStack2.add(node3.child2);
							}
						}
					}
				} else if(node2.aabb.intersect(ab)) {
					if(node2.child1 == null) {
						var body5 = node2.shape.body.outer;
						if(filter == null || node2.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(!this.failed.has(body5)) {
										var col2 = zpp_$nape_geom_ZPP_$Collide.containTest(this.aabbShape.zpp_inner,node2.shape);
										if(!ret.has(body5) && col2) ret.push(body5); else if(!col2) {
											ret.remove(body5);
											this.failed.push(body5);
										}
									}
								} else if(!ret.has(body5) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node2.shape,this.aabbShape.zpp_inner)) ret.push(body5);
							} else if(containment) {
								if(!this.failed.has(body5)) {
									var col3 = ab.contains(node2.shape.aabb);
									if(!ret.has(body5) && col3) ret.push(body5); else if(!col3) {
										ret.remove(body5);
										this.failed.push(body5);
									}
								}
							} else if(!ret.has(body5) && ab.contains(node2.shape.aabb)) ret.push(body5);
						}
					} else {
						if(node2.child1 != null) this.treeStack.add(node2.child1);
						if(node2.child2 != null) this.treeStack.add(node2.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_$nape_geom_ZPP_$Collide.containTest(this.circShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
							} else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_$nape_geom_ZPP_$Collide.containTest(this.circShape.zpp_inner,node1.shape)) ret.push(node1.shape.outer);
							} else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node1.shape,this.circShape.zpp_inner)) ret.push(node1.shape.outer);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape_phys_BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body)) {
									var col = zpp_$nape_geom_ZPP_$Collide.containTest(this.circShape.zpp_inner,node.shape);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						var body1 = node1.shape.body.outer;
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body1)) {
									var col1 = zpp_$nape_geom_ZPP_$Collide.containTest(this.circShape.zpp_inner,node1.shape);
									if(!ret.has(body1) && col1) ret.push(body1); else if(!col1) {
										ret.remove(body1);
										this.failed.push(body1);
									}
								}
							} else if(!ret.has(body1) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node1.shape,this.circShape.zpp_inner)) ret.push(body1);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,shapesInShape: function(shp,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shp);
		var ab = shp.aabb;
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_$nape_geom_ZPP_$Collide.containTest(shp,node.shape)) ret.push(node.shape.outer);
							} else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node.shape,shp)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_$nape_geom_ZPP_$Collide.containTest(shp,node1.shape)) ret.push(node1.shape.outer);
							} else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node1.shape,shp)) ret.push(node1.shape.outer);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesInShape: function(shp,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shp);
		var ab = shp.aabb;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape_phys_BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body)) {
									var col = zpp_$nape_geom_ZPP_$Collide.containTest(shp,node.shape);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node.shape,shp)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node1 = this.treeStack.pop_unsafe();
				if(node1.aabb.intersect(ab)) {
					if(node1.child1 == null) {
						var body1 = node1.shape.body.outer;
						if(filter == null || node1.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body1)) {
									var col1 = zpp_$nape_geom_ZPP_$Collide.containTest(shp,node1.shape);
									if(!ret.has(body1) && col1) ret.push(body1); else if(!col1) {
										ret.remove(body1);
										this.failed.push(body1);
									}
								}
							} else if(!ret.has(body1) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(node1.shape,shp)) ret.push(body1);
						}
					} else {
						if(node1.child1 != null) this.treeStack.add(node1.child1);
						if(node1.child2 != null) this.treeStack.add(node1.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,openlist: null
	,rayCast: function(ray,inner,filter) {
		if(this.openlist == null) this.openlist = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
		this.sync_broadphase();
		ray.validate_dir();
		var mint = ray.maxdist;
		if(this.dtree.root != null) {
			if(ray.aabbtest(this.dtree.root.aabb)) {
				var t = ray.aabbsect(this.dtree.root.aabb);
				if(t >= 0 && t < mint) {
					this.dtree.root.rayt = t;
					var pre = null;
					var cx_ite = this.openlist.head;
					while(cx_ite != null) {
						var j = cx_ite.elt;
						if(this.dtree.root.rayt < j.rayt) break;
						pre = cx_ite;
						cx_ite = cx_ite.next;
					}
					this.openlist.inlined_insert(pre,this.dtree.root);
				}
			}
		}
		if(this.stree.root != null) {
			if(ray.aabbtest(this.stree.root.aabb)) {
				var t1 = ray.aabbsect(this.stree.root.aabb);
				if(t1 >= 0 && t1 < mint) {
					this.stree.root.rayt = t1;
					var pre1 = null;
					var cx_ite1 = this.openlist.head;
					while(cx_ite1 != null) {
						var j1 = cx_ite1.elt;
						if(this.stree.root.rayt < j1.rayt) break;
						pre1 = cx_ite1;
						cx_ite1 = cx_ite1.next;
					}
					this.openlist.inlined_insert(pre1,this.stree.root);
				}
			}
		}
		var minres = null;
		while(!(this.openlist.head == null)) {
			var cnode = this.openlist.pop_unsafe();
			if(cnode.rayt >= mint) break;
			if(cnode.child1 == null) {
				var shape = cnode.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					var result;
					if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) result = ray.circlesect(shape.circle,inner,mint); else if(ray.aabbtest(shape.aabb)) result = ray.polysect(shape.polygon,inner,mint); else result = null;
					if(result != null) {
						mint = result.zpp_inner.toiDistance;
						if(minres != null) minres.zpp_inner.free();
						minres = result;
					}
				}
			} else {
				if(cnode.child1 != null) {
					if(ray.aabbtest(cnode.child1.aabb)) {
						var t2 = ray.aabbsect(cnode.child1.aabb);
						if(t2 >= 0 && t2 < mint) {
							cnode.child1.rayt = t2;
							var pre2 = null;
							var cx_ite2 = this.openlist.head;
							while(cx_ite2 != null) {
								var j2 = cx_ite2.elt;
								if(cnode.child1.rayt < j2.rayt) break;
								pre2 = cx_ite2;
								cx_ite2 = cx_ite2.next;
							}
							this.openlist.inlined_insert(pre2,cnode.child1);
						}
					}
				}
				if(cnode.child2 != null) {
					if(ray.aabbtest(cnode.child2.aabb)) {
						var t3 = ray.aabbsect(cnode.child2.aabb);
						if(t3 >= 0 && t3 < mint) {
							cnode.child2.rayt = t3;
							var pre3 = null;
							var cx_ite3 = this.openlist.head;
							while(cx_ite3 != null) {
								var j3 = cx_ite3.elt;
								if(cnode.child2.rayt < j3.rayt) break;
								pre3 = cx_ite3;
								cx_ite3 = cx_ite3.next;
							}
							this.openlist.inlined_insert(pre3,cnode.child2);
						}
					}
				}
			}
		}
		this.openlist.clear();
		return minres;
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		if(this.openlist == null) this.openlist = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
		this.sync_broadphase();
		ray.validate_dir();
		var inf = ray.maxdist >= Infinity;
		var ret;
		if(output == null) ret = new nape_geom_RayResultList(); else ret = output;
		if(this.dtree.root != null) {
			if(ray.aabbtest(this.dtree.root.aabb)) {
				if(inf) this.openlist.add(this.dtree.root); else {
					var t = ray.aabbsect(this.dtree.root.aabb);
					if(t >= 0 && t < ray.maxdist) this.openlist.add(this.dtree.root);
				}
			}
		}
		if(this.stree.root != null) {
			if(ray.aabbtest(this.stree.root.aabb)) {
				if(inf) this.openlist.add(this.stree.root); else {
					var t1 = ray.aabbsect(this.stree.root.aabb);
					if(t1 >= 0 && t1 < ray.maxdist) this.openlist.add(this.stree.root);
				}
			}
		}
		while(!(this.openlist.head == null)) {
			var cnode = this.openlist.pop_unsafe();
			if(cnode.child1 == null) {
				var shape = cnode.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) ray.circlesect2(shape.circle,inner,ret); else if(ray.aabbtest(shape.aabb)) ray.polysect2(shape.polygon,inner,ret);
				}
			} else {
				if(cnode.child1 != null) {
					if(ray.aabbtest(cnode.child1.aabb)) {
						if(inf) this.openlist.add(cnode.child1); else {
							var t2 = ray.aabbsect(cnode.child1.aabb);
							if(t2 >= 0 && t2 < ray.maxdist) this.openlist.add(cnode.child1);
						}
					}
				}
				if(cnode.child2 != null) {
					if(ray.aabbtest(cnode.child2.aabb)) {
						if(inf) this.openlist.add(cnode.child2); else {
							var t3 = ray.aabbsect(cnode.child2.aabb);
							if(t3 >= 0 && t3 < ray.maxdist) this.openlist.add(cnode.child2);
						}
					}
				}
			}
		}
		this.openlist.clear();
		return ret;
	}
	,__class__: zpp_$nape_space_ZPP_$DynAABBPhase
});
var zpp_$nape_space_ZPP_$Island = function() {
	this.waket = 0;
	this.sleep = false;
	this.comps = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.comps = new zpp_$nape_util_ZNPList_$ZPP_$Component();
};
$hxClasses["zpp_nape.space.ZPP_Island"] = zpp_$nape_space_ZPP_$Island;
zpp_$nape_space_ZPP_$Island.__name__ = ["zpp_nape","space","ZPP_Island"];
zpp_$nape_space_ZPP_$Island.prototype = {
	next: null
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,_inuse: null
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,comps: null
	,sleep: null
	,waket: null
	,free: function() {
	}
	,alloc: function() {
		this.waket = 0;
	}
	,__class__: zpp_$nape_space_ZPP_$Island
};
var zpp_$nape_space_ZPP_$Component = function() {
	this.woken = false;
	this.waket = 0;
	this.sleeping = false;
	this.island = null;
	this.constraint = null;
	this.body = null;
	this.isBody = false;
	this.rank = 0;
	this.parent = null;
	this.next = null;
	this.sleeping = false;
	this.island = null;
	this.parent = this;
	this.rank = 0;
	this.woken = false;
};
$hxClasses["zpp_nape.space.ZPP_Component"] = zpp_$nape_space_ZPP_$Component;
zpp_$nape_space_ZPP_$Component.__name__ = ["zpp_nape","space","ZPP_Component"];
zpp_$nape_space_ZPP_$Component.prototype = {
	next: null
	,parent: null
	,rank: null
	,isBody: null
	,body: null
	,constraint: null
	,island: null
	,sleeping: null
	,waket: null
	,woken: null
	,free: function() {
		this.body = null;
		this.constraint = null;
	}
	,alloc: function() {
	}
	,reset: function() {
		this.sleeping = false;
		this.island = null;
		this.parent = this;
		this.rank = 0;
	}
	,__class__: zpp_$nape_space_ZPP_$Component
};
var zpp_$nape_space_ZPP_$CallbackSet = function() {
	this.lazydel = false;
	this.freed = false;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.int2 = null;
	this.int1 = null;
	this.di = 0;
	this.id = 0;
	this.arbiters = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
};
$hxClasses["zpp_nape.space.ZPP_CallbackSet"] = zpp_$nape_space_ZPP_$CallbackSet;
zpp_$nape_space_ZPP_$CallbackSet.__name__ = ["zpp_nape","space","ZPP_CallbackSet"];
zpp_$nape_space_ZPP_$CallbackSet.get = function(i1,i2) {
	var ret;
	if(zpp_$nape_space_ZPP_$CallbackSet.zpp_pool == null) ret = new zpp_$nape_space_ZPP_$CallbackSet(); else {
		ret = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
		zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.freed = false;
	ret.lazydel = false;
	ret.COLLISIONstate = zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT;
	ret.COLLISIONstamp = 0;
	ret.SENSORstate = zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT;
	ret.SENSORstamp = 0;
	ret.FLUIDstate = zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT;
	ret.FLUIDstamp = 0;
	if(i1.id < i2.id) {
		ret.int1 = i1;
		ret.int2 = i2;
	} else {
		ret.int1 = i2;
		ret.int2 = i1;
	}
	ret.id = ret.int1.id;
	ret.di = ret.int2.id;
	return ret;
};
zpp_$nape_space_ZPP_$CallbackSet.prototype = {
	id: null
	,di: null
	,int1: null
	,int2: null
	,arbiters: null
	,COLLISIONstate: null
	,COLLISIONstamp: null
	,SENSORstate: null
	,SENSORstamp: null
	,FLUIDstate: null
	,FLUIDstamp: null
	,next: null
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,_inuse: null
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		o._inuse = true;
		temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		o._inuse = true;
		temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
	}
	,inlined_clear: function() {
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.next == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it; else return null;
	}
	,freed: null
	,lazydel: null
	,free: function() {
		this.int1 = this.int2 = null;
		this.id = this.di = -1;
		this.freed = true;
	}
	,alloc: function() {
		this.freed = false;
		this.lazydel = false;
		this.COLLISIONstate = zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT;
		this.COLLISIONstamp = 0;
		this.SENSORstate = zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT;
		this.SENSORstamp = 0;
		this.FLUIDstate = zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT;
		this.FLUIDstamp = 0;
	}
	,add_arb: function(x) {
		if(!this.arbiters.inlined_has(x)) {
			this.arbiters.inlined_add(x);
			return true;
		} else return false;
	}
	,try_remove_arb: function(x) {
		return this.arbiters.inlined_try_remove(x);
	}
	,remove_arb: function(x) {
		this.arbiters.inlined_try_remove(x);
	}
	,empty_arb: function(type) {
		var retvar;
		retvar = true;
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if((x.type & type) == 0) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				retvar = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return retvar;
	}
	,really_empty: function() {
		return this.arbiters.head == null;
	}
	,sleeping: function() {
		var ret;
		ret = true;
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x.sleeping) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				ret = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,__class__: zpp_$nape_space_ZPP_$CallbackSet
};
var zpp_$nape_space_ZPP_$CbSetManager = function(space) {
	this.space = null;
	this.cbsets = null;
	if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) this.cbsets = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
		this.cbsets = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = this.cbsets.next;
		this.cbsets.next = null;
	}
	null;
	this.cbsets.lt = zpp_$nape_callbacks_ZPP_$CbSet.setlt;
	this.space = space;
};
$hxClasses["zpp_nape.space.ZPP_CbSetManager"] = zpp_$nape_space_ZPP_$CbSetManager;
zpp_$nape_space_ZPP_$CbSetManager.__name__ = ["zpp_nape","space","ZPP_CbSetManager"];
zpp_$nape_space_ZPP_$CbSetManager.prototype = {
	cbsets: null
	,space: null
	,get: function(cbTypes) {
		if(cbTypes.head == null) return null;
		var fake;
		if(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool == null) fake = new zpp_$nape_callbacks_ZPP_$CbSet(); else {
			fake = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = fake.next;
			fake.next = null;
		}
		null;
		var faketypes = fake.cbTypes;
		fake.cbTypes = cbTypes;
		var res = this.cbsets.find_weak(fake);
		var ret;
		if(res != null) ret = res.data; else {
			var set = zpp_$nape_callbacks_ZPP_$CbSet.get(cbTypes);
			this.cbsets.insert(set);
			set.manager = this;
			ret = set;
		}
		fake.cbTypes = faketypes;
		var o = fake;
		o.free();
		o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
		return ret;
	}
	,remove: function(set) {
		this.cbsets.remove(set);
		while(!(set.cbpairs.head == null)) {
			var pair = set.cbpairs.pop_unsafe();
			if(pair.a != pair.b) {
				if(set == pair.a) pair.b.cbpairs.remove(pair); else pair.a.cbpairs.remove(pair);
			}
			var o = pair;
			o.a = o.b = null;
			o.listeners.clear();
			o.next = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = o;
		}
		set.manager = null;
	}
	,clear: function() {
	}
	,validate: function() {
		if(!this.cbsets.empty()) {
			var set_ite = this.cbsets.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var cb = set_ite.data;
				cb.validate();
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
	}
	,pair: function(a,b) {
		var ret = null;
		var pairs;
		if(a.cbpairs.length < b.cbpairs.length) pairs = a.cbpairs; else pairs = b.cbpairs;
		var cx_ite = pairs.head;
		while(cx_ite != null) {
			var p = cx_ite.elt;
			if(p.a == a && p.b == b || p.a == b && p.b == a) {
				ret = p;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret == null) {
			ret = zpp_$nape_callbacks_ZPP_$CbSetPair.get(a,b);
			a.cbpairs.add(ret);
			if(b != a) b.cbpairs.add(ret);
		}
		if(ret.zip_listeners) {
			ret.zip_listeners = false;
			ret.__validate();
		}
		return ret;
	}
	,valid_listener: function(i) {
		return i.space == this.space;
	}
	,__class__: zpp_$nape_space_ZPP_$CbSetManager
};
var zpp_$nape_space_ZPP_$Space = function(gravity,broadphase) {
	this.prelisteners = null;
	this.precb = null;
	this.continuous = false;
	this.toiEvents = null;
	this.pre_dt = 0.0;
	this.convexShapeList = null;
	this.cbsets = null;
	this.callbackset_list = null;
	this.callbacks = null;
	this.wrap_listeners = null;
	this.listeners = null;
	this.islands = null;
	this.staticsleep = null;
	this.wrap_livecon = null;
	this.live_constraints = null;
	this.wrap_live = null;
	this.live = null;
	this.wrap_arbiters = null;
	this.s_arbiters = null;
	this.f_arbiters = null;
	this.c_arbiters_false = null;
	this.c_arbiters_true = null;
	this.sortcontacts = false;
	this.time = 0.0;
	this.midstep = false;
	this.stamp = 0;
	this.global_ang_drag = 0.0;
	this.global_lin_drag = 0.0;
	this.__static = null;
	this.bphase = null;
	this.kinematics = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_compounds = null;
	this.compounds = null;
	this.wrap_bodies = null;
	this.bodies = null;
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.userData = null;
	this.outer = null;
	this.toiEvents = new zpp_$nape_util_ZNPList_$ZPP_$ToiEvent();
	this.global_lin_drag = 0.015;
	this.global_ang_drag = 0.015;
	this.precb = new nape_callbacks_PreCallback();
	this.precb.zpp_inner = new zpp_$nape_callbacks_ZPP_$Callback();
	this.sortcontacts = true;
	this.pre_dt = 0.0;
	if(broadphase == null || broadphase == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE;
		return $r;
	}(this))) this.bphase = new zpp_$nape_space_ZPP_$DynAABBPhase(this); else if(broadphase == (function($this) {
		var $r;
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		$r = zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE;
		return $r;
	}(this))) this.bphase = new zpp_$nape_space_ZPP_$SweepPhase(this);
	this.time = 0.0;
	var me = this;
	if(gravity != null) {
		this.gravityx = gravity.x;
		this.gravityy = gravity.y;
	} else {
		this.gravityx = 0;
		this.gravityy = 0;
	}
	this.bodies = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_bodies = zpp_$nape_util_ZPP_$BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.compounds = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this.wrap_compounds = zpp_$nape_util_ZPP_$CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.kinematics = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.c_arbiters_true = new zpp_$nape_util_ZNPList_$ZPP_$ColArbiter();
	this.c_arbiters_false = new zpp_$nape_util_ZNPList_$ZPP_$ColArbiter();
	this.f_arbiters = new zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter();
	this.s_arbiters = new zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter();
	this.islands = new zpp_$nape_space_ZPP_$Island();
	this.live = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_live = zpp_$nape_util_ZPP_$BodyList.get(this.live,true);
	this.staticsleep = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.live_constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_livecon = zpp_$nape_util_ZPP_$ConstraintList.get(this.live_constraints,true);
	this.__static = zpp_$nape_phys_ZPP_$Body.__static();
	this.__static.zpp_inner.space = this;
	this.callbacks = new zpp_$nape_callbacks_ZPP_$Callback();
	this.midstep = false;
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$Listener();
	this.wrap_listeners = zpp_$nape_util_ZPP_$ListenerList.get(this.listeners);
	this.wrap_listeners.zpp_inner.adder = $bind(this,this.listeners_adder);
	this.wrap_listeners.zpp_inner.subber = $bind(this,this.listeners_subber);
	this.callbackset_list = new zpp_$nape_space_ZPP_$CallbackSet();
	this.mrca1 = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.mrca2 = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.prelisteners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.cbsets = new zpp_$nape_space_ZPP_$CbSetManager(this);
};
$hxClasses["zpp_nape.space.ZPP_Space"] = zpp_$nape_space_ZPP_$Space;
zpp_$nape_space_ZPP_$Space.__name__ = ["zpp_nape","space","ZPP_Space"];
zpp_$nape_space_ZPP_$Space.prototype = {
	outer: null
	,userData: null
	,gravityx: null
	,gravityy: null
	,wrap_gravity: null
	,getgravity: function() {
		this.wrap_gravity = nape_geom_Vec2.get(this.gravityx,this.gravityy,null);
		this.wrap_gravity.zpp_inner._inuse = true;
		this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
		this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
	}
	,gravity_invalidate: function(x) {
		this.gravityx = x.x;
		this.gravityy = x.y;
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
		var cx_ite = this.bodies.head;
		while(cx_ite != null) {
			var x1 = cx_ite.elt;
			var o = x1;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.compounds.head;
		while(cx_ite1 != null) {
			var i = cx_ite1.elt;
			stack.add(i);
			cx_ite1 = cx_ite1.next;
		}
		while(!(stack.head == null)) {
			var s = stack.pop_unsafe();
			var cx_ite2 = s.bodies.head;
			while(cx_ite2 != null) {
				var x2 = cx_ite2.elt;
				var o1 = x2;
				if(!o1.world) {
					o1.component.waket = this.stamp + (this.midstep?0:1);
					if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
					if(o1.component.sleeping) this.really_wake(o1,false);
				}
				cx_ite2 = cx_ite2.next;
			}
			var cx_ite3 = s.compounds.head;
			while(cx_ite3 != null) {
				var i1 = cx_ite3.elt;
				stack.add(i1);
				cx_ite3 = cx_ite3.next;
			}
		}
	}
	,gravity_validate: function() {
		this.wrap_gravity.zpp_inner.x = this.gravityx;
		this.wrap_gravity.zpp_inner.y = this.gravityy;
	}
	,bodies: null
	,wrap_bodies: null
	,compounds: null
	,wrap_compounds: null
	,constraints: null
	,wrap_constraints: null
	,kinematics: null
	,bphase: null
	,__static: null
	,global_lin_drag: null
	,global_ang_drag: null
	,stamp: null
	,midstep: null
	,time: null
	,sortcontacts: null
	,c_arbiters_true: null
	,c_arbiters_false: null
	,f_arbiters: null
	,s_arbiters: null
	,wrap_arbiters: null
	,live: null
	,wrap_live: null
	,live_constraints: null
	,wrap_livecon: null
	,staticsleep: null
	,islands: null
	,listeners: null
	,wrap_listeners: null
	,callbacks: null
	,callbackset_list: null
	,cbsets: null
	,clear: function() {
		while(!(this.listeners.head == null)) {
			var c = this.listeners.pop_unsafe();
			this.remListener(c);
		}
		while(!(this.callbackset_list.next == null)) {
			var c1 = this.callbackset_list.pop_unsafe();
			c1.arbiters.clear();
			var o = c1;
			o.int1 = o.int2 = null;
			o.id = o.di = -1;
			o.freed = true;
			null;
			o.next = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = o;
		}
		while(!(this.c_arbiters_true.head == null)) {
			var arb = this.c_arbiters_true.pop_unsafe();
			arb.retire();
		}
		while(!(this.c_arbiters_false.head == null)) {
			var arb1 = this.c_arbiters_false.pop_unsafe();
			arb1.retire();
		}
		while(!(this.s_arbiters.head == null)) {
			var arb2 = this.s_arbiters.pop_unsafe();
			arb2.retire();
		}
		while(!(this.f_arbiters.head == null)) {
			var arb3 = this.f_arbiters.pop_unsafe();
			arb3.retire();
		}
		this.bphase.clear();
		while(!(this.bodies.head == null)) {
			var b = this.bodies.pop_unsafe();
			if(b.component != null) {
				var i = b.component.island;
				if(i != null) {
					while(!(i.comps.head == null)) {
						var c2 = i.comps.pop_unsafe();
						c2.sleeping = false;
						c2.island = null;
						c2.parent = c2;
						c2.rank = 0;
					}
					var o1 = i;
					o1.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = o1;
				}
			}
			b.removedFromSpace();
			b.space = null;
		}
		while(!(this.constraints.head == null)) {
			var c3 = this.constraints.pop_unsafe();
			if(c3.component != null) {
				var i1 = c3.component.island;
				if(i1 != null) {
					while(!(i1.comps.head == null)) {
						var c4 = i1.comps.pop_unsafe();
						c4.sleeping = false;
						c4.island = null;
						c4.parent = c4;
						c4.rank = 0;
					}
					var o2 = i1;
					o2.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = o2;
				}
			}
			c3.removedFromSpace();
			c3.space = null;
		}
		this.kinematics.clear();
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
		while(!(this.compounds.head == null)) {
			var c5 = this.compounds.pop_unsafe();
			stack.add(c5);
		}
		while(!(stack.head == null)) {
			var comp = stack.pop_unsafe();
			comp.removedFromSpace();
			comp.space = null;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var b1 = cx_ite.elt;
				if(b1.component != null) {
					var i2 = b1.component.island;
					if(i2 != null) {
						while(!(i2.comps.head == null)) {
							var c6 = i2.comps.pop_unsafe();
							c6.sleeping = false;
							c6.island = null;
							c6.parent = c6;
							c6.rank = 0;
						}
						var o3 = i2;
						o3.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
						zpp_$nape_space_ZPP_$Island.zpp_pool = o3;
					}
				}
				b1.removedFromSpace();
				b1.space = null;
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.constraints.head;
			while(cx_ite1 != null) {
				var c7 = cx_ite1.elt;
				if(c7.component != null) {
					var i3 = c7.component.island;
					if(i3 != null) {
						while(!(i3.comps.head == null)) {
							var c8 = i3.comps.pop_unsafe();
							c8.sleeping = false;
							c8.island = null;
							c8.parent = c8;
							c8.rank = 0;
						}
						var o4 = i3;
						o4.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
						zpp_$nape_space_ZPP_$Island.zpp_pool = o4;
					}
				}
				c7.removedFromSpace();
				c7.space = null;
				cx_ite1 = cx_ite1.next;
			}
			var cx_ite2 = comp.compounds.head;
			while(cx_ite2 != null) {
				var i4 = cx_ite2.elt;
				stack.add(i4);
				cx_ite2 = cx_ite2.next;
			}
		}
		this.staticsleep.clear();
		this.live.clear();
		this.live_constraints.clear();
		this.stamp = 0;
		this.time = 0.0;
		this.mrca1.clear();
		this.mrca2.clear();
		this.prelisteners.clear();
		this.cbsets.clear();
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_bodies.remove(x);
			this.addBody(x.zpp_inner);
			return true;
		} else return false;
	}
	,bodies_subber: function(x) {
		this.remBody(x.zpp_inner);
	}
	,compounds_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_compounds.remove(x);
			this.addCompound(x.zpp_inner);
			return true;
		} else return false;
	}
	,compounds_subber: function(x) {
		this.remCompound(x.zpp_inner);
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(x);
			this.addConstraint(x.zpp_inner);
			return true;
		} else return false;
	}
	,constraints_subber: function(x) {
		this.remConstraint(x.zpp_inner);
	}
	,listeners_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(x);
			this.addListener(x.zpp_inner);
			return true;
		} else return false;
	}
	,listeners_subber: function(x) {
		this.remListener(x.zpp_inner);
	}
	,revoke_listener: function(x) {
	}
	,unrevoke_listener: function(x) {
	}
	,addListener: function(x) {
		x.space = this;
		x.addedToSpace();
		if(x.interaction != null) null;
	}
	,remListener: function(x) {
		if(x.interaction != null) null;
		x.removedFromSpace();
		x.space = null;
	}
	,add_callbackset: function(cb) {
		cb.int1.cbsets.inlined_add(cb);
		cb.int2.cbsets.inlined_add(cb);
		this.callbackset_list.inlined_add(cb);
	}
	,remove_callbackset: function(cb) {
		cb.lazydel = true;
		cb.int1.cbsets.inlined_try_remove(cb);
		cb.int2.cbsets.inlined_try_remove(cb);
	}
	,transmitType: function(p,new_type) {
		var o = p;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,false);
		}
		if(p.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.live.remove(p); else if(p.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) {
			this.kinematics.remove(p);
			this.staticsleep.remove(p);
		} else if(p.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) this.staticsleep.remove(p);
		p.type = new_type;
		if(p.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) this.kinematics.add(p);
		if(p.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) this.static_validation(p);
		p.component.sleeping = true;
		var o1 = p;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep?0:1);
			if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
			if(o1.component.sleeping) this.really_wake(o1,true);
		}
	}
	,added_shape: function(s,dontwake) {
		if(dontwake == null) dontwake = false;
		if(!dontwake) {
			var o = s.body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
		}
		this.bphase.insert(s);
		s.addedToSpace();
	}
	,removed_shape: function(s,deleting) {
		if(deleting == null) deleting = false;
		var _g = this;
		var body = s.body;
		if(!deleting) body.wake();
		var pre = null;
		var cx_ite = body.arbiters.head;
		while(cx_ite != null) {
			var xarb = [cx_ite.elt];
			var rem = xarb[0].ws1 == s || xarb[0].ws2 == s;
			if(rem) {
				if(xarb[0].present != 0) {
					this.MRCA_chains(xarb[0].ws1,xarb[0].ws2);
					var cx_ite1 = this.mrca1.head;
					while(cx_ite1 != null) {
						var i1 = cx_ite1.elt;
						var cx_ite2 = this.mrca2.head;
						while(cx_ite2 != null) {
							var i2 = cx_ite2.elt;
							var cb1 = i1.cbSet;
							var cb2 = i2.cbSet;
							cb1.validate();
							cb2.validate();
							if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
								cx_ite2 = cx_ite2.next;
								continue;
							}
							var callbackset = [zpp_$nape_phys_ZPP_$Interactor.get(i1,i2)];
							callbackset[0].remove_arb(xarb[0]);
							xarb[0].present--;
							cb1.manager.pair(cb1,cb2).forall(zpp_$nape_util_ZPP_$Flags.id_CbEvent_END,(function(callbackset,xarb) {
								return function(listener) {
									if((listener.itype & xarb[0].type) != 0 && callbackset[0].empty_arb(listener.itype)) {
										var cb = _g.push_callback(listener);
										cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_END;
										zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset[0],listener,cb);
										cb.set = callbackset[0];
									}
								};
							})(callbackset,xarb));
							if(callbackset[0].arbiters.head == null) this.remove_callbackset(callbackset[0]);
							cx_ite2 = cx_ite2.next;
						}
						cx_ite1 = cx_ite1.next;
					}
				}
				if(xarb[0].b1 != body && xarb[0].b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
					var o = xarb[0].b1;
					if(!o.world) {
						o.component.waket = this.stamp + (this.midstep?0:1);
						if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
						if(o.component.sleeping) this.really_wake(o,false);
					}
				}
				if(xarb[0].b2 != body && xarb[0].b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
					var o1 = xarb[0].b2;
					if(!o1.world) {
						o1.component.waket = this.stamp + (this.midstep?0:1);
						if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
						if(o1.component.sleeping) this.really_wake(o1,false);
					}
				}
				xarb[0].cleared = true;
				if(body == null || xarb[0].b2 == body) xarb[0].b1.arbiters.inlined_try_remove(xarb[0]);
				if(body == null || xarb[0].b1 == body) xarb[0].b2.arbiters.inlined_try_remove(xarb[0]);
				if(xarb[0].pair != null) {
					xarb[0].pair.arb = null;
					xarb[0].pair = null;
				}
				xarb[0].active = false;
				this.f_arbiters.modified = true;
				cx_ite = body.arbiters.erase(pre);
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bphase.remove(s);
		s.removedFromSpace();
	}
	,addConstraint: function(con) {
		con.space = this;
		con.addedToSpace();
		if(con.active) {
			con.component.sleeping = true;
			this.wake_constraint(con,true);
		}
	}
	,remConstraint: function(con) {
		if(con.active) {
			this.wake_constraint(con,true);
			this.live_constraints.remove(con);
		}
		con.removedFromSpace();
		con.space = null;
	}
	,addCompound: function(x) {
		x.space = this;
		x.addedToSpace();
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.addBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			this.addConstraint(i1);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i2 = cx_ite2.elt;
			this.addCompound(i2);
			cx_ite2 = cx_ite2.next;
		}
	}
	,remCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.remBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elt;
			this.remConstraint(i1);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i2 = cx_ite2.elt;
			this.remCompound(i2);
			cx_ite2 = cx_ite2.next;
		}
		x.removedFromSpace();
		x.space = null;
	}
	,addBody: function(body,flag) {
		if(flag == null) flag = -1;
		body.space = this;
		body.addedToSpace();
		body.component.sleeping = true;
		var o = body;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,true);
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.added_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		if(body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) {
			this.static_validation(body);
		} else if(body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
		} else {
			if(flag != zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) this.kinematics.add(body);
		}
	}
	,remBody: function(body,flag) {
		if(flag == null) flag = -1;
		if(body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) {
			var o = body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,true);
			}
			this.staticsleep.remove(body);
		} else if(body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
			var o1 = body;
			if(!o1.world) {
				o1.component.waket = this.stamp + (this.midstep?0:1);
				if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
				if(o1.component.sleeping) this.really_wake(o1,true);
			}
			this.live.remove(body);
		} else {
			if(flag != zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) this.kinematics.remove(body);
			var o2 = body;
			if(!o2.world) {
				o2.component.waket = this.stamp + (this.midstep?0:1);
				if(o2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
				if(o2.component.sleeping) this.really_wake(o2,true);
			}
			this.staticsleep.remove(body);
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.removed_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		body.removedFromSpace();
		body.space = null;
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		return this.bphase.shapesUnderPoint(x,y,filter,output);
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		return this.bphase.bodiesUnderPoint(x,y,filter,output);
	}
	,shapesInAABB: function(aabb,strict,cont,filter,output) {
		return this.bphase.shapesInAABB(aabb.zpp_inner,strict,cont,filter,output);
	}
	,bodiesInAABB: function(aabb,strict,cont,filter,output) {
		return this.bphase.bodiesInAABB(aabb.zpp_inner,strict,cont,filter,output);
	}
	,shapesInCircle: function(pos,rad,cont,filter,output) {
		return this.bphase.shapesInCircle((function($this) {
			var $r;
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)),rad,cont,filter,output);
	}
	,bodiesInCircle: function(pos,rad,cont,filter,output) {
		return this.bphase.bodiesInCircle((function($this) {
			var $r;
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)),rad,cont,filter,output);
	}
	,shapesInShape: function(shape,cont,filter,output) {
		return this.bphase.shapesInShape(shape,cont,filter,output);
	}
	,bodiesInShape: function(shape,cont,filter,output) {
		return this.bphase.bodiesInShape(shape,cont,filter,output);
	}
	,rayCast: function(ray,inner,filter) {
		return this.bphase.rayCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner);
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		return this.bphase.rayMultiCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner,output);
	}
	,convexShapeList: null
	,convexCast: function(shape,deltaTime,filter,dynamics) {
		var toi;
		if(zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool == null) toi = new zpp_$nape_geom_ZPP_$ToiEvent(); else {
			toi = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi.next;
			toi.next = null;
		}
		toi.failed = false;
		toi.s1 = toi.s2 = null;
		toi.arbiter = null;
		if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.validate_worldCOM(); else shape.polygon.validate_gaxi();
		var body = shape.body;
		var prex = body.posx;
		var prey = body.posy;
		body.sweepTime = 0;
		body.sweep_angvel = body.angvel;
		body.sweepIntegrate(deltaTime);
		var postx = body.posx;
		var posty = body.posy;
		shape.validate_sweepRadius();
		var rad = shape.sweepRadius;
		var aabb;
		if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) aabb = new zpp_$nape_geom_ZPP_$AABB(); else {
			aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = aabb.next;
			aabb.next = null;
		}
		null;
		aabb.minx = (function($this) {
			var $r;
			var x = prex;
			var y = postx;
			$r = x < y?x:y;
			return $r;
		}(this)) - rad;
		aabb.maxx = (function($this) {
			var $r;
			var x1 = prex;
			var y1 = postx;
			$r = x1 > y1?x1:y1;
			return $r;
		}(this)) + rad;
		aabb.miny = (function($this) {
			var $r;
			var x2 = prey;
			var y2 = posty;
			$r = x2 < y2?x2:y2;
			return $r;
		}(this)) - rad;
		aabb.maxy = (function($this) {
			var $r;
			var x3 = prey;
			var y3 = posty;
			$r = x3 > y3?x3:y3;
			return $r;
		}(this)) + rad;
		var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
		var o = aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
		var minAxisx = 0.0;
		var minAxisy = 0.0;
		minAxisx = 0;
		minAxisy = 0;
		var minPosx = 0.0;
		var minPosy = 0.0;
		minPosx = 0;
		minPosy = 0;
		var mins = null;
		var mint = deltaTime + 1;
		var _g;
		list.zpp_inner.valmod();
		_g = nape_shape_ShapeIterator.get(list);
		while(_g.hasNext()) {
			var s;
			_g.zpp_critical = false;
			s = _g.zpp_inner.at(_g.zpp_i++);
			if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
				toi.s1 = shape;
				toi.s2 = s.zpp_inner;
				if(dynamics) {
					s.zpp_inner.validate_sweepRadius();
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
					zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepIntegrate(0);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepValidate(s.zpp_inner);
				} else zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,deltaTime,0,0);
				toi.toi *= deltaTime;
				if(toi.toi > 0 && toi.toi < mint) {
					mint = toi.toi;
					minAxisx = toi.axis.x;
					minAxisy = toi.axis.y;
					minPosx = toi.c2.x;
					minPosy = toi.c2.y;
					mins = s;
				}
			}
		}
		list.clear();
		var o1 = toi;
		o1.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o1;
		body.sweepIntegrate(0);
		body.sweepValidate(shape);
		if(mint <= deltaTime) return zpp_$nape_geom_ZPP_$ConvexRayResult.getConvex(nape_geom_Vec2.get(-minAxisx,-minAxisy,null),nape_geom_Vec2.get(minPosx,minPosy,null),mint,mins); else return null;
	}
	,prepareCast: function(s) {
		if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.circle.validate_worldCOM(); else s.polygon.validate_gaxi();
	}
	,convexMultiCast: function(shape,deltaTime,filter,dynamics,output) {
		var toi;
		if(zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool == null) toi = new zpp_$nape_geom_ZPP_$ToiEvent(); else {
			toi = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi.next;
			toi.next = null;
		}
		toi.failed = false;
		toi.s1 = toi.s2 = null;
		toi.arbiter = null;
		if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.validate_worldCOM(); else shape.polygon.validate_gaxi();
		var body = shape.body;
		var prex = body.posx;
		var prey = body.posy;
		body.sweepTime = 0;
		body.sweep_angvel = body.angvel;
		body.sweepIntegrate(deltaTime);
		var postx = body.posx;
		var posty = body.posy;
		shape.validate_sweepRadius();
		var rad = shape.sweepRadius;
		var aabb;
		if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) aabb = new zpp_$nape_geom_ZPP_$AABB(); else {
			aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = aabb.next;
			aabb.next = null;
		}
		null;
		aabb.minx = (function($this) {
			var $r;
			var x = prex;
			var y = postx;
			$r = x < y?x:y;
			return $r;
		}(this)) - rad;
		aabb.maxx = (function($this) {
			var $r;
			var x1 = prex;
			var y1 = postx;
			$r = x1 > y1?x1:y1;
			return $r;
		}(this)) + rad;
		aabb.miny = (function($this) {
			var $r;
			var x2 = prey;
			var y2 = posty;
			$r = x2 < y2?x2:y2;
			return $r;
		}(this)) - rad;
		aabb.maxy = (function($this) {
			var $r;
			var x3 = prey;
			var y3 = posty;
			$r = x3 > y3?x3:y3;
			return $r;
		}(this)) + rad;
		var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
		var o = aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
		var ret;
		if(output == null) ret = new nape_geom_ConvexResultList(); else ret = output;
		var _g;
		list.zpp_inner.valmod();
		_g = nape_shape_ShapeIterator.get(list);
		while(_g.hasNext()) {
			var s;
			_g.zpp_critical = false;
			s = _g.zpp_inner.at(_g.zpp_i++);
			if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
				toi.s1 = shape;
				toi.s2 = s.zpp_inner;
				if(dynamics) {
					s.zpp_inner.validate_sweepRadius();
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
					zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepIntegrate(0);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepValidate(s.zpp_inner);
				} else zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,deltaTime,0,0);
				toi.toi *= deltaTime;
				if(toi.toi > 0) {
					var res = zpp_$nape_geom_ZPP_$ConvexRayResult.getConvex(nape_geom_Vec2.get(-toi.axis.x,-toi.axis.y,null),nape_geom_Vec2.get(toi.c2.x,toi.c2.y,null),toi.toi,s);
					var pre = null;
					var cx_ite = ret.zpp_inner.inner.head;
					while(cx_ite != null) {
						var j = cx_ite.elt;
						if(res.zpp_inner.toiDistance < j.zpp_inner.toiDistance) break;
						pre = cx_ite;
						cx_ite = cx_ite.next;
					}
					ret.zpp_inner.inner.inlined_insert(pre,res);
				}
			}
		}
		list.clear();
		var o1 = toi;
		o1.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o1;
		body.sweepIntegrate(0);
		body.sweepValidate(shape);
		return ret;
	}
	,push_callback: function(i) {
		var cb;
		if(zpp_$nape_callbacks_ZPP_$Callback.zpp_pool == null) cb = new zpp_$nape_callbacks_ZPP_$Callback(); else {
			cb = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool;
			zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = cb.next;
			cb.next = null;
		}
		null;
		this.callbacks.push(cb);
		cb.listener = i;
		return cb;
	}
	,pre_dt: null
	,step: function(deltaTime,velocityIterations,positionIterations) {
		var _g = this;
		this.time += deltaTime;
		this.pre_dt = deltaTime;
		this.midstep = true;
		this.stamp++;
		this.validation();
		this.bphase.broadphase(this,true);
		this.prestep(deltaTime);
		if(this.sortcontacts) {
			var xxlist = this.c_arbiters_false;
			if(!(xxlist.head == null) && xxlist.head.next != null) {
				var head = xxlist.head;
				var tail = null;
				var left = null;
				var right = null;
				var nxt = null;
				var listSize = 1;
				var numMerges;
				var leftSize;
				var rightSize;
				do {
					numMerges = 0;
					left = head;
					tail = head = null;
					while(left != null) {
						numMerges++;
						right = left;
						leftSize = 0;
						rightSize = listSize;
						while(right != null && leftSize < listSize) {
							leftSize++;
							right = right.next;
						}
						while(leftSize > 0 || rightSize > 0 && right != null) {
							if(leftSize == 0) {
								nxt = right;
								right = right.next;
								rightSize--;
							} else if(rightSize == 0 || right == null) {
								nxt = left;
								left = left.next;
								leftSize--;
							} else if(left.elt.active && right.elt.active?left.elt.oc1.dist < right.elt.oc1.dist:true) {
								nxt = left;
								left = left.next;
								leftSize--;
							} else {
								nxt = right;
								right = right.next;
								rightSize--;
							}
							if(tail != null) tail.next = nxt; else head = nxt;
							tail = nxt;
						}
						left = right;
					}
					tail.next = null;
					listSize <<= 1;
				} while(numMerges > 1);
				xxlist.head = head;
				xxlist.modified = true;
				xxlist.pushmod = true;
			}
		}
		this.updateVel(deltaTime);
		this.warmStart();
		this.iterateVel(velocityIterations);
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.live.head;
		while(cx_ite1 != null) {
			var cur1 = cx_ite1.elt;
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cx_ite1 = cx_ite1.next;
		}
		this.updatePos(deltaTime);
		this.continuous = true;
		this.continuousCollisions(deltaTime);
		this.continuous = false;
		this.iteratePos(positionIterations);
		var cx_ite2 = this.kinematics.head;
		while(cx_ite2 != null) {
			var cur2 = cx_ite2.elt;
			var upos = !(cur2.posx == cur2.pre_posx && cur2.posy == cur2.pre_posy);
			var urot = cur2.pre_rot != cur2.rot;
			if(upos) cur2.invalidate_pos();
			if(urot) cur2.invalidate_rot();
			cx_ite2 = cx_ite2.next;
		}
		var cx_ite3 = this.live.head;
		while(cx_ite3 != null) {
			var cur3 = cx_ite3.elt;
			var upos1 = !(cur3.posx == cur3.pre_posx && cur3.posy == cur3.pre_posy);
			var urot1 = cur3.pre_rot != cur3.rot;
			if(upos1) cur3.invalidate_pos();
			if(urot1) cur3.invalidate_rot();
			cx_ite3 = cx_ite3.next;
		}
		var pre = null;
		var cx_ite4 = this.staticsleep.head;
		while(cx_ite4 != null) {
			var b = cx_ite4.elt;
			if(!(b.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) || b.velx == 0 && b.vely == 0 && b.angvel == 0) {
				if(b.kinematicDelaySleep) {
					b.kinematicDelaySleep = false;
					cx_ite4 = cx_ite4.next;
					continue;
				}
				b.component.sleeping = true;
				cx_ite4 = this.staticsleep.inlined_erase(pre);
				continue;
			}
			pre = cx_ite4;
			cx_ite4 = cx_ite4.next;
		}
		this.doForests(deltaTime);
		this.sleepArbiters();
		this.midstep = false;
		var pre1 = null;
		var cx_ite5 = this.callbackset_list.next;
		while(cx_ite5 != null) {
			var set = [cx_ite5];
			if(set[0].arbiters.head == null) {
				cx_ite5 = this.callbackset_list.inlined_erase(pre1);
				var o = set[0];
				o.int1 = o.int2 = null;
				o.id = o.di = -1;
				o.freed = true;
				null;
				o.next = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
				zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = o;
				continue;
			}
			var sleeping = [set[0].sleeping()];
			zpp_$nape_callbacks_ZPP_$CbSet.find_all(set[0].int1.cbSet,set[0].int2.cbSet,zpp_$nape_util_ZPP_$Flags.id_CbEvent_ONGOING,(function(sleeping,set) {
				return function(x) {
					if((!sleeping[0] || x.allowSleepingCallbacks) && !set[0].empty_arb(x.itype)) {
						var cb = _g.push_callback(x);
						cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_ONGOING;
						zpp_$nape_phys_ZPP_$Interactor.int_callback(set[0],x,cb);
						cb.set = set[0];
					}
				};
			})(sleeping,set));
			pre1 = cx_ite5;
			cx_ite5 = cx_ite5.next;
		}
		while(!this.callbacks.empty()) {
			var cb1 = this.callbacks.pop();
			if(cb1.listener.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_BODY) {
				var o1 = cb1.listener.body;
				o1.handler(cb1.wrapper_body());
			} else if(cb1.listener.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_CONSTRAINT) {
				var o2 = cb1.listener.constraint;
				o2.handler(cb1.wrapper_con());
			} else if(cb1.listener.type == zpp_$nape_util_ZPP_$Flags.id_ListenerType_INTERACTION) {
				var o3 = cb1.listener.interaction;
				o3.handleri(cb1.wrapper_int());
			}
			var o4 = cb1;
			o4.int1 = o4.int2 = null;
			o4.body = null;
			o4.constraint = null;
			o4.listener = null;
			if(o4.wrap_arbiters != null) o4.wrap_arbiters.zpp_inner.inner = null;
			o4.set = null;
			o4.next = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool;
			zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = o4;
		}
	}
	,toiEvents: null
	,continuousCollisions: function(deltaTime) {
		var MAX_VEL = 2 * Math.PI / deltaTime;
		this.bphase.broadphase(this,false);
		var curTimeAlpha = 0.0;
		while(curTimeAlpha < 1 && !(this.toiEvents.head == null)) {
			var minTOI = null;
			var minTime = 2.0;
			var minKinematic = false;
			var preMin = null;
			var pre = null;
			var cx_ite = this.toiEvents.head;
			while(cx_ite != null) {
				var toi = cx_ite.elt;
				var b11 = toi.s1.body;
				var b21 = toi.s2.body;
				if(b11.sweepFrozen && b21.sweepFrozen) {
					if(toi.toi != 0 && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(toi.s1,toi.s2)) toi.toi = 0; else {
						cx_ite = this.toiEvents.erase(pre);
						var o = toi;
						o.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o;
						continue;
					}
				}
				if(toi.frozen1 != b11.sweepFrozen || toi.frozen2 != b21.sweepFrozen) {
					if(!toi.kinematic) {
						toi.frozen1 = b11.sweepFrozen;
						toi.frozen2 = b21.sweepFrozen;
						if(toi.frozen1) {
							var tmp = toi.s1;
							toi.s1 = toi.s2;
							toi.s2 = tmp;
							toi.frozen1 = false;
							toi.frozen2 = true;
						}
						zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,deltaTime,0,nape_Config.collisionSlopCCD);
						if(toi.toi < 0) {
							cx_ite = this.toiEvents.erase(pre);
							var o1 = toi;
							o1.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o1;
							continue;
						}
					} else {
						cx_ite = this.toiEvents.erase(pre);
						var o2 = toi;
						o2.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o2;
						continue;
					}
				}
				if(toi.toi >= 0 && (toi.toi < minTime || !minKinematic && toi.kinematic)) {
					minTOI = toi;
					minTime = toi.toi;
					minKinematic = toi.kinematic;
					preMin = pre;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			if(minTOI == null) break;
			this.toiEvents.erase(preMin);
			curTimeAlpha = minTOI.toi;
			var b1 = minTOI.s1.body;
			var b2 = minTOI.s2.body;
			if(!b1.sweepFrozen) {
				b1.sweepIntegrate(curTimeAlpha * deltaTime);
				b1.sweepValidate(minTOI.s1);
			}
			if(!b2.sweepFrozen) {
				b2.sweepIntegrate(curTimeAlpha * deltaTime);
				b2.sweepValidate(minTOI.s2);
			}
			var wasnull = minTOI.arbiter == null;
			var arb = this.narrowPhase(minTOI.s1,minTOI.s2,true,minTOI.arbiter,true);
			if(arb == null) {
				if(minTOI.arbiter != null && minTOI.arbiter.pair != null) {
					minTOI.arbiter.pair.arb = null;
					minTOI.arbiter.pair = null;
				}
			} else if(!this.presteparb(arb,deltaTime,true)) {
				if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL && (arb.active && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0)) {
					arb.colarb.warmStart();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					b1.sweep_angvel = b1.angvel % MAX_VEL;
					b2.sweep_angvel = b2.angvel % MAX_VEL;
				}
			}
			if(arb != null && (arb.active && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) && arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				if(!b1.sweepFrozen && !(b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC)) {
					b1.sweepFrozen = true;
					if(minTOI.failed) b1.angvel = b1.sweep_angvel = 0; else if(minTOI.slipped) b1.angvel = b1.sweep_angvel *= nape_Config.angularCCDSlipScale; else b1.angvel = b1.sweep_angvel;
				}
				if(!b2.sweepFrozen && !(b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC)) {
					b2.sweepFrozen = true;
					if(minTOI.failed) b2.angvel = b2.sweep_angvel = 0; else if(minTOI.slipped) b2.angvel = b2.sweep_angvel *= nape_Config.angularCCDSlipScale; else b2.angvel = b2.sweep_angvel;
				}
			}
			var o3 = minTOI;
			o3.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o3;
		}
		while(!(this.toiEvents.head == null)) {
			var toi1 = this.toiEvents.pop_unsafe();
			var o4 = toi1;
			o4.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o4;
		}
		var cx_ite1 = this.kinematics.head;
		while(cx_ite1 != null) {
			var cur = cx_ite1.elt;
			cur.sweepIntegrate(deltaTime);
			cur.sweepTime = 0;
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.live.head;
		while(cx_ite2 != null) {
			var cur1 = cx_ite2.elt;
			if(!cur1.sweepFrozen) cur1.sweepIntegrate(deltaTime);
			cur1.sweepTime = 0;
			cx_ite2 = cx_ite2.next;
		}
	}
	,continuousEvent: function(s1,s2,stat,in_arb,_) {
		if(s1.body.sweepFrozen && s2.body.sweepFrozen) return in_arb;
		if(s1.body.disableCCD || s2.body.disableCCD) return in_arb;
		if(in_arb != null && in_arb.colarb == null || this.interactionType(s1,s2,s1.body,s2.body) <= 0) return in_arb;
		var b1 = s1.body;
		var b2 = s2.body;
		if(stat || b1.bullet || b2.bullet) {
			var toi;
			if(zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool == null) toi = new zpp_$nape_geom_ZPP_$ToiEvent(); else {
				toi = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
				zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi.next;
				toi.next = null;
			}
			toi.failed = false;
			toi.s1 = toi.s2 = null;
			toi.arbiter = null;
			var kin = b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC || b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC;
			if(stat && !kin) {
				if(!(s1.body.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC)) {
					toi.s2 = s1;
					toi.s1 = s2;
				} else {
					toi.s1 = s1;
					toi.s2 = s2;
				}
				toi.kinematic = false;
				zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
			} else {
				toi.s1 = s1;
				toi.s2 = s2;
				toi.kinematic = kin;
				if(toi.s1.body.sweepFrozen || toi.s2.body.sweepFrozen) {
					if(toi.s1.body.sweepFrozen) {
						var tmp = toi.s1;
						toi.s1 = toi.s2;
						toi.s2 = tmp;
						toi.frozen1 = false;
						toi.frozen2 = true;
					}
					zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
				} else zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
			}
			if(stat && toi.toi < 0 || toi.failed) {
				var o = toi;
				o.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
				zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o;
			} else {
				this.toiEvents.add(toi);
				toi.frozen1 = toi.s1.body.sweepFrozen;
				toi.frozen2 = toi.s2.body.sweepFrozen;
				if(in_arb != null) toi.arbiter = in_arb.colarb; else toi.arbiter = null;
			}
		}
		return in_arb;
	}
	,bodyCbWake: function(b) {
		if(b.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && b.cbSet != null) {
			if(this.midstep) {
				var cx_ite = b.cbSet.bodylisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE;
					cb.body = b;
					cx_ite = cx_ite.next;
				}
			} else b.component.woken = true;
		}
	}
	,bodyCbSleep: function(b) {
		if(b.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && b.cbSet != null) {
			var cx_ite = b.cbSet.bodylisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP;
				cb.body = b;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbWake: function(con) {
		if(con.cbSet != null) {
			if(this.midstep) {
				var cx_ite = con.cbSet.conlisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE;
					cb.constraint = con;
					cx_ite = cx_ite.next;
				}
			} else con.component.woken = true;
		}
	}
	,constraintCbSleep: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbBreak: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_BREAK) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_BREAK;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,nullListenerType: function(cb1,cb2) {
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				stack.add(i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(stack.head == null)) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.head;
				while(cx_ite2 != null) {
					var i2 = cx_ite2.elt;
					stack.add(i2);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.head;
				while(cx_ite3 != null) {
					var i3 = cx_ite3.elt;
					stack.add(i3);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xbody;
				if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
				var xshp;
				if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
				var cx_ite4 = xbody.arbiters.head;
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elt;
					if(xarb.present == 0) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.head;
					while(cx_ite5 != null) {
						var i11 = cx_ite5.elt;
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.head;
						while(cx_ite6 != null) {
							var i21 = cx_ite6.elt;
							if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i11,i21);
							if(callbackset != null) {
								while(!(callbackset.arbiters.head == null)) {
									var arb = callbackset.arbiters.pop_unsafe();
									arb.present--;
								}
								this.remove_callbackset(callbackset);
							}
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,nullInteractorType: function(intx,me) {
		if(me == null) me = intx;
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.nullInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.head;
			while(cx_ite1 != null) {
				var comp1 = cx_ite1.elt;
				this.nullInteractorType(comp1,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xbody;
			if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
			var xshp;
			if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
			var cx_ite2 = xbody.arbiters.head;
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elt;
				if(xarb.present == 0) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.head;
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elt;
					var cx_ite4 = this.mrca2.head;
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elt;
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
						if(callbackset != null) {
							xarb.present--;
							callbackset.remove_arb(xarb);
							if(callbackset.arbiters.head == null) this.remove_callbackset(callbackset);
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,freshListenerType: function(cb1,cb2) {
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.head;
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elt;
				stack.add(i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!(stack.head == null)) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.head;
				while(cx_ite2 != null) {
					var i2 = cx_ite2.elt;
					stack.add(i2);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.head;
				while(cx_ite3 != null) {
					var i3 = cx_ite3.elt;
					stack.add(i3);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xbody;
				if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
				var xshp;
				if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
				var cx_ite4 = xbody.arbiters.head;
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elt;
					if(!xarb.presentable) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.head;
					while(cx_ite5 != null) {
						var i11 = cx_ite5.elt;
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.head;
						while(cx_ite6 != null) {
							var i21 = cx_ite6.elt;
							if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i11,i21);
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i11,i21);
								this.add_callbackset(callbackset);
							}
							if(!callbackset.arbiters.inlined_has(xarb)?(function($this) {
								var $r;
								callbackset.arbiters.inlined_add(xarb);
								$r = true;
								return $r;
							}(this)):false) xarb.present++;
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,freshInteractorType: function(intx,me) {
		if(me == null) me = intx;
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.freshInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.head;
			while(cx_ite1 != null) {
				var comp1 = cx_ite1.elt;
				this.freshInteractorType(comp1,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xbody;
			if(intx.ibody != null) xbody = intx.ibody; else xbody = intx.ishape.body;
			var xshp;
			if(intx.ishape != null) xshp = intx.ishape; else xshp = null;
			var cx_ite2 = xbody.arbiters.head;
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elt;
				if(!xarb.presentable) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.head;
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elt;
					var cx_ite4 = this.mrca2.head;
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elt;
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						cb1.validate();
						cb2.validate();
						if(!cb1.manager.pair(cb1,cb2).empty_intersection()) {
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							if(!callbackset.arbiters.inlined_has(xarb)?(function($this) {
								var $r;
								callbackset.arbiters.inlined_add(xarb);
								$r = true;
								return $r;
							}(this)):false) xarb.present++;
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,wakeCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var y = cx_ite.elt;
			var o = y;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.head;
		while(cx_ite1 != null) {
			var i = cx_ite1.elt;
			this.wake_constraint(i);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.head;
		while(cx_ite2 != null) {
			var i1 = cx_ite2.elt;
			this.wakeCompound(i1);
			cx_ite2 = cx_ite2.next;
		}
	}
	,wakeIsland: function(i) {
		while(!(i.comps.head == null)) {
			var c = i.comps.pop_unsafe();
			c.waket = this.stamp + (this.midstep?0:1);
			if(c.isBody) {
				var b = c.body;
				this.live.add(b);
				var cx_ite = b.arbiters.head;
				while(cx_ite != null) {
					var arb = cx_ite.elt;
					if(arb.sleeping) {
						arb.sleeping = false;
						arb.up_stamp += this.stamp - arb.sleep_stamp;
						if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
							var carb = arb.colarb;
							if(carb.stat) this.c_arbiters_true.inlined_add(carb); else this.c_arbiters_false.inlined_add(carb);
						} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) this.f_arbiters.inlined_add(arb.fluidarb); else this.s_arbiters.inlined_add(arb.sensorarb);
					}
					cx_ite = cx_ite.next;
				}
				this.bodyCbWake(b);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
				if(!(b.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
					var cx_ite1 = b.shapes.head;
					while(cx_ite1 != null) {
						var shape = cx_ite1.elt;
						if(shape.node != null) this.bphase.sync(shape);
						cx_ite1 = cx_ite1.next;
					}
				}
			} else {
				var con = c.constraint;
				this.live_constraints.inlined_add(con);
				this.constraintCbWake(con);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
			}
		}
		var o = i;
		o.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
		zpp_$nape_space_ZPP_$Island.zpp_pool = o;
	}
	,non_inlined_wake: function(o,fst) {
		if(fst == null) fst = false;
		var o1 = o;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep?0:1);
			if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
			if(o1.component.sleeping) this.really_wake(o1,fst);
		}
	}
	,really_wake: function(o,fst) {
		if(fst == null) fst = false;
		if(o.component.island == null) {
			o.component.sleeping = false;
			if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC || o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) this.staticsleep.inlined_add(o); else this.live.inlined_add(o);
			var cx_ite = o.constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(con.space == this) this.wake_constraint(con);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = o.arbiters.head;
			while(cx_ite1 != null) {
				var arb = cx_ite1.elt;
				if(arb.sleeping) {
					arb.sleeping = false;
					arb.up_stamp += this.stamp + (this.midstep?0:1) - arb.sleep_stamp;
					if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
						var carb = arb.colarb;
						if(carb.stat) this.c_arbiters_true.inlined_add(carb); else this.c_arbiters_false.inlined_add(carb);
					} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) this.f_arbiters.inlined_add(arb.fluidarb); else this.s_arbiters.inlined_add(arb.sensorarb);
				}
				if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR && !arb.cleared && arb.up_stamp >= this.stamp && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) {
					if(arb.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb.b1.component.sleeping) {
						var o1 = arb.b1;
						if(!o1.world) {
							o1.component.waket = this.stamp + (this.midstep?0:1);
							if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
							if(o1.component.sleeping) this.really_wake(o1,false);
						}
					}
					if(arb.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb.b2.component.sleeping) {
						var o2 = arb.b2;
						if(!o2.world) {
							o2.component.waket = this.stamp + (this.midstep?0:1);
							if(o2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
							if(o2.component.sleeping) this.really_wake(o2,false);
						}
					}
				}
				cx_ite1 = cx_ite1.next;
			}
			if(!fst && o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) this.bodyCbWake(o);
			if(!fst && !this.bphase.is_sweep && !(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
				var cx_ite2 = o.shapes.head;
				while(cx_ite2 != null) {
					var shape = cx_ite2.elt;
					if(shape.node != null) this.bphase.sync(shape);
					cx_ite2 = cx_ite2.next;
				}
			}
		} else this.wakeIsland(o.component.island);
	}
	,wake_constraint: function(con,fst) {
		if(fst == null) fst = false;
		if(con.active) {
			con.component.waket = this.stamp + (this.midstep?0:1);
			if(con.component.sleeping) {
				if(con.component.island == null) {
					con.component.sleeping = false;
					this.live_constraints.inlined_add(con);
					con.wake_connected();
					if(!fst) this.constraintCbWake(con);
				} else this.wakeIsland(con.component.island);
				return true;
			} else return false;
		} else return false;
	}
	,doForests: function(dt) {
		var cx_ite = this.c_arbiters_false.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(!arb.cleared && arb.up_stamp == this.stamp && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) {
				if(arb.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
					var xr;
					if(arb.b1.component == arb.b1.component.parent) xr = arb.b1.component; else {
						var obj = arb.b1.component;
						var stack = null;
						while(obj != obj.parent) {
							var nxt = obj.parent;
							obj.parent = stack;
							stack = obj;
							obj = nxt;
						}
						while(stack != null) {
							var nxt1 = stack.parent;
							stack.parent = obj;
							stack = nxt1;
						}
						xr = obj;
					}
					var yr;
					if(arb.b2.component == arb.b2.component.parent) yr = arb.b2.component; else {
						var obj1 = arb.b2.component;
						var stack1 = null;
						while(obj1 != obj1.parent) {
							var nxt2 = obj1.parent;
							obj1.parent = stack1;
							stack1 = obj1;
							obj1 = nxt2;
						}
						while(stack1 != null) {
							var nxt3 = stack1.parent;
							stack1.parent = obj1;
							stack1 = nxt3;
						}
						yr = obj1;
					}
					if(xr != yr) {
						if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
							yr.parent = xr;
							xr.rank++;
						}
					}
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.f_arbiters.head;
		while(cx_ite1 != null) {
			var arb1 = cx_ite1.elt;
			if(!arb1.cleared && arb1.up_stamp == this.stamp && (arb1.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) {
				if(arb1.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb1.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
					var xr1;
					if(arb1.b1.component == arb1.b1.component.parent) xr1 = arb1.b1.component; else {
						var obj2 = arb1.b1.component;
						var stack2 = null;
						while(obj2 != obj2.parent) {
							var nxt4 = obj2.parent;
							obj2.parent = stack2;
							stack2 = obj2;
							obj2 = nxt4;
						}
						while(stack2 != null) {
							var nxt5 = stack2.parent;
							stack2.parent = obj2;
							stack2 = nxt5;
						}
						xr1 = obj2;
					}
					var yr1;
					if(arb1.b2.component == arb1.b2.component.parent) yr1 = arb1.b2.component; else {
						var obj3 = arb1.b2.component;
						var stack3 = null;
						while(obj3 != obj3.parent) {
							var nxt6 = obj3.parent;
							obj3.parent = stack3;
							stack3 = obj3;
							obj3 = nxt6;
						}
						while(stack3 != null) {
							var nxt7 = stack3.parent;
							stack3.parent = obj3;
							stack3 = nxt7;
						}
						yr1 = obj3;
					}
					if(xr1 != yr1) {
						if(xr1.rank < yr1.rank) xr1.parent = yr1; else if(xr1.rank > yr1.rank) yr1.parent = xr1; else {
							yr1.parent = xr1;
							xr1.rank++;
						}
					}
				}
			}
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.live_constraints.head;
		while(cx_ite2 != null) {
			var con = cx_ite2.elt;
			con.forest();
			cx_ite2 = cx_ite2.next;
		}
		while(!(this.live.head == null)) {
			var o = this.live.inlined_pop_unsafe();
			var oc = o.component;
			var root;
			if(oc == oc.parent) root = oc; else {
				var obj4 = oc;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				root = obj4;
			}
			if(root.island == null) {
				if(zpp_$nape_space_ZPP_$Island.zpp_pool == null) root.island = new zpp_$nape_space_ZPP_$Island(); else {
					root.island = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = root.island.next;
					root.island.next = null;
				}
				root.island.waket = 0;
				this.islands.inlined_add(root.island);
				root.island.sleep = true;
			}
			oc.island = root.island;
			oc.island.comps.inlined_add(oc);
			var rest = o.atRest(dt);
			oc.island.sleep = oc.island.sleep && rest;
			if(oc.waket > oc.island.waket) oc.island.waket = oc.waket;
		}
		while(!(this.live_constraints.head == null)) {
			var o1 = this.live_constraints.inlined_pop_unsafe();
			var oc1 = o1.component;
			var root1;
			if(oc1 == oc1.parent) root1 = oc1; else {
				var obj5 = oc1;
				var stack5 = null;
				while(obj5 != obj5.parent) {
					var nxt10 = obj5.parent;
					obj5.parent = stack5;
					stack5 = obj5;
					obj5 = nxt10;
				}
				while(stack5 != null) {
					var nxt11 = stack5.parent;
					stack5.parent = obj5;
					stack5 = nxt11;
				}
				root1 = obj5;
			}
			oc1.island = root1.island;
			oc1.island.comps.inlined_add(oc1);
			if(oc1.waket > oc1.island.waket) oc1.island.waket = oc1.waket;
		}
		while(!(this.islands.next == null)) {
			var i = this.islands.inlined_pop_unsafe();
			if(i.sleep) {
				var cx_ite3 = i.comps.head;
				while(cx_ite3 != null) {
					var c = cx_ite3.elt;
					if(c.isBody) {
						var b = c.body;
						b.velx = 0;
						b.vely = 0;
						b.angvel = 0;
						c.sleeping = true;
						var cx_ite4 = b.shapes.head;
						while(cx_ite4 != null) {
							var shape = cx_ite4.elt;
							this.bphase.sync(shape);
							cx_ite4 = cx_ite4.next;
						}
						this.bodyCbSleep(b);
					} else {
						var con1 = c.constraint;
						this.constraintCbSleep(con1);
						c.sleeping = true;
					}
					cx_ite3 = cx_ite3.next;
				}
			} else {
				while(!(i.comps.head == null)) {
					var c1 = i.comps.inlined_pop_unsafe();
					c1.waket = i.waket;
					if(c1.isBody) this.live.inlined_add(c1.body); else this.live_constraints.inlined_add(c1.constraint);
					c1.sleeping = false;
					c1.island = null;
					c1.parent = c1;
					c1.rank = 0;
				}
				var o2 = i;
				o2.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
				zpp_$nape_space_ZPP_$Island.zpp_pool = o2;
			}
		}
	}
	,sleepArbiters: function() {
		var pre = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
				arb.sleep_stamp = this.stamp;
				arb.sleeping = true;
				arbite = arbs.inlined_erase(pre);
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre = null;
			}
		}
		var pre1 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.head;
		var fst1 = false;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbs1 = null;
			pre1 = null;
		}
		while(arbite1 != null) {
			var arb1 = arbite1.elt;
			if(arb1.b1.component.sleeping && arb1.b2.component.sleeping) {
				arb1.sleep_stamp = this.stamp;
				arb1.sleeping = true;
				arbite1 = arbs1.inlined_erase(pre1);
				if(fst1 && arbite1 == null) {
					fst1 = false;
					arbs1 = null;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite1;
			arbite1 = arbite1.next;
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbs1 = null;
				pre1 = null;
			}
		}
		var pre2 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.head;
		var fst2 = false;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbs2 = null;
			pre2 = null;
		}
		while(arbite2 != null) {
			var arb2 = arbite2.elt;
			if(arb2.b1.component.sleeping && arb2.b2.component.sleeping) {
				arb2.sleep_stamp = this.stamp;
				arb2.sleeping = true;
				arbite2 = arbs2.inlined_erase(pre2);
				if(fst2 && arbite2 == null) {
					fst2 = false;
					arbs2 = null;
					pre2 = null;
				}
				continue;
			}
			pre2 = arbite2;
			arbite2 = arbite2.next;
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbs2 = null;
				pre2 = null;
			}
		}
	}
	,static_validation: function(body) {
		if(!(body.shapes.head == null)) body.validate_aabb();
		body.validate_mass();
		body.validate_inertia();
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
				s.polygon.splice_collinear();
				s.polygon.validate_gaxi();
			}
			cx_ite = cx_ite.next;
		}
		body.sweepFrozen = true;
	}
	,validation: function() {
		this.cbsets.validate();
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.sweepRadius = 0;
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var s = cx_ite1.elt;
				if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
					s.polygon.splice_collinear();
					s.polygon.validate_gaxi();
				}
				s.validate_sweepRadius();
				if(s.sweepRadius > cur.sweepRadius) cur.sweepRadius = s.sweepRadius;
				cx_ite1 = cx_ite1.next;
			}
			cur.validate_mass();
			cur.validate_inertia();
			if(!(cur.shapes.head == null)) {
				cur.validate_aabb();
				cur.validate_worldCOM();
			}
			cur.validate_gravMass();
			if(cur.zip_axis) {
				cur.zip_axis = false;
				cur.axisx = Math.sin(cur.rot);
				cur.axisy = Math.cos(cur.rot);
				null;
			}
			if(cur.component.woken && cur.cbSet != null) {
				var cx_ite2 = cur.cbSet.bodylisteners.head;
				while(cx_ite2 != null) {
					var i = cx_ite2.elt;
					if(i.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE) {
						cx_ite2 = cx_ite2.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE;
					cb.body = cur;
					cx_ite2 = cx_ite2.next;
				}
			}
			cur.component.woken = false;
			var cx_ite3 = cur.shapes.head;
			while(cx_ite3 != null) {
				var shape = cx_ite3.elt;
				this.bphase.sync(shape);
				cx_ite3 = cx_ite3.next;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite4 = this.kinematics.head;
		while(cx_ite4 != null) {
			var cur1 = cx_ite4.elt;
			cur1.sweepRadius = 0;
			var cx_ite5 = cur1.shapes.head;
			while(cx_ite5 != null) {
				var s1 = cx_ite5.elt;
				if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) {
					s1.polygon.splice_collinear();
					s1.polygon.validate_gaxi();
				}
				s1.validate_sweepRadius();
				if(s1.sweepRadius > cur1.sweepRadius) cur1.sweepRadius = s1.sweepRadius;
				cx_ite5 = cx_ite5.next;
			}
			cur1.validate_mass();
			cur1.validate_inertia();
			if(!(cur1.shapes.head == null)) {
				cur1.validate_aabb();
				cur1.validate_worldCOM();
			}
			cur1.validate_gravMass();
			if(cur1.zip_axis) {
				cur1.zip_axis = false;
				cur1.axisx = Math.sin(cur1.rot);
				cur1.axisy = Math.cos(cur1.rot);
				null;
			}
			var cx_ite6 = cur1.shapes.head;
			while(cx_ite6 != null) {
				var shape1 = cx_ite6.elt;
				this.bphase.sync(shape1);
				cx_ite6 = cx_ite6.next;
			}
			cx_ite4 = cx_ite4.next;
		}
		var cx_ite7 = this.live_constraints.head;
		while(cx_ite7 != null) {
			var con = cx_ite7.elt;
			if(con.active) {
				if(con.component.woken && con.cbSet != null) {
					var cx_ite8 = con.cbSet.conlisteners.head;
					while(cx_ite8 != null) {
						var i1 = cx_ite8.elt;
						if(i1.event != zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE) {
							cx_ite8 = cx_ite8.next;
							continue;
						}
						var cb1 = this.push_callback(i1);
						cb1.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE;
						cb1.constraint = con;
						cx_ite8 = cx_ite8.next;
					}
				}
				con.component.woken = false;
			}
			cx_ite7 = cx_ite7.next;
		}
	}
	,updateVel: function(dt) {
		var pre = null;
		var linDrag = 1 - dt * this.global_lin_drag;
		var angDrag = 1 - dt * this.global_ang_drag;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			if(cur.smass != 0.0) {
				var time = dt * cur.imass;
				cur.velx = linDrag * cur.velx + (cur.forcex + this.gravityx * cur.gravMass) * time;
				cur.vely = linDrag * cur.vely + (cur.forcey + this.gravityy * cur.gravMass) * time;
			}
			if(cur.sinertia != 0.0) {
				var dpx = 0.0;
				var dpy = 0.0;
				dpx = cur.worldCOMx - cur.posx;
				dpy = cur.worldCOMy - cur.posy;
				var torque = cur.torque + (this.gravityy * dpx - this.gravityx * dpy) * cur.gravMass;
				cur.angvel = angDrag * cur.angvel + torque * dt * cur.iinertia;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
	}
	,updatePos: function(dt) {
		var MAX_VEL = 2 * Math.PI / dt;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cur.sweepTime = 0;
			cur.sweep_angvel = cur.angvel % MAX_VEL;
			cur.sweepIntegrate(dt);
			if(!cur.disableCCD) {
				var linThreshold = nape_Config.staticCCDLinearThreshold * cur.sweepRadius;
				var angThreshold = nape_Config.staticCCDAngularThreshold;
				if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold * linThreshold || cur.angvel * cur.angvel * dt * dt > angThreshold * angThreshold || cur.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) {
					var angvel = cur.sweep_angvel;
					if(angvel < 0) angvel = -angvel;
					var iangvel = 1 / angvel;
					var cx_ite1 = cur.shapes.head;
					while(cx_ite1 != null) {
						var s = cx_ite1.elt;
						var aabb = s.aabb;
						var minx = aabb.minx;
						var miny = aabb.miny;
						var maxx = aabb.maxx;
						var maxy = aabb.maxy;
						var count = angvel * dt * s.sweepCoef * 0.0083333333333333332 | 0;
						if(count > 8) count = 8;
						var anginc = angvel * dt / count;
						cur.sweepIntegrate(dt);
						if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
						if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
						if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
						if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
						if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
						var _g = 1;
						while(_g < count) {
							var i = _g++;
							cur.sweepIntegrate(anginc * i * iangvel);
							if(s.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
							if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
							if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
							if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
							if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
						}
						this.bphase.sync(s);
						cx_ite1 = cx_ite1.next;
					}
					cur.sweepFrozen = false;
					if(cur.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && cur.bulletEnabled) {
						var linThreshold2 = nape_Config.bulletCCDLinearThreshold * cur.sweepRadius;
						var angThreshold2 = nape_Config.bulletCCDAngularThreshold;
						if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold2 * linThreshold2 || cur.angvel * cur.angvel * dt * dt > angThreshold2 * angThreshold2) cur.bullet = true;
					}
				} else {
					cur.sweepFrozen = true;
					cur.bullet = false;
				}
			} else {
				cur.sweepFrozen = true;
				cur.bullet = false;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite2 = this.kinematics.head;
		while(cx_ite2 != null) {
			var cur1 = cx_ite2.elt;
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cur1.sweepTime = 0;
			cur1.sweep_angvel = cur1.angvel % MAX_VEL;
			cur1.sweepIntegrate(dt);
			if(!cur1.disableCCD) {
				var linThreshold1 = nape_Config.staticCCDLinearThreshold * cur1.sweepRadius;
				var angThreshold1 = nape_Config.staticCCDAngularThreshold;
				if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold1 * linThreshold1 || cur1.angvel * cur1.angvel * dt * dt > angThreshold1 * angThreshold1 || cur1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) {
					var angvel1 = cur1.sweep_angvel;
					if(angvel1 < 0) angvel1 = -angvel1;
					var iangvel1 = 1 / angvel1;
					var cx_ite3 = cur1.shapes.head;
					while(cx_ite3 != null) {
						var s1 = cx_ite3.elt;
						var aabb1 = s1.aabb;
						var minx1 = aabb1.minx;
						var miny1 = aabb1.miny;
						var maxx1 = aabb1.maxx;
						var maxy1 = aabb1.maxy;
						var count1 = angvel1 * dt * s1.sweepCoef * 0.0083333333333333332 | 0;
						if(count1 > 8) count1 = 8;
						var anginc1 = angvel1 * dt / count1;
						cur1.sweepIntegrate(dt);
						if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s1.circle._force_validate_aabb(); else s1.polygon._force_validate_aabb();
						if(minx1 < aabb1.minx) aabb1.minx = minx1; else minx1 = aabb1.minx;
						if(miny1 < aabb1.miny) aabb1.miny = miny1; else miny1 = aabb1.miny;
						if(maxx1 > aabb1.maxx) aabb1.maxx = maxx1; else maxx1 = aabb1.maxx;
						if(maxy1 > aabb1.maxy) aabb1.maxy = maxy1; else maxy1 = aabb1.maxy;
						var _g1 = 1;
						while(_g1 < count1) {
							var i1 = _g1++;
							cur1.sweepIntegrate(anginc1 * i1 * iangvel1);
							if(s1.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) s1.circle._force_validate_aabb(); else s1.polygon._force_validate_aabb();
							if(minx1 < aabb1.minx) aabb1.minx = minx1; else minx1 = aabb1.minx;
							if(miny1 < aabb1.miny) aabb1.miny = miny1; else miny1 = aabb1.miny;
							if(maxx1 > aabb1.maxx) aabb1.maxx = maxx1; else maxx1 = aabb1.maxx;
							if(maxy1 > aabb1.maxy) aabb1.maxy = maxy1; else maxy1 = aabb1.maxy;
						}
						this.bphase.sync(s1);
						cx_ite3 = cx_ite3.next;
					}
					cur1.sweepFrozen = false;
					if(cur1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && cur1.bulletEnabled) {
						var linThreshold21 = nape_Config.bulletCCDLinearThreshold * cur1.sweepRadius;
						var angThreshold21 = nape_Config.bulletCCDAngularThreshold;
						if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold21 * linThreshold21 || cur1.angvel * cur1.angvel * dt * dt > angThreshold21 * angThreshold21) cur1.bullet = true;
					}
				} else {
					cur1.sweepFrozen = true;
					cur1.bullet = false;
				}
			} else {
				cur1.sweepFrozen = true;
				cur1.bullet = false;
			}
			cx_ite2 = cx_ite2.next;
		}
	}
	,continuous: null
	,presteparb: function(arb,dt,cont) {
		if(cont == null) cont = false;
		var _g = this;
		if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			return true;
		}
		if(!arb.cleared || arb.present != 0 || arb.intchange) {
			var endcb = !cont && arb.up_stamp == this.stamp - 1 && !arb.cleared && !arb.intchange;
			var begcb = arb.fresh && !arb.cleared && !arb.intchange;
			if(endcb) arb.endGenerated = this.stamp;
			if(begcb || endcb || arb.cleared || arb.intchange) {
				this.inlined_MRCA_chains(arb.ws1,arb.ws2);
				var cx_ite = this.mrca1.head;
				while(cx_ite != null) {
					var i1 = cx_ite.elt;
					var cx_ite1 = this.mrca2.head;
					while(cx_ite1 != null) {
						var i2 = cx_ite1.elt;
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
							cx_ite1 = cx_ite1.next;
							continue;
						}
						var callbackset = [zpp_$nape_phys_ZPP_$Interactor.get(i1,i2)];
						if(begcb || arb.intchange) {
							if(callbackset[0] == null) {
								callbackset[0] = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset[0]);
							}
							cb1.manager.pair(cb1,cb2).forall(zpp_$nape_util_ZPP_$Flags.id_CbEvent_BEGIN,(function(callbackset) {
								return function(listener) {
									if((listener.itype & arb.type) != 0 && callbackset[0].empty_arb(listener.itype)) {
										var cb = _g.push_callback(listener);
										cb.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_BEGIN;
										zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset[0],listener,cb);
										cb.set = callbackset[0];
									}
								};
							})(callbackset));
							if(!callbackset[0].arbiters.inlined_has(arb)?(function($this) {
								var $r;
								callbackset[0].arbiters.inlined_add(arb);
								$r = true;
								return $r;
							}(this)):false) arb.present++;
						} else {
							arb.present--;
							callbackset[0].remove_arb(arb);
							cb1.manager.pair(cb1,cb2).forall(zpp_$nape_util_ZPP_$Flags.id_CbEvent_END,(function(callbackset) {
								return function(listener1) {
									if((listener1.itype & arb.type) != 0 && callbackset[0].empty_arb(listener1.itype)) {
										var cb3 = _g.push_callback(listener1);
										cb3.event = zpp_$nape_util_ZPP_$Flags.id_CbEvent_END;
										zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset[0],listener1,cb3);
										cb3.set = callbackset[0];
									}
								};
							})(callbackset));
							if(callbackset[0].arbiters.head == null) this.remove_callbackset(callbackset[0]);
						}
						cx_ite1 = cx_ite1.next;
					}
					cx_ite = cx_ite.next;
				}
			}
			arb.fresh = false;
			arb.intchange = false;
		}
		if(arb.cleared || arb.up_stamp + (arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL?nape_Config.arbiterExpirationDelay:0) < this.stamp) {
			if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) arb.sensorarb.retire(); else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) arb.fluidarb.retire(); else arb.colarb.retire();
			return true;
		}
		var pact = arb.active;
		arb.active = arb.presentable = arb.up_stamp == this.stamp;
		if((arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) {
			if(arb.active && arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) {
				if(arb.colarb != null) {
					if(arb.colarb.preStep(dt)) arb.active = false;
				} else arb.fluidarb.preStep(this,dt);
			}
		} else if(arb.colarb != null) {
			if(arb.colarb.cleanupContacts()) arb.active = false;
		}
		if(pact != arb.active) {
			arb.b1.arbiters.modified = true;
			arb.b2.arbiters.modified = true;
			this.c_arbiters_true.modified = this.c_arbiters_false.modified = true;
			this.s_arbiters.modified = this.f_arbiters.modified = true;
		}
		return false;
	}
	,prestep: function(dt) {
		var pre = null;
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.preStep(dt)) {
				cx_ite = this.live_constraints.erase(pre);
				con.broken();
				this.constraintCbBreak(con);
				if(con.removeOnBreak) {
					con.component.sleeping = true;
					this.midstep = false;
					if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
					this.midstep = true;
				} else con.active = false;
				con.clearcache();
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var pre1 = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre1 = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(this.presteparb(arb,dt)) {
				arbite = arbs.inlined_erase(pre1);
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre1 = null;
			}
		}
		var pre2 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.head;
		var fst1 = false;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbs1 = null;
			pre2 = null;
		}
		while(arbite1 != null) {
			var arb1 = arbite1.elt;
			if(this.presteparb(arb1,dt)) {
				arbite1 = arbs1.inlined_erase(pre2);
				if(fst1 && arbite1 == null) {
					fst1 = false;
					arbs1 = null;
					pre2 = null;
				}
				continue;
			}
			pre2 = arbite1;
			arbite1 = arbite1.next;
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbs1 = null;
				pre2 = null;
			}
		}
		var pre3 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.head;
		var fst2 = false;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbs2 = null;
			pre3 = null;
		}
		while(arbite2 != null) {
			var arb2 = arbite2.elt;
			if(this.presteparb(arb2,dt)) {
				arbite2 = arbs2.inlined_erase(pre3);
				if(fst2 && arbite2 == null) {
					fst2 = false;
					arbs2 = null;
					pre3 = null;
				}
				continue;
			}
			pre3 = arbite2;
			arbite2 = arbite2.next;
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbs2 = null;
				pre3 = null;
			}
		}
	}
	,warmStart: function() {
		var cx_ite = this.f_arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) arb.warmStart();
			cx_ite = cx_ite.next;
		}
		var arbi = this.c_arbiters_false.head;
		var fst = true;
		if(arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
		while(arbi != null) {
			var arb1 = arbi.elt;
			if(arb1.active && (arb1.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) arb1.warmStart();
			arbi = arbi.next;
			if(fst && arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
		}
		var cx_ite1 = this.live_constraints.head;
		while(cx_ite1 != null) {
			var con = cx_ite1.elt;
			con.warmStart();
			cx_ite1 = cx_ite1.next;
		}
	}
	,iterateVel: function(times) {
		var _g = 0;
		while(_g < times) {
			var i = _g++;
			var cx_ite = this.f_arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if(arb.active && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) arb.applyImpulseVel();
				cx_ite = cx_ite.next;
			}
			var pre = null;
			var cx_ite1 = this.live_constraints.head;
			while(cx_ite1 != null) {
				var con = cx_ite1.elt;
				if(con.applyImpulseVel()) {
					cx_ite1 = this.live_constraints.erase(pre);
					con.broken();
					this.constraintCbBreak(con);
					if(con.removeOnBreak) {
						con.component.sleeping = true;
						this.midstep = false;
						if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
						this.midstep = true;
					} else con.active = false;
					con.clearcache();
					continue;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb1 = arbi.elt;
				if(arb1.active && (arb1.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) arb1.applyImpulseVel();
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,iteratePos: function(times) {
		var _g = 0;
		while(_g < times) {
			var i = _g++;
			var pre = null;
			var cx_ite = this.live_constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(!con.__velocity && con.stiff) {
					if(con.applyImpulsePos()) {
						cx_ite = this.live_constraints.erase(pre);
						con.broken();
						this.constraintCbBreak(con);
						if(con.removeOnBreak) {
							con.component.sleeping = true;
							this.midstep = false;
							if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
							this.midstep = true;
						} else con.active = false;
						con.clearcache();
						continue;
					}
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb = arbi.elt;
				if(arb.active && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) arb.applyImpulsePos();
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,group_ignore: function(s1,s2) {
		var g1 = s1.lookup_group();
		if(g1 == null) return false; else {
			var g2 = s2.lookup_group();
			if(g2 == null) return false; else {
				var ret = false;
				while(g1 != null && g2 != null) {
					if(g1 == g2) {
						ret = g1.ignore;
						break;
					}
					if(g1.depth < g2.depth) g2 = g2.group; else g1 = g1.group;
				}
				return ret;
			}
		}
	}
	,interactionType: function(s1,s2,b1,b2) {
		var con_ignore;
		con_ignore = false;
		var cx_ite = b1.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.ignore && con.pair_exists(b1.id,b2.id)) {
				con_ignore = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(!con_ignore && !this.group_ignore(s1,s2)) {
			if((s1.sensorEnabled || s2.sensorEnabled) && s1.filter.shouldSense(s2.filter)) return 2; else if((s1.fluidEnabled || s2.fluidEnabled) && s1.filter.shouldFlow(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) return 0; else if(s1.filter.shouldCollide(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) return 1; else return -1;
		} else return -1;
	}
	,precb: null
	,prelisteners: null
	,narrowPhase: function(s1,s2,stat,in_arb,continuous) {
		var _g = this;
		var ret = null;
		var b1 = s1.body;
		var b2 = s2.body;
		var itype = this.interactionType(s1,s2,b1,b2);
		if(itype != -1) {
			var sa;
			var sb;
			if(s1.type > s2.type) {
				sa = s2;
				sb = s1;
			} else if(s1.type == s2.type) {
				if(s1.id < s2.id) {
					sa = s1;
					sb = s2;
				} else {
					sb = s1;
					sa = s2;
				}
			} else {
				sa = s1;
				sb = s2;
			}
			var reverse = sa == s2;
			if(itype == 0) {
				var xarb;
				if(in_arb == null) {
					var ret1 = null;
					var b;
					if(b1.arbiters.length < b2.arbiters.length) b = b1; else b = b2;
					var cx_ite = b.arbiters.head;
					while(cx_ite != null) {
						var arb1 = cx_ite.elt;
						if(arb1.id == sa.id && arb1.di == sb.id) {
							ret1 = arb1;
							break;
						}
						cx_ite = cx_ite.next;
					}
					xarb = ret1;
				} else xarb = in_arb;
				var first = xarb == null;
				var arb;
				var swapped = false;
				if(first) {
					if(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool == null) arb = new zpp_$nape_dynamics_ZPP_$FluidArbiter(); else {
						arb = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					null;
				} else if(xarb.fluidarb == null) {
					xarb.cleared = true;
					xarb.b1.arbiters.inlined_try_remove(xarb);
					xarb.b2.arbiters.inlined_try_remove(xarb);
					if(xarb.pair != null) {
						xarb.pair.arb = null;
						xarb.pair = null;
					}
					xarb.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool == null) arb = new zpp_$nape_dynamics_ZPP_$FluidArbiter(); else {
						arb = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					null;
					arb.intchange = true;
					first = true;
					swapped = true;
				} else arb = xarb.fluidarb;
				var inttype = zpp_$nape_util_ZPP_$Flags.id_InteractionType_FLUID;
				if(first || arb.stamp != this.stamp || continuous) {
					arb.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.flowCollide(sa,sb,arb)) {
						if(first) {
							arb.b1 = s1.body;
							arb.ws1 = s1;
							arb.b2 = s2.body;
							arb.ws2 = s2;
							arb.id = sa.id;
							arb.di = sb.id;
							arb.b1.arbiters.inlined_add(arb);
							arb.b2.arbiters.inlined_add(arb);
							arb.active = true;
							arb.present = 0;
							arb.cleared = false;
							arb.sleeping = false;
							arb.fresh = false;
							arb.presentable = false;
							arb.nx = 0;
							arb.ny = 1;
							arb.dampx = 0;
							arb.dampy = 0;
							arb.adamp = 0.0;
							this.f_arbiters.inlined_add(arb);
							arb.fresh = !swapped;
						} else arb.fresh = arb.up_stamp < this.stamp - 1 || arb.endGenerated == this.stamp && continuous;
						arb.up_stamp = arb.stamp;
						if(arb.fresh || (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
							arb.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT;
							var anyimpure = false;
							var arbs1;
							if(arb.ws1.id > arb.ws2.id) arbs1 = arb.ws2; else arbs1 = arb.ws1;
							var arbs2;
							if(arb.ws1.id > arb.ws2.id) arbs2 = arb.ws1; else arbs2 = arb.ws2;
							this.inlined_MRCA_chains(arbs1,arbs2);
							var cx_ite1 = this.mrca1.head;
							while(cx_ite1 != null) {
								var i1 = cx_ite1.elt;
								var cx_ite2 = this.mrca2.head;
								while(cx_ite2 != null) {
									var i2 = cx_ite2.elt;
									var cb1 = i1.cbSet;
									var cb2 = i2.cbSet;
									if(cb1.manager.pair(cb1,cb2).empty_intersection()) {
										cx_ite2 = cx_ite2.next;
										continue;
									}
									var callbackset = null;
									var ncallbackset = null;
									this.prelisteners.inlined_clear();
									var lite = [null];
									cb1.manager.pair(cb1,cb2).forall(zpp_$nape_util_ZPP_$Flags.id_CbEvent_PRE,(function(lite) {
										return function(listener) {
											if((listener.itype & inttype) != 0) {
												lite[0] = _g.prelisteners.inlined_insert(lite[0],listener);
												anyimpure = anyimpure || !listener.pure;
											}
										};
									})(lite));
									if(this.prelisteners.head == null) {
										cx_ite2 = cx_ite2.next;
										continue;
									}
									callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
									if(callbackset == null) {
										ncallbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
										this.add_callbackset(ncallbackset);
									}
									if(callbackset == null || (callbackset.FLUIDstamp != this.stamp || continuous) && (callbackset.FLUIDstate & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
										if(ncallbackset != null) callbackset = ncallbackset;
										if(callbackset != null) {
											var cx_ite3 = this.prelisteners.head;
											while(cx_ite3 != null) {
												var listener1 = cx_ite3.elt;
												if(listener1.itype == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
													callbackset.COLLISIONstamp = this.stamp;
													callbackset.SENSORstamp = this.stamp;
													callbackset.FLUIDstamp = this.stamp;
												} else callbackset.FLUIDstamp = this.stamp;
												cx_ite3 = cx_ite3.next;
											}
										}
										var pact = arb.active;
										arb.active = true;
										var emptycontacts = false;
										this.precb.zpp_inner.pre_arbiter = arb;
										this.precb.zpp_inner.set = callbackset;
										var cx_ite4 = this.prelisteners.head;
										while(cx_ite4 != null) {
											var listener2 = cx_ite4.elt;
											this.precb.zpp_inner.listener = listener2;
											zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset,listener2,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i1 != this.precb.zpp_inner.int1;
											var ret2 = listener2.handlerp(this.precb);
											if(ret2 != null) if(ret2 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
												return $r;
											}(this))) arb.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS; else if(ret2 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
												return $r;
											}(this))) arb.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT; else if(ret2 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
												return $r;
											}(this))) arb.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS; else arb.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE;
											cx_ite4 = cx_ite4.next;
										}
										arb.active = pact;
										if(callbackset != null) {
											var cx_ite5 = this.prelisteners.head;
											while(cx_ite5 != null) {
												var listener3 = cx_ite5.elt;
												if(listener3.itype == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
													callbackset.COLLISIONstate = arb.immState;
													callbackset.SENSORstate = arb.immState;
													callbackset.FLUIDstate = arb.immState;
												} else callbackset.FLUIDstate = arb.immState;
												cx_ite5 = cx_ite5.next;
											}
										}
									} else if(callbackset == null) {
										if((arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) arb.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT;
									} else arb.immState = callbackset.FLUIDstate;
									cx_ite2 = cx_ite2.next;
								}
								cx_ite1 = cx_ite1.next;
							}
							if(anyimpure && (arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
								if(arb.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
									var o = arb.b1;
									if(!o.world) {
										o.component.waket = this.stamp + (this.midstep?0:1);
										if(o.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
										if(o.component.sleeping) this.really_wake(o,false);
									}
								}
								if(arb.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
									var o1 = arb.b2;
									if(!o1.world) {
										o1.component.waket = this.stamp + (this.midstep?0:1);
										if(o1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
										if(o1.component.sleeping) this.really_wake(o1,false);
									}
								}
							}
						}
						if((arb.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) {
							if(arb.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb.b1.component.sleeping) {
								var o2 = arb.b1;
								if(!o2.world) {
									o2.component.waket = this.stamp + (this.midstep?0:1);
									if(o2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o2.kinematicDelaySleep = true;
									if(o2.component.sleeping) this.really_wake(o2,false);
								}
							}
							if(arb.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb.b2.component.sleeping) {
								var o3 = arb.b2;
								if(!o3.world) {
									o3.component.waket = this.stamp + (this.midstep?0:1);
									if(o3.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o3.kinematicDelaySleep = true;
									if(o3.component.sleeping) this.really_wake(o3,false);
								}
							}
						}
						if(arb.sleeping) {
							arb.sleeping = false;
							this.f_arbiters.inlined_add(arb);
						}
						ret = arb;
					} else if(first) {
						var o4 = arb;
						o4.next = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = o4;
						ret = null;
					} else ret = arb;
				} else ret = arb;
			} else if(itype == 1) {
				var carbs;
				if(stat) carbs = this.c_arbiters_true; else carbs = this.c_arbiters_false;
				var xarb1;
				if(in_arb == null) {
					var ret3 = null;
					var b3;
					if(b1.arbiters.length < b2.arbiters.length) b3 = b1; else b3 = b2;
					var cx_ite6 = b3.arbiters.head;
					while(cx_ite6 != null) {
						var arb3 = cx_ite6.elt;
						if(arb3.id == sa.id && arb3.di == sb.id) {
							ret3 = arb3;
							break;
						}
						cx_ite6 = cx_ite6.next;
					}
					xarb1 = ret3;
				} else xarb1 = in_arb;
				var first1 = xarb1 == null;
				var arb2;
				var swapped1 = false;
				if(first1) {
					if(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool == null) arb2 = new zpp_$nape_dynamics_ZPP_$ColArbiter(); else {
						arb2 = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb2.next;
						arb2.next = null;
					}
					null;
					arb2.stat = stat;
				} else if(xarb1.colarb == null) {
					xarb1.cleared = true;
					xarb1.b1.arbiters.inlined_try_remove(xarb1);
					xarb1.b2.arbiters.inlined_try_remove(xarb1);
					if(xarb1.pair != null) {
						xarb1.pair.arb = null;
						xarb1.pair = null;
					}
					xarb1.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool == null) arb2 = new zpp_$nape_dynamics_ZPP_$ColArbiter(); else {
						arb2 = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb2.next;
						arb2.next = null;
					}
					null;
					arb2.intchange = true;
					arb2.stat = stat;
					first1 = true;
					swapped1 = true;
				} else {
					arb2 = xarb1.colarb;
					reverse = sa != arb2.s1;
					if(arb2.stat != stat) {
						arb2.stat = stat;
						if(!arb2.sleeping) {
							(stat?this.c_arbiters_false:this.c_arbiters_true).remove(arb2);
							carbs.add(arb2);
						}
					}
				}
				var inttype1 = zpp_$nape_util_ZPP_$Flags.id_InteractionType_COLLISION;
				if(first1 || arb2.stamp != this.stamp || continuous) {
					arb2.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.contactCollide(sa,sb,arb2,reverse)) {
						if(first1) {
							arb2.b1 = s1.body;
							arb2.ws1 = s1;
							arb2.b2 = s2.body;
							arb2.ws2 = s2;
							arb2.id = sa.id;
							arb2.di = sb.id;
							arb2.b1.arbiters.inlined_add(arb2);
							arb2.b2.arbiters.inlined_add(arb2);
							arb2.active = true;
							arb2.present = 0;
							arb2.cleared = false;
							arb2.sleeping = false;
							arb2.fresh = false;
							arb2.presentable = false;
							arb2.s1 = s1;
							arb2.s2 = s2;
							if(!arb2.userdef_restitution) {
								if(arb2.s1.material.elasticity <= -Infinity || arb2.s2.material.elasticity <= -Infinity) arb2.restitution = 0; else if(arb2.s1.material.elasticity >= Infinity || arb2.s2.material.elasticity >= Infinity) arb2.restitution = 1; else arb2.restitution = (arb2.s1.material.elasticity + arb2.s2.material.elasticity) / 2;
								if(arb2.restitution < 0) arb2.restitution = 0;
								if(arb2.restitution > 1) arb2.restitution = 1;
							}
							if(!arb2.userdef_dyn_fric) arb2.dyn_fric = Math.sqrt(arb2.s1.material.dynamicFriction * arb2.s2.material.dynamicFriction);
							if(!arb2.userdef_stat_fric) arb2.stat_fric = Math.sqrt(arb2.s1.material.staticFriction * arb2.s2.material.staticFriction);
							if(!arb2.userdef_rfric) arb2.rfric = Math.sqrt(arb2.s1.material.rollingFriction * arb2.s2.material.rollingFriction);
							carbs.inlined_add(arb2);
							arb2.fresh = !swapped1;
						} else arb2.fresh = arb2.up_stamp < this.stamp - 1 || arb2.endGenerated == this.stamp && continuous;
						arb2.up_stamp = arb2.stamp;
						if(arb2.fresh || (arb2.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
							arb2.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT;
							var anyimpure1 = false;
							var arbs11;
							if(arb2.ws1.id > arb2.ws2.id) arbs11 = arb2.ws2; else arbs11 = arb2.ws1;
							var arbs21;
							if(arb2.ws1.id > arb2.ws2.id) arbs21 = arb2.ws1; else arbs21 = arb2.ws2;
							this.inlined_MRCA_chains(arbs11,arbs21);
							var cx_ite7 = this.mrca1.head;
							while(cx_ite7 != null) {
								var i11 = cx_ite7.elt;
								var cx_ite8 = this.mrca2.head;
								while(cx_ite8 != null) {
									var i21 = cx_ite8.elt;
									var cb11 = i11.cbSet;
									var cb21 = i21.cbSet;
									if(cb11.manager.pair(cb11,cb21).empty_intersection()) {
										cx_ite8 = cx_ite8.next;
										continue;
									}
									var callbackset1 = null;
									var ncallbackset1 = null;
									this.prelisteners.inlined_clear();
									var lite1 = [null];
									cb11.manager.pair(cb11,cb21).forall(zpp_$nape_util_ZPP_$Flags.id_CbEvent_PRE,(function(lite1) {
										return function(listener4) {
											if((listener4.itype & inttype1) != 0) {
												lite1[0] = _g.prelisteners.inlined_insert(lite1[0],listener4);
												anyimpure1 = anyimpure1 || !listener4.pure;
											}
										};
									})(lite1));
									if(this.prelisteners.head == null) {
										cx_ite8 = cx_ite8.next;
										continue;
									}
									callbackset1 = zpp_$nape_phys_ZPP_$Interactor.get(i11,i21);
									if(callbackset1 == null) {
										ncallbackset1 = zpp_$nape_space_ZPP_$CallbackSet.get(i11,i21);
										this.add_callbackset(ncallbackset1);
									}
									if(callbackset1 == null || (callbackset1.COLLISIONstamp != this.stamp || continuous) && (callbackset1.COLLISIONstate & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
										if(ncallbackset1 != null) callbackset1 = ncallbackset1;
										if(callbackset1 != null) {
											var cx_ite9 = this.prelisteners.head;
											while(cx_ite9 != null) {
												var listener5 = cx_ite9.elt;
												if(listener5.itype == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
													callbackset1.COLLISIONstamp = this.stamp;
													callbackset1.SENSORstamp = this.stamp;
													callbackset1.FLUIDstamp = this.stamp;
												} else callbackset1.COLLISIONstamp = this.stamp;
												cx_ite9 = cx_ite9.next;
											}
										}
										var pact1 = arb2.active;
										arb2.active = true;
										var emptycontacts1 = false;
										arb2.cleanupContacts();
										this.precb.zpp_inner.pre_arbiter = arb2;
										this.precb.zpp_inner.set = callbackset1;
										var cx_ite10 = this.prelisteners.head;
										while(cx_ite10 != null) {
											var listener6 = cx_ite10.elt;
											this.precb.zpp_inner.listener = listener6;
											zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset1,listener6,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i11 != this.precb.zpp_inner.int1;
											var ret4 = listener6.handlerp(this.precb);
											if(ret4 != null) if(ret4 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
												return $r;
											}(this))) arb2.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS; else if(ret4 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
												return $r;
											}(this))) arb2.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT; else if(ret4 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
												return $r;
											}(this))) arb2.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS; else arb2.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE;
											cx_ite10 = cx_ite10.next;
										}
										arb2.active = pact1;
										if(callbackset1 != null) {
											var cx_ite11 = this.prelisteners.head;
											while(cx_ite11 != null) {
												var listener7 = cx_ite11.elt;
												if(listener7.itype == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
													callbackset1.COLLISIONstate = arb2.immState;
													callbackset1.SENSORstate = arb2.immState;
													callbackset1.FLUIDstate = arb2.immState;
												} else callbackset1.COLLISIONstate = arb2.immState;
												cx_ite11 = cx_ite11.next;
											}
										}
									} else if(callbackset1 == null) {
										if((arb2.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) arb2.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT;
									} else arb2.immState = callbackset1.COLLISIONstate;
									cx_ite8 = cx_ite8.next;
								}
								cx_ite7 = cx_ite7.next;
							}
							if(anyimpure1 && (arb2.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
								if(arb2.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
									var o5 = arb2.b1;
									if(!o5.world) {
										o5.component.waket = this.stamp + (this.midstep?0:1);
										if(o5.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o5.kinematicDelaySleep = true;
										if(o5.component.sleeping) this.really_wake(o5,false);
									}
								}
								if(arb2.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) {
									var o6 = arb2.b2;
									if(!o6.world) {
										o6.component.waket = this.stamp + (this.midstep?0:1);
										if(o6.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o6.kinematicDelaySleep = true;
										if(o6.component.sleeping) this.really_wake(o6,false);
									}
								}
							}
						}
						if((arb2.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT) != 0) {
							if(arb2.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb2.b1.component.sleeping) {
								var o7 = arb2.b1;
								if(!o7.world) {
									o7.component.waket = this.stamp + (this.midstep?0:1);
									if(o7.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o7.kinematicDelaySleep = true;
									if(o7.component.sleeping) this.really_wake(o7,false);
								}
							}
							if(arb2.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC && arb2.b2.component.sleeping) {
								var o8 = arb2.b2;
								if(!o8.world) {
									o8.component.waket = this.stamp + (this.midstep?0:1);
									if(o8.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o8.kinematicDelaySleep = true;
									if(o8.component.sleeping) this.really_wake(o8,false);
								}
							}
						}
						if(arb2.sleeping) {
							arb2.sleeping = false;
							carbs.inlined_add(arb2);
						}
						ret = arb2;
					} else if(first1) {
						var o9 = arb2;
						o9.userdef_dyn_fric = false;
						o9.userdef_stat_fric = false;
						o9.userdef_restitution = false;
						o9.userdef_rfric = false;
						o9.__ref_edge1 = o9.__ref_edge2 = null;
						o9.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = o9;
						ret = null;
					} else ret = arb2;
				} else ret = arb2;
			} else {
				var xarb2;
				if(in_arb == null) {
					var ret5 = null;
					var b4;
					if(b1.arbiters.length < b2.arbiters.length) b4 = b1; else b4 = b2;
					var cx_ite12 = b4.arbiters.head;
					while(cx_ite12 != null) {
						var arb5 = cx_ite12.elt;
						if(arb5.id == sa.id && arb5.di == sb.id) {
							ret5 = arb5;
							break;
						}
						cx_ite12 = cx_ite12.next;
					}
					xarb2 = ret5;
				} else xarb2 = in_arb;
				var first2 = xarb2 == null;
				var arb4;
				var swapped2 = false;
				if(first2) {
					if(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool == null) arb4 = new zpp_$nape_dynamics_ZPP_$SensorArbiter(); else {
						arb4 = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = arb4.next;
						arb4.next = null;
					}
					null;
				} else if(xarb2.sensorarb == null) {
					xarb2.cleared = true;
					xarb2.b1.arbiters.inlined_try_remove(xarb2);
					xarb2.b2.arbiters.inlined_try_remove(xarb2);
					if(xarb2.pair != null) {
						xarb2.pair.arb = null;
						xarb2.pair = null;
					}
					xarb2.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool == null) arb4 = new zpp_$nape_dynamics_ZPP_$SensorArbiter(); else {
						arb4 = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = arb4.next;
						arb4.next = null;
					}
					null;
					arb4.intchange = true;
					first2 = true;
					swapped2 = true;
				} else arb4 = xarb2.sensorarb;
				var inttype2 = zpp_$nape_util_ZPP_$Flags.id_InteractionType_SENSOR;
				if(first2 || arb4.stamp != this.stamp || continuous) {
					arb4.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.testCollide(sa,sb)) {
						if(first2) {
							arb4.b1 = s1.body;
							arb4.ws1 = s1;
							arb4.b2 = s2.body;
							arb4.ws2 = s2;
							arb4.id = sa.id;
							arb4.di = sb.id;
							arb4.b1.arbiters.inlined_add(arb4);
							arb4.b2.arbiters.inlined_add(arb4);
							arb4.active = true;
							arb4.present = 0;
							arb4.cleared = false;
							arb4.sleeping = false;
							arb4.fresh = false;
							arb4.presentable = false;
							this.s_arbiters.inlined_add(arb4);
							arb4.fresh = !swapped2;
						} else arb4.fresh = arb4.up_stamp < this.stamp - 1 || arb4.endGenerated == this.stamp && continuous;
						arb4.up_stamp = arb4.stamp;
						if(arb4.fresh || (arb4.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
							arb4.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT;
							var anyimpure2 = false;
							var arbs12;
							if(arb4.ws1.id > arb4.ws2.id) arbs12 = arb4.ws2; else arbs12 = arb4.ws1;
							var arbs22;
							if(arb4.ws1.id > arb4.ws2.id) arbs22 = arb4.ws1; else arbs22 = arb4.ws2;
							this.inlined_MRCA_chains(arbs12,arbs22);
							var cx_ite13 = this.mrca1.head;
							while(cx_ite13 != null) {
								var i12 = cx_ite13.elt;
								var cx_ite14 = this.mrca2.head;
								while(cx_ite14 != null) {
									var i22 = cx_ite14.elt;
									var cb12 = i12.cbSet;
									var cb22 = i22.cbSet;
									if(cb12.manager.pair(cb12,cb22).empty_intersection()) {
										cx_ite14 = cx_ite14.next;
										continue;
									}
									var callbackset2 = null;
									var ncallbackset2 = null;
									this.prelisteners.inlined_clear();
									var lite2 = [null];
									cb12.manager.pair(cb12,cb22).forall(zpp_$nape_util_ZPP_$Flags.id_CbEvent_PRE,(function(lite2) {
										return function(listener8) {
											if((listener8.itype & inttype2) != 0) {
												lite2[0] = _g.prelisteners.inlined_insert(lite2[0],listener8);
												anyimpure2 = anyimpure2 || !listener8.pure;
											}
										};
									})(lite2));
									if(this.prelisteners.head == null) {
										cx_ite14 = cx_ite14.next;
										continue;
									}
									callbackset2 = zpp_$nape_phys_ZPP_$Interactor.get(i12,i22);
									if(callbackset2 == null) {
										ncallbackset2 = zpp_$nape_space_ZPP_$CallbackSet.get(i12,i22);
										this.add_callbackset(ncallbackset2);
									}
									if(callbackset2 == null || (callbackset2.SENSORstamp != this.stamp || continuous) && (callbackset2.SENSORstate & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
										if(ncallbackset2 != null) callbackset2 = ncallbackset2;
										if(callbackset2 != null) {
											var cx_ite15 = this.prelisteners.head;
											while(cx_ite15 != null) {
												var listener9 = cx_ite15.elt;
												if(listener9.itype == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
													callbackset2.COLLISIONstamp = this.stamp;
													callbackset2.SENSORstamp = this.stamp;
													callbackset2.FLUIDstamp = this.stamp;
												} else callbackset2.SENSORstamp = this.stamp;
												cx_ite15 = cx_ite15.next;
											}
										}
										var pact2 = arb4.active;
										arb4.active = true;
										var emptycontacts2 = false;
										this.precb.zpp_inner.pre_arbiter = arb4;
										this.precb.zpp_inner.set = callbackset2;
										var cx_ite16 = this.prelisteners.head;
										while(cx_ite16 != null) {
											var listener10 = cx_ite16.elt;
											this.precb.zpp_inner.listener = listener10;
											zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset2,listener10,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i12 != this.precb.zpp_inner.int1;
											var ret6 = listener10.handlerp(this.precb);
											if(ret6 != null) if(ret6 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
												return $r;
											}(this))) arb4.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS; else if(ret6 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
												return $r;
											}(this))) arb4.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT; else if(ret6 == (function($this) {
												var $r;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												$r = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
												return $r;
											}(this))) arb4.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE | zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS; else arb4.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE;
											cx_ite16 = cx_ite16.next;
										}
										arb4.active = pact2;
										if(callbackset2 != null) {
											var cx_ite17 = this.prelisteners.head;
											while(cx_ite17 != null) {
												var listener11 = cx_ite17.elt;
												if(listener11.itype == zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY) {
													callbackset2.COLLISIONstate = arb4.immState;
													callbackset2.SENSORstate = arb4.immState;
													callbackset2.FLUIDstate = arb4.immState;
												} else callbackset2.SENSORstate = arb4.immState;
												cx_ite17 = cx_ite17.next;
											}
										}
									} else if(callbackset2 == null) {
										if((arb4.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) arb4.immState = zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT;
									} else arb4.immState = callbackset2.SENSORstate;
									cx_ite14 = cx_ite14.next;
								}
								cx_ite13 = cx_ite13.next;
							}
							if(anyimpure2 && (arb4.immState & zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS) == 0) {
								if(!(arb4.b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
									var o10 = arb4.b1;
									if(!o10.world) {
										o10.component.waket = this.stamp + (this.midstep?0:1);
										if(o10.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o10.kinematicDelaySleep = true;
										if(o10.component.sleeping) this.really_wake(o10,false);
									}
								}
								if(!(arb4.b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC)) {
									var o11 = arb4.b2;
									if(!o11.world) {
										o11.component.waket = this.stamp + (this.midstep?0:1);
										if(o11.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC) o11.kinematicDelaySleep = true;
										if(o11.component.sleeping) this.really_wake(o11,false);
									}
								}
							}
						}
						if(arb4.sleeping) {
							arb4.sleeping = false;
							this.s_arbiters.inlined_add(arb4);
						}
						ret = arb4;
					} else if(first2) {
						var o12 = arb4;
						o12.next = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = o12;
						ret = null;
					} else ret = arb4;
				} else ret = arb4;
			}
		}
		return ret;
	}
	,mrca1: null
	,mrca2: null
	,MRCA_chains: function(s1,s2) {
		this.inlined_MRCA_chains(s1,s2);
	}
	,inlined_MRCA_chains: function(s1,s2) {
		this.mrca1.inlined_clear();
		this.mrca2.inlined_clear();
		if(s1.cbSet != null) this.mrca1.inlined_add(s1);
		if(s1.body.cbSet != null) this.mrca1.inlined_add(s1.body);
		if(s2.cbSet != null) this.mrca2.inlined_add(s2);
		if(s2.body.cbSet != null) this.mrca2.inlined_add(s2.body);
		var c1 = s1.body.compound;
		var c2 = s2.body.compound;
		while(c1 != c2) {
			var d1;
			if(c1 == null) d1 = 0; else d1 = c1.depth;
			var d2;
			if(c2 == null) d2 = 0; else d2 = c2.depth;
			if(d1 < d2) {
				if(c2.cbSet != null) this.mrca2.inlined_add(c2);
				c2 = c2.compound;
			} else {
				if(c1.cbSet != null) this.mrca1.inlined_add(c1);
				c1 = c1.compound;
			}
		}
	}
	,__class__: zpp_$nape_space_ZPP_$Space
};
var zpp_$nape_space_ZPP_$SweepData = function() {
	this.aabb = null;
	this.shape = null;
	this.prev = null;
	this.next = null;
};
$hxClasses["zpp_nape.space.ZPP_SweepData"] = zpp_$nape_space_ZPP_$SweepData;
zpp_$nape_space_ZPP_$SweepData.__name__ = ["zpp_nape","space","ZPP_SweepData"];
zpp_$nape_space_ZPP_$SweepData.prototype = {
	next: null
	,prev: null
	,shape: null
	,aabb: null
	,free: function() {
		this.prev = null;
		this.shape = null;
		this.aabb = null;
	}
	,alloc: function() {
	}
	,gt: function(x) {
		return this.aabb.minx > x.aabb.minx;
	}
	,__class__: zpp_$nape_space_ZPP_$SweepData
};
var zpp_$nape_space_ZPP_$SweepPhase = function(space) {
	this.failed = null;
	this.list = null;
	zpp_$nape_space_ZPP_$Broadphase.call(this);
	this.space = space;
	this.is_sweep = true;
	this.sweep = this;
};
$hxClasses["zpp_nape.space.ZPP_SweepPhase"] = zpp_$nape_space_ZPP_$SweepPhase;
zpp_$nape_space_ZPP_$SweepPhase.__name__ = ["zpp_nape","space","ZPP_SweepPhase"];
zpp_$nape_space_ZPP_$SweepPhase.__super__ = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$SweepPhase.prototype = $extend(zpp_$nape_space_ZPP_$Broadphase.prototype,{
	list: null
	,__insert: function(shape) {
		var dat;
		if(zpp_$nape_space_ZPP_$SweepData.zpp_pool == null) dat = new zpp_$nape_space_ZPP_$SweepData(); else {
			dat = zpp_$nape_space_ZPP_$SweepData.zpp_pool;
			zpp_$nape_space_ZPP_$SweepData.zpp_pool = dat.next;
			dat.next = null;
		}
		null;
		shape.sweep = dat;
		dat.shape = shape;
		dat.aabb = shape.aabb;
		dat.next = this.list;
		if(this.list != null) this.list.prev = dat;
		this.list = dat;
	}
	,__remove: function(shape) {
		var dat = shape.sweep;
		if(dat.prev == null) this.list = dat.next; else dat.prev.next = dat.next;
		if(dat.next != null) dat.next.prev = dat.prev;
		shape.sweep = null;
		var o = dat;
		o.prev = null;
		o.shape = null;
		o.aabb = null;
		o.next = zpp_$nape_space_ZPP_$SweepData.zpp_pool;
		zpp_$nape_space_ZPP_$SweepData.zpp_pool = o;
	}
	,__sync: function(shape) {
		if(!this.space.continuous) {
			if(shape.zip_aabb) {
				if(shape.body != null) {
					shape.zip_aabb = false;
					if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
				}
			}
		}
	}
	,sync_broadphase: function() {
		this.space.validation();
		if(this.list != null) this.sync_broadphase_fast();
	}
	,sync_broadphase_fast: function() {
		var a = this.list.next;
		while(a != null) {
			var n = a.next;
			var b = a.prev;
			if(a.aabb.minx > b.aabb.minx) {
				a = n;
				continue;
			}
			while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
			var prev = a.prev;
			prev.next = a.next;
			if(a.next != null) a.next.prev = prev;
			if(b.prev == null) {
				a.prev = null;
				this.list = a;
				a.next = b;
				b.prev = a;
			} else {
				a.prev = b.prev;
				b.prev = a;
				a.prev.next = a;
				a.next = b;
			}
			a = n;
		}
	}
	,broadphase: function(space,discrete) {
		if(this.list != null) {
			this.sync_broadphase_fast();
			var d1 = this.list;
			while(d1 != null) {
				var d2 = d1.next;
				var s1 = d1.shape;
				var b1 = s1.body;
				var bottom = d1.aabb.maxx;
				while(d2 != null) {
					if(d2.aabb.minx > bottom) break;
					var s2 = d2.shape;
					var b2 = s2.body;
					if(b2 == b1) {
						d2 = d2.next;
						continue;
					}
					if(b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC && b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC) {
						d2 = d2.next;
						continue;
					}
					if(b1.component.sleeping && b2.component.sleeping) {
						d2 = d2.next;
						continue;
					}
					if(s1.aabb.intersectY(s2.aabb)) {
						if(discrete) space.narrowPhase(s1,s2,!(b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC),null,false); else space.continuousEvent(s1,s2,!(b1.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC),null,false);
					}
					d2 = d2.next;
				}
				d1 = d1.next;
			}
		}
	}
	,clear: function() {
		while(this.list != null) {
			this.list.shape.removedFromSpace();
			this.__remove(this.list.shape);
		}
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_$nape_geom_ZPP_$Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.minx > x) a = a.next;
		while(a != null && a.aabb.minx <= x) {
			if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
				var shape = a.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
						if(zpp_$nape_geom_ZPP_$Collide.circleContains(shape.circle,v)) ret.push(shape.outer);
					} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(shape.polygon,v)) ret.push(shape.outer);
				}
			}
			a = a.next;
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		return ret;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_$nape_geom_ZPP_$Vec2.get(x,y,null);
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.minx > x) a = a.next;
		while(a != null && a.aabb.minx <= x) {
			if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
				var shape = a.shape;
				var body = shape.body.outer;
				if(!ret.has(body)) {
					if(filter == null || shape.filter.shouldCollide(filter)) {
						if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
							if(zpp_$nape_geom_ZPP_$Collide.circleContains(shape.circle,v)) ret.push(body);
						} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(shape.polygon,v)) ret.push(body);
					}
				}
			}
			a = a.next;
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		return ret;
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			var shape = a.shape;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(strict) {
					if(containment) {
						if(zpp_$nape_geom_ZPP_$Collide.containTest(this.aabbShape.zpp_inner,shape)) ret.push(shape.outer);
					} else if(ab.contains(a.aabb)) ret.push(shape.outer); else if(a.aabb.intersect(ab)) {
						if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(shape.outer);
					}
				} else if(containment?ab.contains(a.aabb):a.aabb.intersect(ab)) ret.push(shape.outer);
			}
			a = a.next;
		}
		return ret;
	}
	,failed: null
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape_phys_BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			var shape = a.shape;
			var body = shape.body.outer;
			if(a.aabb.intersect(ab)) {
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(strict) {
						if(containment) {
							if(!this.failed.has(body)) {
								var col = zpp_$nape_geom_ZPP_$Collide.containTest(this.aabbShape.zpp_inner,shape);
								if(!ret.has(body) && col) ret.push(body); else if(!col) {
									ret.remove(body);
									this.failed.push(body);
								}
							}
						} else if(!ret.has(body) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(body);
					} else if(containment) {
						if(!this.failed.has(body)) {
							var col1 = ab.contains(shape.aabb);
							if(!ret.has(body) && col1) ret.push(body); else if(!col1) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && ab.contains(shape.aabb)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape = a.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(containment) {
						if(zpp_$nape_geom_ZPP_$Collide.containTest(this.circShape.zpp_inner,shape)) ret.push(shape.outer);
					} else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(shape.outer);
				}
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape_phys_BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape = a.shape;
				var body = shape.body.outer;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(containment) {
						if(!this.failed.has(body)) {
							var col = zpp_$nape_geom_ZPP_$Collide.containTest(this.circShape.zpp_inner,shape);
							if(!ret.has(body) && col) ret.push(body); else if(!col) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,shapesInShape: function(shape,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shape);
		var ab = shape.aabb;
		var ret;
		if(output == null) ret = new nape_shape_ShapeList(); else ret = output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape2 = a.shape;
				if(filter == null || shape2.filter.shouldCollide(filter)) {
					if(containment) {
						if(zpp_$nape_geom_ZPP_$Collide.containTest(shape,shape2)) ret.push(shape2.outer);
					} else if(zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape2,shape)) ret.push(shape2.outer);
				}
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shape);
		var ab = shape.aabb;
		var ret;
		if(output == null) ret = new nape_phys_BodyList(); else ret = output;
		if(this.failed == null) this.failed = new nape_phys_BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape2 = a.shape;
				var body = shape2.body.outer;
				if(filter == null || shape2.filter.shouldCollide(filter)) {
					if(containment) {
						if(!this.failed.has(body)) {
							var col = zpp_$nape_geom_ZPP_$Collide.containTest(shape,shape2);
							if(!ret.has(body) && col) ret.push(body); else if(!col) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(shape,shape2)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,rayCast: function(ray,inner,filter) {
		this.sync_broadphase();
		ray.validate_dir();
		var rayab = ray.rayAABB();
		var mint = ray.maxdist;
		var minres = null;
		if(ray.dirx == 0) {
			var a = this.list;
			while(a != null && a.aabb.minx <= rayab.minx) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0 && t < mint) {
						var result;
						if(a.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) result = ray.circlesect(a.shape.circle,inner,mint); else result = ray.polysect(a.shape.polygon,inner,mint);
						if(result != null) {
							mint = result.zpp_inner.toiDistance;
							if(minres != null) minres.zpp_inner.free();
							minres = result;
						}
					}
				}
				a = a.next;
			}
		} else if(ray.dirx < 0) {
			var a1 = this.list;
			var b = null;
			while(a1 != null && a1.aabb.minx <= rayab.maxx) {
				b = a1;
				a1 = a1.next;
			}
			a1 = b;
			while(a1 != null) {
				if(a1.aabb.intersect(rayab) && (filter == null || a1.shape.filter.shouldCollide(filter))) {
					var t1 = ray.aabbsect(a1.aabb);
					if(t1 >= 0 && t1 < mint) {
						var result1;
						if(a1.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) result1 = ray.circlesect(a1.shape.circle,inner,mint); else result1 = ray.polysect(a1.shape.polygon,inner,mint);
						if(result1 != null) {
							mint = result1.zpp_inner.toiDistance;
							if(minres != null) minres.zpp_inner.free();
							minres = result1;
						}
					}
				}
				a1 = a1.prev;
			}
		} else {
			var a2 = this.list;
			while(a2 != null && a2.aabb.minx <= rayab.maxx && a2.aabb.minx < ray.originx + ray.dirx * mint) {
				if(a2.aabb.intersect(rayab) && (filter == null || a2.shape.filter.shouldCollide(filter))) {
					var t2 = ray.aabbsect(a2.aabb);
					if(t2 >= 0 && t2 < mint) {
						var result2;
						if(a2.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) result2 = ray.circlesect(a2.shape.circle,inner,mint); else result2 = ray.polysect(a2.shape.polygon,inner,mint);
						if(result2 != null) {
							mint = result2.zpp_inner.toiDistance;
							if(minres != null) minres.zpp_inner.free();
							minres = result2;
						}
					}
				}
				a2 = a2.next;
			}
		}
		var o = rayab;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
		return minres;
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		this.sync_broadphase();
		ray.validate_dir();
		var rayab = ray.rayAABB();
		var ret;
		if(output == null) ret = new nape_geom_RayResultList(); else ret = output;
		if(ray.dirx == 0) {
			var a = this.list;
			while(a != null && a.aabb.minx <= rayab.minx) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0) {
						if(a.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) ray.circlesect2(a.shape.circle,inner,ret); else ray.polysect2(a.shape.polygon,inner,ret);
					}
				}
				a = a.next;
			}
		} else if(ray.dirx < 0) {
			var a1 = this.list;
			var b = null;
			while(a1 != null && a1.aabb.minx <= rayab.maxx) {
				b = a1;
				a1 = a1.next;
			}
			a1 = b;
			while(a1 != null) {
				if(a1.aabb.intersect(rayab) && (filter == null || a1.shape.filter.shouldCollide(filter))) {
					var t1 = ray.aabbsect(a1.aabb);
					if(t1 >= 0) {
						if(a1.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) ray.circlesect2(a1.shape.circle,inner,ret); else ray.polysect2(a1.shape.polygon,inner,ret);
					}
				}
				a1 = a1.prev;
			}
		} else {
			var a2 = this.list;
			while(a2 != null && a2.aabb.minx <= rayab.maxx) {
				if(a2.aabb.intersect(rayab) && (filter == null || a2.shape.filter.shouldCollide(filter))) {
					var t2 = ray.aabbsect(a2.aabb);
					if(t2 >= 0) {
						if(a2.shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) ray.circlesect2(a2.shape.circle,inner,ret); else ray.polysect2(a2.shape.polygon,inner,ret);
					}
				}
				a2 = a2.next;
			}
		}
		var o = rayab;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
		return ret;
	}
	,__class__: zpp_$nape_space_ZPP_$SweepPhase
});
var zpp_$nape_util_ZNPArray2_$Float = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = [];
};
$hxClasses["zpp_nape.util.ZNPArray2_Float"] = zpp_$nape_util_ZNPArray2_$Float;
zpp_$nape_util_ZNPArray2_$Float.__name__ = ["zpp_nape","util","ZNPArray2_Float"];
zpp_$nape_util_ZNPArray2_$Float.prototype = {
	list: null
	,width: null
	,resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0;
		var _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,__class__: zpp_$nape_util_ZNPArray2_$Float
};
var zpp_$nape_util_ZNPArray2_$ZPP_$GeomVert = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = [];
};
$hxClasses["zpp_nape.util.ZNPArray2_ZPP_GeomVert"] = zpp_$nape_util_ZNPArray2_$ZPP_$GeomVert;
zpp_$nape_util_ZNPArray2_$ZPP_$GeomVert.__name__ = ["zpp_nape","util","ZNPArray2_ZPP_GeomVert"];
zpp_$nape_util_ZNPArray2_$ZPP_$GeomVert.prototype = {
	list: null
	,width: null
	,resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0;
		var _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,__class__: zpp_$nape_util_ZNPArray2_$ZPP_$GeomVert
};
var zpp_$nape_util_ZNPArray2_$ZPP_$MarchPair = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = [];
};
$hxClasses["zpp_nape.util.ZNPArray2_ZPP_MarchPair"] = zpp_$nape_util_ZNPArray2_$ZPP_$MarchPair;
zpp_$nape_util_ZNPArray2_$ZPP_$MarchPair.__name__ = ["zpp_nape","util","ZNPArray2_ZPP_MarchPair"];
zpp_$nape_util_ZNPArray2_$ZPP_$MarchPair.prototype = {
	list: null
	,width: null
	,resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0;
		var _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,__class__: zpp_$nape_util_ZNPArray2_$ZPP_$MarchPair
};
var zpp_$nape_util_ZPP_$Debug = function(width,height) {
	this.tmpab = null;
	this.iport = null;
	this.viewport = null;
	this.height = 0;
	this.width = 0;
	this.xdet = 0.0;
	this.xnull = false;
	this.xform = null;
	this.bg_col = 0;
	this.bg_b = 0.0;
	this.bg_g = 0.0;
	this.bg_r = 0.0;
	this.d_shape = null;
	this.isbmp = false;
	this.outer = null;
	this.xnull = true;
	this.xdet = 1.0;
	this.width = width;
	this.height = height;
	this.viewport = zpp_$nape_geom_ZPP_$AABB.get(0,0,width,height);
	this.iport = zpp_$nape_geom_ZPP_$AABB.get(0,0,width,height);
	this.tmpab = new zpp_$nape_geom_ZPP_$AABB();
};
$hxClasses["zpp_nape.util.ZPP_Debug"] = zpp_$nape_util_ZPP_$Debug;
zpp_$nape_util_ZPP_$Debug.__name__ = ["zpp_nape","util","ZPP_Debug"];
zpp_$nape_util_ZPP_$Debug.prototype = {
	outer: null
	,isbmp: null
	,d_shape: null
	,bg_r: null
	,bg_g: null
	,bg_b: null
	,bg_col: null
	,xform: null
	,xnull: null
	,xdet: null
	,width: null
	,height: null
	,viewport: null
	,iport: null
	,xform_invalidate: function() {
		this.xdet = zpp_$nape_util_ZPP_$Math.sqrt((function($this) {
			var $r;
			var x = $this.xform.outer.get_determinant();
			$r = x < 0?-x:x;
			return $r;
		}(this)));
		this.xnull = this.xform.a == 1.0 && this.xform.b == 0.0 && this.xform.c == 0.0 && this.xform.d == 1.0 && this.xform.tx == 0.0 && this.xform.ty == 0.0;
		var qmat = this.xform.outer.inverse();
		var q = nape_geom_Vec2.get(null,null,null);
		var v = qmat.transform(q);
		v.zpp_inner.validate();
		this.iport.minx = v.zpp_inner.x;
		v.zpp_inner.validate();
		this.iport.miny = v.zpp_inner.y;
		this.iport.maxx = this.iport.minx;
		this.iport.maxy = this.iport.miny;
		v.dispose();
		q.set_x(this.width);
		v = qmat.transform(q);
		this.iport.setExpandPoint((function($this) {
			var $r;
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
		q.set_y(this.height);
		v = qmat.transform(q);
		this.iport.setExpandPoint((function($this) {
			var $r;
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
		if((function($this) {
			var $r;
			q.zpp_inner.validate();
			$r = q.zpp_inner.x;
			return $r;
		}(this)) != 0) {
			q.zpp_inner.x = 0;
			q.zpp_inner.invalidate();
		}
		q.zpp_inner.validate();
		q.zpp_inner.x;
		v = qmat.transform(q);
		this.iport.setExpandPoint((function($this) {
			var $r;
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
		q.dispose();
	}
	,setform: function() {
		this.xform = new nape_geom_Mat23().zpp_inner;
		this.xform._invalidate = $bind(this,this.xform_invalidate);
	}
	,tmpab: null
	,cull: function(aabb) {
		if(this.xnull) return aabb.intersect(this.viewport); else {
			var qx = 0.0;
			var qy = 0.0;
			var vx = 0.0;
			var vy = 0.0;
			vx = aabb.minx;
			vy = aabb.miny;
			this.tmpab.minx = this.xform.a * vx + this.xform.b * vy + this.xform.tx;
			this.tmpab.miny = this.xform.c * vx + this.xform.d * vy + this.xform.ty;
			this.tmpab.maxx = this.tmpab.minx;
			this.tmpab.maxy = this.tmpab.miny;
			vx = aabb.maxx;
			qx = this.xform.a * vx + this.xform.b * vy + this.xform.tx;
			qy = this.xform.c * vx + this.xform.d * vy + this.xform.ty;
			this.tmpab.setExpandPoint(qx,qy);
			vy = aabb.maxy;
			qx = this.xform.a * vx + this.xform.b * vy + this.xform.tx;
			qy = this.xform.c * vx + this.xform.d * vy + this.xform.ty;
			this.tmpab.setExpandPoint(qx,qy);
			vx = aabb.minx;
			qx = this.xform.a * vx + this.xform.b * vy + this.xform.tx;
			qy = this.xform.c * vx + this.xform.d * vy + this.xform.ty;
			this.tmpab.setExpandPoint(qx,qy);
			return this.tmpab.intersect(this.viewport);
		}
	}
	,sup_setbg: function(bgcol) {
		this.bg_r = bgcol >> 16 & 255;
		this.bg_g = bgcol >> 8 & 255;
		this.bg_b = bgcol & 255;
		this.bg_col = bgcol;
	}
	,__class__: zpp_$nape_util_ZPP_$Debug
};
var zpp_$nape_util_ZPP_$ShapeDebug = function(width,height) {
	this.bodyList = null;
	this.shapeList = null;
	this.compoundstack = null;
	this.graphics = null;
	this.shape = null;
	this.outer_zn = null;
	zpp_$nape_util_ZPP_$Debug.call(this,width,height);
	this.shape = new openfl_display_Shape();
	this.shape.set_scrollRect(new openfl_geom_Rectangle(0,0,width,height));
	this.graphics = this.shape.get_graphics();
	this.isbmp = false;
	this.d_shape = this;
};
$hxClasses["zpp_nape.util.ZPP_ShapeDebug"] = zpp_$nape_util_ZPP_$ShapeDebug;
zpp_$nape_util_ZPP_$ShapeDebug.__name__ = ["zpp_nape","util","ZPP_ShapeDebug"];
zpp_$nape_util_ZPP_$ShapeDebug.__super__ = zpp_$nape_util_ZPP_$Debug;
zpp_$nape_util_ZPP_$ShapeDebug.prototype = $extend(zpp_$nape_util_ZPP_$Debug.prototype,{
	outer_zn: null
	,shape: null
	,graphics: null
	,setbg: function(bgColor) {
		this.sup_setbg(bgColor);
	}
	,compoundstack: null
	,draw_compound: function(compound,xform,xdet,xnull) {
		var cx_ite = compound.compounds.head;
		while(cx_ite != null) {
			var c = cx_ite.elt;
			this.draw_compound(c,xform,xdet,xnull);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = compound.bodies.head;
		while(cx_ite1 != null) {
			var b = cx_ite1.elt;
			if(b.outer.debugDraw) this.draw_body(b,xform,xdet,xnull);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = compound.constraints.head;
		while(cx_ite2 != null) {
			var c1 = cx_ite2.elt;
			if(c1.active && c1.outer.debugDraw) c1.draw(this.outer);
			cx_ite2 = cx_ite2.next;
		}
	}
	,shapeList: null
	,bodyList: null
	,draw_space: function(space,xform,xdet,xnull) {
		if(this.outer.cullingEnabled) {
			if(this.outer.drawBodies) {
				if(this.outer.drawBodyDetail) {
					var bods = this.bodyList = space.bphase.bodiesInAABB(this.iport,false,false,null,this.bodyList);
					while(!(bods.zpp_inner.inner.head == null)) {
						var b = bods.shift();
						if(b.debugDraw) this.draw_body(b.zpp_inner,xform,xdet,xnull);
					}
				} else {
					var shapes = this.shapeList = space.bphase.shapesInAABB(this.iport,false,false,null,this.shapeList);
					while(!(shapes.zpp_inner.inner.head == null)) {
						var s = shapes.shift();
						if((s.zpp_inner.body != null?s.zpp_inner.body.outer:null).debugDraw) this.draw_shape(s.zpp_inner,xform,xdet,xnull);
					}
				}
			}
		} else if(this.outer.drawBodies) {
			if(this.compoundstack == null) this.compoundstack = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
			var cx_ite = space.bodies.head;
			while(cx_ite != null) {
				var b1 = cx_ite.elt;
				if(b1.outer.debugDraw) this.draw_body(b1,xform,xdet,xnull);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = space.compounds.head;
			while(cx_ite1 != null) {
				var c = cx_ite1.elt;
				this.compoundstack.add(c);
				cx_ite1 = cx_ite1.next;
			}
			while(!(this.compoundstack.head == null)) {
				var x = this.compoundstack.pop_unsafe();
				var cx_ite2 = x.bodies.head;
				while(cx_ite2 != null) {
					var b2 = cx_ite2.elt;
					if(b2.outer.debugDraw) this.draw_body(b2,xform,xdet,xnull);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = x.compounds.head;
				while(cx_ite3 != null) {
					var c1 = cx_ite3.elt;
					this.compoundstack.add(c1);
					cx_ite3 = cx_ite3.next;
				}
			}
		}
		if(this.outer.drawCollisionArbiters || this.outer.drawFluidArbiters || this.outer.drawSensorArbiters) {
			var _g = space.outer.get_arbiters().iterator();
			while(_g.hasNext()) {
				var arb;
				_g.zpp_critical = false;
				arb = _g.zpp_inner.at(_g.zpp_i++);
				this.draw_arbiter(arb.zpp_inner,xform,xdet,xnull);
			}
		}
		if(this.outer.drawConstraints) {
			if(this.compoundstack == null) this.compoundstack = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
			var cx_ite4 = space.constraints.head;
			while(cx_ite4 != null) {
				var c2 = cx_ite4.elt;
				if(c2.active && c2.outer.debugDraw) c2.draw(this.outer);
				cx_ite4 = cx_ite4.next;
			}
			var cx_ite5 = space.compounds.head;
			while(cx_ite5 != null) {
				var c3 = cx_ite5.elt;
				this.compoundstack.add(c3);
				cx_ite5 = cx_ite5.next;
			}
			while(!(this.compoundstack.head == null)) {
				var x1 = this.compoundstack.pop_unsafe();
				var cx_ite6 = x1.constraints.head;
				while(cx_ite6 != null) {
					var c4 = cx_ite6.elt;
					if(c4.active && c4.outer.debugDraw) c4.draw(this.outer);
					cx_ite6 = cx_ite6.next;
				}
				var cx_ite7 = x1.compounds.head;
				while(cx_ite7 != null) {
					var c5 = cx_ite7.elt;
					this.compoundstack.add(c5);
					cx_ite7 = cx_ite7.next;
				}
			}
		}
	}
	,draw_body: function(body,xform,xdet,xnull) {
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			this.draw_shape(s,xform,xdet,xnull);
			cx_ite = cx_ite.next;
		}
		if(this.outer.drawBodyDetail) {
			var col;
			var idc;
			if(this.outer.colour == null) idc = Std["int"](16777215 * Math.exp(-(body.id % 500) / 1500)); else idc = this.outer.colour(body.id);
			var _r = ((idc & 16711680) >> 16) * 0.7;
			var _g = ((idc & 65280) >> 8) * 0.7;
			var _b = (idc & 255) * 0.7;
			if(body.space != null && body.outer.zpp_inner.component.sleeping) {
				_r = 0.4 * _r + 0.6 * this.bg_r;
				_g = 0.4 * _g + 0.6 * this.bg_g;
				_b = 0.4 * _b + 0.6 * this.bg_b;
			}
			col = -16777216 | (_r | 0) << 16 | (_g | 0) << 8 | (_b | 0);
			this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
				var $r;
				var col1 = col;
				var ncol = 16711680;
				var f = 0.8;
				var _r1 = (col1 >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f) | 0;
				var _g1 = (col1 >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f) | 0;
				var _b1 = (col1 & 255) * f + (ncol & 255) * (1 - f) | 0;
				$r = -16777216 | _r1 << 16 | _g1 << 8 | _b1;
				return $r;
			}(this)),1);
			var px = 0.0;
			var py = 0.0;
			var qx = 0.0;
			var qy = 0.0;
			if(!(body.shapes.head == null)) {
				body.validate_worldCOM();
				if(xnull) {
					px = body.worldCOMx;
					py = body.worldCOMy;
				} else {
					px = xform.a * body.worldCOMx + xform.b * body.worldCOMy + xform.tx;
					py = xform.c * body.worldCOMx + xform.d * body.worldCOMy + xform.ty;
				}
				this.graphics.drawCircle(px,py,1);
				body.validate_aabb();
				if(xnull) this.graphics.drawRect(body.aabb.minx,body.aabb.miny,body.aabb.width(),body.aabb.height()); else {
					var ox = 0.0;
					var oy = 0.0;
					ox = xform.a * body.aabb.minx + xform.b * body.aabb.miny + xform.tx;
					oy = xform.c * body.aabb.minx + xform.d * body.aabb.miny + xform.ty;
					var wx = body.aabb.width();
					var wy = 0;
					var t = xform.a * wx + xform.b * wy;
					wy = xform.c * wx + xform.d * wy;
					wx = t;
					var hx = 0;
					var hy = body.aabb.height();
					var t1 = xform.a * hx + xform.b * hy;
					hy = xform.c * hx + xform.d * hy;
					hx = t1;
					this.graphics.moveTo(ox,oy);
					this.graphics.lineTo(ox + wx,oy + wy);
					this.graphics.lineTo(ox + wx + hx,oy + wy + hy);
					this.graphics.lineTo(ox + hx,oy + hy);
					this.graphics.lineTo(ox,oy);
				}
			}
			if(xnull) {
				qx = body.pre_posx;
				qy = body.pre_posy;
			} else {
				qx = xform.a * body.pre_posx + xform.b * body.pre_posy + xform.tx;
				qy = xform.c * body.pre_posx + xform.d * body.pre_posy + xform.ty;
			}
			if(xnull) {
				px = body.posx;
				py = body.posy;
			} else {
				px = xform.a * body.posx + xform.b * body.posy + xform.tx;
				py = xform.c * body.posx + xform.d * body.posy + xform.ty;
			}
			this.graphics.moveTo(qx,qy);
			this.graphics.lineTo(px,py);
			this.graphics.drawCircle(px,py,1);
		}
	}
	,draw_shape: function(shape,xform,xdet,xnull) {
		var col;
		var idc;
		if(this.outer.colour == null) idc = Std["int"](16777215 * Math.exp(-(shape.id % 500) / 1500)); else idc = this.outer.colour(shape.id);
		var _r = ((idc & 16711680) >> 16) * 0.7;
		var _g = ((idc & 65280) >> 8) * 0.7;
		var _b = (idc & 255) * 0.7;
		col = -16777216 | (_r | 0) << 16 | (_g | 0) << 8 | (_b | 0);
		var body = shape.body;
		if(body != null) {
			var bcol;
			var idc1;
			if(this.outer.colour == null) idc1 = Std["int"](16777215 * Math.exp(-(body.id % 500) / 1500)); else idc1 = this.outer.colour(body.id);
			var _r1 = ((idc1 & 16711680) >> 16) * 0.7;
			var _g1 = ((idc1 & 65280) >> 8) * 0.7;
			var _b1 = (idc1 & 255) * 0.7;
			if(body.space != null && body.outer.zpp_inner.component.sleeping) {
				_r1 = 0.4 * _r1 + 0.6 * this.bg_r;
				_g1 = 0.4 * _g1 + 0.6 * this.bg_g;
				_b1 = 0.4 * _b1 + 0.6 * this.bg_b;
			}
			bcol = -16777216 | (_r1 | 0) << 16 | (_g1 | 0) << 8 | (_b1 | 0);
			var col1 = col;
			var ncol = bcol;
			var f = 0.2;
			var _r2 = (col1 >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f) | 0;
			var _g2 = (col1 >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f) | 0;
			var _b2 = (col1 & 255) * f + (ncol & 255) * (1 - f) | 0;
			col = -16777216 | _r2 << 16 | _g2 << 8 | _b2;
			this.graphics.lineStyle(this.outer_zn.thickness,col,1.0);
			if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) {
				var circ = shape.circle;
				if(circ.zip_worldCOM) {
					if(circ.body != null) {
						circ.zip_worldCOM = false;
						if(circ.zip_localCOM) {
							circ.zip_localCOM = false;
							if(circ.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) circ.polygon.__validate_localCOM();
							if(circ.wrap_localCOM != null) {
								circ.wrap_localCOM.zpp_inner.x = circ.localCOMx;
								circ.wrap_localCOM.zpp_inner.y = circ.localCOMy;
							}
						}
						circ.body.validate_axis();
						circ.worldCOMx = circ.body.posx + (circ.body.axisy * circ.localCOMx - circ.body.axisx * circ.localCOMy);
						circ.worldCOMy = circ.body.posy + (circ.localCOMx * circ.body.axisx + circ.localCOMy * circ.body.axisy);
					}
				}
				var vx = circ.worldCOMx;
				var vy = circ.worldCOMy;
				if(!xnull) {
					var t = xform.a * vx + xform.b * vy + xform.tx;
					vy = xform.c * vx + xform.d * vy + xform.ty;
					vx = t;
				}
				this.graphics.drawCircle(vx,vy,circ.radius * xdet);
				if(this.outer.drawShapeAngleIndicators) {
					var v0x = circ.worldCOMx + 0.3 * circ.radius * body.axisy;
					var v0y = circ.worldCOMy + 0.3 * circ.radius * body.axisx;
					var v1x = circ.worldCOMx + circ.radius * body.axisy;
					var v1y = circ.worldCOMy + circ.radius * body.axisx;
					if(!xnull) {
						var t1 = xform.a * v0x + xform.b * v0y + xform.tx;
						v0y = xform.c * v0x + xform.d * v0y + xform.ty;
						v0x = t1;
					}
					if(!xnull) {
						var t2 = xform.a * v1x + xform.b * v1y + xform.tx;
						v1y = xform.c * v1x + xform.d * v1y + xform.ty;
						v1x = t2;
					}
					this.graphics.moveTo(v0x,v0y);
					this.graphics.lineTo(v1x,v1y);
				}
			} else {
				var poly = shape.polygon;
				poly.validate_gverts();
				var u = poly.gverts.next;
				var vx1 = u.x;
				var vy1 = u.y;
				if(!xnull) {
					var t3 = xform.a * vx1 + xform.b * vy1 + xform.tx;
					vy1 = xform.c * vx1 + xform.d * vy1 + xform.ty;
					vx1 = t3;
				}
				this.graphics.moveTo(vx1,vy1);
				var vox = vx1;
				var voy = vy1;
				var cx_ite = poly.gverts.next.next;
				while(cx_ite != null) {
					var u1 = cx_ite;
					vx1 = u1.x;
					vy1 = u1.y;
					if(!xnull) {
						var t4 = xform.a * vx1 + xform.b * vy1 + xform.tx;
						vy1 = xform.c * vx1 + xform.d * vy1 + xform.ty;
						vx1 = t4;
					}
					this.graphics.lineTo(vx1,vy1);
					cx_ite = cx_ite.next;
				}
				this.graphics.lineTo(vox,voy);
				if(this.outer.drawShapeAngleIndicators) {
					if(poly.zip_worldCOM) {
						if(poly.body != null) {
							poly.zip_worldCOM = false;
							if(poly.zip_localCOM) {
								poly.zip_localCOM = false;
								if(poly.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) poly.polygon.__validate_localCOM();
								if(poly.wrap_localCOM != null) {
									poly.wrap_localCOM.zpp_inner.x = poly.localCOMx;
									poly.wrap_localCOM.zpp_inner.y = poly.localCOMy;
								}
							}
							poly.body.validate_axis();
							poly.worldCOMx = poly.body.posx + (poly.body.axisy * poly.localCOMx - poly.body.axisx * poly.localCOMy);
							poly.worldCOMy = poly.body.posy + (poly.localCOMx * poly.body.axisx + poly.localCOMy * poly.body.axisy);
						}
					}
					if(xnull) {
						vx1 = poly.worldCOMx;
						vy1 = poly.worldCOMy;
					} else {
						vx1 = xform.a * poly.worldCOMx + xform.b * poly.worldCOMy + xform.tx;
						vy1 = xform.c * poly.worldCOMx + xform.d * poly.worldCOMy + xform.ty;
					}
					this.graphics.moveTo(vx1,vy1);
					this.graphics.lineTo(vox,voy);
				}
			}
			if(this.outer.drawShapeDetail) {
				if(shape.zip_worldCOM) {
					if(shape.body != null) {
						shape.zip_worldCOM = false;
						if(shape.zip_localCOM) {
							shape.zip_localCOM = false;
							if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON) shape.polygon.__validate_localCOM();
							if(shape.wrap_localCOM != null) {
								shape.wrap_localCOM.zpp_inner.x = shape.localCOMx;
								shape.wrap_localCOM.zpp_inner.y = shape.localCOMy;
							}
						}
						shape.body.validate_axis();
						shape.worldCOMx = shape.body.posx + (shape.body.axisy * shape.localCOMx - shape.body.axisx * shape.localCOMy);
						shape.worldCOMy = shape.body.posy + (shape.localCOMx * shape.body.axisx + shape.localCOMy * shape.body.axisy);
					}
				}
				this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
					var $r;
					var col2 = col;
					var ncol1 = 16711680;
					var f1 = 0.8;
					var _r3 = (col2 >> 16 & 255) * f1 + (ncol1 >> 16 & 255) * (1 - f1) | 0;
					var _g3 = (col2 >> 8 & 255) * f1 + (ncol1 >> 8 & 255) * (1 - f1) | 0;
					var _b3 = (col2 & 255) * f1 + (ncol1 & 255) * (1 - f1) | 0;
					$r = -16777216 | _r3 << 16 | _g3 << 8 | _b3;
					return $r;
				}(this)),1);
				var vx2 = 0.0;
				var vy2 = 0.0;
				if(xnull) {
					vx2 = shape.worldCOMx;
					vy2 = shape.worldCOMy;
				} else {
					vx2 = xform.a * shape.worldCOMx + xform.b * shape.worldCOMy + xform.tx;
					vy2 = xform.c * shape.worldCOMx + xform.d * shape.worldCOMy + xform.ty;
				}
				this.graphics.drawCircle(vx2,vy2,1);
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
				if(xnull) this.graphics.drawRect(shape.aabb.minx,shape.aabb.miny,shape.aabb.width(),shape.aabb.height()); else {
					var ox = 0.0;
					var oy = 0.0;
					ox = xform.a * shape.aabb.minx + xform.b * shape.aabb.miny + xform.tx;
					oy = xform.c * shape.aabb.minx + xform.d * shape.aabb.miny + xform.ty;
					var wx = shape.aabb.width();
					var wy = 0;
					var t5 = xform.a * wx + xform.b * wy;
					wy = xform.c * wx + xform.d * wy;
					wx = t5;
					var hx = 0;
					var hy = shape.aabb.height();
					var t6 = xform.a * hx + xform.b * hy;
					hy = xform.c * hx + xform.d * hy;
					hx = t6;
					this.graphics.moveTo(ox,oy);
					this.graphics.lineTo(ox + wx,oy + wy);
					this.graphics.lineTo(ox + wx + hx,oy + wy + hy);
					this.graphics.lineTo(ox + hx,oy + hy);
					this.graphics.lineTo(ox,oy);
				}
			}
		}
	}
	,draw_arbiter: function(arb,xform,xdet,xnull) {
		var vx = 0.0;
		var vy = 0.0;
		if(arb.outer.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) {
			if(this.outer.drawSensorArbiters) {
				var sarb = arb.outer;
				this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
					var $r;
					var col = 65280;
					var ncol = ~$this.bg_col;
					var f = 0.7;
					var _r = (col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f) | 0;
					var _g = (col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f) | 0;
					var _b = (col & 255) * f + (ncol & 255) * (1 - f) | 0;
					$r = -16777216 | _r << 16 | _g << 8 | _b;
					return $r;
				}(this)),1);
				if(xnull) {
					vx = (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer).get_worldCOM().get_x();
					vy = (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer).get_worldCOM().get_y();
				} else {
					vx = xform.a * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer).get_worldCOM().get_x() + xform.b * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer).get_worldCOM().get_y() + xform.tx;
					vy = xform.c * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer).get_worldCOM().get_x() + xform.d * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer).get_worldCOM().get_y() + xform.ty;
				}
				this.graphics.moveTo(vx,vy);
				if(xnull) {
					vx = (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer).get_worldCOM().get_x();
					vy = (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer).get_worldCOM().get_y();
				} else {
					vx = xform.a * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer).get_worldCOM().get_x() + xform.b * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer).get_worldCOM().get_y() + xform.tx;
					vy = xform.c * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer).get_worldCOM().get_x() + xform.d * (sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer).get_worldCOM().get_y() + xform.ty;
				}
				this.graphics.lineTo(vx,vy);
			}
		} else if(arb.outer.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
			if(this.outer.drawFluidArbiters) {
				var farb = arb.outer.get_fluidArbiter();
				this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
					var $r;
					var col1 = 255;
					var ncol1 = ~$this.bg_col;
					var f1 = 0.7;
					var _r1 = (col1 >> 16 & 255) * f1 + (ncol1 >> 16 & 255) * (1 - f1) | 0;
					var _g1 = (col1 >> 8 & 255) * f1 + (ncol1 >> 8 & 255) * (1 - f1) | 0;
					var _b1 = (col1 & 255) * f1 + (ncol1 & 255) * (1 - f1) | 0;
					$r = -16777216 | _r1 << 16 | _g1 << 8 | _b1;
					return $r;
				}(this)),1);
				if(xnull) {
					vx = ((function($this) {
						var $r;
						if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
						$r = farb.zpp_inner.fluidarb.wrap_position;
						return $r;
					}(this))).get_x();
					vy = ((function($this) {
						var $r;
						if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
						$r = farb.zpp_inner.fluidarb.wrap_position;
						return $r;
					}(this))).get_y();
				} else {
					vx = xform.a * ((function($this) {
						var $r;
						if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
						$r = farb.zpp_inner.fluidarb.wrap_position;
						return $r;
					}(this))).get_x() + xform.b * ((function($this) {
						var $r;
						if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
						$r = farb.zpp_inner.fluidarb.wrap_position;
						return $r;
					}(this))).get_y() + xform.tx;
					vy = xform.c * ((function($this) {
						var $r;
						if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
						$r = farb.zpp_inner.fluidarb.wrap_position;
						return $r;
					}(this))).get_x() + xform.d * ((function($this) {
						var $r;
						if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
						$r = farb.zpp_inner.fluidarb.wrap_position;
						return $r;
					}(this))).get_y() + xform.ty;
				}
				this.graphics.drawCircle(vx,vy,0.75);
			}
		} else if(this.outer.drawCollisionArbiters) {
			var carb = arb.outer.get_collisionArbiter();
			if(!((function($this) {
				var $r;
				if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.setupcontacts();
				$r = carb.zpp_inner.colarb.wrap_contacts;
				return $r;
			}(this))).empty()) {
				var px = 0.0;
				var py = 0.0;
				if(((function($this) {
					var $r;
					if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.setupcontacts();
					$r = carb.zpp_inner.colarb.wrap_contacts;
					return $r;
				}(this))).get_length() == 2) {
					var c1 = ((function($this) {
						var $r;
						if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.setupcontacts();
						$r = carb.zpp_inner.colarb.wrap_contacts;
						return $r;
					}(this))).at(0).get_position();
					var c2 = ((function($this) {
						var $r;
						if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.setupcontacts();
						$r = carb.zpp_inner.colarb.wrap_contacts;
						return $r;
					}(this))).at(1).get_position();
					var n;
					if(carb.zpp_inner.colarb.wrap_normal == null) carb.zpp_inner.colarb.getnormal();
					n = carb.zpp_inner.colarb.wrap_normal;
					var x = 0.661437828;
					var y = 0.75;
					if((function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * (function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.x;
						return $r;
					}(this)) - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * (function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.y;
						return $r;
					}(this)) < (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.x;
						return $r;
					}(this)) - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.y;
						return $r;
					}(this))) {
						x = -x;
						y = -y;
					}
					this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
						var $r;
						var col2 = 255;
						var ncol2 = ~$this.bg_col;
						var f2 = 0.7;
						var _r2 = (col2 >> 16 & 255) * f2 + (ncol2 >> 16 & 255) * (1 - f2) | 0;
						var _g2 = (col2 >> 8 & 255) * f2 + (ncol2 >> 8 & 255) * (1 - f2) | 0;
						var _b2 = (col2 & 255) * f2 + (ncol2 & 255) * (1 - f2) | 0;
						$r = -16777216 | _r2 << 16 | _g2 << 8 | _b2;
						return $r;
					}(this)),1);
					vx = (function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.x;
						return $r;
					}(this)) + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * y - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * x;
					vy = (function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.y;
						return $r;
					}(this)) + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * y + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * x;
					if(!xnull) {
						var t = xform.a * vx + xform.b * vy + xform.tx;
						vy = xform.c * vx + xform.d * vy + xform.ty;
						vx = t;
					}
					this.graphics.moveTo(vx,vy);
					vx = (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.x;
						return $r;
					}(this)) + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * y + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * x;
					vy = (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.y;
						return $r;
					}(this)) + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * y - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * x;
					if(!xnull) {
						var t1 = xform.a * vx + xform.b * vy + xform.tx;
						vy = xform.c * vx + xform.d * vy + xform.ty;
						vx = t1;
					}
					this.graphics.lineTo(vx,vy);
					this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
						var $r;
						var col3 = 16711680;
						var ncol3 = ~$this.bg_col;
						var f3 = 0.7;
						var _r3 = (col3 >> 16 & 255) * f3 + (ncol3 >> 16 & 255) * (1 - f3) | 0;
						var _g3 = (col3 >> 8 & 255) * f3 + (ncol3 >> 8 & 255) * (1 - f3) | 0;
						var _b3 = (col3 & 255) * f3 + (ncol3 & 255) * (1 - f3) | 0;
						$r = -16777216 | _r3 << 16 | _g3 << 8 | _b3;
						return $r;
					}(this)),1);
					vx = (function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.x;
						return $r;
					}(this)) - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * y - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * x;
					vy = (function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.y;
						return $r;
					}(this)) - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * y + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * x;
					if(!xnull) {
						var t2 = xform.a * vx + xform.b * vy + xform.tx;
						vy = xform.c * vx + xform.d * vy + xform.ty;
						vx = t2;
					}
					this.graphics.moveTo(vx,vy);
					vx = (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.x;
						return $r;
					}(this)) - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * y + (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * x;
					vy = (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.y;
						return $r;
					}(this)) - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.y;
						return $r;
					}(this)) * y - (function($this) {
						var $r;
						n.zpp_inner.validate();
						$r = n.zpp_inner.x;
						return $r;
					}(this)) * x;
					if(!xnull) {
						var t3 = xform.a * vx + xform.b * vy + xform.tx;
						vy = xform.c * vx + xform.d * vy + xform.ty;
						vx = t3;
					}
					this.graphics.lineTo(vx,vy);
					px = 0.5 * ((function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.x;
						return $r;
					}(this)) + (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.x;
						return $r;
					}(this)));
					py = 0.5 * ((function($this) {
						var $r;
						c1.zpp_inner.validate();
						$r = c1.zpp_inner.y;
						return $r;
					}(this)) + (function($this) {
						var $r;
						c2.zpp_inner.validate();
						$r = c2.zpp_inner.y;
						return $r;
					}(this)));
					if(!xnull) {
						var t4 = xform.a * px + xform.b * py + xform.tx;
						py = xform.c * px + xform.d * py + xform.ty;
						px = t4;
					}
				} else {
					px = ((function($this) {
						var $r;
						if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.setupcontacts();
						$r = carb.zpp_inner.colarb.wrap_contacts;
						return $r;
					}(this))).at(0).get_position().get_x();
					py = ((function($this) {
						var $r;
						if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.setupcontacts();
						$r = carb.zpp_inner.colarb.wrap_contacts;
						return $r;
					}(this))).at(0).get_position().get_y();
					if(!xnull) {
						var t5 = xform.a * px + xform.b * py + xform.tx;
						py = xform.c * px + xform.d * py + xform.ty;
						px = t5;
					}
					this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
						var $r;
						var col4 = 16711935;
						var ncol4 = ~$this.bg_col;
						var f4 = 0.7;
						var _r4 = (col4 >> 16 & 255) * f4 + (ncol4 >> 16 & 255) * (1 - f4) | 0;
						var _g4 = (col4 >> 8 & 255) * f4 + (ncol4 >> 8 & 255) * (1 - f4) | 0;
						var _b4 = (col4 & 255) * f4 + (ncol4 & 255) * (1 - f4) | 0;
						$r = -16777216 | _r4 << 16 | _g4 << 8 | _b4;
						return $r;
					}(this)),1);
					this.graphics.drawCircle(px,py,1);
				}
				this.graphics.lineStyle(this.outer_zn.thickness,(function($this) {
					var $r;
					var col5 = ~$this.bg_col;
					var ncol5 = $this.bg_col;
					var f5 = 0.7;
					var _r5 = (col5 >> 16 & 255) * f5 + (ncol5 >> 16 & 255) * (1 - f5) | 0;
					var _g5 = (col5 >> 8 & 255) * f5 + (ncol5 >> 8 & 255) * (1 - f5) | 0;
					var _b5 = (col5 & 255) * f5 + (ncol5 & 255) * (1 - f5) | 0;
					$r = -16777216 | _r5 << 16 | _g5 << 8 | _b5;
					return $r;
				}(this)),1);
				this.graphics.moveTo(px,py);
				vx = ((function($this) {
					var $r;
					if(carb.zpp_inner.colarb.wrap_normal == null) carb.zpp_inner.colarb.getnormal();
					$r = carb.zpp_inner.colarb.wrap_normal;
					return $r;
				}(this))).get_x() * 5;
				vy = ((function($this) {
					var $r;
					if(carb.zpp_inner.colarb.wrap_normal == null) carb.zpp_inner.colarb.getnormal();
					$r = carb.zpp_inner.colarb.wrap_normal;
					return $r;
				}(this))).get_y() * 5;
				if(!xnull) {
					var t6 = xform.a * vx + xform.b * vy;
					vy = xform.c * vx + xform.d * vy;
					vx = t6;
				}
				this.graphics.lineTo(px + vx,py + vy);
			}
		}
	}
	,__class__: zpp_$nape_util_ZPP_$ShapeDebug
});
var zpp_$nape_util_Hashable2_$Boolfalse = function() {
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.next = null;
	this.value = false;
};
$hxClasses["zpp_nape.util.Hashable2_Boolfalse"] = zpp_$nape_util_Hashable2_$Boolfalse;
zpp_$nape_util_Hashable2_$Boolfalse.__name__ = ["zpp_nape","util","Hashable2_Boolfalse"];
zpp_$nape_util_Hashable2_$Boolfalse.get = function(id,di,val) {
	var ret = zpp_$nape_util_Hashable2_$Boolfalse.getpersist(id,di);
	ret.value = val;
	return ret;
};
zpp_$nape_util_Hashable2_$Boolfalse.getpersist = function(id,di) {
	var ret;
	if(zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool == null) ret = new zpp_$nape_util_Hashable2_$Boolfalse(); else {
		ret = zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool;
		zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.id = id;
	ret.di = di;
	return ret;
};
zpp_$nape_util_Hashable2_$Boolfalse.ordered_get = function(id,di,val) {
	if(id <= di) return zpp_$nape_util_Hashable2_$Boolfalse.get(id,di,val); else return zpp_$nape_util_Hashable2_$Boolfalse.get(di,id,val);
};
zpp_$nape_util_Hashable2_$Boolfalse.ordered_get_persist = function(id,di) {
	if(id <= di) return zpp_$nape_util_Hashable2_$Boolfalse.getpersist(id,di); else return zpp_$nape_util_Hashable2_$Boolfalse.getpersist(di,id);
};
zpp_$nape_util_Hashable2_$Boolfalse.prototype = {
	value: null
	,next: null
	,hnext: null
	,id: null
	,di: null
	,free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_util_Hashable2_$Boolfalse
};
var zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse = function() {
	this.cnt = 0;
	this.table = null;
	this.cnt = 0;
	this.table = [];
	var _g1 = 0;
	var _g = 1048576;
	while(_g1 < _g) {
		var i = _g1++;
		this.table.push(null);
	}
};
$hxClasses["zpp_nape.util.FastHash2_Hashable2_Boolfalse"] = zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse;
zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse.__name__ = ["zpp_nape","util","FastHash2_Hashable2_Boolfalse"];
zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse.prototype = {
	table: null
	,cnt: null
	,empty: function() {
		return this.cnt == 0;
	}
	,clear: function() {
		var _g1 = 0;
		var _g = this.table.length;
		while(_g1 < _g) {
			var i = _g1++;
			var n = this.table[i];
			if(n == null) continue;
			while(n != null) {
				var t = n.hnext;
				n.hnext = null;
				n;
				n = t;
			}
			this.table[i] = null;
		}
	}
	,get: function(id,di) {
		var n = this.table[id * 106039 + di & 1048575];
		if(n == null) return null; else if(n.id == id && n.di == di) return n; else {
			do n = n.hnext; while(n != null && (n.id != id || n.di != di));
			return n;
		}
	}
	,ordered_get: function(id,di) {
		if(id > di) {
			var t = id;
			id = di;
			di = t;
		}
		return this.get(id,di);
	}
	,has: function(id,di) {
		var n = this.table[id * 106039 + di & 1048575];
		if(n == null) return false; else if(n.id == id && n.di == di) return true; else {
			do n = n.hnext; while(n != null && (n.id != id || n.di != di));
			return n != null;
		}
	}
	,maybeAdd: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		var cont = true;
		if(n == null) {
			this.table[h] = arb;
			arb.hnext = null;
		} else if(cont) {
			arb.hnext = n.hnext;
			n.hnext = arb;
		}
		if(cont) this.cnt++;
	}
	,add: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		if(n == null) {
			this.table[h] = arb;
			arb.hnext = null;
		} else {
			arb.hnext = n.hnext;
			n.hnext = arb;
		}
		this.cnt++;
	}
	,remove: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		if(n == arb) this.table[h] = n.hnext; else if(n != null) {
			var pre;
			do {
				pre = n;
				n = n.hnext;
			} while(n != null && n != arb);
			pre.hnext = n.hnext;
		}
		arb.hnext = null;
		this.cnt--;
	}
	,hash: function(id,di) {
		return id * 106039 + di & 1048575;
	}
	,__class__: zpp_$nape_util_FastHash2_$Hashable2_$Boolfalse
};
var zpp_$nape_util_ZNPList_$ZPP_$CallbackSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CallbackSet"] = zpp_$nape_util_ZNPList_$ZPP_$CallbackSet;
zpp_$nape_util_ZNPList_$ZPP_$CallbackSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CallbackSet"];
zpp_$nape_util_ZNPList_$ZPP_$CallbackSet.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CallbackSet
};
var zpp_$nape_util_ZNPList_$ZPP_$Shape = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Shape"] = zpp_$nape_util_ZNPList_$ZPP_$Shape;
zpp_$nape_util_ZNPList_$ZPP_$Shape.__name__ = ["zpp_nape","util","ZNPList_ZPP_Shape"];
zpp_$nape_util_ZNPList_$ZPP_$Shape.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Shape(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Shape(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Shape
};
var zpp_$nape_util_ZNPList_$ZPP_$Body = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Body"] = zpp_$nape_util_ZNPList_$ZPP_$Body;
zpp_$nape_util_ZNPList_$ZPP_$Body.__name__ = ["zpp_nape","util","ZNPList_ZPP_Body"];
zpp_$nape_util_ZNPList_$ZPP_$Body.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Body
};
var zpp_$nape_util_ZNPList_$ZPP_$Compound = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Compound"] = zpp_$nape_util_ZNPList_$ZPP_$Compound;
zpp_$nape_util_ZNPList_$ZPP_$Compound.__name__ = ["zpp_nape","util","ZNPList_ZPP_Compound"];
zpp_$nape_util_ZNPList_$ZPP_$Compound.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Compound(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Compound(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Compound
};
var zpp_$nape_util_ZNPList_$ZPP_$Arbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Arbiter"] = zpp_$nape_util_ZNPList_$ZPP_$Arbiter;
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_Arbiter"];
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Arbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$CbSetPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbSetPair"] = zpp_$nape_util_ZNPList_$ZPP_$CbSetPair;
zpp_$nape_util_ZNPList_$ZPP_$CbSetPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSetPair"];
zpp_$nape_util_ZNPList_$ZPP_$CbSetPair.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPList_$ZPP_$CutInt = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CutInt"] = zpp_$nape_util_ZNPList_$ZPP_$CutInt;
zpp_$nape_util_ZNPList_$ZPP_$CutInt.__name__ = ["zpp_nape","util","ZNPList_ZPP_CutInt"];
zpp_$nape_util_ZNPList_$ZPP_$CutInt.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CutInt(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CutInt(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CutInt
};
var zpp_$nape_util_ZNPList_$ZPP_$CutVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CutVert"] = zpp_$nape_util_ZNPList_$ZPP_$CutVert;
zpp_$nape_util_ZNPList_$ZPP_$CutVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_CutVert"];
zpp_$nape_util_ZNPList_$ZPP_$CutVert.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CutVert(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$CutVert(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CutVert
};
var zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_PartitionVertex"] = zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex;
zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex.__name__ = ["zpp_nape","util","ZNPList_ZPP_PartitionVertex"];
zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$PartitionVertex
};
var zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_PartitionedPoly"] = zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly;
zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_PartitionedPoly"];
zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$PartitionedPoly
};
var zpp_$nape_util_ZNPList_$ZPP_$GeomVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_GeomVert"] = zpp_$nape_util_ZNPList_$ZPP_$GeomVert;
zpp_$nape_util_ZNPList_$ZPP_$GeomVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomVert"];
zpp_$nape_util_ZNPList_$ZPP_$GeomVert.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$GeomVert(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$GeomVert(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$GeomVert
};
var zpp_$nape_util_ZNPList_$ZPP_$SimplifyP = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SimplifyP"] = zpp_$nape_util_ZNPList_$ZPP_$SimplifyP;
zpp_$nape_util_ZNPList_$ZPP_$SimplifyP.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimplifyP"];
zpp_$nape_util_ZNPList_$ZPP_$SimplifyP.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$SimplifyP
};
var zpp_$nape_util_ZNPList_$ZPP_$SimpleVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SimpleVert"] = zpp_$nape_util_ZNPList_$ZPP_$SimpleVert;
zpp_$nape_util_ZNPList_$ZPP_$SimpleVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleVert"];
zpp_$nape_util_ZNPList_$ZPP_$SimpleVert.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$SimpleVert
};
var zpp_$nape_util_ZNPList_$ZPP_$SimpleEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SimpleEvent"] = zpp_$nape_util_ZNPList_$ZPP_$SimpleEvent;
zpp_$nape_util_ZNPList_$ZPP_$SimpleEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleEvent"];
zpp_$nape_util_ZNPList_$ZPP_$SimpleEvent.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$SimpleEvent
};
var zpp_$nape_util_ZNPList_$ZPP_$AABBPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_AABBPair"] = zpp_$nape_util_ZNPList_$ZPP_$AABBPair;
zpp_$nape_util_ZNPList_$ZPP_$AABBPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBPair"];
zpp_$nape_util_ZNPList_$ZPP_$AABBPair.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$AABBPair
};
var zpp_$nape_util_ZNPList_$ZPP_$Edge = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Edge"] = zpp_$nape_util_ZNPList_$ZPP_$Edge;
zpp_$nape_util_ZNPList_$ZPP_$Edge.__name__ = ["zpp_nape","util","ZNPList_ZPP_Edge"];
zpp_$nape_util_ZNPList_$ZPP_$Edge.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Edge(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Edge(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Edge
};
var zpp_$nape_util_ZNPList_$ZPP_$Component = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Component"] = zpp_$nape_util_ZNPList_$ZPP_$Component;
zpp_$nape_util_ZNPList_$ZPP_$Component.__name__ = ["zpp_nape","util","ZNPList_ZPP_Component"];
zpp_$nape_util_ZNPList_$ZPP_$Component.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Component(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Component(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Component
};
var zpp_$nape_util_ZNPList_$ZPP_$AABBNode = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_AABBNode"] = zpp_$nape_util_ZNPList_$ZPP_$AABBNode;
zpp_$nape_util_ZNPList_$ZPP_$AABBNode.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBNode"];
zpp_$nape_util_ZNPList_$ZPP_$AABBNode.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$AABBNode(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$AABBNode(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$AABBNode
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_InteractionGroup"] = zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup;
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionGroup"];
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup
};
var zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_FluidArbiter"] = zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter;
zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_FluidArbiter"];
zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SensorArbiter"] = zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter;
zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_SensorArbiter"];
zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$ColArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ColArbiter"] = zpp_$nape_util_ZNPList_$ZPP_$ColArbiter;
zpp_$nape_util_ZNPList_$ZPP_$ColArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_ColArbiter"];
zpp_$nape_util_ZNPList_$ZPP_$ColArbiter.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ColArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$Listener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Listener"] = zpp_$nape_util_ZNPList_$ZPP_$Listener;
zpp_$nape_util_ZNPList_$ZPP_$Listener.__name__ = ["zpp_nape","util","ZNPList_ZPP_Listener"];
zpp_$nape_util_ZNPList_$ZPP_$Listener.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Listener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$Listener(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Listener
};
var zpp_$nape_util_ZNPList_$ZPP_$ToiEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ToiEvent"] = zpp_$nape_util_ZNPList_$ZPP_$ToiEvent;
zpp_$nape_util_ZNPList_$ZPP_$ToiEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_ToiEvent"];
zpp_$nape_util_ZNPList_$ZPP_$ToiEvent.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ToiEvent
};
var zpp_$nape_util_ZNPList_$ConvexResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ConvexResult"] = zpp_$nape_util_ZNPList_$ConvexResult;
zpp_$nape_util_ZNPList_$ConvexResult.__name__ = ["zpp_nape","util","ZNPList_ConvexResult"];
zpp_$nape_util_ZNPList_$ConvexResult.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ConvexResult(); else {
			ret = zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool;
			zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ConvexResult(); else {
			ret = zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool;
			zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool;
		zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool;
		zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ConvexResult
};
var zpp_$nape_util_ZNPList_$ZPP_$GeomPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_GeomPoly"] = zpp_$nape_util_ZNPList_$ZPP_$GeomPoly;
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomPoly"];
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly(); else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$GeomPoly
};
var zpp_$nape_util_ZNPList_$RayResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_RayResult"] = zpp_$nape_util_ZNPList_$RayResult;
zpp_$nape_util_ZNPList_$RayResult.__name__ = ["zpp_nape","util","ZNPList_RayResult"];
zpp_$nape_util_ZNPList_$RayResult.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$RayResult.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$RayResult(); else {
			ret = zpp_$nape_util_ZNPNode_$RayResult.zpp_pool;
			zpp_$nape_util_ZNPNode_$RayResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var temp;
		var ret;
		if(zpp_$nape_util_ZNPNode_$RayResult.zpp_pool == null) ret = new zpp_$nape_util_ZNPNode_$RayResult(); else {
			ret = zpp_$nape_util_ZNPNode_$RayResult.zpp_pool;
			zpp_$nape_util_ZNPNode_$RayResult.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.elt = o;
		temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$RayResult.zpp_pool;
		zpp_$nape_util_ZNPNode_$RayResult.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$RayResult.zpp_pool;
		zpp_$nape_util_ZNPNode_$RayResult.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.head == null;
	}
	,size: function() {
		return this.length;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.head.elt;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		if(it != null) return it.elt; else return null;
	}
	,__class__: zpp_$nape_util_ZNPList_$RayResult
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbType = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbType"] = zpp_$nape_util_ZNPNode_$ZPP_$CbType;
zpp_$nape_util_ZNPNode_$ZPP_$CbType.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbType"];
zpp_$nape_util_ZNPNode_$ZPP_$CbType.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbType
};
var zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CallbackSet"] = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet;
zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CallbackSet"];
zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet
};
var zpp_$nape_util_ZNPNode_$ZPP_$Shape = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Shape"] = zpp_$nape_util_ZNPNode_$ZPP_$Shape;
zpp_$nape_util_ZNPNode_$ZPP_$Shape.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Shape"];
zpp_$nape_util_ZNPNode_$ZPP_$Shape.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Shape
};
var zpp_$nape_util_ZNPNode_$ZPP_$Body = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Body"] = zpp_$nape_util_ZNPNode_$ZPP_$Body;
zpp_$nape_util_ZNPNode_$ZPP_$Body.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Body"];
zpp_$nape_util_ZNPNode_$ZPP_$Body.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Body
};
var zpp_$nape_util_ZNPNode_$ZPP_$Constraint = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Constraint"] = zpp_$nape_util_ZNPNode_$ZPP_$Constraint;
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Constraint"];
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Constraint
};
var zpp_$nape_util_ZNPNode_$ZPP_$Compound = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Compound"] = zpp_$nape_util_ZNPNode_$ZPP_$Compound;
zpp_$nape_util_ZNPNode_$ZPP_$Compound.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Compound"];
zpp_$nape_util_ZNPNode_$ZPP_$Compound.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Compound
};
var zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_InteractionListener"] = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionListener"];
zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbSet = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbSet"] = zpp_$nape_util_ZNPNode_$ZPP_$CbSet;
zpp_$nape_util_ZNPNode_$ZPP_$CbSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSet"];
zpp_$nape_util_ZNPNode_$ZPP_$CbSet.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbSet
};
var zpp_$nape_util_ZNPNode_$ZPP_$Interactor = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Interactor"] = zpp_$nape_util_ZNPNode_$ZPP_$Interactor;
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Interactor"];
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Interactor
};
var zpp_$nape_util_ZNPNode_$ZPP_$BodyListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_BodyListener"] = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener;
zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_BodyListener"];
zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$BodyListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$Arbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Arbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter;
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Arbiter"];
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Arbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ConstraintListener"] = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener;
zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ConstraintListener"];
zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbSetPair"] = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair;
zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSetPair"];
zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPNode_$ZPP_$CutInt = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CutInt"] = zpp_$nape_util_ZNPNode_$ZPP_$CutInt;
zpp_$nape_util_ZNPNode_$ZPP_$CutInt.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CutInt"];
zpp_$nape_util_ZNPNode_$ZPP_$CutInt.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CutInt
};
var zpp_$nape_util_ZNPNode_$ZPP_$CutVert = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CutVert"] = zpp_$nape_util_ZNPNode_$ZPP_$CutVert;
zpp_$nape_util_ZNPNode_$ZPP_$CutVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CutVert"];
zpp_$nape_util_ZNPNode_$ZPP_$CutVert.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CutVert
};
var zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_PartitionVertex"] = zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex;
zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.__name__ = ["zpp_nape","util","ZNPNode_ZPP_PartitionVertex"];
zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex
};
var zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_PartitionedPoly"] = zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly;
zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_PartitionedPoly"];
zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly
};
var zpp_$nape_util_ZNPNode_$ZPP_$GeomVert = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_GeomVert"] = zpp_$nape_util_ZNPNode_$ZPP_$GeomVert;
zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomVert"];
zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$GeomVert
};
var zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SimplifyP"] = zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP;
zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimplifyP"];
zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP
};
var zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SimpleVert"] = zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert;
zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleVert"];
zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert
};
var zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SimpleEvent"] = zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent;
zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleEvent"];
zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent
};
var zpp_$nape_util_ZNPNode_$ZPP_$AABBPair = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_AABBPair"] = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair;
zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBPair"];
zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$AABBPair
};
var zpp_$nape_util_ZNPNode_$ZPP_$Edge = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Edge"] = zpp_$nape_util_ZNPNode_$ZPP_$Edge;
zpp_$nape_util_ZNPNode_$ZPP_$Edge.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Edge"];
zpp_$nape_util_ZNPNode_$ZPP_$Edge.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Edge
};
var zpp_$nape_util_ZNPNode_$ZPP_$Vec2 = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Vec2"] = zpp_$nape_util_ZNPNode_$ZPP_$Vec2;
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Vec2"];
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Vec2
};
var zpp_$nape_util_ZNPNode_$ZPP_$Component = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Component"] = zpp_$nape_util_ZNPNode_$ZPP_$Component;
zpp_$nape_util_ZNPNode_$ZPP_$Component.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Component"];
zpp_$nape_util_ZNPNode_$ZPP_$Component.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Component
};
var zpp_$nape_util_ZNPNode_$ZPP_$AABBNode = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_AABBNode"] = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode;
zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBNode"];
zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$AABBNode
};
var zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_InteractionGroup"] = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionGroup"];
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup
};
var zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_FluidArbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter;
zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_FluidArbiter"];
zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SensorArbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter;
zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SensorArbiter"];
zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ColArbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter;
zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ColArbiter"];
zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$Listener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Listener"] = zpp_$nape_util_ZNPNode_$ZPP_$Listener;
zpp_$nape_util_ZNPNode_$ZPP_$Listener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Listener"];
zpp_$nape_util_ZNPNode_$ZPP_$Listener.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Listener
};
var zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ToiEvent"] = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent;
zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ToiEvent"];
zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent
};
var zpp_$nape_util_ZNPNode_$ConvexResult = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ConvexResult"] = zpp_$nape_util_ZNPNode_$ConvexResult;
zpp_$nape_util_ZNPNode_$ConvexResult.__name__ = ["zpp_nape","util","ZNPNode_ConvexResult"];
zpp_$nape_util_ZNPNode_$ConvexResult.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ConvexResult
};
var zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_GeomPoly"] = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly;
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomPoly"];
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly
};
var zpp_$nape_util_ZNPNode_$RayResult = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_RayResult"] = zpp_$nape_util_ZNPNode_$RayResult;
zpp_$nape_util_ZNPNode_$RayResult.__name__ = ["zpp_nape","util","ZNPNode_RayResult"];
zpp_$nape_util_ZNPNode_$RayResult.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$RayResult
};
var zpp_$nape_util_ZPP_$MixVec2List = function() {
	this.at_index = 0;
	this.at_ite = null;
	this.zip_length = false;
	this._length = 0;
	this.inner = null;
	nape_geom_Vec2List.call(this);
	this.at_ite = null;
	this.at_index = 0;
	this.zip_length = true;
	this._length = 0;
};
$hxClasses["zpp_nape.util.ZPP_MixVec2List"] = zpp_$nape_util_ZPP_$MixVec2List;
zpp_$nape_util_ZPP_$MixVec2List.__name__ = ["zpp_nape","util","ZPP_MixVec2List"];
zpp_$nape_util_ZPP_$MixVec2List.get = function(list,immutable) {
	if(immutable == null) immutable = false;
	var ret = new zpp_$nape_util_ZPP_$MixVec2List();
	ret.inner = list;
	ret.zpp_inner.immutable = immutable;
	return ret;
};
zpp_$nape_util_ZPP_$MixVec2List.__super__ = nape_geom_Vec2List;
zpp_$nape_util_ZPP_$MixVec2List.prototype = $extend(nape_geom_Vec2List.prototype,{
	inner: null
	,_length: null
	,zip_length: null
	,at_ite: null
	,at_index: null
	,zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var cx_ite = this.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				this._length++;
				cx_ite = cx_ite.next;
			}
			this.zip_length = false;
		}
		return this._length;
	}
	,zpp_vm: function() {
		this.zpp_inner.validate();
		if(this.inner.modified) {
			this.zip_length = true;
			this._length = 0;
			this.at_ite = null;
		}
	}
	,at: function(index) {
		this.zpp_vm();
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.at_index || this.at_ite == null) {
			this.at_index = 0;
			this.at_ite = this.inner.next;
			while(true) {
				var x = this.at_ite;
				break;
				this.at_ite = this.at_ite.next;
			}
		}
		while(this.at_index != index) {
			this.at_index++;
			this.at_ite = this.at_ite.next;
			while(true) {
				var x1 = this.at_ite;
				break;
				this.at_ite = this.at_ite.next;
			}
		}
		return this.at_ite.wrapper();
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.inner.add(obj.zpp_inner); else {
				var ite = this.inner.iterator_at(this.zpp_gl() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont;
		if(this.zpp_inner.adder != null) cont = this.zpp_inner.adder(obj); else cont = true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				var ite = this.inner.iterator_at(this.zpp_gl() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			} else this.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.inner.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.inner.pop();
		} else {
			if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.inner.next; else ret = ite.next;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
			var ite;
			if(this.zpp_gl() == 1) ite = null; else ite = this.inner.iterator_at(this.zpp_gl() - 2);
			if(ite == null) ret = this.inner.next; else ret = ite.next;
			var retx1 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx1);
			if(!this.zpp_inner.dontremove) this.inner.erase(ite);
		} else {
			ret = this.inner.next;
			var retx2 = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx2);
			if(!this.zpp_inner.dontremove) this.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.inner.next;
		while(cx_ite != null) {
			var x = cx_ite;
			if(obj.zpp_inner == x) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,__class__: zpp_$nape_util_ZPP_$MixVec2List
});
var zpp_$nape_util_ZPP_$ConstraintList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ConstraintList"] = zpp_$nape_util_ZPP_$ConstraintList;
zpp_$nape_util_ZPP_$ConstraintList.__name__ = ["zpp_nape","util","ZPP_ConstraintList"];
zpp_$nape_util_ZPP_$ConstraintList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_constraint_ConstraintList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ConstraintList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$ConstraintList
};
var zpp_$nape_util_ZPP_$BodyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_BodyList"] = zpp_$nape_util_ZPP_$BodyList;
zpp_$nape_util_ZPP_$BodyList.__name__ = ["zpp_nape","util","ZPP_BodyList"];
zpp_$nape_util_ZPP_$BodyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_phys_BodyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$BodyList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$BodyList
};
var zpp_$nape_util_ZPP_$InteractorList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_InteractorList"] = zpp_$nape_util_ZPP_$InteractorList;
zpp_$nape_util_ZPP_$InteractorList.__name__ = ["zpp_nape","util","ZPP_InteractorList"];
zpp_$nape_util_ZPP_$InteractorList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_phys_InteractorList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$InteractorList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$InteractorList
};
var zpp_$nape_util_ZPP_$CompoundList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_CompoundList"] = zpp_$nape_util_ZPP_$CompoundList;
zpp_$nape_util_ZPP_$CompoundList.__name__ = ["zpp_nape","util","ZPP_CompoundList"];
zpp_$nape_util_ZPP_$CompoundList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_phys_CompoundList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$CompoundList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$CompoundList
};
var zpp_$nape_util_ZPP_$ListenerList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Listener();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ListenerList"] = zpp_$nape_util_ZPP_$ListenerList;
zpp_$nape_util_ZPP_$ListenerList.__name__ = ["zpp_nape","util","ZPP_ListenerList"];
zpp_$nape_util_ZPP_$ListenerList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_callbacks_ListenerList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ListenerList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$ListenerList
};
var zpp_$nape_util_ZPP_$CbTypeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_CbTypeList"] = zpp_$nape_util_ZPP_$CbTypeList;
zpp_$nape_util_ZPP_$CbTypeList.__name__ = ["zpp_nape","util","ZPP_CbTypeList"];
zpp_$nape_util_ZPP_$CbTypeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_callbacks_CbTypeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$CbTypeList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$CbTypeList
};
var zpp_$nape_util_ZPP_$Vec2List = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_Vec2List"] = zpp_$nape_util_ZPP_$Vec2List;
zpp_$nape_util_ZPP_$Vec2List.__name__ = ["zpp_nape","util","ZPP_Vec2List"];
zpp_$nape_util_ZPP_$Vec2List.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_geom_Vec2List();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$Vec2List.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$Vec2List
};
var zpp_$nape_util_ZPP_$GeomPolyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$GeomPoly();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_GeomPolyList"] = zpp_$nape_util_ZPP_$GeomPolyList;
zpp_$nape_util_ZPP_$GeomPolyList.__name__ = ["zpp_nape","util","ZPP_GeomPolyList"];
zpp_$nape_util_ZPP_$GeomPolyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_geom_GeomPolyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$GeomPolyList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$GeomPolyList
};
var zpp_$nape_util_ZPP_$RayResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$RayResult();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_RayResultList"] = zpp_$nape_util_ZPP_$RayResultList;
zpp_$nape_util_ZPP_$RayResultList.__name__ = ["zpp_nape","util","ZPP_RayResultList"];
zpp_$nape_util_ZPP_$RayResultList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_geom_RayResultList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$RayResultList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$RayResultList
};
var zpp_$nape_util_ZPP_$ConvexResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ConvexResult();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ConvexResultList"] = zpp_$nape_util_ZPP_$ConvexResultList;
zpp_$nape_util_ZPP_$ConvexResultList.__name__ = ["zpp_nape","util","ZPP_ConvexResultList"];
zpp_$nape_util_ZPP_$ConvexResultList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_geom_ConvexResultList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ConvexResultList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$ConvexResultList
};
var zpp_$nape_util_ZPP_$EdgeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Edge();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_EdgeList"] = zpp_$nape_util_ZPP_$EdgeList;
zpp_$nape_util_ZPP_$EdgeList.__name__ = ["zpp_nape","util","ZPP_EdgeList"];
zpp_$nape_util_ZPP_$EdgeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_shape_EdgeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$EdgeList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$EdgeList
};
var zpp_$nape_util_ZPP_$ShapeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ShapeList"] = zpp_$nape_util_ZPP_$ShapeList;
zpp_$nape_util_ZPP_$ShapeList.__name__ = ["zpp_nape","util","ZPP_ShapeList"];
zpp_$nape_util_ZPP_$ShapeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_shape_ShapeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ShapeList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$ShapeList
};
var zpp_$nape_util_ZPP_$InteractionGroupList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_InteractionGroupList"] = zpp_$nape_util_ZPP_$InteractionGroupList;
zpp_$nape_util_ZPP_$InteractionGroupList.__name__ = ["zpp_nape","util","ZPP_InteractionGroupList"];
zpp_$nape_util_ZPP_$InteractionGroupList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_dynamics_InteractionGroupList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$InteractionGroupList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$InteractionGroupList
};
var zpp_$nape_util_ZPP_$ArbiterList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ArbiterList"] = zpp_$nape_util_ZPP_$ArbiterList;
zpp_$nape_util_ZPP_$ArbiterList.__name__ = ["zpp_nape","util","ZPP_ArbiterList"];
zpp_$nape_util_ZPP_$ArbiterList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_dynamics_ArbiterList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ArbiterList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$ArbiterList
};
var zpp_$nape_util_ZPP_$ContactList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_dynamics_ZPP_$Contact();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ContactList"] = zpp_$nape_util_ZPP_$ContactList;
zpp_$nape_util_ZPP_$ContactList.__name__ = ["zpp_nape","util","ZPP_ContactList"];
zpp_$nape_util_ZPP_$ContactList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape_dynamics_ContactList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ContactList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,_modifiable: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$ContactList
};
var zpp_$nape_util_ZPP_$Math = function() { };
$hxClasses["zpp_nape.util.ZPP_Math"] = zpp_$nape_util_ZPP_$Math;
zpp_$nape_util_ZPP_$Math.__name__ = ["zpp_nape","util","ZPP_Math"];
zpp_$nape_util_ZPP_$Math.sqrt = function(x) {
	return Math.sqrt(x);
};
zpp_$nape_util_ZPP_$Math.invsqrt = function(x) {
	return 1.0 / Math.sqrt(x);
};
zpp_$nape_util_ZPP_$Math.sqr = function(x) {
	return x * x;
};
zpp_$nape_util_ZPP_$Math.clamp2 = function(x,a) {
	return zpp_$nape_util_ZPP_$Math.clamp(x,-a,a);
};
zpp_$nape_util_ZPP_$Math.clamp = function(x,a,b) {
	if(x < a) return a; else if(x > b) return b; else return x;
};
var zpp_$nape_util_ZPP_$PubPool = function() { };
$hxClasses["zpp_nape.util.ZPP_PubPool"] = zpp_$nape_util_ZPP_$PubPool;
zpp_$nape_util_ZPP_$PubPool.__name__ = ["zpp_nape","util","ZPP_PubPool"];
var zpp_$nape_util_ZPP_$Set_$ZPP_$Body = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_Body"] = zpp_$nape_util_ZPP_$Set_$ZPP_$Body;
zpp_$nape_util_ZPP_$Set_$ZPP_$Body.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_Body"];
zpp_$nape_util_ZPP_$Set_$ZPP_$Body.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,lt: null
	,swapped: null
	,data: null
	,prev: null
	,next: null
	,parent: null
	,colour: null
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$Body(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$Body
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_CbSetPair"] = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSetPair"];
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,lt: null
	,swapped: null
	,data: null
	,prev: null
	,next: null
	,parent: null
	,colour: null
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_PartitionVertex"] = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex;
zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_PartitionVertex"];
zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,lt: null
	,swapped: null
	,data: null
	,prev: null
	,next: null
	,parent: null
	,colour: null
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_PartitionPair"] = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair;
zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_PartitionPair"];
zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,lt: null
	,swapped: null
	,data: null
	,prev: null
	,next: null
	,parent: null
	,colour: null
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_SimpleVert"] = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert;
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleVert"];
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,lt: null
	,swapped: null
	,data: null
	,prev: null
	,next: null
	,parent: null
	,colour: null
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_SimpleSeg"] = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg;
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleSeg"];
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,lt: null
	,swapped: null
	,data: null
	,prev: null
	,next: null
	,parent: null
	,colour: null
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_SimpleEvent"] = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent;
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleEvent"];
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,lt: null
	,swapped: null
	,data: null
	,prev: null
	,next: null
	,parent: null
	,colour: null
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_CbSet"] = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSet"];
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,lt: null
	,swapped: null
	,data: null
	,prev: null
	,next: null
	,parent: null
	,colour: null
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,empty: function() {
		return this.parent == null;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,lower_bound: function(obj) {
		var ret = null;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var elt = set_ite.data;
				if(!this.lt(elt,obj)) {
					ret = elt;
					break;
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		if(node == null) return null; else return node.data;
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child;
		if(cur.prev == null) child = cur.next; else child = cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = o;
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) cur = cur.prev; else if(cur.next != null) cur = cur.next; else cur = this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = o;
		return ret;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) trl.parent = negred;
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) this.swapped(parent.data,nr.data);
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
			parent.next = nr;
			if(nr != null) nr.parent = parent;
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) trl1.parent = negred;
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) this.swapped(parent.data,nr1.data);
			nr1.next = trr1;
			if(trr1 != null) trr1.parent = nr1;
			nr1.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr1;
			parent.prev = nr1;
			if(nr1 != null) nr1.parent = parent;
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet(); else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "LIME_font_flixel_system_PreloaderFont", data : ""},{ name : "__ASSET__:bitmap_flixel_tile_GraphicAutoAlt", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUlBQUFBQUlDQU1BQUFBR0F3ZE1BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBS1QybERRMUJRYUc5MGIzTm9iM0FnU1VORElIQnliMlpwYkdVQUFIamFuVk5uVkZQcEZqMzMzdlJDUzRpQWxFdHZVaFVJSUZKQ2k0QVVrU1lxSVFrUVNvZ2hvZGtWVWNFUlJVVUVHOGlnaUFPT2pvQ01GVkVzRElvSzJBZmtJYUtPZzZPSWlzcjc0WHVqYTlhODkrYk4vclhYUHVlczg1Mnp6d2ZBQ0F5V1NETlJOWUFNcVVJZUVlQ0R4OFRHNGVRdVFJRUtKSEFBRUFpelpDRnovU01CQVBoK1BEd3JJc0FIdmdBQmVOTUxDQURBVFp2QU1CeUgvdy9xUXBsY0FZQ0VBY0Iwa1RoTENJQVVBRUI2amtLbUFFQkdBWUNkbUNaVEFLQUVBR0RMWTJMakFGQXRBR0FuZitiVEFJQ2QrSmw3QVFCYmxDRVZBYUNSQUNBVFpZaEVBR2c3QUt6UFZvcEZBRmd3QUJSbVM4UTVBTmd0QURCSlYyWklBTEMzQU1ET0VBdXlBQWdNQURCUmlJVXBBQVI3QUdESUl5TjRBSVNaQUJSRzhsYzg4U3V1RU9jcUFBQjRtYkk4dVNRNVJZRmJDQzF4QjFkWExoNG96a2tYS3hRMllRSmhta0F1d25tWkdUS0JOQS9nODh3QUFLQ1JGUkhnZy9QOWVNNE9yczdPTm82MkRsOHQ2cjhHL3lKaVl1UCs1YytyY0VBQUFPRjBmdEgrTEMrekdvQTdCb0J0L3FJbDdnUm9YZ3VnZGZlTFpySVBRTFVBb09uYVYvTncrSDQ4UEVXaGtMbloyZVhrNU5oS3hFSmJZY3BYZmY1bndsL0FWLzFzK1g0OC9QZjE0TDdpSklFeVhZRkhCUGpnd3N6MFRLVWN6NUlKaEdMYzVvOUgvTGNMLy93ZDB5TEVTV0s1V0NvVTQxRVNjWTVFbW96ek1xVWlpVUtTS2NVbDB2OWs0dDhzK3dNKzN6VUFzR28rQVh1UkxhaGRZd1AyU3ljUVdIVEE0dmNBQVBLN2I4SFVLQWdEZ0dpRDRjOTMvKzgvL1VlZ0pRQ0Faa21TY1FBQVhrUWtMbFRLc3ovSENBQUFSS0NCS3JCQkcvVEJHQ3pBQmh6QkJkekJDL3hnTm9SQ0pNVENRaEJDQ21TQUhISmdLYXlDUWlpR3piQWRLbUF2MUVBZE5NQlJhSWFUY0E0dXdsVzREajF3RC9waENKN0JLTHlCQ1FSQnlBZ1RZU0hhaUFGaWlsZ2pqZ2dYbVlYNEljRklCQktMSkNESmlCUlJJa3VSTlVneFVvcFVJRlZJSGZJOWNnSTVoMXhHdXBFN3lBQXlndnlHdkVjeGxJR3lVVDNVRExWRHVhZzNHb1JHb2d2UVpIUXhtbzhXb0p2UWNyUWFQWXcyb2VmUXEyZ1AybzgrUThjd3dPZ1lCelBFYkRBdXhzTkNzVGdzQ1pOank3RWlyQXlyeGhxd1Zxd0R1NG4xWTgreGR3UVNnVVhBQ1RZRWQwSWdZUjVCU0ZoTVdFN1lTS2dnSENRMEVkb0pOd2tEaEZIQ0p5S1RxRXUwSnJvUitjUVlZakl4aDFoSUxDUFdFbzhUTHhCN2lFUEVOeVFTaVVNeUo3bVFBa214cEZUU0V0SkcwbTVTSStrc3FaczBTQm9qazhuYVpHdXlCem1VTENBcnlJWGtuZVRENURQa0crUWg4bHNLbldKQWNhVDRVK0lvVXNwcVNobmxFT1UwNVFabG1ESkJWYU9hVXQyb29WUVJOWTlhUXEyaHRsS3ZVWWVvRXpSMW1qbk5neFpKUzZXdG9wWFRHbWdYYVBkcHIraDB1aEhkbFI1T2w5Qlgwc3ZwUitpWDZBUDBkd3dOaGhXRHg0aG5LQm1iR0FjWVp4bDNHSytZVEtZWjA0c1p4MVF3TnpIcm1PZVpENWx2VlZncXRpcDhGWkhLQ3BWS2xTYVZHeW92VkttcXBxcmVxZ3RWODFYTFZJK3BYbE45cmtaVk0xUGpxUW5VbHF0VnFwMVE2MU1iVTJlcE82aUhxbWVvYjFRL3BINVovWWtHV2NOTXcwOURwRkdnc1YvanZNWWdDMk1aczNnc0lXc05xNFoxZ1RYRUpySE4yWHgyS3J1WS9SMjdpejJxcWFFNVF6TktNMWV6VXZPVVpqOEg0NWh4K0p4MFRnbm5LS2VYODM2SzNoVHZLZUlwRzZZMFRMa3haVnhycXBhWGxsaXJTS3RScTBmcnZUYXU3YWVkcHIxRnUxbjdnUTVCeDBvblhDZEhaNC9PQlozblU5bFQzYWNLcHhaTlBUcjFyaTZxYTZVYm9idEVkNzl1cCs2WW5yNWVnSjVNYjZmZWViM24raHg5TC8xVS9XMzZwL1ZIREZnR3N3d2tCdHNNemhnOHhUVnhiendkTDhmYjhWRkRYY05BUTZWaGxXR1g0WVNSdWRFOG85VkdqVVlQakduR1hPTWs0MjNHYmNhakpnWW1JU1pMVGVwTjdwcFNUYm1tS2FZN1REdE14ODNNemFMTjFwazFtejB4MXpMbm0rZWIxNXZmdDJCYWVGb3N0cWkydUdWSnN1UmFwbG51dHJ4dWhWbzVXYVZZVlZwZHMwYXRuYTBsMXJ1dHU2Y1JwN2xPazA2cm50Wm53N0R4dHNtMnFiY1pzT1hZQnR1dXRtMjJmV0ZuWWhkbnQ4V3V3KzZUdlpOOXVuMk4vVDBIRFlmWkRxc2RXaDErYzdSeUZEcFdPdDZhenB6dVAzM0Y5SmJwTDJkWXp4RFAyRFBqdGhQTEtjUnBuVk9iMDBkbkYyZTVjNFB6aUl1SlM0TExMcGMrTHBzYnh0M0l2ZVJLZFBWeFhlRjYwdldkbTdPYnd1Mm8yNi91TnU1cDdvZmNuOHcwbnltZVdUTnowTVBJUStCUjVkRS9DNStWTUd2ZnJINVBRMCtCWjdYbkl5OWpMNUZYcmRld3Q2VjNxdmRoN3hjKzlqNXluK00rNHp3MzNqTGVXVi9NTjhDM3lMZkxUOE52bmwrRjMwTi9JLzlrLzNyLzBRQ25nQ1VCWndPSmdVR0JXd0w3K0hwOEliK09QenJiWmZheTJlMUJqS0M1UVJWQmo0S3RndVhCclNGb3lPeVFyU0gzNTVqT2tjNXBEb1ZRZnVqVzBBZGg1bUdMdzM0TUo0V0hoVmVHUDQ1d2lGZ2EwVEdYTlhmUjNFTnozMFQ2UkpaRTNwdG5NVTg1cnkxS05TbytxaTVxUE5vM3VqUzZQOFl1WmxuTTFWaWRXRWxzU3h3NUxpcXVObTVzdnQvODdmT0g0cDNpQytON0Y1Z3Z5RjF3ZWFIT3d2U0ZweGFwTGhJc09wWkFUSWhPT0pUd1FSQXFxQmFNSmZJVGR5V09Dbm5DSGNKbklpL1JOdEdJMkVOY0toNU84a2dxVFhxUzdKRzhOWGtreFRPbExPVzVoQ2Vwa0x4TURVemRtenFlRnBwMklHMHlQVHE5TVlPU2taQnhRcW9oVFpPMlorcG41bVoyeTZ4bGhiTCt4VzZMdHk4ZWxRZkphN09RckFWWkxRcTJRcWJvVkZvbzF5b0hzbWRsVjJhL3pZbktPWmFybml2TjdjeXp5dHVRTjV6dm4vL3RFc0lTNFpLMnBZWkxWeTBkV09hOXJHbzVzanh4ZWRzSzR4VUZLNFpXQnF3OHVJcTJLbTNWVDZ2dFY1ZXVmcjBtZWsxcmdWN0J5b0xCdFFGcjZ3dFZDdVdGZmV2YzErMWRUMWd2V2QrMVlmcUduUnMrRlltS3JoVGJGNWNWZjlnbzNIamxHNGR2eXIrWjNKUzBxYXZFdVdUUFp0Sm02ZWJlTFo1YkRwYXFsK2FYRG00TjJkcTBEZDlXdE8zMTlrWGJMNWZOS051N2c3WkR1YU8vUExpOFphZkp6czA3UDFTa1ZQUlUrbFEyN3RMZHRXSFgrRzdSN2h0N3ZQWTA3TlhiVzd6My9UN0p2dHRWQVZWTjFXYlZaZnRKKzdQM1A2NkpxdW40bHZ0dFhhMU9iWEh0eHdQU0EvMEhJdzYyMTduVTFSM1NQVlJTajlZcjYwY094eCsrL3AzdmR5ME5OZzFWalp6RzRpTndSSG5rNmZjSjMvY2VEVHJhZG94N3JPRUgweDkySFdjZEwycENtdkthUnB0VG12dGJZbHU2VDh3KzBkYnEzbnI4UjlzZkQ1dzBQRmw1U3ZOVXlXbmE2WUxUazJmeXo0eWRsWjE5Zmk3NTNHRGJvclo3NTJQTzMyb1BiKys2RUhUaDBrWC9pK2M3dkR2T1hQSzRkUEt5MitVVFY3aFhtcTg2WDIzcWRPbzgvcFBUVDhlN25MdWFycmxjYTdudWVyMjFlMmIzNlJ1ZU44N2Q5TDE1OFJiLzF0V2VPVDNkdmZONmIvZkY5L1hmRnQxK2NpZjl6c3U3MlhjbjdxMjhUN3hmOUVEdFFkbEQzWWZWUDF2KzNOanYzSDlxd0hlZzg5SGNSL2NHaFlQUC9wSDFqdzlEQlkrWmo4dUdEWWJybmpnK09UbmlQM0w5NmZ5blE4OWt6eWFlRi82aS9zdXVGeFl2ZnZqVjY5Zk8wWmpSb1pmeWw1Ty9iWHlsL2VyQTZ4bXYyOGJDeGg2K3lYZ3pNVjcwVnZ2dHdYZmNkeDN2bzk4UFQrUjhJSDhvLzJqNXNmVlQwS2Y3a3htVGsvOEVBNWp6L0dNekxkc0FBQUFnWTBoU1RRQUFlaVVBQUlDREFBRDUvd0FBZ09rQUFIVXdBQURxWUFBQU9wZ0FBQmR2a2wvRlJnQUFBd0JRVEZSRkFBQUFYbDVlQUFBQUF3TURCQVFFQlFVRkJnWUdCd2NIQ0FnSUNRa0pDZ29LQ3dzTERBd01EUTBORGc0T0R3OFBFQkFRRVJFUkVoSVNFeE1URkJRVUZSVVZGaFlXRnhjWEdCZ1lHUmtaR2hvYUd4c2JIQndjSFIwZEhoNGVIeDhmSUNBZ0lTRWhJaUlpSXlNakpDUWtKU1VsSmlZbUp5Y25LQ2dvS1NrcEtpb3FLeXNyTEN3c0xTMHRMaTR1THk4dk1EQXdNVEV4TWpJeU16TXpORFEwTlRVMU5qWTJOemMzT0RnNE9UazVPam82T3pzN1BEdzhQVDA5UGo0K1B6OC9RRUJBUVVGQlFrSkNRME5EUkVSRVJVVkZSa1pHUjBkSFNFaElTVWxKU2twS1MwdExURXhNVFUxTlRrNU9UMDlQVUZCUVVWRlJVbEpTVTFOVFZGUlVWVlZWVmxaV1YxZFhXRmhZV1ZsWldscGFXMXRiWEZ4Y1hWMWRYbDVlWDE5ZllHQmdZV0ZoWW1KaVkyTmpaR1JrWldWbFptWm1aMmRuYUdob2FXbHBhbXBxYTJ0cmJHeHNiVzF0Ym01dWIyOXZjSEJ3Y1hGeGNuSnljM056ZEhSMGRYVjFkbloyZDNkM2VIaDRlWGw1ZW5wNmUzdDdmSHg4ZlgxOWZuNStmMzkvZ0lDQWdZR0Jnb0tDZzRPRGhJU0VoWVdGaG9hR2g0ZUhpSWlJaVltSmlvcUtpNHVMakl5TWpZMk5qbzZPajQrUGtKQ1FrWkdSa3BLU2s1T1RsSlNVbFpXVmxwYVdsNWVYbUppWW1abVptcHFhbTV1Ym5KeWNuWjJkbnA2ZW41K2ZvS0Nnb2FHaG9xS2lvNk9qcEtTa3BhV2xwcWFtcDZlbnFLaW9xYW1wcXFxcXE2dXJyS3lzcmEydHJxNnVyNit2c0xDd3NiR3hzckt5czdPenRMUzB0YlcxdHJhMnQ3ZTN1TGk0dWJtNXVycTZ1N3U3dkx5OHZiMjl2cjYrdjcrL3dNREF3Y0hCd3NMQ3c4UER4TVRFeGNYRnhzYkd4OGZIeU1qSXljbkp5c3JLeTh2THpNek16YzNOenM3T3o4L1AwTkRRMGRIUjB0TFMwOVBUMU5UVTFkWFYxdGJXMTlmWDJOalkyZG5aMnRyYTI5dmIzTnpjM2QzZDN0N2UzOS9mNE9EZzRlSGg0dUxpNCtQajVPVGs1ZVhsNXVibTUrZm42T2pvNmVucDZ1cnE2K3ZyN096czdlM3Q3dTd1NysvdjhQRHc4Zkh4OHZMeTgvUHo5UFQwOWZYMTl2YjI5L2YzK1BqNCtmbjUrdnI2Ky92Ny9QejgvZjM5L3Y3Ky8vLy9Ra3FmSXdBQUFBTjBVazVULy84QTE4b05RUUFBQUhaSlJFRlVlTnJzVTBrU3dDQUlTeGovLzJUcFFSaGJOZHBiTC9VQ1lRa09Dd3dBZ0JBQU9NZ0ViTkt3OG0rTk4vN1pYMnF6MVFNRlBaU0loNHRLbWU5UFhKVy9OTFdYWFJPNzBQZVJIV3Qrdzhmdi8wREorWENhRGw5TWZGNWRIblpDdGNER1RGdldvRDdUYlVjcGIrd0NBQUQvL3dNQXl5QVNLMkFhNkV3QUFBQUFTVVZPUks1Q1lJST0"},{ name : "__ASSET__:bitmap_flixel_system_debug__Window_GraphicCloseButton", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFnQUFBQUlDQVlBQUFERUQ3NkxBQUFBQkhOQ1NWUUlDQWdJZkFoa2lBQUFBQWx3U0ZsekFBQUFkZ0FBQUhZQlRuc21DQUFBQUJsMFJWaDBVMjltZEhkaGNtVUFkM2QzTG1sdWEzTmpZWEJsTG05eVo1dnVQQm9BQUFCL1NVUkJWQmlWVFkweENzSlFFQVhIYnlTZXdNdWxUV2R2YTZPbGxXSnBDQ0syaWsxT1krY3RRc1lpcS9rREM4dnM3bHZVU3UzVXBVcFdPN1ZDM1RqU3FXVU1EK0dldisxdGlKZDZ5dm95ajl3NzhWQVhLb21SR2JCaW9nY0dBTlNrTm5GNVY0L1IzOVNFMm9hNHF2TjRkdzUzS1lBMzBBRDFQeGJXUUFGOHZwYVlyTldBYU5WMEFBQUFBRWxGVGtTdVFtQ0M"},{ name : "__ASSET__:bitmap_flixel_system_debug__Window_GraphicWindowHandle", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVlBQUFDTk1zKzlBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUZCSlJFRlVlTnFNandFS0FDQUlBeFgyeWg3b055MmpRa3lwUWJUMGRFU3FTblllRXZoWE5zRE1ZblhlelZHNHdBME5OVlJaSGpLUEgyaDYvNWwxVzBPaXgzTlRFbDFDSjdxS0MvNExraTdBQUQ1WWZydllMZlJQQUFBQUFFbEZUa1N1UW1DQw"},{ name : "__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoCorners", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVBQUFBQkFDQVlBQUFDcWFYSGVBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQlkxSlJFRlVlTnJrV3d1eW16Z1FsR1Q4d1g1Sk52ZS9UUTYwdFhrdi9tRkFDNjRaMG01TEFwejFPaENxcHJEQnh1NmVuaGtKUnRZWTg2MnhkV1A3eG40MDloM3NIem4yMGRpeHNaTlkwZGlsc2JLeENxd0c4MkQ4M3NDZVg3ZWJoWDFyRHZacVdXTUwyUzhiV3dtT1RXTnZZbDhhKzlyWVg3TC9MTWZiejJ3Yk8yZHljQ2tBQ3JtZ0FTQkZ3QzZ5Ui9BZVNJZ0Jad0lZT0pPQVJDandSZUQ2K1BrTS9sc054OVlDZWlmN055VmdMeGQ5QjYrMzlyZnN2NHNLV2dXY3lmczFlVDRGT3VUOVBnSVFXRWdKQzFCQklZNjhpT20xVVNVWlhIZWhCSnprd0VHQUtoSHZRc0M3a0hRU0FpNEF1b29BcjhuTEtlQkRWR0FEUkRnaTRnSktacy9uNHZWYzNxL1VrVXFBRjVBZllrakNoNUNqM2k4SFNOMzBBQjlDZ0Uwb0FVbXdRa0JKdVVpUHJ5RG1jM205RkNJNkFpcngvZzhnUU1Hci9BdncvcEQ0N2dPYzh2eFFFcFNJQ3ZhbFhKc1Y4Q2J4bndNcFZTYmVMWUVBQkw2WDh5ZUsrMGRCRHdYK0tCRTFPQWdKVUd4YklzQm5VTmEwREI3azlSRkszeGtraGpFK3hMc2h3SDRrZUQrQUNFM0VXc1cwVkI0QW0xWUFMWmMyZzlwK0lQQUhxdmxWSk5iTlNFOC9vZ0QrYm93SXZMWVR4eDBCMTE0STJJZ3RNZ0NxSHp4Q3lWUFpsMVRxbmdteTcxcVdsR1poYjZqOEZZUnRUOGt3eXdUb2lZQVhFZkQxTDRKOGxCZzdrSFF2d0d2NDc1Y0F4b09RMEJHQTRNODB6T1doN2JNOVBsUUZzWE0xNUlRU0JrWWhFbFlaZ01haGJxeld2d0o4MzIvYWdBbzhPSzZDb1R1VFVDTUJPTkJoNzc4YThKakU2R2wwV29FS0NzQjYwaktJRTV3TGxic3hZL2ZmZ1FoV0ErYXVNa0NDeVFMU0x3Zkd2Zm5OeVdBVmxLU0VRc2NCUlVUNmZpS2VUeW1ocGx6QUpGd0pLQlAxZnFvSzRMQ3RZYUtFSkRoSDRLc1pTRDgwTnFnREpGd3R3emNrbWFtSGdROGt3NHBJV0RqeS90UVZFQ01pUmtMbElqYzFwK2oxUGdKOElDRldMbkZuMTgvTSsxWGdIdWFOQXVvQk56dW1Gdis5WWVBQ1NXL29sSGVxT2VER2hpcGc2dU9BS0JFdVVmYm1zREVKRlpQZ1RQcWh4bHhJQ0QybTZ3Z1krOGhxVHZuQXU1bDZQVFl6dkZPRCt3T2tINW9YZE9kY1l2dzg1ZEdnSHhvT3pveDdiaitYSE5BZGMyYittMDlNazQyYmFlSWJzbGtsd1A0cFlFUHZYZVFEcVMvUGFsTUZoR3lPS3Jqck8zSXpCODBLdm51czdoTGVueklwc2NmbmQ2cDNpVENZaStkakpEZ2t3TTI4SW9SYTdib2NNR2NWaE1CamE1M3JYZ1NJbUVNSkRMWGNJdVlGZGxzdUlpVE1EZnhObDZrTGdIZG1Yb21RUTBCYlp6c0N0SWRXRDA1OVlHUURCSEJ2c2JiUVpZN0FZM3hNT1JuYW52aS9VVUJHS3BoVFNXVHBZM2Q1aTNuWm5sanBtNTU4WUNlWStFS0xMQlRyQ2dsWXc0bU13c0JNWkdnY0d2bTVsUGVOdE1sZDI4YUZpQlVSNEdES1hKdGhEWXV2bnV2SEZJREFPd1VnQVdzS0IrNFB0aWJjbWhxN0RXVk11TkY1N08yc01mY2wrbGFWNE5xaXE3VUhOd0owQXlmTzhnVnNqMC9kWDdPSlAydi9ZKzhPbWVveStDVTRkdzFxdjRaQUxuOCtGK05HNlJBQi9oYzkrOHg1UG51ZFBhOXJCWElOQVNWZ0srQnpjN3MyQ0lIR1dtZTVXenNXTGo0U0Zxd2VQd0kwMzlwRHI3UGtOMkJyVkVDN3RZc0plRjBncnI3Z0xqSm53azlmWGxYdWVLaTdCTkNxN3EzNTJTNi9WUVZzNVlzS0h0dmxhMkFZMXduZVBXSXkvOCtUSkp1WTZOaEF0a2ZRT3lLZ2E1ZlBoVFgwUGk0OHhEc29xV2JLWnl1aER6eU84VlgyQ253WEljRXBBVXZ5UEpaQWpDdGRXZnFLbmlMYjQza3VkUnNCck10b1B4RUpMVzZMWlhCbjd0Y0xlQ0lnSXhYRXdpRkZRbXdNMFZmelkwdHBPZXVyOTNQQjlFbE1sYUR5YnovVExTc3pKdDR5YitCSGxrUlFUQWtwRXZ6STBoa2I0ckxzMmZ0YklPQU5iQXRWNExwZVlHZCtManIwZ2RLSGlhVnZQZEV6OGtIb2xyYUwxSHYydmtxL1hVWGVyaUQvVEdxb2NQSDB5ZHl2dXViWXFzejlpbTFWZ251Z01neXArVFl5ekkxTmNIQm1pM01aWFIxL3hLVCtyd0FEQUFKQmFpQW1tNXh3QUFBQUFFbEZUa1N1UW1DQw"},{ name : "__ASSET__:bitmap_flixel_input_mouse__FlxMouse_GraphicCursor", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJnQUFBQWdDQVlBQUFBSVhyZzRBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQW1SSlJFRlVlTnEwbHM5ckUwRVV4Nzg3MllTZ0psVFNTaVdwVnZyRElxaEZVSUtnK0NlSUlncWVGRS9pVFJDOHBMUVhqeUwwNGc5Q29tWFRKSVcwT1ZVRU1UZEJSSWs1VzZXdGtLSlNiR25EcHNuNlprMlczVFFicytua3dkdVpuVm0rbjMwenczc2pCVUxCQ0lBcGRNbGMrL3orZDlScTVMbHVBT1JhTzhrZkR5ZW5XMGJ5YU9LZVl3RGpEMDNUZEFnSlJFUkhJTkVlYUpWS0ZZeEprQ1NKajAzWVJYTC85bVZib2Q2QmtIMEV1bWxTdlNjMEVnTnc1ZXAxakE2UENJY1lnQU0rUDU0OG5zYXh3VUdoRUdaKzJTaFZNSjlLNCtqQUVXRVFDMkM3cEVKakhpeWswd2dGZzBJZ3JIRmdhYm1vaTJkbWt6amMzNzlueUM3QW44MHQvRjdmMFBlQ1F3NzE5UmtRT29xUlBRTzRmVjBwNnUzdzBCQXl5U1FDZ1VESGtLYUE0czkxYkc2VjlQN3hrVkU5a29NOVBSMUJtTjNFVWkwS2JpZkd4akNuS1BEN2ZJNGh0b0RWNGkrbzVSM2ovZlRKVXdSSk9JYllBbmgrK3I2NlpoazdNejRPSlI2SDErdHRHOEphVFg3N3NZWkt0V29aQzU4OWg5U3JtYlloTFFHcXVxTXZWYU9kRDRjeEU0M0M0M2JEVkU4aWpnR05tMjIyU3hjdUl2Nzh4WDhoY2l2eFdTV0dmUDRUYmV4K0VtcitLVjhxdFZ3MlEyQ3U4YmFBVk9JbEZ1YlQvejZTWFdBdTF1N1J0MENhQXJJa25Na2t3UXVjTE11UW1PUTBReGlRWFlEWGkxa2thR2tZWTVEZExqNzBsdnhCaDhuVVl3SGtjbThRaXo0MUw4a2lMM1pVbzdjN3Jja0c0T09IOXlnVThuQVRzMWI4cytUWFNGd1ZVbkMrRkQ3VFh4czNpemtSNGtZRUx1c0o0ZUkzbTRuYkxZT1RWS0dRM3hEeDU1YUxWNjBmSTcvRDg1ekltMTA5Z21ma3QwU0wxMi9YdmRUZTdkYjEvYThBQXdDWlVNUU16UW9keXdBQUFBQkpSVTVFcmtKZ2dnPT0"},{ name : "__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoLight", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVBQUFBQkFDQVlBQUFDcWFYSGVBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQnE1SlJFRlVlTnJVVzR0dTR6WVE1TktVYzNmcHQvYWYrcE01MjVLNFJRQ3gySnZiRi8xSTJ3Q0VaRWQyTk1QWnQwTGx6Ny9LQzMvb1NkL0RyN3JCOXNXZzZVN0E5Q295MmhjQXB3ZStpNFB2NC84Q0FSUzhSM2VBbE5ld3VBNC9RNCtTMEw0SU9EMWdDcFM0RC81cUFpeEFsSHd2SW9PVHBQQ0VtcDVHQUUwQ0orTzZqQk5rQjlSVFRLSTlDTndDR0wwWDdUd0xnS3lBWlllSUtUVTg2Z1ExSXNaN1ZRRS9TNEE4NzQ0S1h1b0RNdktPVm5XVWdJQ3NSUWNKRkpBeFJVeDdFSHlGY3dSY0EySTg4QU5rRjY5SlVRWTdEalEwaDVZQWI1RkFEdUFxRnNGNWhvQU93UHZ4K1E0cTZBYjR0Qis0eHdscTREWGdKK1cxWmc3c0VERFdMc0NpQ1hqK0ljd1ZXbkwzU1pFK0FwWkFjVlZGRmFSNGRqN0FzZ0MrSDUvWndROGcwRzRvd1EyUjdRNnZYNVhkSHlBYkFHOEtHZmdkMnU0UDRKczR4OWZqZm5ieG5YMDJTclNKM2RkMi9pU09UUnkxZFlMcjBRZDBBRDhBeTRYa2FVUjRvZkkzTWxvaXhkWGlPMG9ld1M2d21xSUdWSUFrUUlKZWp6WCszbVlrUldnS2x2Ui9lZDBtS2poTi9pY0Q5RmtjeitMMzQ5b0t6cENGbzBQZ0RmeUk1ZUZaMmUzeWlBL3draHEwOHdVQXY4SDVJb2lRU2tCUExuZitKcFpHZ0JWQ2krSVV6YWpRa3BWZURhUXZ3WDg3UUkvMVRmeE9tb1NtQUFSL0ZZUlI0RGhMMER0SU9VRnliSitVVUllN1AwQi9QNERMOVNaSWtHYkFRSUFFdjRqZEw0cGlNR21xQWp3Wi9RVFZDVklpSDdETW9BRUJBL0FuQ1QrTzQzZEJ6aG5zZWhBZzdmNFQvRThnQ3NIdlNzSlVJVzBtbzcvSVVSZ2tKd3lpL1dzRWZBSitQd2dZUzVyRzRoRHdDZjRDU2lsR2xyZ2JaS0FTckVZclo0b2hMZDNGMEhkV0NQaHhrUEN1S0dFUkpFb0h1QjdnaDBwSUFhOGxSaWVSTVZZbFd6VHJnMHd4cEJFaGZjRWlTSkFFSUFudmdvQXpSQUpwLzJkbDUyVitzRUtJYk1mN0o1RU00YkljSWJWRTFXZWx2bG9PZ0k0UUNaQ21nQXBZaGRldjRzWXQ4R05wOVlaSHdpOUtpRExCNGhSQUo4TVJuc0VSRG4vd0J4Q3dnTk5hUWZvTXdHVmtXSlQwR2plcVo3ckhUUWtSTldoalJabmdHWlNBSmpITW9JRUNic0lrQnZnQi9BMXlDU3Uxcm80RDU0d1BvQ0FaaWtwZ0xTcThLZUZ4Z0tuQ0I4aW9JTUZmSUwxdWlWTGJhNzJGWVRBVEZTaHdqTTFSeGpDUlJlejRKbXI5TTZUTkMrUU5sdXk5QnF4cEJqTzFnQlVleVZBRGtxRVJVK0hHUmlSb3prNlRrNm5TN0N5eUpZWVRzeDNpQW0xeEN0cG94ZWtZUlUzVnUwQVh1TW1aMlI4N0ZSZzcvVDJyMVYyVWZvRDNXYTk5bmhtcjNhMEE3WTk3N1d4TVQzZFk2MEV3SmtJYnRMMnNuUDllOEdZWUpLZU5aTzF3VDdTeE1HbTVpci9KSWd6dVVQL2Z4R2MyY2R3VVFsQTkzc3pBRElQUkdKcVYzbDBQMmxpeXJKV2xMWW5QVk1nRHJzcTZBUUdhU3Rnd3lSSjFoVnBDTWw3ZkhuY2VnVjlFL0Vid0MrUUJzZ3orT0k2WFl3MHlWa1VORmhIZUlOWE5BNnkrR2twdGQzYitDbVZ0aGZSMmhZS25ReW44QVNSY3dUUlFBWmFQaUtLYW1ncVQ0Z09zY1pVbCtjWG81bGdWWDRmTTd3T1dSOFNtQUk4YzVUOEthY2FPRjRNRWRxUXZuVnd6cXJvVkNDQWdZQld5bCtDUmdCV1VnSW9vR1FjWW1ZQVg0anFFdEhiY21CeVdrTkx4dllGUGtBckFqdEJGVVlFa3dsSUFubk1tQ2hSbnlvbzl0azNKNkc3S0VGVHVyblJ5NkJUeEd1bEFmOExTRklBT2taMlErRnRWT0JNR05UVnNrUGRYQXp6dVBqWkZPNWpCVGV5MGpBWVhKVS9ZamR6QWNvUnVGR0NuZHU0d2t4dm5ZMngxVlZTek83dGZ3UVIyVUFIbUJSZHh0SnhnRDU0eWNVM0E2NkdqS2V4S3I2REF6ck1DQ25jZkJ5TmFQbkZUdlArcWhNTTlDSU4zT1VFckJTYVIxR3lKTWZkTk5FS3QyV0EzU0pESHEyUDdtZDNIOUQ1VkRHbFBjZlNnNVl4Z21taDV6VXlIVjZXbXNNQjNweVpJSzhDZHBSdkFOeU5ibEFTY2xLNU9FVTdRZXo1Z0Qyb0JiL2VuTTBFdkg3Q2V5Y0dFYVFCcHg4MWxtcGRlaldFOUtUSlRLdk1qaVZCSlBKT3p3WmdMbldBTituajRqSkJHUkUvbS96elRGR21KM2ZjYURkM0lGYW80N2tyTHF6Z0U0UENUamVaSWxQV0Z1NS90Q211NUFRNGdHRVpaVlF3cHZhZkROQ2ZibmVKTEE1d3BnKzl1aVZId1hsZUlRSDlnTlRpTEUyVllxZTZpZmlGUE5IZW5HaUxraEVRQ1U4RHFyMExPRUQwMm55R2lPS0dPWnh1aldSTW9Tbmkwd2lRcFQyaVEwNGttQnp3N3RRZ0hOcDhpWW1ZeTVEMTBxRDJwVGNiTWdCTmtsNENFakpON3lmOExjS0tEck8yOE5ZTG53QXk4bHJ5MzAwODFnZG5Ka1VXSU5YVGxoQkl5NzAwUFJlNGx3RXFPTEFkcDNTQWxBSEJ5V0hNWCtHY29nQnhpSWpJeWl1STdydmt5QWlJMXpONGtUeWpqS2VDZlFVQlcyc1dwS1NJbitCTGd6eVlnVXNXak4vNi8rdS94NkticDN3QnEvZnd0d0FDRGVkRE1KazlyRWdBQUFBQkpSVTVFcmtKZ2dnPT0"},{ name : "__ASSET__:bitmap_flixel_tile_GraphicAuto", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUlBQUFBQUlDQU1BQUFBR0F3ZE1BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBS1QybERRMUJRYUc5MGIzTm9iM0FnU1VORElIQnliMlpwYkdVQUFIamFuVk5uVkZQcEZqMzMzdlJDUzRpQWxFdHZVaFVJSUZKQ2k0QVVrU1lxSVFrUVNvZ2hvZGtWVWNFUlJVVUVHOGlnaUFPT2pvQ01GVkVzRElvSzJBZmtJYUtPZzZPSWlzcjc0WHVqYTlhODkrYk4vclhYUHVlczg1Mnp6d2ZBQ0F5V1NETlJOWUFNcVVJZUVlQ0R4OFRHNGVRdVFJRUtKSEFBRUFpelpDRnovU01CQVBoK1BEd3JJc0FIdmdBQmVOTUxDQURBVFp2QU1CeUgvdy9xUXBsY0FZQ0VBY0Iwa1RoTENJQVVBRUI2amtLbUFFQkdBWUNkbUNaVEFLQUVBR0RMWTJMakFGQXRBR0FuZitiVEFJQ2QrSmw3QVFCYmxDRVZBYUNSQUNBVFpZaEVBR2c3QUt6UFZvcEZBRmd3QUJSbVM4UTVBTmd0QURCSlYyWklBTEMzQU1ET0VBdXlBQWdNQURCUmlJVXBBQVI3QUdESUl5TjRBSVNaQUJSRzhsYzg4U3V1RU9jcUFBQjRtYkk4dVNRNVJZRmJDQzF4QjFkWExoNG96a2tYS3hRMllRSmhta0F1d25tWkdUS0JOQS9nODh3QUFLQ1JGUkhnZy9QOWVNNE9yczdPTm82MkRsOHQ2cjhHL3lKaVl1UCs1YytyY0VBQUFPRjBmdEgrTEMrekdvQTdCb0J0L3FJbDdnUm9YZ3VnZGZlTFpySVBRTFVBb09uYVYvTncrSDQ4UEVXaGtMbloyZVhrNU5oS3hFSmJZY3BYZmY1bndsL0FWLzFzK1g0OC9QZjE0TDdpSklFeVhZRkhCUGpnd3N6MFRLVWN6NUlKaEdMYzVvOUgvTGNMLy93ZDB5TEVTV0s1V0NvVTQxRVNjWTVFbW96ek1xVWlpVUtTS2NVbDB2OWs0dDhzK3dNKzN6VUFzR28rQVh1UkxhaGRZd1AyU3ljUVdIVEE0dmNBQVBLN2I4SFVLQWdEZ0dpRDRjOTMvKzgvL1VlZ0pRQ0Faa21TY1FBQVhrUWtMbFRLc3ovSENBQUFSS0NCS3JCQkcvVEJHQ3pBQmh6QkJkekJDL3hnTm9SQ0pNVENRaEJDQ21TQUhISmdLYXlDUWlpR3piQWRLbUF2MUVBZE5NQlJhSWFUY0E0dXdsVzREajF3RC9waENKN0JLTHlCQ1FSQnlBZ1RZU0hhaUFGaWlsZ2pqZ2dYbVlYNEljRklCQktMSkNESmlCUlJJa3VSTlVneFVvcFVJRlZJSGZJOWNnSTVoMXhHdXBFN3lBQXlndnlHdkVjeGxJR3lVVDNVRExWRHVhZzNHb1JHb2d2UVpIUXhtbzhXb0p2UWNyUWFQWXcyb2VmUXEyZ1AybzgrUThjd3dPZ1lCelBFYkRBdXhzTkNzVGdzQ1pOank3RWlyQXlyeGhxd1Zxd0R1NG4xWTgreGR3UVNnVVhBQ1RZRWQwSWdZUjVCU0ZoTVdFN1lTS2dnSENRMEVkb0pOd2tEaEZIQ0p5S1RxRXUwSnJvUitjUVlZakl4aDFoSUxDUFdFbzhUTHhCN2lFUEVOeVFTaVVNeUo3bVFBa214cEZUU0V0SkcwbTVTSStrc3FaczBTQm9qazhuYVpHdXlCem1VTENBcnlJWGtuZVRENURQa0crUWg4bHNLbldKQWNhVDRVK0lvVXNwcVNobmxFT1UwNVFabG1ESkJWYU9hVXQyb29WUVJOWTlhUXEyaHRsS3ZVWWVvRXpSMW1qbk5neFpKUzZXdG9wWFRHbWdYYVBkcHIraDB1aEhkbFI1T2w5Qlgwc3ZwUitpWDZBUDBkd3dOaGhXRHg0aG5LQm1iR0FjWVp4bDNHSytZVEtZWjA0c1p4MVF3TnpIcm1PZVpENWx2VlZncXRpcDhGWkhLQ3BWS2xTYVZHeW92VkttcXBxcmVxZ3RWODFYTFZJK3BYbE45cmtaVk0xUGpxUW5VbHF0VnFwMVE2MU1iVTJlcE82aUhxbWVvYjFRL3BINVovWWtHV2NOTXcwOURwRkdnc1YvanZNWWdDMk1aczNnc0lXc05xNFoxZ1RYRUpySE4yWHgyS3J1WS9SMjdpejJxcWFFNVF6TktNMWV6VXZPVVpqOEg0NWh4K0p4MFRnbm5LS2VYODM2SzNoVHZLZUlwRzZZMFRMa3haVnhycXBhWGxsaXJTS3RScTBmcnZUYXU3YWVkcHIxRnUxbjdnUTVCeDBvblhDZEhaNC9PQlozblU5bFQzYWNLcHhaTlBUcjFyaTZxYTZVYm9idEVkNzl1cCs2WW5yNWVnSjVNYjZmZWViM24raHg5TC8xVS9XMzZwL1ZIREZnR3N3d2tCdHNNemhnOHhUVnhiendkTDhmYjhWRkRYY05BUTZWaGxXR1g0WVNSdWRFOG85VkdqVVlQakduR1hPTWs0MjNHYmNhakpnWW1JU1pMVGVwTjdwcFNUYm1tS2FZN1REdE14ODNNemFMTjFwazFtejB4MXpMbm0rZWIxNXZmdDJCYWVGb3N0cWkydUdWSnN1UmFwbG51dHJ4dWhWbzVXYVZZVlZwZHMwYXRuYTBsMXJ1dHU2Y1JwN2xPazA2cm50Wm53N0R4dHNtMnFiY1pzT1hZQnR1dXRtMjJmV0ZuWWhkbnQ4V3V3KzZUdlpOOXVuMk4vVDBIRFlmWkRxc2RXaDErYzdSeUZEcFdPdDZhenB6dVAzM0Y5SmJwTDJkWXp4RFAyRFBqdGhQTEtjUnBuVk9iMDBkbkYyZTVjNFB6aUl1SlM0TExMcGMrTHBzYnh0M0l2ZVJLZFBWeFhlRjYwdldkbTdPYnd1Mm8yNi91TnU1cDdvZmNuOHcwbnltZVdUTnowTVBJUStCUjVkRS9DNStWTUd2ZnJINVBRMCtCWjdYbkl5OWpMNUZYcmRld3Q2VjNxdmRoN3hjKzlqNXluK00rNHp3MzNqTGVXVi9NTjhDM3lMZkxUOE52bmwrRjMwTi9JLzlrLzNyLzBRQ25nQ1VCWndPSmdVR0JXd0w3K0hwOEliK09QenJiWmZheTJlMUJqS0M1UVJWQmo0S3RndVhCclNGb3lPeVFyU0gzNTVqT2tjNXBEb1ZRZnVqVzBBZGg1bUdMdzM0TUo0V0hoVmVHUDQ1d2lGZ2EwVEdYTlhmUjNFTnozMFQ2UkpaRTNwdG5NVTg1cnkxS05TbytxaTVxUE5vM3VqUzZQOFl1WmxuTTFWaWRXRWxzU3h3NUxpcXVObTVzdnQvODdmT0g0cDNpQytON0Y1Z3Z5RjF3ZWFIT3d2U0ZweGFwTGhJc09wWkFUSWhPT0pUd1FSQXFxQmFNSmZJVGR5V09Dbm5DSGNKbklpL1JOdEdJMkVOY0toNU84a2dxVFhxUzdKRzhOWGtreFRPbExPVzVoQ2Vwa0x4TURVemRtenFlRnBwMklHMHlQVHE5TVlPU2taQnhRcW9oVFpPMlorcG41bVoyeTZ4bGhiTCt4VzZMdHk4ZWxRZkphN09RckFWWkxRcTJRcWJvVkZvbzF5b0hzbWRsVjJhL3pZbktPWmFybml2TjdjeXp5dHVRTjV6dm4vL3RFc0lTNFpLMnBZWkxWeTBkV09hOXJHbzVzanh4ZWRzSzR4VUZLNFpXQnF3OHVJcTJLbTNWVDZ2dFY1ZXVmcjBtZWsxcmdWN0J5b0xCdFFGcjZ3dFZDdVdGZmV2YzErMWRUMWd2V2QrMVlmcUduUnMrRlltS3JoVGJGNWNWZjlnbzNIamxHNGR2eXIrWjNKUzBxYXZFdVdUUFp0Sm02ZWJlTFo1YkRwYXFsK2FYRG00TjJkcTBEZDlXdE8zMTlrWGJMNWZOS051N2c3WkR1YU8vUExpOFphZkp6czA3UDFTa1ZQUlUrbFEyN3RMZHRXSFgrRzdSN2h0N3ZQWTA3TlhiVzd6My9UN0p2dHRWQVZWTjFXYlZaZnRKKzdQM1A2NkpxdW40bHZ0dFhhMU9iWEh0eHdQU0EvMEhJdzYyMTduVTFSM1NQVlJTajlZcjYwY094eCsrL3AzdmR5ME5OZzFWalp6RzRpTndSSG5rNmZjSjMvY2VEVHJhZG94N3JPRUgweDkySFdjZEwycENtdkthUnB0VG12dGJZbHU2VDh3KzBkYnEzbnI4UjlzZkQ1dzBQRmw1U3ZOVXlXbmE2WUxUazJmeXo0eWRsWjE5Zmk3NTNHRGJvclo3NTJQTzMyb1BiKys2RUhUaDBrWC9pK2M3dkR2T1hQSzRkUEt5MitVVFY3aFhtcTg2WDIzcWRPbzgvcFBUVDhlN25MdWFycmxjYTdudWVyMjFlMmIzNlJ1ZU44N2Q5TDE1OFJiLzF0V2VPVDNkdmZONmIvZkY5L1hmRnQxK2NpZjl6c3U3MlhjbjdxMjhUN3hmOUVEdFFkbEQzWWZWUDF2KzNOanYzSDlxd0hlZzg5SGNSL2NHaFlQUC9wSDFqdzlEQlkrWmo4dUdEWWJybmpnK09UbmlQM0w5NmZ5blE4OWt6eWFlRi82aS9zdXVGeFl2ZnZqVjY5Zk8wWmpSb1pmeWw1Ty9iWHlsL2VyQTZ4bXYyOGJDeGg2K3lYZ3pNVjcwVnZ2dHdYZmNkeDN2bzk4UFQrUjhJSDhvLzJqNXNmVlQwS2Y3a3htVGsvOEVBNWp6L0dNekxkc0FBQUFnWTBoU1RRQUFlaVVBQUlDREFBRDUvd0FBZ09rQUFIVXdBQURxWUFBQU9wZ0FBQmR2a2wvRlJnQUFBd0JRVEZSRkFBQUFYbDVlQUFBQUF3TURCQVFFQlFVRkJnWUdCd2NIQ0FnSUNRa0pDZ29LQ3dzTERBd01EUTBORGc0T0R3OFBFQkFRRVJFUkVoSVNFeE1URkJRVUZSVVZGaFlXRnhjWEdCZ1lHUmtaR2hvYUd4c2JIQndjSFIwZEhoNGVIeDhmSUNBZ0lTRWhJaUlpSXlNakpDUWtKU1VsSmlZbUp5Y25LQ2dvS1NrcEtpb3FLeXNyTEN3c0xTMHRMaTR1THk4dk1EQXdNVEV4TWpJeU16TXpORFEwTlRVMU5qWTJOemMzT0RnNE9UazVPam82T3pzN1BEdzhQVDA5UGo0K1B6OC9RRUJBUVVGQlFrSkNRME5EUkVSRVJVVkZSa1pHUjBkSFNFaElTVWxKU2twS1MwdExURXhNVFUxTlRrNU9UMDlQVUZCUVVWRlJVbEpTVTFOVFZGUlVWVlZWVmxaV1YxZFhXRmhZV1ZsWldscGFXMXRiWEZ4Y1hWMWRYbDVlWDE5ZllHQmdZV0ZoWW1KaVkyTmpaR1JrWldWbFptWm1aMmRuYUdob2FXbHBhbXBxYTJ0cmJHeHNiVzF0Ym01dWIyOXZjSEJ3Y1hGeGNuSnljM056ZEhSMGRYVjFkbloyZDNkM2VIaDRlWGw1ZW5wNmUzdDdmSHg4ZlgxOWZuNStmMzkvZ0lDQWdZR0Jnb0tDZzRPRGhJU0VoWVdGaG9hR2g0ZUhpSWlJaVltSmlvcUtpNHVMakl5TWpZMk5qbzZPajQrUGtKQ1FrWkdSa3BLU2s1T1RsSlNVbFpXVmxwYVdsNWVYbUppWW1abVptcHFhbTV1Ym5KeWNuWjJkbnA2ZW41K2ZvS0Nnb2FHaG9xS2lvNk9qcEtTa3BhV2xwcWFtcDZlbnFLaW9xYW1wcXFxcXE2dXJyS3lzcmEydHJxNnVyNit2c0xDd3NiR3hzckt5czdPenRMUzB0YlcxdHJhMnQ3ZTN1TGk0dWJtNXVycTZ1N3U3dkx5OHZiMjl2cjYrdjcrL3dNREF3Y0hCd3NMQ3c4UER4TVRFeGNYRnhzYkd4OGZIeU1qSXljbkp5c3JLeTh2THpNek16YzNOenM3T3o4L1AwTkRRMGRIUjB0TFMwOVBUMU5UVTFkWFYxdGJXMTlmWDJOalkyZG5aMnRyYTI5dmIzTnpjM2QzZDN0N2UzOS9mNE9EZzRlSGg0dUxpNCtQajVPVGs1ZVhsNXVibTUrZm42T2pvNmVucDZ1cnE2K3ZyN096czdlM3Q3dTd1NysvdjhQRHc4Zkh4OHZMeTgvUHo5UFQwOWZYMTl2YjI5L2YzK1BqNCtmbjUrdnI2Ky92Ny9QejgvZjM5L3Y3Ky8vLy9Ra3FmSXdBQUFBTjBVazVULy84QTE4b05RUUFBQUcxSlJFRlVlTnJzazdFU3dDQUlRMS84LzQ5MlVEeUJWdHk2MUNVWEVnVTVvQUZBUXdCaWNnYUhTc2ZaZlBCT2x5UUpTekM1bHJmUWpWb0MrVUNwYncvdlNNQ0RuczFQdnp6b2Z3SGZGMkJENWxCKzJONExTUFp3eWdKc3pRS0dkYXM2UUxwMjI0RU9BQUQvL3dNQTlQY0E4YU9wY3lVQUFBQUFTVVZPUks1Q1lJST0"},{ name : "__ASSET__:bitmap_flixel__FlxSprite_GraphicDefault", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJBQUFBQVFDQVlBQUFBZjgvOWhBQUFBQkdkQlRVRUFBTEdPZlB0Umt3QUFBQ0JqU0ZKTkFBQ0hEd0FBakE4QUFQMVNBQUNCUUFBQWZYa0FBT21MQUFBODVRQUFHY3h6UElWM0FBQUtPV2xEUTFCUWFHOTBiM05vYjNBZ1NVTkRJSEJ5YjJacGJHVUFBRWpIblpaM1ZGVFhGb2ZQdlhkNm9jMHdBbEtHM3J2QUFOSjdrMTVGWVpnWllDZ0REak0wc1NHaUFoRkZSSm9pU0ZERWdORlFKRlpFc1JBVVZMQUhKQWdvTVJoRlZDeHZSdGFMcnF5ODkvTHkrK09zYisyejk3bjc3TDNQV2hjQWtxY3ZsNWNHU3dHUXloUHdnenljNlJHUlVYVHNBSUFCSG1DQUtRQk1Wa2E2WDdCN0NCREp5ODJGbmlGeUFsOEVBZkI2V0x3Q2NOUFFNNEJPQi8rZnBGbnBmSUhvbUFBUm03TTVHU3dSRjRnNEpVdVFMcmJQaXBnYWx5eG1HQ1ZtdmloQkVjdUpPV0dSRFQ3N0xMS2ptTm1wUExhSXhUbW5zMVBaWXU0VjhiWk1JVWZFaUsrSUN6TzVuQ3dSM3hLeFJvb3dsU3ZpTitMWVZBNHpBd0FVU1d3WGNGaUpJallSTVlrZkV1UWk0dVVBNEVnSlgzSGNWeXpnWkF2RWwzSkpTOC9oY3hNU0JYUWRsaTdkMU5xYVFmZmtaS1Z3QkFMREFDWXJtY2xuMDEzU1V0T1p2QndBRnUvOFdUTGkydEpGUmJZMHRiYTBORFF6TXYycVVQOTE4MjlLM050RmVobjR1V2NRcmYrTDdhLzgwaG9BWU15SmFyUHppeTJ1Q29ET0xRREkzZnRpMHpnQWdLU29ieDNYdjdvUFRUd3ZpUUpCdW8yeGNWWldsaEdYd3pJU0YvUVAvVStIdjZHdnZtY2tQdTZQOHRCZE9mRk1ZWXFBTHE0Ykt5MGxUY2luWjZReldSeTY0WitIK0I4SC9uVWVCa0djZUE2Znd4TkZoSW1tak10TEVMV2J4K1lLdUdrOE9wZjNuNXI0RDhQK3BNVzVGb25TK0JGUVk0eUExSFVxUUg3dEJ5Z0tFU0RSKzhWZC82TnZ2dmd3SUg1NTRTcVRpM1AvN3pmOVo4R2w0aVdEbS9BNXppVW9oTTRTOGpNWDk4VFBFcUFCQVVnQ0twQUh5a0FkNkFCRFlBYXNnQzF3Qkc3QUcvaURFQkFKVmdNV1NBU3BnQSt5UUI3WUJBcEJNZGdKOW9CcVVBY2FRVE5vQmNkQkp6Z0Z6b05MNEJxNEFXNkQrMkFVVElCbllCYThCZ3NRQkdFaE1rU0I1Q0VWU0JQU2g4d2dCbVFQdVVHK1VCQVVDY1ZDQ1JBUEVrSjUwR2FvR0NxRHFxRjZxQm42SGpvSm5ZZXVRSVBRWFdnTW1vWitoOTdCQ0V5Q3FiQVNyQVVid3d6WUNmYUJRK0JWY0FLOEJzNkZDK0FkY0NYY0FCK0ZPK0R6OERYNE5qd0tQNFBuRUlBUUVScWlpaGdpRE1RRjhVZWlrSGlFajZ4SGlwQUtwQUZwUmJxUlB1UW1Nb3JNSUc5UkdCUUZSVWNab214Um5xaFFGQXUxQnJVZVZZS3FSaDFHZGFCNlVUZFJZNmhaMUVjMEdhMkkxa2Zib0wzUUVlZ0VkQmE2RUYyQmJrSzNveStpYjZNbjBLOHhHQXdObzQyeHduaGlJakZKbUxXWUVzdytUQnZtSEdZUU00Nlp3Mkt4OGxoOXJCM1dIOHZFQ3JDRjJDcnNVZXhaN0JCMkF2c0dSOFNwNE14dzdyZ29IQStYajZ2QUhjR2R3UTNoSm5FTGVDbThKdDRHNzQ5bjQzUHdwZmhHZkRmK09uNEN2MENRSm1nVDdBZ2hoQ1RDSmtJbG9aVndrZkNBOEpKSUpLb1JyWW1CUkM1eEk3R1NlSXg0bVRoR2ZFdVNJZW1SWEVqUkpDRnBCK2tRNlJ6cEx1a2xtVXpXSWp1U284Z0M4ZzV5TS9rQytSSDVqUVJGd2tqQ1M0SXRzVUdpUnFKRFlraml1U1JlVWxQU1NYSzFaSzVraGVRSnlldVNNMUo0S1MwcEZ5bW0xSHFwR3FtVFVpTlNjOUlVYVZOcGYrbFU2UkxwSTlKWHBLZGtzREphTW00eWJKa0NtWU15RjJUR0tRaEZuZUpDWVZFMlV4b3BGeWtUVkF4Vm0rcEZUYUlXVTcrakRsQm5aV1ZrbDhtR3lXYkwxc2llbGgybElUUXRtaGN0aFZaS08wNGJwcjFib3JURWFRbG55ZllsclV1R2xzekxMWlZ6bE9QSUZjbTF5ZDJXZXlkUGwzZVRUNWJmSmQ4cC8xQUJwYUNuRUtpUXBiQmY0YUxDekZMcVV0dWxyS1ZGUzQ4dnZhY0lLK29wQmltdVZUeW8ySzg0cDZTczVLR1VybFNsZEVGcFJwbW03S2ljcEZ5dWZFWjVXb1dpWXEvQ1ZTbFhPYXZ5bEM1TGQ2S24wQ3ZwdmZSWlZVVlZUMVdoYXIzcWdPcUNtclphcUZxK1dwdmFRM1dDT2tNOVhyMWN2VWQ5VmtORncwOGpUNk5GNDU0bVhwT2htYWk1VjdOUGMxNUxXeXRjYTZ0V3A5YVV0cHkybDNhdWRvdjJBeDJ5am9QT0dwMEduVnU2R0YyR2JyTHVQdDBiZXJDZWhWNmlYbzNlZFgxWTMxS2ZxNzlQZjlBQWJXQnR3RE5vTUJneEpCazZHV1lhdGhpT0dkR01mSTN5alRxTm5odHJHRWNaN3pMdU0vNW9ZbUdTWXRKb2N0OVV4dFRiTk4rMDIvUjNNejB6bGxtTjJTMXpzcm03K1Fiekx2TVh5L1NYY1pidFgzYkhnbUxoWjdIVm9zZmlnNldWSmQreTFYTGFTc01xMXFyV2FvUkJaUVF3U2hpWHJkSFd6dFlickU5WnY3V3h0QkhZSExmNXpkYlFOdG4yaU8zVWN1M2xuT1dOeThmdDFPeVlkdlYyby9aMCsxajdBL2FqRHFvT1RJY0doOGVPNm81c3h5YkhTU2RkcHlTbm8wN1BuVTJjK2M3dHp2TXVOaTdyWE02NUlxNGVya1d1QTI0eWJxRnUxVzZQM05YY0U5eGIzR2M5TER6V2VwenpSSHY2ZU83eUhQRlM4bUo1Tlh2TmVsdDVyL1B1OVNINUJQdFUrenoyMWZQbCszYjd3WDdlZnJ2OUhxelFYTUZiMGVrUC9MMzhkL3MvRE5BT1dCUHdZeUFtTUNDd0p2QkprR2xRWGxCZk1DVTRKdmhJOE9zUTU1RFNrUHVoT3FIQzBKNHd5YkRvc09hdytYRFg4TEx3MFFqamlIVVIxeUlWSXJtUlhWSFlxTENvcHFpNWxXNHI5NnljaUxhSUxvd2VYcVc5S252VmxkVUtxMU5XbjQ2UmpHSEduSWhGeDRiSEhvbDl6L1JuTmpEbjRyemlhdU5tV1M2c3ZheG5iRWQyT1h1YVk4Y3A0MHpHMjhXWHhVOGwyQ1hzVHBoT2RFaXNTSnpodW5DcnVTK1NQSlBxa3VhVC9aTVBKWDlLQ1U5cFM4V2x4cWFlNU1ud2tubTlhY3BwMldtRDZmcnBoZW1qYTJ6VzdGa3p5L2ZoTjJWQUdhc3l1Z1JVMGM5VXYxQkh1RVU0bG1tZldaUDVKaXNzNjBTMmREWXZ1ejlITDJkN3ptU3VlKzYzYTFGcldXdDc4bFR6TnVXTnJYTmFWNzhlV2grM3ZtZUQrb2FDRFJNYlBUWWUza1RZbEx6cHAzeVQvTEw4VjV2RE4zY1hLQlZzTEJqZjRyR2xwVkNpa0Y4NHN0VjJhOTAyMURidXRvSHQ1dHVydG44c1loZGRMVFlwcmloK1g4SXF1ZnFONlRlVjMzemFFYjlqb05TeWRQOU96RTdlenVGZERyc09sMG1YNVphTjcvYmIzVkZPTHk4cWY3VW5acytWaW1VVmRYc0plNFY3Unl0OUs3dXFOS3AyVnIydlRxeStYZU5jMDFhcldMdTlkbjRmZTkvUWZzZjlyWFZLZGNWMTd3NXdEOXlwOTZqdmFOQnFxRGlJT1poNThFbGpXR1BmdDR4dm01c1Vtb3FiUGh6aUhSbzlISFM0dDltcXVmbUk0cEhTRnJoRjJESjlOUHJvamU5Y3YrdHFOV3l0YjZPMUZSOER4NFRIbm40ZisvM3djWi9qUFNjWUoxcC8wUHlodHAzU1h0UUJkZVIwekhZbWRvNTJSWFlObnZRKzJkTnQyOTMrbzlHUGgwNnBucW81TFh1NjlBemhUTUdaVDJkeno4NmRTejgzY3o3aC9IaFBUTS85Q3hFWGJ2VUc5ZzVjOUxsNCtaTDdwUXQ5VG4xbkw5dGRQblhGNXNySnE0eXJuZGNzcjNYMFcvUzMvMlR4VS91QTVVREhkYXZyWFRlc2IzUVBMaDg4TStRd2RQNm02ODFMdDd4dVhidTk0dmJnY09qd25aSG9rZEU3N0R0VGQxUHV2cmlYZVcvaC9zWUg2QWRGRDZVZVZqeFNmTlR3cys3UGJhT1dvNmZIWE1mNkh3Yy92ai9PR24vMlM4WXY3eWNLbnBDZlZFeXFURFpQbVUyZG1uYWZ2dkYwNWRPSlorblBGbVlLZjVYK3RmYTV6dk1mZm5QOHJYODJZbmJpQmYvRnA5OUxYc3EvUFBScTJhdWV1WUM1UjY5VFh5L01GNzJSZjNQNExlTnQzN3Z3ZDVNTFdlK3g3eXMvNkg3by91ano4Y0duMUUrZi9nVURtUFA4dXNUbzB3QUFBQWx3U0ZsekFBQU93Z0FBRHNJQkZTaEtnQUFBQUJwMFJWaDBVMjltZEhkaGNtVUFVR0ZwYm5RdVRrVlVJSFl6TGpVdU1UQXc5SEtoQUFBQjIwbEVRVlE0VDMzVHZVOFRZUURIOGVmbEFJbEpnN0hhOUtoS3IwSmJpb0FscGhyRWhNaE00dUtnTVVhZ0pjWEpRVWNUYzRZQllwZ2NpQTY0WUl3MnZnUmJyVkVQUnRERkR0VTQ5eDhncVFvTVA1N255blB0NVdxSFgyNzZmcDU3eVJGeldxL2tUQU5xajI2SDBPMXZBeUhFdFVPVVk3WXJqT2ZkNTV6ZDk4Y3FSSVpZVDdxMlhSakNmRWJIVVorR05rcHgzWGNDSmVNeXF0RkoxeVRXRkZEZzF0c0JQSndjOFlRS2Fnbjhzb2JSVXp5Tjlud0VLOWN1TlVWczRPbTlVNTVIK0NuaWtJakpSOE9lVm9oZytlYVlCMW5WQmRBYjZrQzFPT3dnUDZ3aEJJc1JKMVlJLzJEZzhhMkxMaVI3SkN4Zk5NRjhXcmVCa29nRFRXS0ZNSUVzemRTUXNqR0JUdkZsYk1CM21PUE5pemlPdFlnYmtZWFpVYVM3ZXRSbkptQ3NBMzFYWG9HL0cvVGN1Z29icit4ckJscHF2QTRFZ3RNWUhRZk8zTmdFWDB1MFJLaVZoZmF0Q3Y3a0N3aGxJUEwwa2ZPL2JVQXVNYlVCOXI2L0tVS3RPV2pmLzRydENXUVhORGtHRWdoT09iRkMrdE9mQkJKekliWDRUeTArR0RlZmdjUUdjaDVBUXZGTUVTeGZRNmgxcDM1eUk3RDQ4ditBUktMWk5iRFBkMFg4ejNXeWN3ZXRnR1NxRFAveHE2RFJzK0JMcjZGdDdYZ1FMb0dUWWJNaUg2TnhBVDBOeXRycnY3UDRJK25nQlRCekJUSlNZM01QS3Z0ZUJpU2RVNUVBV3dBQUFBQkpSVTVFcmtKZ2dnPT0"}];
var __map_reserved = {}
var ArrayBuffer = (Function("return typeof ArrayBuffer != 'undefined' ? ArrayBuffer : null"))() || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = (Function("return typeof DataView != 'undefined' ? DataView : null"))() || js_html_compat_DataView;
var Uint8Array = (Function("return typeof Uint8Array != 'undefined' ? Uint8Array : null"))() || js_html_compat_Uint8Array._new;
var this1;
this1 = new Array(256);
lime_graphics_utils_ImageDataUtil.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_graphics_utils_ImageDataUtil.__alpha16[i] = i * 65536 / 255 | 0;
}
var this2;
this2 = new Array(510);
lime_graphics_utils_ImageDataUtil.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_graphics_utils_ImageDataUtil.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_graphics_utils_ImageDataUtil.__clamp[i2] = 255;
}
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
openfl_ui_Multitouch.maxTouchPoints = 2;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = false;
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
Xml.Element = 0;
Xml.Document = 6;
flixel_FlxCamera.STYLE_LOCKON = 0;
flixel_FlxCamera.STYLE_PLATFORMER = 1;
flixel_FlxCamera.STYLE_TOPDOWN = 2;
flixel_FlxCamera.STYLE_TOPDOWN_TIGHT = 3;
flixel_FlxCamera.STYLE_SCREEN_BY_SCREEN = 4;
flixel_FlxCamera.STYLE_NO_DEAD_ZONE = 5;
flixel_FlxCamera.SHAKE_BOTH_AXES = 0;
flixel_FlxCamera.SHAKE_HORIZONTAL_ONLY = 1;
flixel_FlxCamera.SHAKE_VERTICAL_ONLY = 2;
flixel_util_FlxPoint._pool = new flixel_util_FlxPool(flixel_util_FlxPoint);
flixel_system_scaleModes_BaseScaleMode.zoom = flixel_util_FlxPoint.get(null,null);
flixel_system_frontEnds_HTML5FrontEnd.INTERNET_EXPLORER = "Internet Explorer";
flixel_system_frontEnds_HTML5FrontEnd.CHROME = "Chrome";
flixel_system_frontEnds_HTML5FrontEnd.FIREFOX = "Firefox";
flixel_system_frontEnds_HTML5FrontEnd.SAFARI = "Safari";
flixel_system_frontEnds_HTML5FrontEnd.OPERA = "Opera";
js_Boot.__toStr = {}.toString;
flixel_util_FlxPath.FORWARD = 0;
flixel_util_FlxPath.BACKWARD = 1;
flixel_util_FlxPath.LOOP_FORWARD = 16;
flixel_util_FlxPath.LOOP_BACKWARD = 256;
flixel_util_FlxPath.YOYO = 4096;
flixel_util_FlxPath.HORIZONTAL_ONLY = 65536;
flixel_util_FlxPath.VERTICAL_ONLY = 1048576;
flixel_util_FlxPath._point = flixel_util_FlxPoint.get(null,null);
flixel_tweens_FlxTween.PERSIST = 1;
flixel_tweens_FlxTween.LOOPING = 2;
flixel_tweens_FlxTween.PINGPONG = 4;
flixel_tweens_FlxTween.ONESHOT = 8;
flixel_tweens_FlxTween.BACKWARD = 16;
flixel_util_FlxSave.SUCCESS = 0;
flixel_util_FlxSave.PENDING = 1;
flixel_util_FlxSave.ERROR = 2;
flixel_util_FlxRect._pool = new flixel_util_FlxPool(flixel_util_FlxRect);
flixel_FlxG.autoPause = true;
flixel_FlxG.fixedTimestep = true;
flixel_FlxG.timeScale = 1;
flixel_FlxG.worldDivisions = 6;
flixel_FlxG.VERSION = new flixel_system_FlxVersion(3,3,9);
flixel_FlxG.elapsed = 0;
flixel_FlxG.maxElapsed = 0.1;
flixel_FlxG.fullscreen = false;
flixel_FlxG.worldBounds = flixel_util_FlxRect.get(null,null,null,null);
flixel_FlxG.save = new flixel_util_FlxSave();
flixel_FlxG.swipes = [];
flixel_FlxG.html5 = new flixel_system_frontEnds_HTML5FrontEnd();
flixel_FlxG.inputs = new flixel_system_frontEnds_InputFrontEnd();
flixel_FlxG.console = new flixel_system_frontEnds_ConsoleFrontEnd();
flixel_FlxG.log = new flixel_system_frontEnds_LogFrontEnd();
flixel_FlxG.bitmapLog = new flixel_system_frontEnds_BitmapLogFrontEnd();
flixel_FlxG.watch = new flixel_system_frontEnds_WatchFrontEnd();
flixel_FlxG["debugger"] = new flixel_system_frontEnds_DebuggerFrontEnd();
flixel_FlxG.vcr = new flixel_system_frontEnds_VCRFrontEnd();
flixel_FlxG.bitmap = new flixel_system_frontEnds_BitmapFrontEnd();
flixel_FlxG.cameras = new flixel_system_frontEnds_CameraFrontEnd();
flixel_FlxG.plugins = new flixel_system_frontEnds_PluginFrontEnd();
flixel_FlxG.sound = new flixel_system_frontEnds_SoundFrontEnd();
flixel_FlxG.signals = new flixel_system_frontEnds_SignalFrontEnd();
flixel_FlxG._scaleMode = new flixel_system_scaleModes_RatioScaleMode();
flixel_FlxObject.SEPARATE_BIAS = 4;
flixel_FlxObject.LEFT = 1;
flixel_FlxObject.RIGHT = 16;
flixel_FlxObject.UP = 256;
flixel_FlxObject.DOWN = 4096;
flixel_FlxObject.NONE = 0;
flixel_FlxObject.CEILING = 256;
flixel_FlxObject.FLOOR = 4096;
flixel_FlxObject.WALL = 17;
flixel_FlxObject.ANY = 4369;
flixel_FlxObject._firstSeparateFlxRect = flixel_util_FlxRect.get(null,null,null,null);
flixel_FlxObject._secondSeparateFlxRect = flixel_util_FlxRect.get(null,null,null,null);
flixel__$FlxSprite_GraphicDefault.resourceType = "image/png";
flixel__$FlxSprite_GraphicDefault.resourceName = "__ASSET__:bitmap_flixel__FlxSprite_GraphicDefault";
flixel_addons_plugin_FlxMouseControl.ASCENDING = -1;
flixel_addons_plugin_FlxMouseControl.DESCENDING = 1;
flixel_addons_plugin_FlxMouseControl.sortIndex = "y";
flixel_addons_plugin_FlxMouseControl.sortOrder = -1;
flixel_addons_plugin_FlxMouseControl.isDragging = false;
flixel_addons_plugin_FlxMouseControl.linkToDeadZone = false;
flixel_addons_plugin_FlxMouseControl._clickStack = [];
flixel_addons_plugin_FlxMouseControl._hasClickTarget = false;
flixel_addons_plugin_FlxMouseControl._oldX = 0;
flixel_addons_plugin_FlxMouseControl._oldY = 0;
flixel_animation_FlxAnimationController.prefixLength = 0;
flixel_animation_FlxAnimationController.postfixLength = 0;
flixel_animation_FlxPrerotatedAnimation.PREROTATED = "prerotated_animation";
flixel_effects_FlxFlicker._pool = new flixel_util_FlxPool(flixel_effects_FlxFlicker);
flixel_effects_FlxFlicker._boundObjects = new haxe_ds_ObjectMap();
flixel_input_gamepad_FlxGamepad.JUST_RELEASED = -1;
flixel_input_gamepad_FlxGamepad.RELEASED = 0;
flixel_input_gamepad_FlxGamepad.PRESSED = 1;
flixel_input_gamepad_FlxGamepad.JUST_PRESSED = 2;
flixel_input_keyboard_FlxKey.JUST_RELEASED = -1;
flixel_input_keyboard_FlxKey.RELEASED = 0;
flixel_input_keyboard_FlxKey.PRESSED = 1;
flixel_input_keyboard_FlxKey.JUST_PRESSED = 2;
flixel_input_keyboard_FlxKey.A = 65;
flixel_input_keyboard_FlxKey.B = 66;
flixel_input_keyboard_FlxKey.C = 67;
flixel_input_keyboard_FlxKey.D = 68;
flixel_input_keyboard_FlxKey.E = 69;
flixel_input_keyboard_FlxKey.F = 70;
flixel_input_keyboard_FlxKey.G = 71;
flixel_input_keyboard_FlxKey.H = 72;
flixel_input_keyboard_FlxKey.I = 73;
flixel_input_keyboard_FlxKey.J = 74;
flixel_input_keyboard_FlxKey.K = 75;
flixel_input_keyboard_FlxKey.L = 76;
flixel_input_keyboard_FlxKey.M = 77;
flixel_input_keyboard_FlxKey.N = 78;
flixel_input_keyboard_FlxKey.O = 79;
flixel_input_keyboard_FlxKey.P = 80;
flixel_input_keyboard_FlxKey.Q = 81;
flixel_input_keyboard_FlxKey.R = 82;
flixel_input_keyboard_FlxKey.S = 83;
flixel_input_keyboard_FlxKey.T = 84;
flixel_input_keyboard_FlxKey.U = 85;
flixel_input_keyboard_FlxKey.V = 86;
flixel_input_keyboard_FlxKey.W = 87;
flixel_input_keyboard_FlxKey.X = 88;
flixel_input_keyboard_FlxKey.Y = 89;
flixel_input_keyboard_FlxKey.Z = 90;
flixel_input_keyboard_FlxKey.ZERO = 48;
flixel_input_keyboard_FlxKey.ONE = 49;
flixel_input_keyboard_FlxKey.TWO = 50;
flixel_input_keyboard_FlxKey.THREE = 51;
flixel_input_keyboard_FlxKey.FOUR = 52;
flixel_input_keyboard_FlxKey.FIVE = 53;
flixel_input_keyboard_FlxKey.SIX = 54;
flixel_input_keyboard_FlxKey.SEVEN = 55;
flixel_input_keyboard_FlxKey.EIGHT = 56;
flixel_input_keyboard_FlxKey.NINE = 57;
flixel_input_keyboard_FlxKey.PAGEUP = 33;
flixel_input_keyboard_FlxKey.PAGEDOWN = 34;
flixel_input_keyboard_FlxKey.HOME = 36;
flixel_input_keyboard_FlxKey.END = 35;
flixel_input_keyboard_FlxKey.INSERT = 45;
flixel_input_keyboard_FlxKey.ESCAPE = 27;
flixel_input_keyboard_FlxKey.MINUS = 189;
flixel_input_keyboard_FlxKey.PLUS = 187;
flixel_input_keyboard_FlxKey.DELETE = 46;
flixel_input_keyboard_FlxKey.BACKSPACE = 8;
flixel_input_keyboard_FlxKey.LBRACKET = 219;
flixel_input_keyboard_FlxKey.RBRACKET = 221;
flixel_input_keyboard_FlxKey.BACKSLASH = 220;
flixel_input_keyboard_FlxKey.CAPSLOCK = 20;
flixel_input_keyboard_FlxKey.SEMICOLON = 186;
flixel_input_keyboard_FlxKey.QUOTE = 222;
flixel_input_keyboard_FlxKey.ENTER = 13;
flixel_input_keyboard_FlxKey.SHIFT = 16;
flixel_input_keyboard_FlxKey.COMMA = 188;
flixel_input_keyboard_FlxKey.PERIOD = 190;
flixel_input_keyboard_FlxKey.SLASH = 191;
flixel_input_keyboard_FlxKey.NUMPADSLASH = 191;
flixel_input_keyboard_FlxKey.GRAVEACCENT = 192;
flixel_input_keyboard_FlxKey.CONTROL = 17;
flixel_input_keyboard_FlxKey.ALT = 18;
flixel_input_keyboard_FlxKey.SPACE = 32;
flixel_input_keyboard_FlxKey.UP = 38;
flixel_input_keyboard_FlxKey.DOWN = 40;
flixel_input_keyboard_FlxKey.LEFT = 37;
flixel_input_keyboard_FlxKey.RIGHT = 39;
flixel_input_keyboard_FlxKey.TAB = 9;
flixel_input_keyboard_FlxKey.PRINTSCREEN = 301;
flixel_input_keyboard_FlxKey.F1 = 112;
flixel_input_keyboard_FlxKey.F2 = 113;
flixel_input_keyboard_FlxKey.F3 = 114;
flixel_input_keyboard_FlxKey.F4 = 115;
flixel_input_keyboard_FlxKey.F5 = 116;
flixel_input_keyboard_FlxKey.F6 = 117;
flixel_input_keyboard_FlxKey.F7 = 118;
flixel_input_keyboard_FlxKey.F8 = 119;
flixel_input_keyboard_FlxKey.F9 = 120;
flixel_input_keyboard_FlxKey.F10 = 121;
flixel_input_keyboard_FlxKey.F11 = 122;
flixel_input_keyboard_FlxKey.F12 = 123;
flixel_input_keyboard_FlxKey.NUMPADZERO = 96;
flixel_input_keyboard_FlxKey.NUMPADONE = 97;
flixel_input_keyboard_FlxKey.NUMPADTWO = 98;
flixel_input_keyboard_FlxKey.NUMPADTHREE = 99;
flixel_input_keyboard_FlxKey.NUMPADFOUR = 100;
flixel_input_keyboard_FlxKey.NUMPADFIVE = 101;
flixel_input_keyboard_FlxKey.NUMPADSIX = 102;
flixel_input_keyboard_FlxKey.NUMPADSEVEN = 103;
flixel_input_keyboard_FlxKey.NUMPADEIGHT = 104;
flixel_input_keyboard_FlxKey.NUMPADNINE = 105;
flixel_input_keyboard_FlxKey.NUMPADMINUS = 109;
flixel_input_keyboard_FlxKey.NUMPADPLUS = 107;
flixel_input_keyboard_FlxKey.NUMPADPERIOD = 110;
flixel_input_keyboard_FlxKey.NUMPADMULTIPLY = 106;
flixel_input_keyboard_FlxKeyboard.TOTAL = 256;
flixel_input_mouse__$FlxMouse_GraphicCursor.resourceType = "image/png";
flixel_input_mouse__$FlxMouse_GraphicCursor.resourceName = "__ASSET__:bitmap_flixel_input_mouse__FlxMouse_GraphicCursor";
flixel_input_mouse_FlxMouseButton.LEFT = -1;
flixel_input_mouse_FlxMouseButton.MIDDLE = -2;
flixel_input_mouse_FlxMouseButton.RIGHT = -3;
flixel_input_mouse_FlxMouseButton.FAST_PRESS_RELEASE = -2;
flixel_input_mouse_FlxMouseButton.JUST_RELEASED = -1;
flixel_input_mouse_FlxMouseButton.RELEASED = 0;
flixel_input_mouse_FlxMouseButton.PRESSED = 1;
flixel_input_mouse_FlxMouseButton.JUST_PRESSED = 2;
flixel_input_touch_FlxTouchManager.maxTouchPoints = 0;
flixel_system_FlxAssets.FONT_DEFAULT = "Nokia Cellphone FC Small";
flixel_system_FlxAssets.FONT_DEBUGGER = "Arial";
flixel_system_FlxList._NUM_CACHED_FLX_LIST = 0;
openfl_text_Font.__registeredFonts = [];
flixel_system_PreloaderFont.resourceName = "LIME_font_flixel_system_PreloaderFont";
flixel_system__$FlxPreloader_GraphicLogoLight.resourceType = "image/png";
flixel_system__$FlxPreloader_GraphicLogoLight.resourceName = "__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoLight";
flixel_system__$FlxPreloader_GraphicLogoCorners.resourceType = "image/png";
flixel_system__$FlxPreloader_GraphicLogoCorners.resourceName = "__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoCorners";
flixel_system_FlxQuadTree.A_LIST = 0;
flixel_system_FlxQuadTree.B_LIST = 1;
flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES = 0;
flixel_system_debug_LogStyle.NORMAL = new flixel_system_debug_LogStyle();
flixel_system_debug_LogStyle.WARNING = new flixel_system_debug_LogStyle("[WARNING] ","FFFF00",12,true,false,false,"assets/sounds/beep",true);
flixel_system_debug_LogStyle.ERROR = new flixel_system_debug_LogStyle("[ERROR] ","FF0000",12,true,false,false,"assets/sounds/beep",true);
flixel_system_debug_LogStyle.NOTICE = new flixel_system_debug_LogStyle("[NOTICE] ","008000",12,true);
flixel_system_debug_LogStyle.CONSOLE = new flixel_system_debug_LogStyle("&#62; ","0000ff",12,true);
flixel_system_debug_Window.BG_COLOR = -580952225;
flixel_system_debug_Window.HEADER_COLOR = -1157627904;
flixel_system_debug_Window.HEADER_ALPHA = 0.8;
flixel_system_debug_Window.HEADER_HEIGHT = 15;
flixel_system_debug_Window.WINDOW_AMOUNT = 0;
flixel_system_debug__$Window_GraphicWindowHandle.resourceType = "image/png";
flixel_system_debug__$Window_GraphicWindowHandle.resourceName = "__ASSET__:bitmap_flixel_system_debug__Window_GraphicWindowHandle";
flixel_system_debug__$Window_GraphicCloseButton.resourceType = "image/png";
flixel_system_debug__$Window_GraphicCloseButton.resourceName = "__ASSET__:bitmap_flixel_system_debug__Window_GraphicCloseButton";
openfl_display_Tilesheet.TILE_SCALE = 1;
openfl_display_Tilesheet.TILE_ROTATION = 2;
openfl_display_Tilesheet.TILE_RGB = 4;
openfl_display_Tilesheet.TILE_ALPHA = 8;
openfl_display_Tilesheet.TILE_TRANS_2x2 = 16;
openfl_display_Tilesheet.TILE_RECT = 32;
openfl_display_Tilesheet.TILE_ORIGIN = 64;
openfl_display_Tilesheet.TILE_BLEND_NORMAL = 0;
openfl_display_Tilesheet.TILE_BLEND_ADD = 65536;
openfl_display_Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl_display_Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl_display_Tilesheet.TILE_BLEND_SUBTRACT = 524288;
openfl_display_Tilesheet.__defaultPoint = new openfl_geom_Point(0,0);
flixel_system_layer_TileSheetExt._DRAWCALLS = 0;
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
flixel_system_layer_frames_FlxFrame.POINT = new openfl_geom_Point();
flixel_system_layer_frames_FlxFrame.MATRIX = new openfl_geom_Matrix();
flixel_system_layer_frames_FlxFrame.RECT = new openfl_geom_Rectangle();
flixel_text_FlxText.BORDER_NONE = 0;
flixel_text_FlxText.BORDER_SHADOW = 1;
flixel_text_FlxText.BORDER_OUTLINE = 2;
flixel_text_FlxText.BORDER_OUTLINE_FAST = 3;
flixel_text_pxText_PxBitmapFont._storedFonts = new haxe_ds_StringMap();
flixel_text_pxText_PxBitmapFont.ZERO_POINT = new openfl_geom_Point();
flixel_tile_GraphicAuto.resourceType = "image/png";
flixel_tile_GraphicAuto.resourceName = "__ASSET__:bitmap_flixel_tile_GraphicAuto";
flixel_tile_GraphicAutoAlt.resourceType = "image/png";
flixel_tile_GraphicAutoAlt.resourceName = "__ASSET__:bitmap_flixel_tile_GraphicAutoAlt";
flixel_tile_FlxTilemap.OFF = 0;
flixel_tile_FlxTilemap.AUTO = 1;
flixel_tile_FlxTilemap.ALT = 2;
flixel_tile_FlxTilemap._helperBuffer = Type.createEmptyInstance(flixel_tile_FlxTilemapBuffer);
flixel_tweens_FlxEase.PI2 = Math.PI / 2;
flixel_tweens_FlxEase.EL = 2 * Math.PI / .45;
flixel_tweens_FlxEase.B1 = 0.36363636363636365;
flixel_tweens_FlxEase.B2 = 0.72727272727272729;
flixel_tweens_FlxEase.B3 = 0.54545454545454541;
flixel_tweens_FlxEase.B4 = 0.90909090909090906;
flixel_tweens_FlxEase.B5 = 0.81818181818181823;
flixel_tweens_FlxEase.B6 = 0.95454545454545459;
flixel_tweens_FlxEase.ELASTIC_AMPLITUDE = 1;
flixel_tweens_FlxEase.ELASTIC_PERIOD = 0.4;
flixel_util_FlxAngle.cosTable = [];
flixel_util_FlxAngle.sinTable = [];
flixel_util_FlxBitmapDataPool.maxLength = 8;
flixel_util_FlxBitmapDataPool.$length = 0;
flixel_util_FlxBitmapDataPool._head = null;
flixel_util_FlxBitmapDataPool._tail = null;
flixel_util_FlxBitmapDataPool._rect = new openfl_geom_Rectangle();
flixel_util_FlxCollision.CAMERA_WALL_OUTSIDE = 0;
flixel_util_FlxCollision.CAMERA_WALL_INSIDE = 1;
flixel_util_FlxCollision.pointA = new openfl_geom_Point();
flixel_util_FlxCollision.pointB = new openfl_geom_Point();
flixel_util_FlxCollision.centerA = new openfl_geom_Point();
flixel_util_FlxCollision.centerB = new openfl_geom_Point();
flixel_util_FlxCollision.matrixA = new openfl_geom_Matrix();
flixel_util_FlxCollision.matrixB = new openfl_geom_Matrix();
flixel_util_FlxCollision.testMatrix = new openfl_geom_Matrix();
flixel_util_FlxCollision.boundsA = new openfl_geom_Rectangle();
flixel_util_FlxCollision.boundsB = new openfl_geom_Rectangle();
flixel_util_FlxColor.RED = -65536;
flixel_util_FlxColor.YELLOW = -256;
flixel_util_FlxColor.GREEN = -16744448;
flixel_util_FlxColor.BLUE = -16776961;
flixel_util_FlxColor.PINK = -16181;
flixel_util_FlxColor.PURPLE = -8388480;
flixel_util_FlxColor.WHITE = -1;
flixel_util_FlxColor.BLACK = -16777216;
flixel_util_FlxColor.GRAY = -8355712;
flixel_util_FlxColor.BROWN = -6927616;
flixel_util_FlxColor.TRANSPARENT = 0;
flixel_util_FlxColor.IVORY = -16;
flixel_util_FlxColor.BEIGE = -657956;
flixel_util_FlxColor.WHEAT = -663885;
flixel_util_FlxColor.TAN = -2968436;
flixel_util_FlxColor.KHAKI = -3952495;
flixel_util_FlxColor.SILVER = -4144960;
flixel_util_FlxColor.CHARCOAL = -12171706;
flixel_util_FlxColor.NAVY_BLUE = -16777088;
flixel_util_FlxColor.ROYAL_BLUE = -16233314;
flixel_util_FlxColor.MEDIUM_BLUE = -16777011;
flixel_util_FlxColor.AZURE = -16744449;
flixel_util_FlxColor.CYAN = -16711681;
flixel_util_FlxColor.MAGENTA = -65281;
flixel_util_FlxColor.AQUAMARINE = -8388652;
flixel_util_FlxColor.TEAL = -16744320;
flixel_util_FlxColor.FOREST_GREEN = -14513374;
flixel_util_FlxColor.OLIVE = -8355840;
flixel_util_FlxColor.CHARTREUSE = -8388864;
flixel_util_FlxColor.LIME = -4194560;
flixel_util_FlxColor.GOLDEN = -10496;
flixel_util_FlxColor.GOLDENROD = -2448096;
flixel_util_FlxColor.CORAL = -32944;
flixel_util_FlxColor.SALMON = -360334;
flixel_util_FlxColor.HOT_PINK = -258112;
flixel_util_FlxColor.FUCHSIA = -34817;
flixel_util_FlxColor.PUCE = -3372903;
flixel_util_FlxColor.MAUVE = -2051841;
flixel_util_FlxColor.LAVENDER = -4882724;
flixel_util_FlxColor.PLUM = -8113799;
flixel_util_FlxColor.INDIGO = -11861886;
flixel_util_FlxColor.MAROON = -8388608;
flixel_util_FlxColor.CRIMSON = -2354116;
flixel_util_FlxMath.MIN_VALUE = 0.0000000000000001;
flixel_util_FlxMath.MAX_VALUE = 1.79e+308;
flixel_util_FlxMath.SQUARE_ROOT_OF_TWO = 1.41421356237;
flixel_util_FlxRandom.globalSeed = 1;
flixel_util_FlxRandom._internalSeed = 1;
flixel_util_FlxRandom.MULTIPLIER = 48271;
flixel_util_FlxRandom.MODULUS = 2147483647;
flixel_util_FlxRandom._intHelper = 0;
flixel_util_FlxRandom._intHelper2 = 0;
flixel_util_FlxRandom._intHelper3 = 0;
flixel_util_FlxRandom._floatHelper = 0;
flixel_util_FlxRandom._arrayFloatHelper = null;
flixel_util_FlxRandom._red = 0;
flixel_util_FlxRandom._green = 0;
flixel_util_FlxRandom._blue = 0;
flixel_util_FlxRandom._alpha = 0;
flixel_util_FlxRandom._stateSeed = 1;
flixel_util_FlxRandom._recordingSeed = 1;
flixel_util_FlxSort.ASCENDING = -1;
flixel_util_FlxSort.DESCENDING = 1;
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
flixel_util_FlxSpriteUtil.flashGfxSprite = new openfl_display_Sprite();
flixel_util_FlxSpriteUtil.flashGfx = flixel_util_FlxSpriteUtil.flashGfxSprite.get_graphics();
flixel_util_LabelValuePair._pool = new flixel_util_FlxPool(flixel_util_LabelValuePair);
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = Type;
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.CODES = null;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime_Assets.cache = new lime_AssetCache();
lime_Assets.libraries = new haxe_ds_StringMap();
lime_Assets.initialized = false;
lime_app_Preloader.images = new haxe_ds_StringMap();
lime_app_Preloader.loaders = new haxe_ds_StringMap();
lime_audio_openal_AL.NONE = 0;
lime_audio_openal_AL.FALSE = 0;
lime_audio_openal_AL.TRUE = 1;
lime_audio_openal_AL.SOURCE_RELATIVE = 514;
lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_audio_openal_AL.PITCH = 4099;
lime_audio_openal_AL.POSITION = 4100;
lime_audio_openal_AL.DIRECTION = 4101;
lime_audio_openal_AL.VELOCITY = 4102;
lime_audio_openal_AL.LOOPING = 4103;
lime_audio_openal_AL.BUFFER = 4105;
lime_audio_openal_AL.GAIN = 4106;
lime_audio_openal_AL.MIN_GAIN = 4109;
lime_audio_openal_AL.MAX_GAIN = 4110;
lime_audio_openal_AL.ORIENTATION = 4111;
lime_audio_openal_AL.SOURCE_STATE = 4112;
lime_audio_openal_AL.INITIAL = 4113;
lime_audio_openal_AL.PLAYING = 4114;
lime_audio_openal_AL.PAUSED = 4115;
lime_audio_openal_AL.STOPPED = 4116;
lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
lime_audio_openal_AL.MAX_DISTANCE = 4131;
lime_audio_openal_AL.SEC_OFFSET = 4132;
lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
lime_audio_openal_AL.BYTE_OFFSET = 4134;
lime_audio_openal_AL.SOURCE_TYPE = 4135;
lime_audio_openal_AL.STATIC = 4136;
lime_audio_openal_AL.STREAMING = 4137;
lime_audio_openal_AL.UNDETERMINED = 4144;
lime_audio_openal_AL.FORMAT_MONO8 = 4352;
lime_audio_openal_AL.FORMAT_MONO16 = 4353;
lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
lime_audio_openal_AL.FREQUENCY = 8193;
lime_audio_openal_AL.BITS = 8194;
lime_audio_openal_AL.CHANNELS = 8195;
lime_audio_openal_AL.SIZE = 8196;
lime_audio_openal_AL.NO_ERROR = 0;
lime_audio_openal_AL.INVALID_NAME = 40961;
lime_audio_openal_AL.INVALID_ENUM = 40962;
lime_audio_openal_AL.INVALID_VALUE = 40963;
lime_audio_openal_AL.INVALID_OPERATION = 40964;
lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
lime_audio_openal_AL.VENDOR = 45057;
lime_audio_openal_AL.VERSION = 45058;
lime_audio_openal_AL.RENDERER = 45059;
lime_audio_openal_AL.EXTENSIONS = 45060;
lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
lime_audio_openal_AL.DISTANCE_MODEL = 53248;
lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_audio_openal_ALC.FALSE = 0;
lime_audio_openal_ALC.TRUE = 1;
lime_audio_openal_ALC.FREQUENCY = 4103;
lime_audio_openal_ALC.REFRESH = 4104;
lime_audio_openal_ALC.SYNC = 4105;
lime_audio_openal_ALC.MONO_SOURCES = 4112;
lime_audio_openal_ALC.STEREO_SOURCES = 4113;
lime_audio_openal_ALC.NO_ERROR = 0;
lime_audio_openal_ALC.INVALID_DEVICE = 40961;
lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
lime_audio_openal_ALC.INVALID_ENUM = 40963;
lime_audio_openal_ALC.INVALID_VALUE = 40964;
lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_audio_openal_ALC.EXTENSIONS = 4102;
lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_system_System.__moduleNames = null;
lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_utils_ByteArray.lime_byte_array_get_native_pointer = lime_system_System.load("lime","lime_byte_array_get_native_pointer",1);
lime_utils_ByteArray.lime_byte_array_overwrite_file = lime_system_System.load("lime","lime_byte_array_overwrite_file",2);
lime_utils_ByteArray.lime_byte_array_read_file = lime_system_System.load("lime","lime_byte_array_read_file",1);
lime_utils_ByteArray.lime_lzma_decode = lime_system_System.load("lime","lime_lzma_decode",1);
lime_utils_ByteArray.lime_lzma_encode = lime_system_System.load("lime","lime_lzma_encode",1);
nape_Config.epsilon = 1e-8;
nape_Config.fluidAngularDragFriction = 2.5;
nape_Config.fluidAngularDrag = 100;
nape_Config.fluidVacuumDrag = 0.5;
nape_Config.fluidLinearDrag = 0.5;
nape_Config.collisionSlop = 0.2;
nape_Config.collisionSlopCCD = 0.5;
nape_Config.distanceThresholdCCD = 0.05;
nape_Config.staticCCDLinearThreshold = 0.05;
nape_Config.staticCCDAngularThreshold = 0.005;
nape_Config.bulletCCDLinearThreshold = 0.125;
nape_Config.bulletCCDAngularThreshold = 0.0125;
nape_Config.dynamicSweepLinearThreshold = 17;
nape_Config.dynamicSweepAngularThreshold = 0.6;
nape_Config.angularCCDSlipScale = 0.75;
nape_Config.arbiterExpirationDelay = 6;
nape_Config.staticFrictionThreshold = 2;
nape_Config.elasticThreshold = 20;
nape_Config.sleepDelay = 60;
nape_Config.linearSleepThreshold = 0.2;
nape_Config.angularSleepThreshold = 0.4;
nape_Config.contactBiasCoef = 0.3;
nape_Config.contactStaticBiasCoef = 0.6;
nape_Config.contactContinuousBiasCoef = 0.4;
nape_Config.contactContinuousStaticBiasCoef = 0.5;
nape_Config.constraintLinearSlop = 0.1;
nape_Config.constraintAngularSlop = 1e-3;
nape_Config.illConditionedThreshold = 2e+8;
nape_callbacks_CbTypeIterator.zpp_pool = null;
nape_callbacks_ListenerIterator.zpp_pool = null;
nape_constraint_ConstraintIterator.zpp_pool = null;
nape_dynamics_ArbiterIterator.zpp_pool = null;
nape_dynamics_ContactIterator.zpp_pool = null;
nape_dynamics_InteractionGroupIterator.zpp_pool = null;
nape_geom_ConvexResultIterator.zpp_pool = null;
nape_geom_GeomPolyIterator.zpp_pool = null;
nape_geom_RayResultIterator.zpp_pool = null;
nape_geom_Vec2Iterator.zpp_pool = null;
nape_phys_BodyIterator.zpp_pool = null;
nape_phys_CompoundIterator.zpp_pool = null;
nape_phys_InteractorIterator.zpp_pool = null;
nape_shape_EdgeIterator.zpp_pool = null;
nape_shape_ShapeIterator.zpp_pool = null;
openfl_Assets.cache = new openfl_AssetCache();
openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_Lib.current = new openfl_display_MovieClip();
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_TextFieldGraphics.bitmapData = new haxe_ds_ObjectMap();
openfl__$internal_renderer_TextFieldGraphics.glyphs = new haxe_ds_ObjectMap();
openfl__$internal_renderer_TextFieldGraphics.tilesheets = new haxe_ds_ObjectMap();
openfl__$internal_renderer_TextFieldGraphics.tileIDs = new haxe_ds_ObjectMap();
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoTextField.__utf8_endline_code = 10;
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasTextField.__utf8_endline_code = 10;
openfl__$internal_renderer_opengl_GLRenderer.glContextId = 0;
openfl__$internal_renderer_opengl_GLRenderer.glContexts = [];
openfl__$internal_renderer_opengl_shaders2_Shader.UID = 0;
openfl__$internal_renderer_opengl_utils_BlendModeManager.glBlendModes = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aTexCoord0"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5126,false,"aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.graphicsDataPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition = new openfl_geom_Point();
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle();
openfl__$internal_renderer_opengl_utils_SpriteBatch.VERTS_PER_SPRITE = 4;
openfl_display_BitmapDataChannel.ALPHA = 8;
openfl_display_BitmapDataChannel.BLUE = 4;
openfl_display_BitmapDataChannel.GREEN = 2;
openfl_display_BitmapDataChannel.RED = 1;
openfl_display_Graphics.TILE_SCALE = 1;
openfl_display_Graphics.TILE_ROTATION = 2;
openfl_display_Graphics.TILE_RGB = 4;
openfl_display_Graphics.TILE_ALPHA = 8;
openfl_display_Graphics.TILE_TRANS_2x2 = 16;
openfl_display_Graphics.TILE_RECT = 32;
openfl_display_Graphics.TILE_ORIGIN = 64;
openfl_display_Graphics.TILE_BLEND_NORMAL = 0;
openfl_display_Graphics.TILE_BLEND_ADD = 65536;
openfl_display_GraphicsPathCommand.LINE_TO = 2;
openfl_display_GraphicsPathCommand.MOVE_TO = 1;
openfl_display_GraphicsPathCommand.CURVE_TO = 3;
openfl_display_GraphicsPathCommand.WIDE_LINE_TO = 5;
openfl_display_GraphicsPathCommand.WIDE_MOVE_TO = 4;
openfl_display_GraphicsPathCommand.NO_OP = 0;
openfl_display_GraphicsPathCommand.CUBIC_CURVE_TO = 6;
openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
openfl_display3D_Context3D.anisotropySupportTested = false;
openfl_display3D_Context3D.supportsAnisotropy = false;
openfl_display3D_Context3D.maxSupportedAnisotropy = 256;
openfl_display3D_Context3DClearMask.ALL = 17664;
openfl_display3D_Context3DClearMask.COLOR = 16384;
openfl_display3D_Context3DClearMask.DEPTH = 256;
openfl_display3D_Context3DClearMask.STENCIL = 1024;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 1028;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1029;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 1032;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 0;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.UNLOAD = "unload";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_media_Sound.__registeredSounds = new haxe_ds_StringMap();
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_ui_GameInput.isAvailable = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
zpp_$nape_ZPP_$Const.FMAX = 1e100;
zpp_$nape_ZPP_$ID._Constraint = 0;
zpp_$nape_ZPP_$ID._Interactor = 0;
zpp_$nape_ZPP_$ID._CbType = 0;
zpp_$nape_ZPP_$ID._CbSet = 0;
zpp_$nape_ZPP_$ID._Listener = 0;
zpp_$nape_ZPP_$ID._ZPP_SimpleVert = 0;
zpp_$nape_ZPP_$ID._ZPP_SimpleSeg = 0;
zpp_$nape_ZPP_$ID._Space = 0;
zpp_$nape_ZPP_$ID._InteractionGroup = 0;
zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = null;
zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = null;
zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = null;
zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT = new nape_callbacks_CbType();
zpp_$nape_util_ZPP_$Flags.internal = false;
zpp_$nape_util_ZPP_$Flags.id_ImmState_ACCEPT = 1;
zpp_$nape_util_ZPP_$Flags.id_ImmState_IGNORE = 2;
zpp_$nape_util_ZPP_$Flags.id_ImmState_ALWAYS = 4;
zpp_$nape_util_ZPP_$Flags.id_GravMassMode_DEFAULT = 0;
zpp_$nape_util_ZPP_$Flags.id_GravMassMode_FIXED = 1;
zpp_$nape_util_ZPP_$Flags.id_GravMassMode_SCALED = 2;
zpp_$nape_util_ZPP_$Flags.id_InertiaMode_DEFAULT = 0;
zpp_$nape_util_ZPP_$Flags.id_InertiaMode_FIXED = 1;
zpp_$nape_util_ZPP_$Flags.id_MassMode_DEFAULT = 0;
zpp_$nape_util_ZPP_$Flags.id_MassMode_FIXED = 1;
zpp_$nape_util_ZPP_$Flags.id_BodyType_STATIC = 1;
zpp_$nape_util_ZPP_$Flags.id_BodyType_DYNAMIC = 2;
zpp_$nape_util_ZPP_$Flags.id_BodyType_KINEMATIC = 3;
zpp_$nape_util_ZPP_$Flags.id_ListenerType_BODY = 0;
zpp_$nape_util_ZPP_$Flags.id_ListenerType_CONSTRAINT = 1;
zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT = 1;
zpp_$nape_util_ZPP_$Flags.id_ListenerType_INTERACTION = 2;
zpp_$nape_util_ZPP_$Flags.id_PreFlag_IGNORE = 2;
zpp_$nape_util_ZPP_$Flags.id_ListenerType_PRE = 3;
zpp_$nape_util_ZPP_$Flags.id_PreFlag_ACCEPT_ONCE = 3;
zpp_$nape_util_ZPP_$Flags.id_PreFlag_IGNORE_ONCE = 4;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_BEGIN = 0;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_ONGOING = 6;
zpp_$nape_util_ZPP_$Flags.id_InteractionType_COLLISION = 1;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_END = 1;
zpp_$nape_util_ZPP_$Flags.id_InteractionType_SENSOR = 2;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_WAKE = 2;
zpp_$nape_util_ZPP_$Flags.id_InteractionType_FLUID = 4;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_SLEEP = 3;
zpp_$nape_util_ZPP_$Flags.id_InteractionType_ANY = 7;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_BREAK = 4;
zpp_$nape_util_ZPP_$Flags.id_CbEvent_PRE = 5;
zpp_$nape_util_ZPP_$Flags.id_Winding_UNDEFINED = 0;
zpp_$nape_util_ZPP_$Flags.id_Winding_CLOCKWISE = 1;
zpp_$nape_util_ZPP_$Flags.id_Winding_ANTICLOCKWISE = 2;
zpp_$nape_util_ZPP_$Flags.id_ValidationResult_VALID = 0;
zpp_$nape_util_ZPP_$Flags.id_ValidationResult_DEGENERATE = 1;
zpp_$nape_util_ZPP_$Flags.id_ValidationResult_CONCAVE = 2;
zpp_$nape_util_ZPP_$Flags.id_ValidationResult_SELF_INTERSECTING = 3;
zpp_$nape_util_ZPP_$Flags.id_ShapeType_CIRCLE = 0;
zpp_$nape_util_ZPP_$Flags.id_ShapeType_POLYGON = 1;
zpp_$nape_util_ZPP_$Flags.id_Broadphase_DYNAMIC_AABB_TREE = 0;
zpp_$nape_util_ZPP_$Flags.id_Broadphase_SWEEP_AND_PRUNE = 1;
zpp_$nape_util_ZPP_$Flags.id_ArbiterType_COLLISION = 1;
zpp_$nape_util_ZPP_$Flags.id_ArbiterType_SENSOR = 2;
zpp_$nape_util_ZPP_$Flags.id_ArbiterType_FLUID = 4;
zpp_$nape_callbacks_ZPP_$Listener.types = [(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_BODY == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_BODY = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ListenerType_BODY;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_PRE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_PRE = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ListenerType_PRE;
	return $r;
}(this))];
zpp_$nape_callbacks_ZPP_$Listener.events = [(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_END;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_PRE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_PRE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING;
	return $r;
}(this))];
zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.UCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_callbacks_ZPP_$InteractionListener.VCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_callbacks_ZPP_$InteractionListener.WCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_constraint_ZPP_$AngleDraw.maxarc = Math.PI / 4;
zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
zpp_$nape_dynamics_ZPP_$Arbiter.COL = 1;
zpp_$nape_dynamics_ZPP_$Arbiter.FLUID = 4;
zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR = 2;
zpp_$nape_dynamics_ZPP_$Arbiter.types = [null,(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR;
	return $r;
}(this)),null,(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID;
	return $r;
}(this))];
zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = null;
zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = null;
zpp_$nape_dynamics_ZPP_$ColArbiter.FACE1 = 0;
zpp_$nape_dynamics_ZPP_$ColArbiter.FACE2 = 1;
zpp_$nape_dynamics_ZPP_$ColArbiter.CIRCLE = 2;
zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = null;
zpp_$nape_dynamics_ZPP_$Contact.internal = false;
zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = null;
zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = null;
zpp_$nape_dynamics_ZPP_$InteractionGroup.SHAPE = 1;
zpp_$nape_dynamics_ZPP_$InteractionGroup.BODY = 2;
zpp_$nape_geom_ZPP_$AABB.zpp_pool = null;
zpp_$nape_geom_ZPP_$Collide.flowpoly = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
zpp_$nape_geom_ZPP_$Collide.flowsegs = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
zpp_$nape_geom_ZPP_$ConvexRayResult.convexPool = null;
zpp_$nape_geom_ZPP_$ConvexRayResult.rayPool = null;
zpp_$nape_geom_ZPP_$ConvexRayResult.internal = false;
zpp_$nape_geom_ZPP_$CutVert.zpp_pool = null;
zpp_$nape_geom_ZPP_$CutInt.zpp_pool = null;
zpp_$nape_geom_ZPP_$Cutter.ints = null;
zpp_$nape_geom_ZPP_$Cutter.paths = null;
zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = null;
zpp_$nape_geom_ZPP_$GeomVertexIterator.zpp_pool = null;
zpp_$nape_geom_ZPP_$MarchSpan.zpp_pool = null;
zpp_$nape_geom_ZPP_$MarchPair.zpp_pool = null;
zpp_$nape_geom_ZPP_$MarchingSquares.me = new zpp_$nape_geom_ZPP_$MarchingSquares();
zpp_$nape_geom_ZPP_$MarchingSquares.look_march = [-1,224,56,216,14,-1,54,214,131,99,-1,91,141,109,181,85];
zpp_$nape_geom_ZPP_$Mat23.zpp_pool = null;
zpp_$nape_geom_ZPP_$Monotone.queue = null;
zpp_$nape_geom_ZPP_$Monotone.edges = null;
zpp_$nape_geom_ZPP_$PartitionVertex.nextId = 0;
zpp_$nape_geom_ZPP_$PartitionVertex.zpp_pool = null;
zpp_$nape_geom_ZPP_$PartitionedPoly.zpp_pool = null;
zpp_$nape_geom_ZPP_$SimpleVert.zpp_pool = null;
zpp_$nape_geom_ZPP_$SimpleSeg.zpp_pool = null;
zpp_$nape_geom_ZPP_$SimpleEvent.zpp_pool = null;
zpp_$nape_geom_ZPP_$Simple.sweep = null;
zpp_$nape_geom_ZPP_$Simple.inthash = null;
zpp_$nape_geom_ZPP_$Simple.vertices = null;
zpp_$nape_geom_ZPP_$Simple.queue = null;
zpp_$nape_geom_ZPP_$Simple.ints = null;
zpp_$nape_geom_ZPP_$Simple.list_vertices = null;
zpp_$nape_geom_ZPP_$Simple.list_queue = null;
zpp_$nape_geom_ZPP_$SimplifyV.zpp_pool = null;
zpp_$nape_geom_ZPP_$SimplifyP.zpp_pool = null;
zpp_$nape_geom_ZPP_$Simplify.stack = null;
zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = null;
zpp_$nape_geom_ZPP_$PartitionPair.zpp_pool = null;
zpp_$nape_geom_ZPP_$Triangular.queue = null;
zpp_$nape_geom_ZPP_$Triangular.stack = null;
zpp_$nape_geom_ZPP_$Triangular.edgeSet = null;
zpp_$nape_geom_ZPP_$Vec2.zpp_pool = null;
zpp_$nape_phys_ZPP_$Body.types = [null,(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC;
	return $r;
}(this))];
zpp_$nape_phys_ZPP_$Body.bodystack = null;
zpp_$nape_phys_ZPP_$Body.bodyset = null;
zpp_$nape_phys_ZPP_$Body.cur_graph_depth = 0;
zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool = null;
zpp_$nape_phys_ZPP_$Material.zpp_pool = null;
zpp_$nape_phys_ZPP_$Material.WAKE = 1;
zpp_$nape_phys_ZPP_$Material.PROPS = 2;
zpp_$nape_phys_ZPP_$Material.ANGDRAG = 4;
zpp_$nape_phys_ZPP_$Material.ARBITERS = 8;
zpp_$nape_shape_ZPP_$Shape.types = [(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE = new nape_shape_ShapeType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON = new nape_shape_ShapeType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON;
	return $r;
}(this))];
zpp_$nape_shape_ZPP_$Edge.zpp_pool = null;
zpp_$nape_shape_ZPP_$Edge.internal = false;
zpp_$nape_space_ZPP_$AABBNode.zpp_pool = null;
zpp_$nape_space_ZPP_$AABBPair.zpp_pool = null;
zpp_$nape_space_ZPP_$AABBTree.tmpaabb = new zpp_$nape_geom_ZPP_$AABB();
zpp_$nape_space_ZPP_$DynAABBPhase.FATTEN = 3.0;
zpp_$nape_space_ZPP_$DynAABBPhase.VEL_STEPS = 2.0;
zpp_$nape_space_ZPP_$Island.zpp_pool = null;
zpp_$nape_space_ZPP_$Component.zpp_pool = null;
zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = null;
zpp_$nape_space_ZPP_$SweepData.zpp_pool = null;
zpp_$nape_util_ZPP_$Debug.internal = false;
zpp_$nape_util_Hashable2_$Boolfalse.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$CutInt.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$CutVert.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$PartitionVertex.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$PartitionedPoly.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$GeomVert.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$SimplifyP.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$SimpleVert.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$SimpleEvent.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ConvexResult.zpp_pool = null;
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.zpp_pool = null;
zpp_$nape_util_ZNPNode_$RayResult.zpp_pool = null;
zpp_$nape_util_ZPP_$ConstraintList.internal = false;
zpp_$nape_util_ZPP_$BodyList.internal = false;
zpp_$nape_util_ZPP_$InteractorList.internal = false;
zpp_$nape_util_ZPP_$CompoundList.internal = false;
zpp_$nape_util_ZPP_$ListenerList.internal = false;
zpp_$nape_util_ZPP_$CbTypeList.internal = false;
zpp_$nape_util_ZPP_$Vec2List.internal = false;
zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
zpp_$nape_util_ZPP_$RayResultList.internal = false;
zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
zpp_$nape_util_ZPP_$EdgeList.internal = false;
zpp_$nape_util_ZPP_$ShapeList.internal = false;
zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
zpp_$nape_util_ZPP_$ArbiterList.internal = false;
zpp_$nape_util_ZPP_$ContactList.internal = false;
zpp_$nape_util_ZPP_$PubPool.poolGeomPoly = null;
zpp_$nape_util_ZPP_$PubPool.poolVec2 = null;
zpp_$nape_util_ZPP_$PubPool.poolVec3 = null;
zpp_$nape_util_ZPP_$Set_$ZPP_$Body.zpp_pool = null;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = null;
zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionVertex.zpp_pool = null;
zpp_$nape_util_ZPP_$Set_$ZPP_$PartitionPair.zpp_pool = null;
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleVert.zpp_pool = null;
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleSeg.zpp_pool = null;
zpp_$nape_util_ZPP_$Set_$ZPP_$SimpleEvent.zpp_pool = null;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = null;
ApplicationMain.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports);
